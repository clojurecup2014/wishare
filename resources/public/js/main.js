if(typeof Math.imul == "undefined" || (Math.imul(0xffffffff,5) == 0)) {
    Math.imul = function (a, b) {
        var ah  = (a >>> 16) & 0xffff;
        var al = a & 0xffff;
        var bh  = (b >>> 16) & 0xffff;
        var bl = b & 0xffff;
        // the shift by 0 fixes the sign on the high part
        // the final |0 converts the unsigned value into a signed value
        return ((al * bl) + (((ah * bl + al * bh) << 16) >>> 0)|0);
    }
}

var CLOSURE_NO_DEPS = true;
var COMPILED = false;
var goog = goog || {};
goog.global = this;
goog.global.CLOSURE_UNCOMPILED_DEFINES;
goog.global.CLOSURE_DEFINES;
goog.isDef = function(val) {
  return val !== void 0;
};
goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
  var parts = name.split(".");
  var cur = opt_objectToExportTo || goog.global;
  if (!(parts[0] in cur) && cur.execScript) {
    cur.execScript("var " + parts[0]);
  }
  for (var part;parts.length && (part = parts.shift());) {
    if (!parts.length && goog.isDef(opt_object)) {
      cur[part] = opt_object;
    } else {
      if (cur[part]) {
        cur = cur[part];
      } else {
        cur = cur[part] = {};
      }
    }
  }
};
goog.define = function(name, defaultValue) {
  var value = defaultValue;
  if (!COMPILED) {
    if (goog.global.CLOSURE_UNCOMPILED_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
    } else {
      if (goog.global.CLOSURE_DEFINES && Object.prototype.hasOwnProperty.call(goog.global.CLOSURE_DEFINES, name)) {
        value = goog.global.CLOSURE_DEFINES[name];
      }
    }
  }
  goog.exportPath_(name, value);
};
goog.DEBUG = true;
goog.define("goog.LOCALE", "en");
goog.define("goog.TRUSTED_SITE", true);
goog.define("goog.STRICT_MODE_COMPATIBLE", false);
goog.provide = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      throw Error('Namespace "' + name + '" already declared.');
    }
    delete goog.implicitNamespaces_[name];
    var namespace = name;
    while (namespace = namespace.substring(0, namespace.lastIndexOf("."))) {
      if (goog.getObjectByName(namespace)) {
        break;
      }
      goog.implicitNamespaces_[namespace] = true;
    }
  }
  goog.exportPath_(name);
};
goog.setTestOnly = function(opt_message) {
  if (COMPILED && !goog.DEBUG) {
    opt_message = opt_message || "";
    throw Error("Importing test-only code into non-debug environment" + (opt_message ? ": " + opt_message : "."));
  }
};
goog.forwardDeclare = function(name) {
};
if (!COMPILED) {
  goog.isProvided_ = function(name) {
    return!goog.implicitNamespaces_[name] && goog.isDefAndNotNull(goog.getObjectByName(name));
  };
  goog.implicitNamespaces_ = {};
}
goog.getObjectByName = function(name, opt_obj) {
  var parts = name.split(".");
  var cur = opt_obj || goog.global;
  for (var part;part = parts.shift();) {
    if (goog.isDefAndNotNull(cur[part])) {
      cur = cur[part];
    } else {
      return null;
    }
  }
  return cur;
};
goog.globalize = function(obj, opt_global) {
  var global = opt_global || goog.global;
  for (var x in obj) {
    global[x] = obj[x];
  }
};
goog.addDependency = function(relPath, provides, requires) {
  if (goog.DEPENDENCIES_ENABLED) {
    var provide, require;
    var path = relPath.replace(/\\/g, "/");
    var deps = goog.dependencies_;
    for (var i = 0;provide = provides[i];i++) {
      deps.nameToPath[provide] = path;
      if (!(path in deps.pathToNames)) {
        deps.pathToNames[path] = {};
      }
      deps.pathToNames[path][provide] = true;
    }
    for (var j = 0;require = requires[j];j++) {
      if (!(path in deps.requires)) {
        deps.requires[path] = {};
      }
      deps.requires[path][require] = true;
    }
  }
};
goog.define("goog.ENABLE_DEBUG_LOADER", true);
goog.require = function(name) {
  if (!COMPILED) {
    if (goog.isProvided_(name)) {
      return;
    }
    if (goog.ENABLE_DEBUG_LOADER) {
      var path = goog.getPathFromDeps_(name);
      if (path) {
        goog.included_[path] = true;
        goog.writeScripts_();
        return;
      }
    }
    var errorMessage = "goog.require could not find: " + name;
    if (goog.global.console) {
      goog.global.console["error"](errorMessage);
    }
    throw Error(errorMessage);
  }
};
goog.basePath = "";
goog.global.CLOSURE_BASE_PATH;
goog.global.CLOSURE_NO_DEPS;
goog.global.CLOSURE_IMPORT_SCRIPT;
goog.nullFunction = function() {
};
goog.identityFunction = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.abstractMethod = function() {
  throw Error("unimplemented abstract method");
};
goog.addSingletonGetter = function(ctor) {
  ctor.getInstance = function() {
    if (ctor.instance_) {
      return ctor.instance_;
    }
    if (goog.DEBUG) {
      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
    }
    return ctor.instance_ = new ctor;
  };
};
goog.instantiatedSingletons_ = [];
goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;
if (goog.DEPENDENCIES_ENABLED) {
  goog.included_ = {};
  goog.dependencies_ = {pathToNames:{}, nameToPath:{}, requires:{}, visited:{}, written:{}};
  goog.inHtmlDocument_ = function() {
    var doc = goog.global.document;
    return typeof doc != "undefined" && "write" in doc;
  };
  goog.findBasePath_ = function() {
    if (goog.global.CLOSURE_BASE_PATH) {
      goog.basePath = goog.global.CLOSURE_BASE_PATH;
      return;
    } else {
      if (!goog.inHtmlDocument_()) {
        return;
      }
    }
    var doc = goog.global.document;
    var scripts = doc.getElementsByTagName("script");
    for (var i = scripts.length - 1;i >= 0;--i) {
      var src = scripts[i].src;
      var qmark = src.lastIndexOf("?");
      var l = qmark == -1 ? src.length : qmark;
      if (src.substr(l - 7, 7) == "base.js") {
        goog.basePath = src.substr(0, l - 7);
        return;
      }
    }
  };
  goog.importScript_ = function(src) {
    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
    if (!goog.dependencies_.written[src] && importScript(src)) {
      goog.dependencies_.written[src] = true;
    }
  };
  goog.writeScriptTag_ = function(src) {
    if (goog.inHtmlDocument_()) {
      var doc = goog.global.document;
      if (doc.readyState == "complete") {
        var isDeps = /\bdeps.js$/.test(src);
        if (isDeps) {
          return false;
        } else {
          throw Error('Cannot write "' + src + '" after document load');
        }
      }
      doc.write('\x3cscript type\x3d"text/javascript" src\x3d"' + src + '"\x3e\x3c/' + "script\x3e");
      return true;
    } else {
      return false;
    }
  };
  goog.writeScripts_ = function() {
    var scripts = [];
    var seenScript = {};
    var deps = goog.dependencies_;
    function visitNode(path) {
      if (path in deps.written) {
        return;
      }
      if (path in deps.visited) {
        if (!(path in seenScript)) {
          seenScript[path] = true;
          scripts.push(path);
        }
        return;
      }
      deps.visited[path] = true;
      if (path in deps.requires) {
        for (var requireName in deps.requires[path]) {
          if (!goog.isProvided_(requireName)) {
            if (requireName in deps.nameToPath) {
              visitNode(deps.nameToPath[requireName]);
            } else {
              throw Error("Undefined nameToPath for " + requireName);
            }
          }
        }
      }
      if (!(path in seenScript)) {
        seenScript[path] = true;
        scripts.push(path);
      }
    }
    for (var path in goog.included_) {
      if (!deps.written[path]) {
        visitNode(path);
      }
    }
    for (var i = 0;i < scripts.length;i++) {
      if (scripts[i]) {
        goog.importScript_(goog.basePath + scripts[i]);
      } else {
        throw Error("Undefined script input");
      }
    }
  };
  goog.getPathFromDeps_ = function(rule) {
    if (rule in goog.dependencies_.nameToPath) {
      return goog.dependencies_.nameToPath[rule];
    } else {
      return null;
    }
  };
  goog.findBasePath_();
  if (!goog.global.CLOSURE_NO_DEPS) {
    goog.importScript_(goog.basePath + "deps.js");
  }
}
goog.typeOf = function(value) {
  var s = typeof value;
  if (s == "object") {
    if (value) {
      if (value instanceof Array) {
        return "array";
      } else {
        if (value instanceof Object) {
          return s;
        }
      }
      var className = Object.prototype.toString.call((value));
      if (className == "[object Window]") {
        return "object";
      }
      if (className == "[object Array]" || typeof value.length == "number" && typeof value.splice != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("splice")) {
        return "array";
      }
      if (className == "[object Function]" || typeof value.call != "undefined" && typeof value.propertyIsEnumerable != "undefined" && !value.propertyIsEnumerable("call")) {
        return "function";
      }
    } else {
      return "null";
    }
  } else {
    if (s == "function" && typeof value.call == "undefined") {
      return "object";
    }
  }
  return s;
};
goog.isNull = function(val) {
  return val === null;
};
goog.isDefAndNotNull = function(val) {
  return val != null;
};
goog.isArray = function(val) {
  return goog.typeOf(val) == "array";
};
goog.isArrayLike = function(val) {
  var type = goog.typeOf(val);
  return type == "array" || type == "object" && typeof val.length == "number";
};
goog.isDateLike = function(val) {
  return goog.isObject(val) && typeof val.getFullYear == "function";
};
goog.isString = function(val) {
  return typeof val == "string";
};
goog.isBoolean = function(val) {
  return typeof val == "boolean";
};
goog.isNumber = function(val) {
  return typeof val == "number";
};
goog.isFunction = function(val) {
  return goog.typeOf(val) == "function";
};
goog.isObject = function(val) {
  var type = typeof val;
  return type == "object" && val != null || type == "function";
};
goog.getUid = function(obj) {
  return obj[goog.UID_PROPERTY_] || (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
};
goog.hasUid = function(obj) {
  return!!obj[goog.UID_PROPERTY_];
};
goog.removeUid = function(obj) {
  if ("removeAttribute" in obj) {
    obj.removeAttribute(goog.UID_PROPERTY_);
  }
  try {
    delete obj[goog.UID_PROPERTY_];
  } catch (ex) {
  }
};
goog.UID_PROPERTY_ = "closure_uid_" + (Math.random() * 1E9 >>> 0);
goog.uidCounter_ = 0;
goog.getHashCode = goog.getUid;
goog.removeHashCode = goog.removeUid;
goog.cloneObject = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.cloneObject(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.bindNative_ = function(fn, selfObj, var_args) {
  return(fn.call.apply(fn.bind, arguments));
};
goog.bindJs_ = function(fn, selfObj, var_args) {
  if (!fn) {
    throw new Error;
  }
  if (arguments.length > 2) {
    var boundArgs = Array.prototype.slice.call(arguments, 2);
    return function() {
      var newArgs = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(newArgs, boundArgs);
      return fn.apply(selfObj, newArgs);
    };
  } else {
    return function() {
      return fn.apply(selfObj, arguments);
    };
  }
};
goog.bind = function(fn, selfObj, var_args) {
  if (Function.prototype.bind && Function.prototype.bind.toString().indexOf("native code") != -1) {
    goog.bind = goog.bindNative_;
  } else {
    goog.bind = goog.bindJs_;
  }
  return goog.bind.apply(null, arguments);
};
goog.partial = function(fn, var_args) {
  var args = Array.prototype.slice.call(arguments, 1);
  return function() {
    var newArgs = args.slice();
    newArgs.push.apply(newArgs, arguments);
    return fn.apply(this, newArgs);
  };
};
goog.mixin = function(target, source) {
  for (var x in source) {
    target[x] = source[x];
  }
};
goog.now = goog.TRUSTED_SITE && Date.now || function() {
  return+new Date;
};
goog.globalEval = function(script) {
  if (goog.global.execScript) {
    goog.global.execScript(script, "JavaScript");
  } else {
    if (goog.global.eval) {
      if (goog.evalWorksForGlobals_ == null) {
        goog.global.eval("var _et_ \x3d 1;");
        if (typeof goog.global["_et_"] != "undefined") {
          delete goog.global["_et_"];
          goog.evalWorksForGlobals_ = true;
        } else {
          goog.evalWorksForGlobals_ = false;
        }
      }
      if (goog.evalWorksForGlobals_) {
        goog.global.eval(script);
      } else {
        var doc = goog.global.document;
        var scriptElt = doc.createElement("script");
        scriptElt.type = "text/javascript";
        scriptElt.defer = false;
        scriptElt.appendChild(doc.createTextNode(script));
        doc.body.appendChild(scriptElt);
        doc.body.removeChild(scriptElt);
      }
    } else {
      throw Error("goog.globalEval not available");
    }
  }
};
goog.evalWorksForGlobals_ = null;
goog.cssNameMapping_;
goog.cssNameMappingStyle_;
goog.getCssName = function(className, opt_modifier) {
  var getMapping = function(cssName) {
    return goog.cssNameMapping_[cssName] || cssName;
  };
  var renameByParts = function(cssName) {
    var parts = cssName.split("-");
    var mapped = [];
    for (var i = 0;i < parts.length;i++) {
      mapped.push(getMapping(parts[i]));
    }
    return mapped.join("-");
  };
  var rename;
  if (goog.cssNameMapping_) {
    rename = goog.cssNameMappingStyle_ == "BY_WHOLE" ? getMapping : renameByParts;
  } else {
    rename = function(a) {
      return a;
    };
  }
  if (opt_modifier) {
    return className + "-" + rename(opt_modifier);
  } else {
    return rename(className);
  }
};
goog.setCssNameMapping = function(mapping, opt_style) {
  goog.cssNameMapping_ = mapping;
  goog.cssNameMappingStyle_ = opt_style;
};
goog.global.CLOSURE_CSS_NAME_MAPPING;
if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
}
goog.getMsg = function(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
      return key in opt_values ? opt_values[key] : match;
    });
  }
  return str;
};
goog.getMsgWithFallback = function(a, b) {
  return a;
};
goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
  goog.exportPath_(publicPath, object, opt_objectToExportTo);
};
goog.exportProperty = function(object, publicName, symbol) {
  object[publicName] = symbol;
};
goog.inherits = function(childCtor, parentCtor) {
  function tempCtor() {
  }
  tempCtor.prototype = parentCtor.prototype;
  childCtor.superClass_ = parentCtor.prototype;
  childCtor.prototype = new tempCtor;
  childCtor.prototype.constructor = childCtor;
  childCtor.base = function(me, methodName, var_args) {
    var args = Array.prototype.slice.call(arguments, 2);
    return parentCtor.prototype[methodName].apply(me, args);
  };
};
goog.base = function(me, opt_methodName, var_args) {
  var caller = arguments.callee.caller;
  if (goog.STRICT_MODE_COMPATIBLE || goog.DEBUG && !caller) {
    throw Error("arguments.caller not defined.  goog.base() cannot be used " + "with strict mode code. See " + "http://www.ecma-international.org/ecma-262/5.1/#sec-C");
  }
  if (caller.superClass_) {
    return caller.superClass_.constructor.apply(me, Array.prototype.slice.call(arguments, 1));
  }
  var args = Array.prototype.slice.call(arguments, 2);
  var foundCaller = false;
  for (var ctor = me.constructor;ctor;ctor = ctor.superClass_ && ctor.superClass_.constructor) {
    if (ctor.prototype[opt_methodName] === caller) {
      foundCaller = true;
    } else {
      if (foundCaller) {
        return ctor.prototype[opt_methodName].apply(me, args);
      }
    }
  }
  if (me[opt_methodName] === caller) {
    return me.constructor.prototype[opt_methodName].apply(me, args);
  } else {
    throw Error("goog.base called from a method of one name " + "to a method of a different name");
  }
};
goog.scope = function(fn) {
  fn.call(goog.global);
};
if (!COMPILED) {
  goog.global["COMPILED"] = COMPILED;
}
goog.defineClass = function(superClass, def) {
  var constructor = def.constructor;
  var statics = def.statics;
  if (!constructor || constructor == Object.prototype.constructor) {
    constructor = function() {
      throw Error("cannot instantiate an interface (no constructor defined).");
    };
  }
  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
  if (superClass) {
    goog.inherits(cls, superClass);
  }
  delete def.constructor;
  delete def.statics;
  goog.defineClass.applyProperties_(cls.prototype, def);
  if (statics != null) {
    if (statics instanceof Function) {
      statics(cls);
    } else {
      goog.defineClass.applyProperties_(cls, statics);
    }
  }
  return cls;
};
goog.defineClass.ClassDescriptor;
goog.define("goog.defineClass.SEAL_CLASS_INSTANCES", goog.DEBUG);
goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
  if (goog.defineClass.SEAL_CLASS_INSTANCES && Object.seal instanceof Function) {
    if (superClass && superClass.prototype && superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {
      return ctr;
    }
    var wrappedCtr = function() {
      var instance = ctr.apply(this, arguments) || this;
      if (this.constructor === wrappedCtr) {
        Object.seal(instance);
      }
      return instance;
    };
    return wrappedCtr;
  }
  return ctr;
};
goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.defineClass.applyProperties_ = function(target, source) {
  var key;
  for (key in source) {
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
  for (var i = 0;i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length;i++) {
    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
    if (Object.prototype.hasOwnProperty.call(source, key)) {
      target[key] = source[key];
    }
  }
};
goog.tagUnsealableClass = function(ctr) {
  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
  }
};
goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = "goog_defineClass_legacy_unsealable";
goog.provide("goog.debug.Error");
goog.debug.Error = function(opt_msg) {
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, goog.debug.Error);
  } else {
    var stack = (new Error).stack;
    if (stack) {
      this.stack = stack;
    }
  }
  if (opt_msg) {
    this.message = String(opt_msg);
  }
};
goog.inherits(goog.debug.Error, Error);
goog.debug.Error.prototype.name = "CustomError";
goog.provide("goog.dom.NodeType");
goog.dom.NodeType = {ELEMENT:1, ATTRIBUTE:2, TEXT:3, CDATA_SECTION:4, ENTITY_REFERENCE:5, ENTITY:6, PROCESSING_INSTRUCTION:7, COMMENT:8, DOCUMENT:9, DOCUMENT_TYPE:10, DOCUMENT_FRAGMENT:11, NOTATION:12};
goog.provide("goog.string");
goog.provide("goog.string.Unicode");
goog.define("goog.string.DETECT_DOUBLE_ESCAPING", false);
goog.string.Unicode = {NBSP:"\u00a0"};
goog.string.startsWith = function(str, prefix) {
  return str.lastIndexOf(prefix, 0) == 0;
};
goog.string.endsWith = function(str, suffix) {
  var l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) == l;
};
goog.string.caseInsensitiveStartsWith = function(str, prefix) {
  return goog.string.caseInsensitiveCompare(prefix, str.substr(0, prefix.length)) == 0;
};
goog.string.caseInsensitiveEndsWith = function(str, suffix) {
  return goog.string.caseInsensitiveCompare(suffix, str.substr(str.length - suffix.length, suffix.length)) == 0;
};
goog.string.caseInsensitiveEquals = function(str1, str2) {
  return str1.toLowerCase() == str2.toLowerCase();
};
goog.string.subs = function(str, var_args) {
  var splitParts = str.split("%s");
  var returnString = "";
  var subsArguments = Array.prototype.slice.call(arguments, 1);
  while (subsArguments.length && splitParts.length > 1) {
    returnString += splitParts.shift() + subsArguments.shift();
  }
  return returnString + splitParts.join("%s");
};
goog.string.collapseWhitespace = function(str) {
  return str.replace(/[\s\xa0]+/g, " ").replace(/^\s+|\s+$/g, "");
};
goog.string.isEmpty = function(str) {
  return/^[\s\xa0]*$/.test(str);
};
goog.string.isEmptySafe = function(str) {
  return goog.string.isEmpty(goog.string.makeSafe(str));
};
goog.string.isBreakingWhitespace = function(str) {
  return!/[^\t\n\r ]/.test(str);
};
goog.string.isAlpha = function(str) {
  return!/[^a-zA-Z]/.test(str);
};
goog.string.isNumeric = function(str) {
  return!/[^0-9]/.test(str);
};
goog.string.isAlphaNumeric = function(str) {
  return!/[^a-zA-Z0-9]/.test(str);
};
goog.string.isSpace = function(ch) {
  return ch == " ";
};
goog.string.isUnicodeChar = function(ch) {
  return ch.length == 1 && ch >= " " && ch <= "~" || ch >= "\u0080" && ch <= "\ufffd";
};
goog.string.stripNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)+/g, " ");
};
goog.string.canonicalizeNewlines = function(str) {
  return str.replace(/(\r\n|\r|\n)/g, "\n");
};
goog.string.normalizeWhitespace = function(str) {
  return str.replace(/\xa0|\s/g, " ");
};
goog.string.normalizeSpaces = function(str) {
  return str.replace(/\xa0|[ \t]+/g, " ");
};
goog.string.collapseBreakingSpaces = function(str) {
  return str.replace(/[\t\r\n ]+/g, " ").replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, "");
};
goog.string.trim = function(str) {
  return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, "");
};
goog.string.trimLeft = function(str) {
  return str.replace(/^[\s\xa0]+/, "");
};
goog.string.trimRight = function(str) {
  return str.replace(/[\s\xa0]+$/, "");
};
goog.string.caseInsensitiveCompare = function(str1, str2) {
  var test1 = String(str1).toLowerCase();
  var test2 = String(str2).toLowerCase();
  if (test1 < test2) {
    return-1;
  } else {
    if (test1 == test2) {
      return 0;
    } else {
      return 1;
    }
  }
};
goog.string.numerateCompareRegExp_ = /(\.\d+)|(\d+)|(\D+)/g;
goog.string.numerateCompare = function(str1, str2) {
  if (str1 == str2) {
    return 0;
  }
  if (!str1) {
    return-1;
  }
  if (!str2) {
    return 1;
  }
  var tokens1 = str1.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var tokens2 = str2.toLowerCase().match(goog.string.numerateCompareRegExp_);
  var count = Math.min(tokens1.length, tokens2.length);
  for (var i = 0;i < count;i++) {
    var a = tokens1[i];
    var b = tokens2[i];
    if (a != b) {
      var num1 = parseInt(a, 10);
      if (!isNaN(num1)) {
        var num2 = parseInt(b, 10);
        if (!isNaN(num2) && num1 - num2) {
          return num1 - num2;
        }
      }
      return a < b ? -1 : 1;
    }
  }
  if (tokens1.length != tokens2.length) {
    return tokens1.length - tokens2.length;
  }
  return str1 < str2 ? -1 : 1;
};
goog.string.urlEncode = function(str) {
  return encodeURIComponent(String(str));
};
goog.string.urlDecode = function(str) {
  return decodeURIComponent(str.replace(/\+/g, " "));
};
goog.string.newLineToBr = function(str, opt_xml) {
  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? "\x3cbr /\x3e" : "\x3cbr\x3e");
};
goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {
  if (opt_isLikelyToContainHtmlChars) {
    str = str.replace(goog.string.AMP_RE_, "\x26amp;").replace(goog.string.LT_RE_, "\x26lt;").replace(goog.string.GT_RE_, "\x26gt;").replace(goog.string.QUOT_RE_, "\x26quot;").replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;").replace(goog.string.NULL_RE_, "\x26#0;");
    if (goog.string.DETECT_DOUBLE_ESCAPING) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  } else {
    if (!goog.string.ALL_RE_.test(str)) {
      return str;
    }
    if (str.indexOf("\x26") != -1) {
      str = str.replace(goog.string.AMP_RE_, "\x26amp;");
    }
    if (str.indexOf("\x3c") != -1) {
      str = str.replace(goog.string.LT_RE_, "\x26lt;");
    }
    if (str.indexOf("\x3e") != -1) {
      str = str.replace(goog.string.GT_RE_, "\x26gt;");
    }
    if (str.indexOf('"') != -1) {
      str = str.replace(goog.string.QUOT_RE_, "\x26quot;");
    }
    if (str.indexOf("'") != -1) {
      str = str.replace(goog.string.SINGLE_QUOTE_RE_, "\x26#39;");
    }
    if (str.indexOf("\x00") != -1) {
      str = str.replace(goog.string.NULL_RE_, "\x26#0;");
    }
    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf("e") != -1) {
      str = str.replace(goog.string.E_RE_, "\x26#101;");
    }
    return str;
  }
};
goog.string.AMP_RE_ = /&/g;
goog.string.LT_RE_ = /</g;
goog.string.GT_RE_ = />/g;
goog.string.QUOT_RE_ = /"/g;
goog.string.SINGLE_QUOTE_RE_ = /'/g;
goog.string.NULL_RE_ = /\x00/g;
goog.string.E_RE_ = /e/g;
goog.string.ALL_RE_ = goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/;
goog.string.unescapeEntities = function(str) {
  if (goog.string.contains(str, "\x26")) {
    if ("document" in goog.global) {
      return goog.string.unescapeEntitiesUsingDom_(str);
    } else {
      return goog.string.unescapePureXmlEntities_(str);
    }
  }
  return str;
};
goog.string.unescapeEntitiesWithDocument = function(str, document) {
  if (goog.string.contains(str, "\x26")) {
    return goog.string.unescapeEntitiesUsingDom_(str, document);
  }
  return str;
};
goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
  var seen = {"\x26amp;":"\x26", "\x26lt;":"\x3c", "\x26gt;":"\x3e", "\x26quot;":'"'};
  var div;
  if (opt_document) {
    div = opt_document.createElement("div");
  } else {
    div = goog.global.document.createElement("div");
  }
  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
    var value = seen[s];
    if (value) {
      return value;
    }
    if (entity.charAt(0) == "#") {
      var n = Number("0" + entity.substr(1));
      if (!isNaN(n)) {
        value = String.fromCharCode(n);
      }
    }
    if (!value) {
      div.innerHTML = s + " ";
      value = div.firstChild.nodeValue.slice(0, -1);
    }
    return seen[s] = value;
  });
};
goog.string.unescapePureXmlEntities_ = function(str) {
  return str.replace(/&([^;]+);/g, function(s, entity) {
    switch(entity) {
      case "amp":
        return "\x26";
      case "lt":
        return "\x3c";
      case "gt":
        return "\x3e";
      case "quot":
        return'"';
      default:
        if (entity.charAt(0) == "#") {
          var n = Number("0" + entity.substr(1));
          if (!isNaN(n)) {
            return String.fromCharCode(n);
          }
        }
        return s;
    }
  });
};
goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;
goog.string.whitespaceEscape = function(str, opt_xml) {
  return goog.string.newLineToBr(str.replace(/  /g, " \x26#160;"), opt_xml);
};
goog.string.preserveSpaces = function(str) {
  return str.replace(/(^|[\n ]) /g, "$1" + goog.string.Unicode.NBSP);
};
goog.string.stripQuotes = function(str, quoteChars) {
  var length = quoteChars.length;
  for (var i = 0;i < length;i++) {
    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
      return str.substring(1, str.length - 1);
    }
  }
  return str;
};
goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (str.length > chars) {
    str = str.substring(0, chars - 3) + "...";
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.truncateMiddle = function(str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
  if (opt_protectEscapedCharacters) {
    str = goog.string.unescapeEntities(str);
  }
  if (opt_trailingChars && str.length > chars) {
    if (opt_trailingChars > chars) {
      opt_trailingChars = chars;
    }
    var endPoint = str.length - opt_trailingChars;
    var startPoint = chars - opt_trailingChars;
    str = str.substring(0, startPoint) + "..." + str.substring(endPoint);
  } else {
    if (str.length > chars) {
      var half = Math.floor(chars / 2);
      var endPos = str.length - half;
      half += chars % 2;
      str = str.substring(0, half) + "..." + str.substring(endPos);
    }
  }
  if (opt_protectEscapedCharacters) {
    str = goog.string.htmlEscape(str);
  }
  return str;
};
goog.string.specialEscapeChars_ = {"\x00":"\\0", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\x0B", '"':'\\"', "\\":"\\\\"};
goog.string.jsEscapeCache_ = {"'":"\\'"};
goog.string.quote = function(s) {
  s = String(s);
  if (s.quote) {
    return s.quote();
  } else {
    var sb = ['"'];
    for (var i = 0;i < s.length;i++) {
      var ch = s.charAt(i);
      var cc = ch.charCodeAt(0);
      sb[i + 1] = goog.string.specialEscapeChars_[ch] || (cc > 31 && cc < 127 ? ch : goog.string.escapeChar(ch));
    }
    sb.push('"');
    return sb.join("");
  }
};
goog.string.escapeString = function(str) {
  var sb = [];
  for (var i = 0;i < str.length;i++) {
    sb[i] = goog.string.escapeChar(str.charAt(i));
  }
  return sb.join("");
};
goog.string.escapeChar = function(c) {
  if (c in goog.string.jsEscapeCache_) {
    return goog.string.jsEscapeCache_[c];
  }
  if (c in goog.string.specialEscapeChars_) {
    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
  }
  var rv = c;
  var cc = c.charCodeAt(0);
  if (cc > 31 && cc < 127) {
    rv = c;
  } else {
    if (cc < 256) {
      rv = "\\x";
      if (cc < 16 || cc > 256) {
        rv += "0";
      }
    } else {
      rv = "\\u";
      if (cc < 4096) {
        rv += "0";
      }
    }
    rv += cc.toString(16).toUpperCase();
  }
  return goog.string.jsEscapeCache_[c] = rv;
};
goog.string.toMap = function(s) {
  var rv = {};
  for (var i = 0;i < s.length;i++) {
    rv[s.charAt(i)] = true;
  }
  return rv;
};
goog.string.contains = function(str, subString) {
  return str.indexOf(subString) != -1;
};
goog.string.caseInsensitiveContains = function(str, subString) {
  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
};
goog.string.countOf = function(s, ss) {
  return s && ss ? s.split(ss).length - 1 : 0;
};
goog.string.removeAt = function(s, index, stringLength) {
  var resultStr = s;
  if (index >= 0 && index < s.length && stringLength > 0) {
    resultStr = s.substr(0, index) + s.substr(index + stringLength, s.length - index - stringLength);
  }
  return resultStr;
};
goog.string.remove = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "");
  return s.replace(re, "");
};
goog.string.removeAll = function(s, ss) {
  var re = new RegExp(goog.string.regExpEscape(ss), "g");
  return s.replace(re, "");
};
goog.string.regExpEscape = function(s) {
  return String(s).replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, "\\$1").replace(/\x08/g, "\\x08");
};
goog.string.repeat = function(string, length) {
  return(new Array(length + 1)).join(string);
};
goog.string.padNumber = function(num, length, opt_precision) {
  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
  var index = s.indexOf(".");
  if (index == -1) {
    index = s.length;
  }
  return goog.string.repeat("0", Math.max(0, length - index)) + s;
};
goog.string.makeSafe = function(obj) {
  return obj == null ? "" : String(obj);
};
goog.string.buildString = function(var_args) {
  return Array.prototype.join.call(arguments, "");
};
goog.string.getRandomString = function() {
  var x = 2147483648;
  return Math.floor(Math.random() * x).toString(36) + Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
};
goog.string.compareVersions = function(version1, version2) {
  var order = 0;
  var v1Subs = goog.string.trim(String(version1)).split(".");
  var v2Subs = goog.string.trim(String(version2)).split(".");
  var subCount = Math.max(v1Subs.length, v2Subs.length);
  for (var subIdx = 0;order == 0 && subIdx < subCount;subIdx++) {
    var v1Sub = v1Subs[subIdx] || "";
    var v2Sub = v2Subs[subIdx] || "";
    var v1CompParser = new RegExp("(\\d*)(\\D*)", "g");
    var v2CompParser = new RegExp("(\\d*)(\\D*)", "g");
    do {
      var v1Comp = v1CompParser.exec(v1Sub) || ["", "", ""];
      var v2Comp = v2CompParser.exec(v2Sub) || ["", "", ""];
      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
        break;
      }
      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);
      order = goog.string.compareElements_(v1CompNum, v2CompNum) || goog.string.compareElements_(v1Comp[2].length == 0, v2Comp[2].length == 0) || goog.string.compareElements_(v1Comp[2], v2Comp[2]);
    } while (order == 0);
  }
  return order;
};
goog.string.compareElements_ = function(left, right) {
  if (left < right) {
    return-1;
  } else {
    if (left > right) {
      return 1;
    }
  }
  return 0;
};
goog.string.HASHCODE_MAX_ = 4294967296;
goog.string.hashCode = function(str) {
  var result = 0;
  for (var i = 0;i < str.length;++i) {
    result = 31 * result + str.charCodeAt(i);
    result %= goog.string.HASHCODE_MAX_;
  }
  return result;
};
goog.string.uniqueStringCounter_ = Math.random() * 2147483648 | 0;
goog.string.createUniqueString = function() {
  return "goog_" + goog.string.uniqueStringCounter_++;
};
goog.string.toNumber = function(str) {
  var num = Number(str);
  if (num == 0 && goog.string.isEmpty(str)) {
    return NaN;
  }
  return num;
};
goog.string.isLowerCamelCase = function(str) {
  return/^[a-z]+([A-Z][a-z]*)*$/.test(str);
};
goog.string.isUpperCamelCase = function(str) {
  return/^([A-Z][a-z]*)+$/.test(str);
};
goog.string.toCamelCase = function(str) {
  return String(str).replace(/\-([a-z])/g, function(all, match) {
    return match.toUpperCase();
  });
};
goog.string.toSelectorCase = function(str) {
  return String(str).replace(/([A-Z])/g, "-$1").toLowerCase();
};
goog.string.toTitleCase = function(str, opt_delimiters) {
  var delimiters = goog.isString(opt_delimiters) ? goog.string.regExpEscape(opt_delimiters) : "\\s";
  delimiters = delimiters ? "|[" + delimiters + "]+" : "";
  var regexp = new RegExp("(^" + delimiters + ")([a-z])", "g");
  return str.replace(regexp, function(all, p1, p2) {
    return p1 + p2.toUpperCase();
  });
};
goog.string.parseInt = function(value) {
  if (isFinite(value)) {
    value = String(value);
  }
  if (goog.isString(value)) {
    return/^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
  }
  return NaN;
};
goog.string.splitLimit = function(str, separator, limit) {
  var parts = str.split(separator);
  var returnVal = [];
  while (limit > 0 && parts.length) {
    returnVal.push(parts.shift());
    limit--;
  }
  if (parts.length) {
    returnVal.push(parts.join(separator));
  }
  return returnVal;
};
goog.provide("goog.asserts");
goog.provide("goog.asserts.AssertionError");
goog.require("goog.debug.Error");
goog.require("goog.dom.NodeType");
goog.require("goog.string");
goog.define("goog.asserts.ENABLE_ASSERTS", goog.DEBUG);
goog.asserts.AssertionError = function(messagePattern, messageArgs) {
  messageArgs.unshift(messagePattern);
  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
  messageArgs.shift();
  this.messagePattern = messagePattern;
};
goog.inherits(goog.asserts.AssertionError, goog.debug.Error);
goog.asserts.AssertionError.prototype.name = "AssertionError";
goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
  throw e;
};
goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;
goog.asserts.doAssertFailure_ = function(defaultMessage, defaultArgs, givenMessage, givenArgs) {
  var message = "Assertion failed";
  if (givenMessage) {
    message += ": " + givenMessage;
    var args = givenArgs;
  } else {
    if (defaultMessage) {
      message += ": " + defaultMessage;
      args = defaultArgs;
    }
  }
  var e = new goog.asserts.AssertionError("" + message, args || []);
  goog.asserts.errorHandler_(e);
};
goog.asserts.setErrorHandler = function(errorHandler) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_ = errorHandler;
  }
};
goog.asserts.assert = function(condition, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !condition) {
    goog.asserts.doAssertFailure_("", null, opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return condition;
};
goog.asserts.fail = function(opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS) {
    goog.asserts.errorHandler_(new goog.asserts.AssertionError("Failure" + (opt_message ? ": " + opt_message : ""), Array.prototype.slice.call(arguments, 1)));
  }
};
goog.asserts.assertNumber = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
    goog.asserts.doAssertFailure_("Expected number but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertString = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
    goog.asserts.doAssertFailure_("Expected string but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertFunction = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
    goog.asserts.doAssertFailure_("Expected function but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertObject = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
    goog.asserts.doAssertFailure_("Expected object but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertArray = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
    goog.asserts.doAssertFailure_("Expected array but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertBoolean = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
    goog.asserts.doAssertFailure_("Expected boolean but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertElement = function(value, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
    goog.asserts.doAssertFailure_("Expected Element but got %s: %s.", [goog.typeOf(value), value], opt_message, Array.prototype.slice.call(arguments, 2));
  }
  return(value);
};
goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
    goog.asserts.doAssertFailure_("instanceof check failed.", null, opt_message, Array.prototype.slice.call(arguments, 3));
  }
  return value;
};
goog.asserts.assertObjectPrototypeIsIntact = function() {
  for (var key in Object.prototype) {
    goog.asserts.fail(key + " should not be enumerable in Object.prototype.");
  }
};
goog.provide("goog.debug.EntryPointMonitor");
goog.provide("goog.debug.entryPointRegistry");
goog.require("goog.asserts");
goog.debug.EntryPointMonitor = function() {
};
goog.debug.EntryPointMonitor.prototype.wrap;
goog.debug.EntryPointMonitor.prototype.unwrap;
goog.debug.entryPointRegistry.refList_ = [];
goog.debug.entryPointRegistry.monitors_ = [];
goog.debug.entryPointRegistry.monitorsMayExist_ = false;
goog.debug.entryPointRegistry.register = function(callback) {
  goog.debug.entryPointRegistry.refList_[goog.debug.entryPointRegistry.refList_.length] = callback;
  if (goog.debug.entryPointRegistry.monitorsMayExist_) {
    var monitors = goog.debug.entryPointRegistry.monitors_;
    for (var i = 0;i < monitors.length;i++) {
      callback(goog.bind(monitors[i].wrap, monitors[i]));
    }
  }
};
goog.debug.entryPointRegistry.monitorAll = function(monitor) {
  goog.debug.entryPointRegistry.monitorsMayExist_ = true;
  var transformer = goog.bind(monitor.wrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  goog.debug.entryPointRegistry.monitors_.push(monitor);
};
goog.debug.entryPointRegistry.unmonitorAllIfPossible = function(monitor) {
  var monitors = goog.debug.entryPointRegistry.monitors_;
  goog.asserts.assert(monitor == monitors[monitors.length - 1], "Only the most recent monitor can be unwrapped.");
  var transformer = goog.bind(monitor.unwrap, monitor);
  for (var i = 0;i < goog.debug.entryPointRegistry.refList_.length;i++) {
    goog.debug.entryPointRegistry.refList_[i](transformer);
  }
  monitors.length--;
};
goog.provide("goog.array");
goog.provide("goog.array.ArrayLike");
goog.require("goog.asserts");
goog.define("goog.NATIVE_ARRAY_PROTOTYPES", goog.TRUSTED_SITE);
goog.define("goog.array.ASSUME_NATIVE_FUNCTIONS", false);
goog.array.ArrayLike;
goog.array.peek = function(array) {
  return array[array.length - 1];
};
goog.array.last = goog.array.peek;
goog.array.ARRAY_PROTOTYPE_ = Array.prototype;
goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.indexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.indexOf.call(arr, obj, opt_fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? 0 : opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) : opt_fromIndex;
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.indexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i < arr.length;i++) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.lastIndexOf) ? function(arr, obj, opt_fromIndex) {
  goog.asserts.assert(arr.length != null);
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  return goog.array.ARRAY_PROTOTYPE_.lastIndexOf.call(arr, obj, fromIndex);
} : function(arr, obj, opt_fromIndex) {
  var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
  if (fromIndex < 0) {
    fromIndex = Math.max(0, arr.length + fromIndex);
  }
  if (goog.isString(arr)) {
    if (!goog.isString(obj) || obj.length != 1) {
      return-1;
    }
    return arr.lastIndexOf(obj, fromIndex);
  }
  for (var i = fromIndex;i >= 0;i--) {
    if (i in arr && arr[i] === obj) {
      return i;
    }
  }
  return-1;
};
goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.forEach) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  goog.array.ARRAY_PROTOTYPE_.forEach.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.forEachRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;--i) {
    if (i in arr2) {
      f.call(opt_obj, arr2[i], i, arr);
    }
  }
};
goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.filter) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.filter.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = [];
  var resLength = 0;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      var val = arr2[i];
      if (f.call(opt_obj, val, i, arr)) {
        res[resLength++] = val;
      }
    }
  }
  return res;
};
goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.map) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.map.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var res = new Array(l);
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2) {
      res[i] = f.call(opt_obj, arr2[i], i, arr);
    }
  }
  return res;
};
goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduce) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduce.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEach(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.reduceRight) ? function(arr, f, val, opt_obj) {
  goog.asserts.assert(arr.length != null);
  if (opt_obj) {
    f = goog.bind(f, opt_obj);
  }
  return goog.array.ARRAY_PROTOTYPE_.reduceRight.call(arr, f, val);
} : function(arr, f, val, opt_obj) {
  var rval = val;
  goog.array.forEachRight(arr, function(val, index) {
    rval = f.call(opt_obj, rval, val, index, arr);
  });
  return rval;
};
goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.some) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.some.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return true;
    }
  }
  return false;
};
goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || goog.array.ARRAY_PROTOTYPE_.every) ? function(arr, f, opt_obj) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.every.call(arr, f, opt_obj);
} : function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && !f.call(opt_obj, arr2[i], i, arr)) {
      return false;
    }
  }
  return true;
};
goog.array.count = function(arr, f, opt_obj) {
  var count = 0;
  goog.array.forEach(arr, function(element, index, arr) {
    if (f.call(opt_obj, element, index, arr)) {
      ++count;
    }
  }, opt_obj);
  return count;
};
goog.array.find = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndex = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = 0;i < l;i++) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.findRight = function(arr, f, opt_obj) {
  var i = goog.array.findIndexRight(arr, f, opt_obj);
  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
};
goog.array.findIndexRight = function(arr, f, opt_obj) {
  var l = arr.length;
  var arr2 = goog.isString(arr) ? arr.split("") : arr;
  for (var i = l - 1;i >= 0;i--) {
    if (i in arr2 && f.call(opt_obj, arr2[i], i, arr)) {
      return i;
    }
  }
  return-1;
};
goog.array.contains = function(arr, obj) {
  return goog.array.indexOf(arr, obj) >= 0;
};
goog.array.isEmpty = function(arr) {
  return arr.length == 0;
};
goog.array.clear = function(arr) {
  if (!goog.isArray(arr)) {
    for (var i = arr.length - 1;i >= 0;i--) {
      delete arr[i];
    }
  }
  arr.length = 0;
};
goog.array.insert = function(arr, obj) {
  if (!goog.array.contains(arr, obj)) {
    arr.push(obj);
  }
};
goog.array.insertAt = function(arr, obj, opt_i) {
  goog.array.splice(arr, opt_i, 0, obj);
};
goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
};
goog.array.insertBefore = function(arr, obj, opt_obj2) {
  var i;
  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
    arr.push(obj);
  } else {
    goog.array.insertAt(arr, obj, i);
  }
};
goog.array.remove = function(arr, obj) {
  var i = goog.array.indexOf(arr, obj);
  var rv;
  if (rv = i >= 0) {
    goog.array.removeAt(arr, i);
  }
  return rv;
};
goog.array.removeAt = function(arr, i) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.call(arr, i, 1).length == 1;
};
goog.array.removeIf = function(arr, f, opt_obj) {
  var i = goog.array.findIndex(arr, f, opt_obj);
  if (i >= 0) {
    goog.array.removeAt(arr, i);
    return true;
  }
  return false;
};
goog.array.concat = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.join = function(var_args) {
  return goog.array.ARRAY_PROTOTYPE_.concat.apply(goog.array.ARRAY_PROTOTYPE_, arguments);
};
goog.array.toArray = function(object) {
  var length = object.length;
  if (length > 0) {
    var rv = new Array(length);
    for (var i = 0;i < length;i++) {
      rv[i] = object[i];
    }
    return rv;
  }
  return[];
};
goog.array.clone = goog.array.toArray;
goog.array.extend = function(arr1, var_args) {
  for (var i = 1;i < arguments.length;i++) {
    var arr2 = arguments[i];
    var isArrayLike;
    if (goog.isArray(arr2) || (isArrayLike = goog.isArrayLike(arr2)) && Object.prototype.hasOwnProperty.call(arr2, "callee")) {
      arr1.push.apply(arr1, arr2);
    } else {
      if (isArrayLike) {
        var len1 = arr1.length;
        var len2 = arr2.length;
        for (var j = 0;j < len2;j++) {
          arr1[len1 + j] = arr2[j];
        }
      } else {
        arr1.push(arr2);
      }
    }
  }
};
goog.array.splice = function(arr, index, howMany, var_args) {
  goog.asserts.assert(arr.length != null);
  return goog.array.ARRAY_PROTOTYPE_.splice.apply(arr, goog.array.slice(arguments, 1));
};
goog.array.slice = function(arr, start, opt_end) {
  goog.asserts.assert(arr.length != null);
  if (arguments.length <= 2) {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start);
  } else {
    return goog.array.ARRAY_PROTOTYPE_.slice.call(arr, start, opt_end);
  }
};
goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
  var returnArray = opt_rv || arr;
  var defaultHashFn = function(item) {
    return goog.isObject(current) ? "o" + goog.getUid(current) : (typeof current).charAt(0) + current;
  };
  var hashFn = opt_hashFn || defaultHashFn;
  var seen = {}, cursorInsert = 0, cursorRead = 0;
  while (cursorRead < arr.length) {
    var current = arr[cursorRead++];
    var key = hashFn(current);
    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
      seen[key] = true;
      returnArray[cursorInsert++] = current;
    }
  }
  returnArray.length = cursorInsert;
};
goog.array.binarySearch = function(arr, target, opt_compareFn) {
  return goog.array.binarySearch_(arr, opt_compareFn || goog.array.defaultCompare, false, target);
};
goog.array.binarySelect = function(arr, evaluator, opt_obj) {
  return goog.array.binarySearch_(arr, evaluator, true, undefined, opt_obj);
};
goog.array.binarySearch_ = function(arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
  var left = 0;
  var right = arr.length;
  var found;
  while (left < right) {
    var middle = left + right >> 1;
    var compareResult;
    if (isEvaluator) {
      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
    } else {
      compareResult = compareFn(opt_target, arr[middle]);
    }
    if (compareResult > 0) {
      left = middle + 1;
    } else {
      right = middle;
      found = !compareResult;
    }
  }
  return found ? left : ~left;
};
goog.array.sort = function(arr, opt_compareFn) {
  arr.sort(opt_compareFn || goog.array.defaultCompare);
};
goog.array.stableSort = function(arr, opt_compareFn) {
  for (var i = 0;i < arr.length;i++) {
    arr[i] = {index:i, value:arr[i]};
  }
  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
  function stableCompareFn(obj1, obj2) {
    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
  }
  goog.array.sort(arr, stableCompareFn);
  for (var i = 0;i < arr.length;i++) {
    arr[i] = arr[i].value;
  }
};
goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  goog.array.sort(arr, function(a, b) {
    return compare(a[key], b[key]);
  });
};
goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  for (var i = 1;i < arr.length;i++) {
    var compareResult = compare(arr[i - 1], arr[i]);
    if (compareResult > 0 || compareResult == 0 && opt_strict) {
      return false;
    }
  }
  return true;
};
goog.array.equals = function(arr1, arr2, opt_equalsFn) {
  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) || arr1.length != arr2.length) {
    return false;
  }
  var l = arr1.length;
  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
  for (var i = 0;i < l;i++) {
    if (!equalsFn(arr1[i], arr2[i])) {
      return false;
    }
  }
  return true;
};
goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
  var compare = opt_compareFn || goog.array.defaultCompare;
  var l = Math.min(arr1.length, arr2.length);
  for (var i = 0;i < l;i++) {
    var result = compare(arr1[i], arr2[i]);
    if (result != 0) {
      return result;
    }
  }
  return goog.array.defaultCompare(arr1.length, arr2.length);
};
goog.array.defaultCompare = function(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
};
goog.array.defaultCompareEquality = function(a, b) {
  return a === b;
};
goog.array.binaryInsert = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  if (index < 0) {
    goog.array.insertAt(array, value, -(index + 1));
    return true;
  }
  return false;
};
goog.array.binaryRemove = function(array, value, opt_compareFn) {
  var index = goog.array.binarySearch(array, value, opt_compareFn);
  return index >= 0 ? goog.array.removeAt(array, index) : false;
};
goog.array.bucket = function(array, sorter, opt_obj) {
  var buckets = {};
  for (var i = 0;i < array.length;i++) {
    var value = array[i];
    var key = sorter.call(opt_obj, value, i, array);
    if (goog.isDef(key)) {
      var bucket = buckets[key] || (buckets[key] = []);
      bucket.push(value);
    }
  }
  return buckets;
};
goog.array.toObject = function(arr, keyFunc, opt_obj) {
  var ret = {};
  goog.array.forEach(arr, function(element, index) {
    ret[keyFunc.call(opt_obj, element, index, arr)] = element;
  });
  return ret;
};
goog.array.range = function(startOrEnd, opt_end, opt_step) {
  var array = [];
  var start = 0;
  var end = startOrEnd;
  var step = opt_step || 1;
  if (opt_end !== undefined) {
    start = startOrEnd;
    end = opt_end;
  }
  if (step * (end - start) < 0) {
    return[];
  }
  if (step > 0) {
    for (var i = start;i < end;i += step) {
      array.push(i);
    }
  } else {
    for (var i = start;i > end;i += step) {
      array.push(i);
    }
  }
  return array;
};
goog.array.repeat = function(value, n) {
  var array = [];
  for (var i = 0;i < n;i++) {
    array[i] = value;
  }
  return array;
};
goog.array.flatten = function(var_args) {
  var result = [];
  for (var i = 0;i < arguments.length;i++) {
    var element = arguments[i];
    if (goog.isArray(element)) {
      result.push.apply(result, goog.array.flatten.apply(null, element));
    } else {
      result.push(element);
    }
  }
  return result;
};
goog.array.rotate = function(array, n) {
  goog.asserts.assert(array.length != null);
  if (array.length) {
    n %= array.length;
    if (n > 0) {
      goog.array.ARRAY_PROTOTYPE_.unshift.apply(array, array.splice(-n, n));
    } else {
      if (n < 0) {
        goog.array.ARRAY_PROTOTYPE_.push.apply(array, array.splice(0, -n));
      }
    }
  }
  return array;
};
goog.array.moveItem = function(arr, fromIndex, toIndex) {
  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
  var removedItems = goog.array.ARRAY_PROTOTYPE_.splice.call(arr, fromIndex, 1);
  goog.array.ARRAY_PROTOTYPE_.splice.call(arr, toIndex, 0, removedItems[0]);
};
goog.array.zip = function(var_args) {
  if (!arguments.length) {
    return[];
  }
  var result = [];
  for (var i = 0;true;i++) {
    var value = [];
    for (var j = 0;j < arguments.length;j++) {
      var arr = arguments[j];
      if (i >= arr.length) {
        return result;
      }
      value.push(arr[i]);
    }
    result.push(value);
  }
};
goog.array.shuffle = function(arr, opt_randFn) {
  var randFn = opt_randFn || Math.random;
  for (var i = arr.length - 1;i > 0;i--) {
    var j = Math.floor(randFn() * (i + 1));
    var tmp = arr[i];
    arr[i] = arr[j];
    arr[j] = tmp;
  }
};
goog.provide("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.util.getNativeUserAgentString_ = function() {
  var navigator = goog.labs.userAgent.util.getNavigator_();
  if (navigator) {
    var userAgent = navigator.userAgent;
    if (userAgent) {
      return userAgent;
    }
  }
  return "";
};
goog.labs.userAgent.util.getNavigator_ = function() {
  return goog.global.navigator;
};
goog.labs.userAgent.util.userAgent_ = goog.labs.userAgent.util.getNativeUserAgentString_();
goog.labs.userAgent.util.setUserAgent = function(opt_userAgent) {
  goog.labs.userAgent.util.userAgent_ = opt_userAgent || goog.labs.userAgent.util.getNativeUserAgentString_();
};
goog.labs.userAgent.util.getUserAgent = function() {
  return goog.labs.userAgent.util.userAgent_;
};
goog.labs.userAgent.util.matchUserAgent = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.contains(userAgent, str);
};
goog.labs.userAgent.util.matchUserAgentIgnoreCase = function(str) {
  var userAgent = goog.labs.userAgent.util.getUserAgent();
  return goog.string.caseInsensitiveContains(userAgent, str);
};
goog.labs.userAgent.util.extractVersionTuples = function(userAgent) {
  var versionRegExp = new RegExp("(\\w[\\w ]+)" + "/" + "([^\\s]+)" + "\\s*" + "(?:\\((.*?)\\))?", "g");
  var data = [];
  var match;
  while (match = versionRegExp.exec(userAgent)) {
    data.push([match[1], match[2], match[3] || undefined]);
  }
  return data;
};
goog.provide("goog.labs.userAgent.browser");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.browser.matchOpera_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Opera") || goog.labs.userAgent.util.matchUserAgent("OPR");
};
goog.labs.userAgent.browser.matchIE_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.browser.matchFirefox_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Firefox");
};
goog.labs.userAgent.browser.matchSafari_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Safari") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS") && !goog.labs.userAgent.util.matchUserAgent("Android");
};
goog.labs.userAgent.browser.matchChrome_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Chrome") || goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.matchAndroidBrowser_ = function() {
  return goog.labs.userAgent.util.matchUserAgent("Android") && !goog.labs.userAgent.util.matchUserAgent("Chrome") && !goog.labs.userAgent.util.matchUserAgent("CriOS");
};
goog.labs.userAgent.browser.isOpera = goog.labs.userAgent.browser.matchOpera_;
goog.labs.userAgent.browser.isIE = goog.labs.userAgent.browser.matchIE_;
goog.labs.userAgent.browser.isFirefox = goog.labs.userAgent.browser.matchFirefox_;
goog.labs.userAgent.browser.isSafari = goog.labs.userAgent.browser.matchSafari_;
goog.labs.userAgent.browser.isChrome = goog.labs.userAgent.browser.matchChrome_;
goog.labs.userAgent.browser.isAndroidBrowser = goog.labs.userAgent.browser.matchAndroidBrowser_;
goog.labs.userAgent.browser.isSilk = function() {
  return goog.labs.userAgent.util.matchUserAgent("Silk");
};
goog.labs.userAgent.browser.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (goog.labs.userAgent.browser.isIE()) {
    return goog.labs.userAgent.browser.getIEVersion_(userAgentString);
  }
  if (goog.labs.userAgent.browser.isOpera()) {
    return goog.labs.userAgent.browser.getOperaVersion_(userAgentString);
  }
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.browser.getVersion(), version) >= 0;
};
goog.labs.userAgent.browser.getIEVersion_ = function(userAgent) {
  var rv = /rv: *([\d\.]*)/.exec(userAgent);
  if (rv && rv[1]) {
    return rv[1];
  }
  var version = "";
  var msie = /MSIE +([\d\.]+)/.exec(userAgent);
  if (msie && msie[1]) {
    var tridentVersion = /Trident\/(\d.\d)/.exec(userAgent);
    if (msie[1] == "7.0") {
      if (tridentVersion && tridentVersion[1]) {
        switch(tridentVersion[1]) {
          case "4.0":
            version = "8.0";
            break;
          case "5.0":
            version = "9.0";
            break;
          case "6.0":
            version = "10.0";
            break;
          case "7.0":
            version = "11.0";
            break;
        }
      } else {
        version = "7.0";
      }
    } else {
      version = msie[1];
    }
  }
  return version;
};
goog.labs.userAgent.browser.getOperaVersion_ = function(userAgent) {
  var versionTuples = goog.labs.userAgent.util.extractVersionTuples(userAgent);
  var lastTuple = goog.array.peek(versionTuples);
  if (lastTuple[0] == "OPR" && lastTuple[1]) {
    return lastTuple[1];
  }
  return goog.labs.userAgent.browser.getVersionFromTuples_(versionTuples);
};
goog.labs.userAgent.browser.getVersionFromTuples_ = function(versionTuples) {
  goog.asserts.assert(versionTuples.length > 2, "Couldn't extract version tuple from user agent string");
  return versionTuples[2] && versionTuples[2][1] ? versionTuples[2][1] : "";
};
goog.provide("goog.labs.userAgent.engine");
goog.require("goog.array");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.labs.userAgent.engine.isPresto = function() {
  return goog.labs.userAgent.util.matchUserAgent("Presto");
};
goog.labs.userAgent.engine.isTrident = function() {
  return goog.labs.userAgent.util.matchUserAgent("Trident") || goog.labs.userAgent.util.matchUserAgent("MSIE");
};
goog.labs.userAgent.engine.isWebKit = function() {
  return goog.labs.userAgent.util.matchUserAgentIgnoreCase("WebKit");
};
goog.labs.userAgent.engine.isGecko = function() {
  return goog.labs.userAgent.util.matchUserAgent("Gecko") && !goog.labs.userAgent.engine.isWebKit() && !goog.labs.userAgent.engine.isTrident();
};
goog.labs.userAgent.engine.getVersion = function() {
  var userAgentString = goog.labs.userAgent.util.getUserAgent();
  if (userAgentString) {
    var tuples = goog.labs.userAgent.util.extractVersionTuples(userAgentString);
    var engineTuple = tuples[1];
    if (engineTuple) {
      if (engineTuple[0] == "Gecko") {
        return goog.labs.userAgent.engine.getVersionForKey_(tuples, "Firefox");
      }
      return engineTuple[1];
    }
    var browserTuple = tuples[0];
    var info;
    if (browserTuple && (info = browserTuple[2])) {
      var match = /Trident\/([^\s;]+)/.exec(info);
      if (match) {
        return match[1];
      }
    }
  }
  return "";
};
goog.labs.userAgent.engine.isVersionOrHigher = function(version) {
  return goog.string.compareVersions(goog.labs.userAgent.engine.getVersion(), version) >= 0;
};
goog.labs.userAgent.engine.getVersionForKey_ = function(tuples, key) {
  var pair = goog.array.find(tuples, function(pair) {
    return key == pair[0];
  });
  return pair && pair[1] || "";
};
goog.provide("goog.userAgent");
goog.require("goog.labs.userAgent.browser");
goog.require("goog.labs.userAgent.engine");
goog.require("goog.labs.userAgent.util");
goog.require("goog.string");
goog.define("goog.userAgent.ASSUME_IE", false);
goog.define("goog.userAgent.ASSUME_GECKO", false);
goog.define("goog.userAgent.ASSUME_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_MOBILE_WEBKIT", false);
goog.define("goog.userAgent.ASSUME_OPERA", false);
goog.define("goog.userAgent.ASSUME_ANY_VERSION", false);
goog.userAgent.BROWSER_KNOWN_ = goog.userAgent.ASSUME_IE || goog.userAgent.ASSUME_GECKO || goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_OPERA;
goog.userAgent.getUserAgentString = function() {
  return goog.labs.userAgent.util.getUserAgent();
};
goog.userAgent.getNavigator = function() {
  return goog.global["navigator"] || null;
};
goog.userAgent.OPERA = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_OPERA : goog.labs.userAgent.browser.isOpera();
goog.userAgent.IE = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_IE : goog.labs.userAgent.browser.isIE();
goog.userAgent.GECKO = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_GECKO : goog.labs.userAgent.engine.isGecko();
goog.userAgent.WEBKIT = goog.userAgent.BROWSER_KNOWN_ ? goog.userAgent.ASSUME_WEBKIT || goog.userAgent.ASSUME_MOBILE_WEBKIT : goog.labs.userAgent.engine.isWebKit();
goog.userAgent.isMobile_ = function() {
  return goog.userAgent.WEBKIT && goog.labs.userAgent.util.matchUserAgent("Mobile");
};
goog.userAgent.MOBILE = goog.userAgent.ASSUME_MOBILE_WEBKIT || goog.userAgent.isMobile_();
goog.userAgent.SAFARI = goog.userAgent.WEBKIT;
goog.userAgent.determinePlatform_ = function() {
  var navigator = goog.userAgent.getNavigator();
  return navigator && navigator.platform || "";
};
goog.userAgent.PLATFORM = goog.userAgent.determinePlatform_();
goog.define("goog.userAgent.ASSUME_MAC", false);
goog.define("goog.userAgent.ASSUME_WINDOWS", false);
goog.define("goog.userAgent.ASSUME_LINUX", false);
goog.define("goog.userAgent.ASSUME_X11", false);
goog.define("goog.userAgent.ASSUME_ANDROID", false);
goog.define("goog.userAgent.ASSUME_IPHONE", false);
goog.define("goog.userAgent.ASSUME_IPAD", false);
goog.userAgent.PLATFORM_KNOWN_ = goog.userAgent.ASSUME_MAC || goog.userAgent.ASSUME_WINDOWS || goog.userAgent.ASSUME_LINUX || goog.userAgent.ASSUME_X11 || goog.userAgent.ASSUME_ANDROID || goog.userAgent.ASSUME_IPHONE || goog.userAgent.ASSUME_IPAD;
goog.userAgent.initPlatform_ = function() {
  goog.userAgent.detectedMac_ = goog.string.contains(goog.userAgent.PLATFORM, "Mac");
  goog.userAgent.detectedWindows_ = goog.string.contains(goog.userAgent.PLATFORM, "Win");
  goog.userAgent.detectedLinux_ = goog.string.contains(goog.userAgent.PLATFORM, "Linux");
  goog.userAgent.detectedX11_ = !!goog.userAgent.getNavigator() && goog.string.contains(goog.userAgent.getNavigator()["appVersion"] || "", "X11");
  var ua = goog.userAgent.getUserAgentString();
  goog.userAgent.detectedAndroid_ = !!ua && goog.string.contains(ua, "Android");
  goog.userAgent.detectedIPhone_ = !!ua && goog.string.contains(ua, "iPhone");
  goog.userAgent.detectedIPad_ = !!ua && goog.string.contains(ua, "iPad");
};
if (!goog.userAgent.PLATFORM_KNOWN_) {
  goog.userAgent.initPlatform_();
}
goog.userAgent.MAC = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_MAC : goog.userAgent.detectedMac_;
goog.userAgent.WINDOWS = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_WINDOWS : goog.userAgent.detectedWindows_;
goog.userAgent.LINUX = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_LINUX : goog.userAgent.detectedLinux_;
goog.userAgent.X11 = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_X11 : goog.userAgent.detectedX11_;
goog.userAgent.ANDROID = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_ANDROID : goog.userAgent.detectedAndroid_;
goog.userAgent.IPHONE = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPHONE : goog.userAgent.detectedIPhone_;
goog.userAgent.IPAD = goog.userAgent.PLATFORM_KNOWN_ ? goog.userAgent.ASSUME_IPAD : goog.userAgent.detectedIPad_;
goog.userAgent.determineVersion_ = function() {
  var version = "", re;
  if (goog.userAgent.OPERA && goog.global["opera"]) {
    var operaVersion = goog.global["opera"].version;
    return goog.isFunction(operaVersion) ? operaVersion() : operaVersion;
  }
  if (goog.userAgent.GECKO) {
    re = /rv\:([^\);]+)(\)|;)/;
  } else {
    if (goog.userAgent.IE) {
      re = /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/;
    } else {
      if (goog.userAgent.WEBKIT) {
        re = /WebKit\/(\S+)/;
      }
    }
  }
  if (re) {
    var arr = re.exec(goog.userAgent.getUserAgentString());
    version = arr ? arr[1] : "";
  }
  if (goog.userAgent.IE) {
    var docMode = goog.userAgent.getDocumentMode_();
    if (docMode > parseFloat(version)) {
      return String(docMode);
    }
  }
  return version;
};
goog.userAgent.getDocumentMode_ = function() {
  var doc = goog.global["document"];
  return doc ? doc["documentMode"] : undefined;
};
goog.userAgent.VERSION = goog.userAgent.determineVersion_();
goog.userAgent.compare = function(v1, v2) {
  return goog.string.compareVersions(v1, v2);
};
goog.userAgent.isVersionOrHigherCache_ = {};
goog.userAgent.isVersionOrHigher = function(version) {
  return goog.userAgent.ASSUME_ANY_VERSION || goog.userAgent.isVersionOrHigherCache_[version] || (goog.userAgent.isVersionOrHigherCache_[version] = goog.string.compareVersions(goog.userAgent.VERSION, version) >= 0);
};
goog.userAgent.isVersion = goog.userAgent.isVersionOrHigher;
goog.userAgent.isDocumentModeOrHigher = function(documentMode) {
  return goog.userAgent.IE && goog.userAgent.DOCUMENT_MODE >= documentMode;
};
goog.userAgent.isDocumentMode = goog.userAgent.isDocumentModeOrHigher;
goog.userAgent.DOCUMENT_MODE = function() {
  var doc = goog.global["document"];
  if (!doc || !goog.userAgent.IE) {
    return undefined;
  }
  var mode = goog.userAgent.getDocumentMode_();
  return mode || (doc["compatMode"] == "CSS1Compat" ? parseInt(goog.userAgent.VERSION, 10) : 5);
}();
goog.provide("goog.events.BrowserFeature");
goog.require("goog.userAgent");
goog.events.BrowserFeature = {HAS_W3C_BUTTON:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), HAS_W3C_EVENT_SUPPORT:!goog.userAgent.IE || goog.userAgent.isDocumentModeOrHigher(9), SET_KEY_CODE_TO_PREVENT_DEFAULT:goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), HAS_NAVIGATOR_ONLINE_PROPERTY:!goog.userAgent.WEBKIT || goog.userAgent.isVersionOrHigher("528"), HAS_HTML5_NETWORK_EVENT_SUPPORT:goog.userAgent.GECKO && goog.userAgent.isVersionOrHigher("1.9b") || goog.userAgent.IE && 
goog.userAgent.isVersionOrHigher("8") || goog.userAgent.OPERA && goog.userAgent.isVersionOrHigher("9.5") || goog.userAgent.WEBKIT && goog.userAgent.isVersionOrHigher("528"), HTML5_NETWORK_EVENTS_FIRE_ON_BODY:goog.userAgent.GECKO && !goog.userAgent.isVersionOrHigher("8") || goog.userAgent.IE && !goog.userAgent.isVersionOrHigher("9"), TOUCH_ENABLED:"ontouchstart" in goog.global || !!(goog.global["document"] && document.documentElement && "ontouchstart" in document.documentElement) || !!(goog.global["navigator"] && 
goog.global["navigator"]["msMaxTouchPoints"])};
goog.provide("goog.disposable.IDisposable");
goog.disposable.IDisposable = function() {
};
goog.disposable.IDisposable.prototype.dispose = goog.abstractMethod;
goog.disposable.IDisposable.prototype.isDisposed = goog.abstractMethod;
goog.provide("goog.Disposable");
goog.provide("goog.dispose");
goog.provide("goog.disposeAll");
goog.require("goog.disposable.IDisposable");
goog.Disposable = function() {
  if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
    if (goog.Disposable.INCLUDE_STACK_ON_CREATION) {
      this.creationStack = (new Error).stack;
    }
    goog.Disposable.instances_[goog.getUid(this)] = this;
  }
};
goog.Disposable.MonitoringMode = {OFF:0, PERMANENT:1, INTERACTIVE:2};
goog.define("goog.Disposable.MONITORING_MODE", 0);
goog.define("goog.Disposable.INCLUDE_STACK_ON_CREATION", true);
goog.Disposable.instances_ = {};
goog.Disposable.getUndisposedObjects = function() {
  var ret = [];
  for (var id in goog.Disposable.instances_) {
    if (goog.Disposable.instances_.hasOwnProperty(id)) {
      ret.push(goog.Disposable.instances_[Number(id)]);
    }
  }
  return ret;
};
goog.Disposable.clearUndisposedObjects = function() {
  goog.Disposable.instances_ = {};
};
goog.Disposable.prototype.disposed_ = false;
goog.Disposable.prototype.onDisposeCallbacks_;
goog.Disposable.prototype.creationStack;
goog.Disposable.prototype.isDisposed = function() {
  return this.disposed_;
};
goog.Disposable.prototype.getDisposed = goog.Disposable.prototype.isDisposed;
goog.Disposable.prototype.dispose = function() {
  if (!this.disposed_) {
    this.disposed_ = true;
    this.disposeInternal();
    if (goog.Disposable.MONITORING_MODE != goog.Disposable.MonitoringMode.OFF) {
      var uid = goog.getUid(this);
      if (goog.Disposable.MONITORING_MODE == goog.Disposable.MonitoringMode.PERMANENT && !goog.Disposable.instances_.hasOwnProperty(uid)) {
        throw Error(this + " did not call the goog.Disposable base " + "constructor or was disposed of after a clearUndisposedObjects " + "call");
      }
      delete goog.Disposable.instances_[uid];
    }
  }
};
goog.Disposable.prototype.registerDisposable = function(disposable) {
  this.addOnDisposeCallback(goog.partial(goog.dispose, disposable));
};
goog.Disposable.prototype.addOnDisposeCallback = function(callback, opt_scope) {
  if (!this.onDisposeCallbacks_) {
    this.onDisposeCallbacks_ = [];
  }
  this.onDisposeCallbacks_.push(goog.isDef(opt_scope) ? goog.bind(callback, opt_scope) : callback);
};
goog.Disposable.prototype.disposeInternal = function() {
  if (this.onDisposeCallbacks_) {
    while (this.onDisposeCallbacks_.length) {
      this.onDisposeCallbacks_.shift()();
    }
  }
};
goog.Disposable.isDisposed = function(obj) {
  if (obj && typeof obj.isDisposed == "function") {
    return obj.isDisposed();
  }
  return false;
};
goog.dispose = function(obj) {
  if (obj && typeof obj.dispose == "function") {
    obj.dispose();
  }
};
goog.disposeAll = function(var_args) {
  for (var i = 0, len = arguments.length;i < len;++i) {
    var disposable = arguments[i];
    if (goog.isArrayLike(disposable)) {
      goog.disposeAll.apply(null, disposable);
    } else {
      goog.dispose(disposable);
    }
  }
};
goog.provide("goog.events.EventId");
goog.events.EventId = function(eventId) {
  this.id = eventId;
};
goog.events.EventId.prototype.toString = function() {
  return this.id;
};
goog.provide("goog.events.Event");
goog.provide("goog.events.EventLike");
goog.require("goog.Disposable");
goog.require("goog.events.EventId");
goog.events.EventLike;
goog.events.Event = function(type, opt_target) {
  this.type = type instanceof goog.events.EventId ? String(type) : type;
  this.target = opt_target;
  this.currentTarget = this.target;
  this.propagationStopped_ = false;
  this.defaultPrevented = false;
  this.returnValue_ = true;
};
goog.events.Event.prototype.disposeInternal = function() {
};
goog.events.Event.prototype.dispose = function() {
};
goog.events.Event.prototype.stopPropagation = function() {
  this.propagationStopped_ = true;
};
goog.events.Event.prototype.preventDefault = function() {
  this.defaultPrevented = true;
  this.returnValue_ = false;
};
goog.events.Event.stopPropagation = function(e) {
  e.stopPropagation();
};
goog.events.Event.preventDefault = function(e) {
  e.preventDefault();
};
goog.provide("goog.events.EventType");
goog.require("goog.userAgent");
goog.events.getVendorPrefixedName_ = function(eventName) {
  return goog.userAgent.WEBKIT ? "webkit" + eventName : goog.userAgent.OPERA ? "o" + eventName.toLowerCase() : eventName.toLowerCase();
};
goog.events.EventType = {CLICK:"click", RIGHTCLICK:"rightclick", DBLCLICK:"dblclick", MOUSEDOWN:"mousedown", MOUSEUP:"mouseup", MOUSEOVER:"mouseover", MOUSEOUT:"mouseout", MOUSEMOVE:"mousemove", MOUSEENTER:"mouseenter", MOUSELEAVE:"mouseleave", SELECTSTART:"selectstart", KEYPRESS:"keypress", KEYDOWN:"keydown", KEYUP:"keyup", BLUR:"blur", FOCUS:"focus", DEACTIVATE:"deactivate", FOCUSIN:goog.userAgent.IE ? "focusin" : "DOMFocusIn", FOCUSOUT:goog.userAgent.IE ? "focusout" : "DOMFocusOut", CHANGE:"change", 
SELECT:"select", SUBMIT:"submit", INPUT:"input", PROPERTYCHANGE:"propertychange", DRAGSTART:"dragstart", DRAG:"drag", DRAGENTER:"dragenter", DRAGOVER:"dragover", DRAGLEAVE:"dragleave", DROP:"drop", DRAGEND:"dragend", TOUCHSTART:"touchstart", TOUCHMOVE:"touchmove", TOUCHEND:"touchend", TOUCHCANCEL:"touchcancel", BEFOREUNLOAD:"beforeunload", CONSOLEMESSAGE:"consolemessage", CONTEXTMENU:"contextmenu", DOMCONTENTLOADED:"DOMContentLoaded", ERROR:"error", HELP:"help", LOAD:"load", LOSECAPTURE:"losecapture", 
ORIENTATIONCHANGE:"orientationchange", READYSTATECHANGE:"readystatechange", RESIZE:"resize", SCROLL:"scroll", UNLOAD:"unload", HASHCHANGE:"hashchange", PAGEHIDE:"pagehide", PAGESHOW:"pageshow", POPSTATE:"popstate", COPY:"copy", PASTE:"paste", CUT:"cut", BEFORECOPY:"beforecopy", BEFORECUT:"beforecut", BEFOREPASTE:"beforepaste", ONLINE:"online", OFFLINE:"offline", MESSAGE:"message", CONNECT:"connect", ANIMATIONSTART:goog.events.getVendorPrefixedName_("AnimationStart"), ANIMATIONEND:goog.events.getVendorPrefixedName_("AnimationEnd"), 
ANIMATIONITERATION:goog.events.getVendorPrefixedName_("AnimationIteration"), TRANSITIONEND:goog.events.getVendorPrefixedName_("TransitionEnd"), POINTERDOWN:"pointerdown", POINTERUP:"pointerup", POINTERCANCEL:"pointercancel", POINTERMOVE:"pointermove", POINTEROVER:"pointerover", POINTEROUT:"pointerout", POINTERENTER:"pointerenter", POINTERLEAVE:"pointerleave", GOTPOINTERCAPTURE:"gotpointercapture", LOSTPOINTERCAPTURE:"lostpointercapture", MSGESTURECHANGE:"MSGestureChange", MSGESTUREEND:"MSGestureEnd", 
MSGESTUREHOLD:"MSGestureHold", MSGESTURESTART:"MSGestureStart", MSGESTURETAP:"MSGestureTap", MSGOTPOINTERCAPTURE:"MSGotPointerCapture", MSINERTIASTART:"MSInertiaStart", MSLOSTPOINTERCAPTURE:"MSLostPointerCapture", MSPOINTERCANCEL:"MSPointerCancel", MSPOINTERDOWN:"MSPointerDown", MSPOINTERENTER:"MSPointerEnter", MSPOINTERHOVER:"MSPointerHover", MSPOINTERLEAVE:"MSPointerLeave", MSPOINTERMOVE:"MSPointerMove", MSPOINTEROUT:"MSPointerOut", MSPOINTEROVER:"MSPointerOver", MSPOINTERUP:"MSPointerUp", TEXTINPUT:"textinput", 
COMPOSITIONSTART:"compositionstart", COMPOSITIONUPDATE:"compositionupdate", COMPOSITIONEND:"compositionend", EXIT:"exit", LOADABORT:"loadabort", LOADCOMMIT:"loadcommit", LOADREDIRECT:"loadredirect", LOADSTART:"loadstart", LOADSTOP:"loadstop", RESPONSIVE:"responsive", SIZECHANGED:"sizechanged", UNRESPONSIVE:"unresponsive", VISIBILITYCHANGE:"visibilitychange", STORAGE:"storage", DOMSUBTREEMODIFIED:"DOMSubtreeModified", DOMNODEINSERTED:"DOMNodeInserted", DOMNODEREMOVED:"DOMNodeRemoved", DOMNODEREMOVEDFROMDOCUMENT:"DOMNodeRemovedFromDocument", 
DOMNODEINSERTEDINTODOCUMENT:"DOMNodeInsertedIntoDocument", DOMATTRMODIFIED:"DOMAttrModified", DOMCHARACTERDATAMODIFIED:"DOMCharacterDataModified"};
goog.provide("goog.reflect");
goog.reflect.object = function(type, object) {
  return object;
};
goog.reflect.sinkValue = function(x) {
  goog.reflect.sinkValue[" "](x);
  return x;
};
goog.reflect.sinkValue[" "] = goog.nullFunction;
goog.reflect.canAccessProperty = function(obj, prop) {
  try {
    goog.reflect.sinkValue(obj[prop]);
    return true;
  } catch (e) {
  }
  return false;
};
goog.provide("goog.events.BrowserEvent");
goog.provide("goog.events.BrowserEvent.MouseButton");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Event");
goog.require("goog.events.EventType");
goog.require("goog.reflect");
goog.require("goog.userAgent");
goog.events.BrowserEvent = function(opt_e, opt_currentTarget) {
  goog.events.BrowserEvent.base(this, "constructor", opt_e ? opt_e.type : "");
  this.target = null;
  this.currentTarget = null;
  this.relatedTarget = null;
  this.offsetX = 0;
  this.offsetY = 0;
  this.clientX = 0;
  this.clientY = 0;
  this.screenX = 0;
  this.screenY = 0;
  this.button = 0;
  this.keyCode = 0;
  this.charCode = 0;
  this.ctrlKey = false;
  this.altKey = false;
  this.shiftKey = false;
  this.metaKey = false;
  this.state = null;
  this.platformModifierKey = false;
  this.event_ = null;
  if (opt_e) {
    this.init(opt_e, opt_currentTarget);
  }
};
goog.inherits(goog.events.BrowserEvent, goog.events.Event);
goog.events.BrowserEvent.MouseButton = {LEFT:0, MIDDLE:1, RIGHT:2};
goog.events.BrowserEvent.IEButtonMap = [1, 4, 2];
goog.events.BrowserEvent.prototype.init = function(e, opt_currentTarget) {
  var type = this.type = e.type;
  this.target = (e.target) || e.srcElement;
  this.currentTarget = (opt_currentTarget);
  var relatedTarget = (e.relatedTarget);
  if (relatedTarget) {
    if (goog.userAgent.GECKO) {
      if (!goog.reflect.canAccessProperty(relatedTarget, "nodeName")) {
        relatedTarget = null;
      }
    }
  } else {
    if (type == goog.events.EventType.MOUSEOVER) {
      relatedTarget = e.fromElement;
    } else {
      if (type == goog.events.EventType.MOUSEOUT) {
        relatedTarget = e.toElement;
      }
    }
  }
  this.relatedTarget = relatedTarget;
  this.offsetX = goog.userAgent.WEBKIT || e.offsetX !== undefined ? e.offsetX : e.layerX;
  this.offsetY = goog.userAgent.WEBKIT || e.offsetY !== undefined ? e.offsetY : e.layerY;
  this.clientX = e.clientX !== undefined ? e.clientX : e.pageX;
  this.clientY = e.clientY !== undefined ? e.clientY : e.pageY;
  this.screenX = e.screenX || 0;
  this.screenY = e.screenY || 0;
  this.button = e.button;
  this.keyCode = e.keyCode || 0;
  this.charCode = e.charCode || (type == "keypress" ? e.keyCode : 0);
  this.ctrlKey = e.ctrlKey;
  this.altKey = e.altKey;
  this.shiftKey = e.shiftKey;
  this.metaKey = e.metaKey;
  this.platformModifierKey = goog.userAgent.MAC ? e.metaKey : e.ctrlKey;
  this.state = e.state;
  this.event_ = e;
  if (e.defaultPrevented) {
    this.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.isButton = function(button) {
  if (!goog.events.BrowserFeature.HAS_W3C_BUTTON) {
    if (this.type == "click") {
      return button == goog.events.BrowserEvent.MouseButton.LEFT;
    } else {
      return!!(this.event_.button & goog.events.BrowserEvent.IEButtonMap[button]);
    }
  } else {
    return this.event_.button == button;
  }
};
goog.events.BrowserEvent.prototype.isMouseActionButton = function() {
  return this.isButton(goog.events.BrowserEvent.MouseButton.LEFT) && !(goog.userAgent.WEBKIT && goog.userAgent.MAC && this.ctrlKey);
};
goog.events.BrowserEvent.prototype.stopPropagation = function() {
  goog.events.BrowserEvent.superClass_.stopPropagation.call(this);
  if (this.event_.stopPropagation) {
    this.event_.stopPropagation();
  } else {
    this.event_.cancelBubble = true;
  }
};
goog.events.BrowserEvent.prototype.preventDefault = function() {
  goog.events.BrowserEvent.superClass_.preventDefault.call(this);
  var be = this.event_;
  if (!be.preventDefault) {
    be.returnValue = false;
    if (goog.events.BrowserFeature.SET_KEY_CODE_TO_PREVENT_DEFAULT) {
      try {
        var VK_F1 = 112;
        var VK_F12 = 123;
        if (be.ctrlKey || be.keyCode >= VK_F1 && be.keyCode <= VK_F12) {
          be.keyCode = -1;
        }
      } catch (ex) {
      }
    }
  } else {
    be.preventDefault();
  }
};
goog.events.BrowserEvent.prototype.getBrowserEvent = function() {
  return this.event_;
};
goog.events.BrowserEvent.prototype.disposeInternal = function() {
};
goog.provide("goog.events.Listenable");
goog.provide("goog.events.ListenableKey");
goog.require("goog.events.EventId");
goog.events.Listenable = function() {
};
goog.events.Listenable.IMPLEMENTED_BY_PROP = "closure_listenable_" + (Math.random() * 1E6 | 0);
goog.events.Listenable.addImplementation = function(cls) {
  cls.prototype[goog.events.Listenable.IMPLEMENTED_BY_PROP] = true;
};
goog.events.Listenable.isImplementedBy = function(obj) {
  return!!(obj && obj[goog.events.Listenable.IMPLEMENTED_BY_PROP]);
};
goog.events.Listenable.prototype.listen;
goog.events.Listenable.prototype.listenOnce;
goog.events.Listenable.prototype.unlisten;
goog.events.Listenable.prototype.unlistenByKey;
goog.events.Listenable.prototype.dispatchEvent;
goog.events.Listenable.prototype.removeAllListeners;
goog.events.Listenable.prototype.getParentEventTarget;
goog.events.Listenable.prototype.fireListeners;
goog.events.Listenable.prototype.getListeners;
goog.events.Listenable.prototype.getListener;
goog.events.Listenable.prototype.hasListener;
goog.events.ListenableKey = function() {
};
goog.events.ListenableKey.counter_ = 0;
goog.events.ListenableKey.reserveKey = function() {
  return++goog.events.ListenableKey.counter_;
};
goog.events.ListenableKey.prototype.src;
goog.events.ListenableKey.prototype.type;
goog.events.ListenableKey.prototype.listener;
goog.events.ListenableKey.prototype.capture;
goog.events.ListenableKey.prototype.handler;
goog.events.ListenableKey.prototype.key;
goog.provide("goog.events.Listener");
goog.require("goog.events.ListenableKey");
goog.events.Listener = function(listener, proxy, src, type, capture, opt_handler) {
  if (goog.events.Listener.ENABLE_MONITORING) {
    this.creationStack = (new Error).stack;
  }
  this.listener = listener;
  this.proxy = proxy;
  this.src = src;
  this.type = type;
  this.capture = !!capture;
  this.handler = opt_handler;
  this.key = goog.events.ListenableKey.reserveKey();
  this.callOnce = false;
  this.removed = false;
};
goog.define("goog.events.Listener.ENABLE_MONITORING", false);
goog.events.Listener.prototype.creationStack;
goog.events.Listener.prototype.markAsRemoved = function() {
  this.removed = true;
  this.listener = null;
  this.proxy = null;
  this.src = null;
  this.handler = null;
};
goog.provide("goog.object");
goog.object.forEach = function(obj, f, opt_obj) {
  for (var key in obj) {
    f.call(opt_obj, obj[key], key, obj);
  }
};
goog.object.filter = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      res[key] = obj[key];
    }
  }
  return res;
};
goog.object.map = function(obj, f, opt_obj) {
  var res = {};
  for (var key in obj) {
    res[key] = f.call(opt_obj, obj[key], key, obj);
  }
  return res;
};
goog.object.some = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (f.call(opt_obj, obj[key], key, obj)) {
      return true;
    }
  }
  return false;
};
goog.object.every = function(obj, f, opt_obj) {
  for (var key in obj) {
    if (!f.call(opt_obj, obj[key], key, obj)) {
      return false;
    }
  }
  return true;
};
goog.object.getCount = function(obj) {
  var rv = 0;
  for (var key in obj) {
    rv++;
  }
  return rv;
};
goog.object.getAnyKey = function(obj) {
  for (var key in obj) {
    return key;
  }
};
goog.object.getAnyValue = function(obj) {
  for (var key in obj) {
    return obj[key];
  }
};
goog.object.contains = function(obj, val) {
  return goog.object.containsValue(obj, val);
};
goog.object.getValues = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = obj[key];
  }
  return res;
};
goog.object.getKeys = function(obj) {
  var res = [];
  var i = 0;
  for (var key in obj) {
    res[i++] = key;
  }
  return res;
};
goog.object.getValueByKeys = function(obj, var_args) {
  var isArrayLike = goog.isArrayLike(var_args);
  var keys = isArrayLike ? var_args : arguments;
  for (var i = isArrayLike ? 0 : 1;i < keys.length;i++) {
    obj = obj[keys[i]];
    if (!goog.isDef(obj)) {
      break;
    }
  }
  return obj;
};
goog.object.containsKey = function(obj, key) {
  return key in obj;
};
goog.object.containsValue = function(obj, val) {
  for (var key in obj) {
    if (obj[key] == val) {
      return true;
    }
  }
  return false;
};
goog.object.findKey = function(obj, f, opt_this) {
  for (var key in obj) {
    if (f.call(opt_this, obj[key], key, obj)) {
      return key;
    }
  }
  return undefined;
};
goog.object.findValue = function(obj, f, opt_this) {
  var key = goog.object.findKey(obj, f, opt_this);
  return key && obj[key];
};
goog.object.isEmpty = function(obj) {
  for (var key in obj) {
    return false;
  }
  return true;
};
goog.object.clear = function(obj) {
  for (var i in obj) {
    delete obj[i];
  }
};
goog.object.remove = function(obj, key) {
  var rv;
  if (rv = key in obj) {
    delete obj[key];
  }
  return rv;
};
goog.object.add = function(obj, key, val) {
  if (key in obj) {
    throw Error('The object already contains the key "' + key + '"');
  }
  goog.object.set(obj, key, val);
};
goog.object.get = function(obj, key, opt_val) {
  if (key in obj) {
    return obj[key];
  }
  return opt_val;
};
goog.object.set = function(obj, key, value) {
  obj[key] = value;
};
goog.object.setIfUndefined = function(obj, key, value) {
  return key in obj ? obj[key] : obj[key] = value;
};
goog.object.clone = function(obj) {
  var res = {};
  for (var key in obj) {
    res[key] = obj[key];
  }
  return res;
};
goog.object.unsafeClone = function(obj) {
  var type = goog.typeOf(obj);
  if (type == "object" || type == "array") {
    if (obj.clone) {
      return obj.clone();
    }
    var clone = type == "array" ? [] : {};
    for (var key in obj) {
      clone[key] = goog.object.unsafeClone(obj[key]);
    }
    return clone;
  }
  return obj;
};
goog.object.transpose = function(obj) {
  var transposed = {};
  for (var key in obj) {
    transposed[obj[key]] = key;
  }
  return transposed;
};
goog.object.PROTOTYPE_FIELDS_ = ["constructor", "hasOwnProperty", "isPrototypeOf", "propertyIsEnumerable", "toLocaleString", "toString", "valueOf"];
goog.object.extend = function(target, var_args) {
  var key, source;
  for (var i = 1;i < arguments.length;i++) {
    source = arguments[i];
    for (key in source) {
      target[key] = source[key];
    }
    for (var j = 0;j < goog.object.PROTOTYPE_FIELDS_.length;j++) {
      key = goog.object.PROTOTYPE_FIELDS_[j];
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }
};
goog.object.create = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.create.apply(null, arguments[0]);
  }
  if (argLength % 2) {
    throw Error("Uneven number of arguments");
  }
  var rv = {};
  for (var i = 0;i < argLength;i += 2) {
    rv[arguments[i]] = arguments[i + 1];
  }
  return rv;
};
goog.object.createSet = function(var_args) {
  var argLength = arguments.length;
  if (argLength == 1 && goog.isArray(arguments[0])) {
    return goog.object.createSet.apply(null, arguments[0]);
  }
  var rv = {};
  for (var i = 0;i < argLength;i++) {
    rv[arguments[i]] = true;
  }
  return rv;
};
goog.object.createImmutableView = function(obj) {
  var result = obj;
  if (Object.isFrozen && !Object.isFrozen(obj)) {
    result = Object.create(obj);
    Object.freeze(result);
  }
  return result;
};
goog.object.isImmutableView = function(obj) {
  return!!Object.isFrozen && Object.isFrozen(obj);
};
goog.provide("goog.events.ListenerMap");
goog.require("goog.array");
goog.require("goog.events.Listener");
goog.require("goog.object");
goog.events.ListenerMap = function(src) {
  this.src = src;
  this.listeners = {};
  this.typeCount_ = 0;
};
goog.events.ListenerMap.prototype.getTypeCount = function() {
  return this.typeCount_;
};
goog.events.ListenerMap.prototype.getListenerCount = function() {
  var count = 0;
  for (var type in this.listeners) {
    count += this.listeners[type].length;
  }
  return count;
};
goog.events.ListenerMap.prototype.add = function(type, listener, callOnce, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  var listenerArray = this.listeners[typeStr];
  if (!listenerArray) {
    listenerArray = this.listeners[typeStr] = [];
    this.typeCount_++;
  }
  var listenerObj;
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    listenerObj = listenerArray[index];
    if (!callOnce) {
      listenerObj.callOnce = false;
    }
  } else {
    listenerObj = new goog.events.Listener(listener, null, this.src, typeStr, !!opt_useCapture, opt_listenerScope);
    listenerObj.callOnce = callOnce;
    listenerArray.push(listenerObj);
  }
  return listenerObj;
};
goog.events.ListenerMap.prototype.remove = function(type, listener, opt_useCapture, opt_listenerScope) {
  var typeStr = type.toString();
  if (!(typeStr in this.listeners)) {
    return false;
  }
  var listenerArray = this.listeners[typeStr];
  var index = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, opt_useCapture, opt_listenerScope);
  if (index > -1) {
    var listenerObj = listenerArray[index];
    listenerObj.markAsRemoved();
    goog.array.removeAt(listenerArray, index);
    if (listenerArray.length == 0) {
      delete this.listeners[typeStr];
      this.typeCount_--;
    }
    return true;
  }
  return false;
};
goog.events.ListenerMap.prototype.removeByKey = function(listener) {
  var type = listener.type;
  if (!(type in this.listeners)) {
    return false;
  }
  var removed = goog.array.remove(this.listeners[type], listener);
  if (removed) {
    listener.markAsRemoved();
    if (this.listeners[type].length == 0) {
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return removed;
};
goog.events.ListenerMap.prototype.removeAll = function(opt_type) {
  var typeStr = opt_type && opt_type.toString();
  var count = 0;
  for (var type in this.listeners) {
    if (!typeStr || type == typeStr) {
      var listenerArray = this.listeners[type];
      for (var i = 0;i < listenerArray.length;i++) {
        ++count;
        listenerArray[i].markAsRemoved();
      }
      delete this.listeners[type];
      this.typeCount_--;
    }
  }
  return count;
};
goog.events.ListenerMap.prototype.getListeners = function(type, capture) {
  var listenerArray = this.listeners[type.toString()];
  var rv = [];
  if (listenerArray) {
    for (var i = 0;i < listenerArray.length;++i) {
      var listenerObj = listenerArray[i];
      if (listenerObj.capture == capture) {
        rv.push(listenerObj);
      }
    }
  }
  return rv;
};
goog.events.ListenerMap.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  var listenerArray = this.listeners[type.toString()];
  var i = -1;
  if (listenerArray) {
    i = goog.events.ListenerMap.findListenerIndex_(listenerArray, listener, capture, opt_listenerScope);
  }
  return i > -1 ? listenerArray[i] : null;
};
goog.events.ListenerMap.prototype.hasListener = function(opt_type, opt_capture) {
  var hasType = goog.isDef(opt_type);
  var typeStr = hasType ? opt_type.toString() : "";
  var hasCapture = goog.isDef(opt_capture);
  return goog.object.some(this.listeners, function(listenerArray, type) {
    for (var i = 0;i < listenerArray.length;++i) {
      if ((!hasType || listenerArray[i].type == typeStr) && (!hasCapture || listenerArray[i].capture == opt_capture)) {
        return true;
      }
    }
    return false;
  });
};
goog.events.ListenerMap.findListenerIndex_ = function(listenerArray, listener, opt_useCapture, opt_listenerScope) {
  for (var i = 0;i < listenerArray.length;++i) {
    var listenerObj = listenerArray[i];
    if (!listenerObj.removed && listenerObj.listener == listener && listenerObj.capture == !!opt_useCapture && listenerObj.handler == opt_listenerScope) {
      return i;
    }
  }
  return-1;
};
goog.provide("goog.events");
goog.provide("goog.events.CaptureSimulationMode");
goog.provide("goog.events.Key");
goog.provide("goog.events.ListenableType");
goog.require("goog.asserts");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.BrowserEvent");
goog.require("goog.events.BrowserFeature");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.forwardDeclare("goog.debug.ErrorHandler");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.Key;
goog.events.ListenableType;
goog.events.LISTENER_MAP_PROP_ = "closure_lm_" + (Math.random() * 1E6 | 0);
goog.events.onString_ = "on";
goog.events.onStringMap_ = {};
goog.events.CaptureSimulationMode = {OFF_AND_FAIL:0, OFF_AND_SILENT:1, ON:2};
goog.define("goog.events.CAPTURE_SIMULATION_MODE", 2);
goog.events.listenerCountEstimate_ = 0;
goog.events.listen = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listen(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listen((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, false, opt_capt, opt_handler);
  }
};
goog.events.listen_ = function(src, type, listener, callOnce, opt_capt, opt_handler) {
  if (!type) {
    throw Error("Invalid event type");
  }
  var capture = !!opt_capt;
  if (capture && !goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_FAIL) {
      goog.asserts.fail("Can not register capture listener in IE8-.");
      return null;
    } else {
      if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.OFF_AND_SILENT) {
        return null;
      }
    }
  }
  var listenerMap = goog.events.getListenerMap_(src);
  if (!listenerMap) {
    src[goog.events.LISTENER_MAP_PROP_] = listenerMap = new goog.events.ListenerMap(src);
  }
  var listenerObj = listenerMap.add(type, listener, callOnce, opt_capt, opt_handler);
  if (listenerObj.proxy) {
    return listenerObj;
  }
  var proxy = goog.events.getProxy();
  listenerObj.proxy = proxy;
  proxy.src = src;
  proxy.listener = listenerObj;
  if (src.addEventListener) {
    src.addEventListener(type.toString(), proxy, capture);
  } else {
    src.attachEvent(goog.events.getOnString_(type.toString()), proxy);
  }
  goog.events.listenerCountEstimate_++;
  return listenerObj;
};
goog.events.getProxy = function() {
  var proxyCallbackFunction = goog.events.handleBrowserEvent_;
  var f = goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT ? function(eventObject) {
    return proxyCallbackFunction.call(f.src, f.listener, eventObject);
  } : function(eventObject) {
    var v = proxyCallbackFunction.call(f.src, f.listener, eventObject);
    if (!v) {
      return v;
    }
  };
  return f;
};
goog.events.listenOnce = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.listenOnce(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.listenOnce((type), listener, opt_capt, opt_handler);
  } else {
    return goog.events.listen_((src), (type), listener, true, opt_capt, opt_handler);
  }
};
goog.events.listenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.listen(src, listener, opt_capt, opt_handler);
};
goog.events.unlisten = function(src, type, listener, opt_capt, opt_handler) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      goog.events.unlisten(src, type[i], listener, opt_capt, opt_handler);
    }
    return null;
  }
  listener = goog.events.wrapListener(listener);
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlisten((type), listener, opt_capt, opt_handler);
  }
  if (!src) {
    return false;
  }
  var capture = !!opt_capt;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    var listenerObj = listenerMap.getListener((type), listener, capture, opt_handler);
    if (listenerObj) {
      return goog.events.unlistenByKey(listenerObj);
    }
  }
  return false;
};
goog.events.unlistenByKey = function(key) {
  if (goog.isNumber(key)) {
    return false;
  }
  var listener = (key);
  if (!listener || listener.removed) {
    return false;
  }
  var src = listener.src;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.unlistenByKey(listener);
  }
  var type = listener.type;
  var proxy = listener.proxy;
  if (src.removeEventListener) {
    src.removeEventListener(type, proxy, listener.capture);
  } else {
    if (src.detachEvent) {
      src.detachEvent(goog.events.getOnString_(type), proxy);
    }
  }
  goog.events.listenerCountEstimate_--;
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    listenerMap.removeByKey(listener);
    if (listenerMap.getTypeCount() == 0) {
      listenerMap.src = null;
      src[goog.events.LISTENER_MAP_PROP_] = null;
    }
  } else {
    listener.markAsRemoved();
  }
  return true;
};
goog.events.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_handler) {
  wrapper.unlisten(src, listener, opt_capt, opt_handler);
};
goog.events.removeAll = function(obj, opt_type) {
  if (!obj) {
    return 0;
  }
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.removeAllListeners(opt_type);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  if (!listenerMap) {
    return 0;
  }
  var count = 0;
  var typeStr = opt_type && opt_type.toString();
  for (var type in listenerMap.listeners) {
    if (!typeStr || type == typeStr) {
      var listeners = listenerMap.listeners[type].concat();
      for (var i = 0;i < listeners.length;++i) {
        if (goog.events.unlistenByKey(listeners[i])) {
          ++count;
        }
      }
    }
  }
  return count;
};
goog.events.removeAllNativeListeners = function() {
  goog.events.listenerCountEstimate_ = 0;
  return 0;
};
goog.events.getListeners = function(obj, type, capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.getListeners(type, capture);
  } else {
    if (!obj) {
      return[];
    }
    var listenerMap = goog.events.getListenerMap_((obj));
    return listenerMap ? listenerMap.getListeners(type, capture) : [];
  }
};
goog.events.getListener = function(src, type, listener, opt_capt, opt_handler) {
  type = (type);
  listener = goog.events.wrapListener(listener);
  var capture = !!opt_capt;
  if (goog.events.Listenable.isImplementedBy(src)) {
    return src.getListener(type, listener, capture, opt_handler);
  }
  if (!src) {
    return null;
  }
  var listenerMap = goog.events.getListenerMap_((src));
  if (listenerMap) {
    return listenerMap.getListener(type, listener, capture, opt_handler);
  }
  return null;
};
goog.events.hasListener = function(obj, opt_type, opt_capture) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.hasListener(opt_type, opt_capture);
  }
  var listenerMap = goog.events.getListenerMap_((obj));
  return!!listenerMap && listenerMap.hasListener(opt_type, opt_capture);
};
goog.events.expose = function(e) {
  var str = [];
  for (var key in e) {
    if (e[key] && e[key].id) {
      str.push(key + " \x3d " + e[key] + " (" + e[key].id + ")");
    } else {
      str.push(key + " \x3d " + e[key]);
    }
  }
  return str.join("\n");
};
goog.events.getOnString_ = function(type) {
  if (type in goog.events.onStringMap_) {
    return goog.events.onStringMap_[type];
  }
  return goog.events.onStringMap_[type] = goog.events.onString_ + type;
};
goog.events.fireListeners = function(obj, type, capture, eventObject) {
  if (goog.events.Listenable.isImplementedBy(obj)) {
    return obj.fireListeners(type, capture, eventObject);
  }
  return goog.events.fireListeners_(obj, type, capture, eventObject);
};
goog.events.fireListeners_ = function(obj, type, capture, eventObject) {
  var retval = 1;
  var listenerMap = goog.events.getListenerMap_((obj));
  if (listenerMap) {
    var listenerArray = listenerMap.listeners[type.toString()];
    if (listenerArray) {
      listenerArray = listenerArray.concat();
      for (var i = 0;i < listenerArray.length;i++) {
        var listener = listenerArray[i];
        if (listener && listener.capture == capture && !listener.removed) {
          retval &= goog.events.fireListener(listener, eventObject) !== false;
        }
      }
    }
  }
  return Boolean(retval);
};
goog.events.fireListener = function(listener, eventObject) {
  var listenerFn = listener.listener;
  var listenerHandler = listener.handler || listener.src;
  if (listener.callOnce) {
    goog.events.unlistenByKey(listener);
  }
  return listenerFn.call(listenerHandler, eventObject);
};
goog.events.getTotalListenerCount = function() {
  return goog.events.listenerCountEstimate_;
};
goog.events.dispatchEvent = function(src, e) {
  goog.asserts.assert(goog.events.Listenable.isImplementedBy(src), "Can not use goog.events.dispatchEvent with " + "non-goog.events.Listenable instance.");
  return src.dispatchEvent(e);
};
goog.events.protectBrowserEventEntryPoint = function(errorHandler) {
  goog.events.handleBrowserEvent_ = errorHandler.protectEntryPoint(goog.events.handleBrowserEvent_);
};
goog.events.handleBrowserEvent_ = function(listener, opt_evt) {
  if (listener.removed) {
    return true;
  }
  if (!goog.events.BrowserFeature.HAS_W3C_EVENT_SUPPORT) {
    var ieEvent = opt_evt || (goog.getObjectByName("window.event"));
    var evt = new goog.events.BrowserEvent(ieEvent, this);
    var retval = true;
    if (goog.events.CAPTURE_SIMULATION_MODE == goog.events.CaptureSimulationMode.ON) {
      if (!goog.events.isMarkedIeEvent_(ieEvent)) {
        goog.events.markIeEvent_(ieEvent);
        var ancestors = [];
        for (var parent = evt.currentTarget;parent;parent = parent.parentNode) {
          ancestors.push(parent);
        }
        var type = listener.type;
        for (var i = ancestors.length - 1;!evt.propagationStopped_ && i >= 0;i--) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, true, evt);
        }
        for (var i = 0;!evt.propagationStopped_ && i < ancestors.length;i++) {
          evt.currentTarget = ancestors[i];
          retval &= goog.events.fireListeners_(ancestors[i], type, false, evt);
        }
      }
    } else {
      retval = goog.events.fireListener(listener, evt);
    }
    return retval;
  }
  return goog.events.fireListener(listener, new goog.events.BrowserEvent(opt_evt, this));
};
goog.events.markIeEvent_ = function(e) {
  var useReturnValue = false;
  if (e.keyCode == 0) {
    try {
      e.keyCode = -1;
      return;
    } catch (ex) {
      useReturnValue = true;
    }
  }
  if (useReturnValue || (e.returnValue) == undefined) {
    e.returnValue = true;
  }
};
goog.events.isMarkedIeEvent_ = function(e) {
  return e.keyCode < 0 || e.returnValue != undefined;
};
goog.events.uniqueIdCounter_ = 0;
goog.events.getUniqueId = function(identifier) {
  return identifier + "_" + goog.events.uniqueIdCounter_++;
};
goog.events.getListenerMap_ = function(src) {
  var listenerMap = src[goog.events.LISTENER_MAP_PROP_];
  return listenerMap instanceof goog.events.ListenerMap ? listenerMap : null;
};
goog.events.LISTENER_WRAPPER_PROP_ = "__closure_events_fn_" + (Math.random() * 1E9 >>> 0);
goog.events.wrapListener = function(listener) {
  goog.asserts.assert(listener, "Listener can not be null.");
  if (goog.isFunction(listener)) {
    return listener;
  }
  goog.asserts.assert(listener.handleEvent, "An object listener must have handleEvent method.");
  if (!listener[goog.events.LISTENER_WRAPPER_PROP_]) {
    listener[goog.events.LISTENER_WRAPPER_PROP_] = function(e) {
      return listener.handleEvent(e);
    };
  }
  return listener[goog.events.LISTENER_WRAPPER_PROP_];
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.events.handleBrowserEvent_ = transformer(goog.events.handleBrowserEvent_);
});
goog.provide("goog.events.EventHandler");
goog.require("goog.Disposable");
goog.require("goog.events");
goog.require("goog.object");
goog.forwardDeclare("goog.events.EventWrapper");
goog.events.EventHandler = function(opt_scope) {
  goog.Disposable.call(this);
  this.handler_ = opt_scope;
  this.keys_ = {};
};
goog.inherits(goog.events.EventHandler, goog.Disposable);
goog.events.EventHandler.typeArray_ = [];
goog.events.EventHandler.prototype.listen = function(src, type, opt_fn, opt_capture) {
  return this.listen_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenWithScope = function(src, type, fn, capture, scope) {
  return this.listen_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listen_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (!goog.isArray(type)) {
    if (type) {
      goog.events.EventHandler.typeArray_[0] = type.toString();
    }
    type = goog.events.EventHandler.typeArray_;
  }
  for (var i = 0;i < type.length;i++) {
    var listenerObj = goog.events.listen(src, type[i], opt_fn || this.handleEvent, opt_capture || false, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenOnce = function(src, type, opt_fn, opt_capture) {
  return this.listenOnce_(src, type, opt_fn, opt_capture);
};
goog.events.EventHandler.prototype.listenOnceWithScope = function(src, type, fn, capture, scope) {
  return this.listenOnce_(src, type, fn, capture, scope);
};
goog.events.EventHandler.prototype.listenOnce_ = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.listenOnce_(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listenerObj = goog.events.listenOnce(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (!listenerObj) {
      return this;
    }
    var key = listenerObj.key;
    this.keys_[key] = listenerObj;
  }
  return this;
};
goog.events.EventHandler.prototype.listenWithWrapper = function(src, wrapper, listener, opt_capt) {
  return this.listenWithWrapper_(src, wrapper, listener, opt_capt);
};
goog.events.EventHandler.prototype.listenWithWrapperAndScope = function(src, wrapper, listener, capture, scope) {
  return this.listenWithWrapper_(src, wrapper, listener, capture, scope);
};
goog.events.EventHandler.prototype.listenWithWrapper_ = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.listen(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.getListenerCount = function() {
  var count = 0;
  for (var key in this.keys_) {
    if (Object.prototype.hasOwnProperty.call(this.keys_, key)) {
      count++;
    }
  }
  return count;
};
goog.events.EventHandler.prototype.unlisten = function(src, type, opt_fn, opt_capture, opt_scope) {
  if (goog.isArray(type)) {
    for (var i = 0;i < type.length;i++) {
      this.unlisten(src, type[i], opt_fn, opt_capture, opt_scope);
    }
  } else {
    var listener = goog.events.getListener(src, type, opt_fn || this.handleEvent, opt_capture, opt_scope || this.handler_ || this);
    if (listener) {
      goog.events.unlistenByKey(listener);
      delete this.keys_[listener.key];
    }
  }
  return this;
};
goog.events.EventHandler.prototype.unlistenWithWrapper = function(src, wrapper, listener, opt_capt, opt_scope) {
  wrapper.unlisten(src, listener, opt_capt, opt_scope || this.handler_ || this, this);
  return this;
};
goog.events.EventHandler.prototype.removeAll = function() {
  goog.object.forEach(this.keys_, goog.events.unlistenByKey);
  this.keys_ = {};
};
goog.events.EventHandler.prototype.disposeInternal = function() {
  goog.events.EventHandler.superClass_.disposeInternal.call(this);
  this.removeAll();
};
goog.events.EventHandler.prototype.handleEvent = function(e) {
  throw Error("EventHandler.handleEvent not implemented");
};
goog.provide("goog.events.EventTarget");
goog.require("goog.Disposable");
goog.require("goog.asserts");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.Listenable");
goog.require("goog.events.ListenerMap");
goog.require("goog.object");
goog.events.EventTarget = function() {
  goog.Disposable.call(this);
  this.eventTargetListeners_ = new goog.events.ListenerMap(this);
  this.actualEventTarget_ = this;
  this.parentEventTarget_ = null;
};
goog.inherits(goog.events.EventTarget, goog.Disposable);
goog.events.Listenable.addImplementation(goog.events.EventTarget);
goog.events.EventTarget.MAX_ANCESTORS_ = 1E3;
goog.events.EventTarget.prototype.getParentEventTarget = function() {
  return this.parentEventTarget_;
};
goog.events.EventTarget.prototype.setParentEventTarget = function(parent) {
  this.parentEventTarget_ = parent;
};
goog.events.EventTarget.prototype.addEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.listen(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.removeEventListener = function(type, handler, opt_capture, opt_handlerScope) {
  goog.events.unlisten(this, type, handler, opt_capture, opt_handlerScope);
};
goog.events.EventTarget.prototype.dispatchEvent = function(e) {
  this.assertInitialized_();
  var ancestorsTree, ancestor = this.getParentEventTarget();
  if (ancestor) {
    ancestorsTree = [];
    var ancestorCount = 1;
    for (;ancestor;ancestor = ancestor.getParentEventTarget()) {
      ancestorsTree.push(ancestor);
      goog.asserts.assert(++ancestorCount < goog.events.EventTarget.MAX_ANCESTORS_, "infinite loop");
    }
  }
  return goog.events.EventTarget.dispatchEventInternal_(this.actualEventTarget_, e, ancestorsTree);
};
goog.events.EventTarget.prototype.disposeInternal = function() {
  goog.events.EventTarget.superClass_.disposeInternal.call(this);
  this.removeAllListeners();
  this.parentEventTarget_ = null;
};
goog.events.EventTarget.prototype.listen = function(type, listener, opt_useCapture, opt_listenerScope) {
  this.assertInitialized_();
  return this.eventTargetListeners_.add(String(type), listener, false, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.listenOnce = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.add(String(type), listener, true, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlisten = function(type, listener, opt_useCapture, opt_listenerScope) {
  return this.eventTargetListeners_.remove(String(type), listener, opt_useCapture, opt_listenerScope);
};
goog.events.EventTarget.prototype.unlistenByKey = function(key) {
  return this.eventTargetListeners_.removeByKey(key);
};
goog.events.EventTarget.prototype.removeAllListeners = function(opt_type) {
  if (!this.eventTargetListeners_) {
    return 0;
  }
  return this.eventTargetListeners_.removeAll(opt_type);
};
goog.events.EventTarget.prototype.fireListeners = function(type, capture, eventObject) {
  var listenerArray = this.eventTargetListeners_.listeners[String(type)];
  if (!listenerArray) {
    return true;
  }
  listenerArray = listenerArray.concat();
  var rv = true;
  for (var i = 0;i < listenerArray.length;++i) {
    var listener = listenerArray[i];
    if (listener && !listener.removed && listener.capture == capture) {
      var listenerFn = listener.listener;
      var listenerHandler = listener.handler || listener.src;
      if (listener.callOnce) {
        this.unlistenByKey(listener);
      }
      rv = listenerFn.call(listenerHandler, eventObject) !== false && rv;
    }
  }
  return rv && eventObject.returnValue_ != false;
};
goog.events.EventTarget.prototype.getListeners = function(type, capture) {
  return this.eventTargetListeners_.getListeners(String(type), capture);
};
goog.events.EventTarget.prototype.getListener = function(type, listener, capture, opt_listenerScope) {
  return this.eventTargetListeners_.getListener(String(type), listener, capture, opt_listenerScope);
};
goog.events.EventTarget.prototype.hasListener = function(opt_type, opt_capture) {
  var id = goog.isDef(opt_type) ? String(opt_type) : undefined;
  return this.eventTargetListeners_.hasListener(id, opt_capture);
};
goog.events.EventTarget.prototype.setTargetForTesting = function(target) {
  this.actualEventTarget_ = target;
};
goog.events.EventTarget.prototype.assertInitialized_ = function() {
  goog.asserts.assert(this.eventTargetListeners_, "Event target is not initialized. Did you call the superclass " + "(goog.events.EventTarget) constructor?");
};
goog.events.EventTarget.dispatchEventInternal_ = function(target, e, opt_ancestorsTree) {
  var type = e.type || (e);
  if (goog.isString(e)) {
    e = new goog.events.Event(e, target);
  } else {
    if (!(e instanceof goog.events.Event)) {
      var oldEvent = e;
      e = new goog.events.Event(type, target);
      goog.object.extend(e, oldEvent);
    } else {
      e.target = e.target || target;
    }
  }
  var rv = true, currentTarget;
  if (opt_ancestorsTree) {
    for (var i = opt_ancestorsTree.length - 1;!e.propagationStopped_ && i >= 0;i--) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, true, e) && rv;
    }
  }
  if (!e.propagationStopped_) {
    currentTarget = e.currentTarget = target;
    rv = currentTarget.fireListeners(type, true, e) && rv;
    if (!e.propagationStopped_) {
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  if (opt_ancestorsTree) {
    for (i = 0;!e.propagationStopped_ && i < opt_ancestorsTree.length;i++) {
      currentTarget = e.currentTarget = opt_ancestorsTree[i];
      rv = currentTarget.fireListeners(type, false, e) && rv;
    }
  }
  return rv;
};
goog.provide("goog.net.ErrorCode");
goog.net.ErrorCode = {NO_ERROR:0, ACCESS_DENIED:1, FILE_NOT_FOUND:2, FF_SILENT_ERROR:3, CUSTOM_ERROR:4, EXCEPTION:5, HTTP_ERROR:6, ABORT:7, TIMEOUT:8, OFFLINE:9};
goog.net.ErrorCode.getDebugMessage = function(errorCode) {
  switch(errorCode) {
    case goog.net.ErrorCode.NO_ERROR:
      return "No Error";
    case goog.net.ErrorCode.ACCESS_DENIED:
      return "Access denied to content document";
    case goog.net.ErrorCode.FILE_NOT_FOUND:
      return "File not found";
    case goog.net.ErrorCode.FF_SILENT_ERROR:
      return "Firefox silently errored";
    case goog.net.ErrorCode.CUSTOM_ERROR:
      return "Application custom error";
    case goog.net.ErrorCode.EXCEPTION:
      return "An exception occurred";
    case goog.net.ErrorCode.HTTP_ERROR:
      return "Http response at 400 or 500 level";
    case goog.net.ErrorCode.ABORT:
      return "Request was aborted";
    case goog.net.ErrorCode.TIMEOUT:
      return "Request timed out";
    case goog.net.ErrorCode.OFFLINE:
      return "The resource is not available offline";
    default:
      return "Unrecognized error code";
  }
};
goog.provide("goog.net.EventType");
goog.net.EventType = {COMPLETE:"complete", SUCCESS:"success", ERROR:"error", ABORT:"abort", READY:"ready", READY_STATE_CHANGE:"readystatechange", TIMEOUT:"timeout", INCREMENTAL_DATA:"incrementaldata", PROGRESS:"progress"};
goog.provide("goog.Timer");
goog.require("goog.events.EventTarget");
goog.Timer = function(opt_interval, opt_timerObject) {
  goog.events.EventTarget.call(this);
  this.interval_ = opt_interval || 1;
  this.timerObject_ = opt_timerObject || goog.Timer.defaultTimerObject;
  this.boundTick_ = goog.bind(this.tick_, this);
  this.last_ = goog.now();
};
goog.inherits(goog.Timer, goog.events.EventTarget);
goog.Timer.MAX_TIMEOUT_ = 2147483647;
goog.Timer.prototype.enabled = false;
goog.Timer.defaultTimerObject = goog.global;
goog.Timer.intervalScale = .8;
goog.Timer.prototype.timer_ = null;
goog.Timer.prototype.getInterval = function() {
  return this.interval_;
};
goog.Timer.prototype.setInterval = function(interval) {
  this.interval_ = interval;
  if (this.timer_ && this.enabled) {
    this.stop();
    this.start();
  } else {
    if (this.timer_) {
      this.stop();
    }
  }
};
goog.Timer.prototype.tick_ = function() {
  if (this.enabled) {
    var elapsed = goog.now() - this.last_;
    if (elapsed > 0 && elapsed < this.interval_ * goog.Timer.intervalScale) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_ - elapsed);
      return;
    }
    if (this.timer_) {
      this.timerObject_.clearTimeout(this.timer_);
      this.timer_ = null;
    }
    this.dispatchTick();
    if (this.enabled) {
      this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
      this.last_ = goog.now();
    }
  }
};
goog.Timer.prototype.dispatchTick = function() {
  this.dispatchEvent(goog.Timer.TICK);
};
goog.Timer.prototype.start = function() {
  this.enabled = true;
  if (!this.timer_) {
    this.timer_ = this.timerObject_.setTimeout(this.boundTick_, this.interval_);
    this.last_ = goog.now();
  }
};
goog.Timer.prototype.stop = function() {
  this.enabled = false;
  if (this.timer_) {
    this.timerObject_.clearTimeout(this.timer_);
    this.timer_ = null;
  }
};
goog.Timer.prototype.disposeInternal = function() {
  goog.Timer.superClass_.disposeInternal.call(this);
  this.stop();
  delete this.timerObject_;
};
goog.Timer.TICK = "tick";
goog.Timer.callOnce = function(listener, opt_delay, opt_handler) {
  if (goog.isFunction(listener)) {
    if (opt_handler) {
      listener = goog.bind(listener, opt_handler);
    }
  } else {
    if (listener && typeof listener.handleEvent == "function") {
      listener = goog.bind(listener.handleEvent, listener);
    } else {
      throw Error("Invalid listener argument");
    }
  }
  if (opt_delay > goog.Timer.MAX_TIMEOUT_) {
    return-1;
  } else {
    return goog.Timer.defaultTimerObject.setTimeout(listener, opt_delay || 0);
  }
};
goog.Timer.clear = function(timerId) {
  goog.Timer.defaultTimerObject.clearTimeout(timerId);
};
goog.provide("goog.json");
goog.provide("goog.json.Replacer");
goog.provide("goog.json.Reviver");
goog.provide("goog.json.Serializer");
goog.define("goog.json.USE_NATIVE_JSON", false);
goog.json.isValid = function(s) {
  if (/^\s*$/.test(s)) {
    return false;
  }
  var backslashesRe = /\\["\\\/bfnrtu]/g;
  var simpleValuesRe = /"[^"\\\n\r\u2028\u2029\x00-\x08\x0a-\x1f]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
  var openBracketsRe = /(?:^|:|,)(?:[\s\u2028\u2029]*\[)+/g;
  var remainderRe = /^[\],:{}\s\u2028\u2029]*$/;
  return remainderRe.test(s.replace(backslashesRe, "@").replace(simpleValuesRe, "]").replace(openBracketsRe, ""));
};
goog.json.parse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  var o = String(s);
  if (goog.json.isValid(o)) {
    try {
      return(eval("(" + o + ")"));
    } catch (ex) {
    }
  }
  throw Error("Invalid JSON string: " + o);
};
goog.json.unsafeParse = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["parse"]) : function(s) {
  return(eval("(" + s + ")"));
};
goog.json.Replacer;
goog.json.Reviver;
goog.json.serialize = goog.json.USE_NATIVE_JSON ? (goog.global["JSON"]["stringify"]) : function(object, opt_replacer) {
  return(new goog.json.Serializer(opt_replacer)).serialize(object);
};
goog.json.Serializer = function(opt_replacer) {
  this.replacer_ = opt_replacer;
};
goog.json.Serializer.prototype.serialize = function(object) {
  var sb = [];
  this.serializeInternal(object, sb);
  return sb.join("");
};
goog.json.Serializer.prototype.serializeInternal = function(object, sb) {
  switch(typeof object) {
    case "string":
      this.serializeString_((object), sb);
      break;
    case "number":
      this.serializeNumber_((object), sb);
      break;
    case "boolean":
      sb.push(object);
      break;
    case "undefined":
      sb.push("null");
      break;
    case "object":
      if (object == null) {
        sb.push("null");
        break;
      }
      if (goog.isArray(object)) {
        this.serializeArray((object), sb);
        break;
      }
      this.serializeObject_((object), sb);
      break;
    case "function":
      break;
    default:
      throw Error("Unknown type: " + typeof object);;
  }
};
goog.json.Serializer.charToJsonCharCache_ = {'"':'\\"', "\\":"\\\\", "/":"\\/", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t", "\x0B":"\\u000b"};
goog.json.Serializer.charsToReplace_ = /\uffff/.test("\uffff") ? /[\\\"\x00-\x1f\x7f-\uffff]/g : /[\\\"\x00-\x1f\x7f-\xff]/g;
goog.json.Serializer.prototype.serializeString_ = function(s, sb) {
  sb.push('"', s.replace(goog.json.Serializer.charsToReplace_, function(c) {
    if (c in goog.json.Serializer.charToJsonCharCache_) {
      return goog.json.Serializer.charToJsonCharCache_[c];
    }
    var cc = c.charCodeAt(0);
    var rv = "\\u";
    if (cc < 16) {
      rv += "000";
    } else {
      if (cc < 256) {
        rv += "00";
      } else {
        if (cc < 4096) {
          rv += "0";
        }
      }
    }
    return goog.json.Serializer.charToJsonCharCache_[c] = rv + cc.toString(16);
  }), '"');
};
goog.json.Serializer.prototype.serializeNumber_ = function(n, sb) {
  sb.push(isFinite(n) && !isNaN(n) ? n : "null");
};
goog.json.Serializer.prototype.serializeArray = function(arr, sb) {
  var l = arr.length;
  sb.push("[");
  var sep = "";
  for (var i = 0;i < l;i++) {
    sb.push(sep);
    var value = arr[i];
    this.serializeInternal(this.replacer_ ? this.replacer_.call(arr, String(i), value) : value, sb);
    sep = ",";
  }
  sb.push("]");
};
goog.json.Serializer.prototype.serializeObject_ = function(obj, sb) {
  sb.push("{");
  var sep = "";
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var value = obj[key];
      if (typeof value != "function") {
        sb.push(sep);
        this.serializeString_(key, sb);
        sb.push(":");
        this.serializeInternal(this.replacer_ ? this.replacer_.call(obj, key, value) : value, sb);
        sep = ",";
      }
    }
  }
  sb.push("}");
};
goog.provide("goog.structs");
goog.require("goog.array");
goog.require("goog.object");
goog.structs.getCount = function(col) {
  if (typeof col.getCount == "function") {
    return col.getCount();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return col.length;
  }
  return goog.object.getCount(col);
};
goog.structs.getValues = function(col) {
  if (typeof col.getValues == "function") {
    return col.getValues();
  }
  if (goog.isString(col)) {
    return col.split("");
  }
  if (goog.isArrayLike(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(col[i]);
    }
    return rv;
  }
  return goog.object.getValues(col);
};
goog.structs.getKeys = function(col) {
  if (typeof col.getKeys == "function") {
    return col.getKeys();
  }
  if (typeof col.getValues == "function") {
    return undefined;
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    var rv = [];
    var l = col.length;
    for (var i = 0;i < l;i++) {
      rv.push(i);
    }
    return rv;
  }
  return goog.object.getKeys(col);
};
goog.structs.contains = function(col, val) {
  if (typeof col.contains == "function") {
    return col.contains(val);
  }
  if (typeof col.containsValue == "function") {
    return col.containsValue(val);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.contains((col), val);
  }
  return goog.object.containsValue(col, val);
};
goog.structs.isEmpty = function(col) {
  if (typeof col.isEmpty == "function") {
    return col.isEmpty();
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.isEmpty((col));
  }
  return goog.object.isEmpty(col);
};
goog.structs.clear = function(col) {
  if (typeof col.clear == "function") {
    col.clear();
  } else {
    if (goog.isArrayLike(col)) {
      goog.array.clear((col));
    } else {
      goog.object.clear(col);
    }
  }
};
goog.structs.forEach = function(col, f, opt_obj) {
  if (typeof col.forEach == "function") {
    col.forEach(f, opt_obj);
  } else {
    if (goog.isArrayLike(col) || goog.isString(col)) {
      goog.array.forEach((col), f, opt_obj);
    } else {
      var keys = goog.structs.getKeys(col);
      var values = goog.structs.getValues(col);
      var l = values.length;
      for (var i = 0;i < l;i++) {
        f.call(opt_obj, values[i], keys && keys[i], col);
      }
    }
  }
};
goog.structs.filter = function(col, f, opt_obj) {
  if (typeof col.filter == "function") {
    return col.filter(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.filter((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], keys[i], col)) {
        rv[keys[i]] = values[i];
      }
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      if (f.call(opt_obj, values[i], undefined, col)) {
        rv.push(values[i]);
      }
    }
  }
  return rv;
};
goog.structs.map = function(col, f, opt_obj) {
  if (typeof col.map == "function") {
    return col.map(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.map((col), f, opt_obj);
  }
  var rv;
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  if (keys) {
    rv = {};
    for (var i = 0;i < l;i++) {
      rv[keys[i]] = f.call(opt_obj, values[i], keys[i], col);
    }
  } else {
    rv = [];
    for (var i = 0;i < l;i++) {
      rv[i] = f.call(opt_obj, values[i], undefined, col);
    }
  }
  return rv;
};
goog.structs.some = function(col, f, opt_obj) {
  if (typeof col.some == "function") {
    return col.some(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.some((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (f.call(opt_obj, values[i], keys && keys[i], col)) {
      return true;
    }
  }
  return false;
};
goog.structs.every = function(col, f, opt_obj) {
  if (typeof col.every == "function") {
    return col.every(f, opt_obj);
  }
  if (goog.isArrayLike(col) || goog.isString(col)) {
    return goog.array.every((col), f, opt_obj);
  }
  var keys = goog.structs.getKeys(col);
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    if (!f.call(opt_obj, values[i], keys && keys[i], col)) {
      return false;
    }
  }
  return true;
};
goog.provide("goog.structs.Collection");
goog.structs.Collection = function() {
};
goog.structs.Collection.prototype.add;
goog.structs.Collection.prototype.remove;
goog.structs.Collection.prototype.contains;
goog.structs.Collection.prototype.getCount;
goog.provide("goog.functions");
goog.functions.constant = function(retValue) {
  return function() {
    return retValue;
  };
};
goog.functions.FALSE = goog.functions.constant(false);
goog.functions.TRUE = goog.functions.constant(true);
goog.functions.NULL = goog.functions.constant(null);
goog.functions.identity = function(opt_returnValue, var_args) {
  return opt_returnValue;
};
goog.functions.error = function(message) {
  return function() {
    throw Error(message);
  };
};
goog.functions.fail = function(err) {
  return function() {
    throw err;
  };
};
goog.functions.lock = function(f, opt_numArgs) {
  opt_numArgs = opt_numArgs || 0;
  return function() {
    return f.apply(this, Array.prototype.slice.call(arguments, 0, opt_numArgs));
  };
};
goog.functions.nth = function(n) {
  return function() {
    return arguments[n];
  };
};
goog.functions.withReturnValue = function(f, retValue) {
  return goog.functions.sequence(f, goog.functions.constant(retValue));
};
goog.functions.compose = function(fn, var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    if (length) {
      result = functions[length - 1].apply(this, arguments);
    }
    for (var i = length - 2;i >= 0;i--) {
      result = functions[i].call(this, result);
    }
    return result;
  };
};
goog.functions.sequence = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    var result;
    for (var i = 0;i < length;i++) {
      result = functions[i].apply(this, arguments);
    }
    return result;
  };
};
goog.functions.and = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (!functions[i].apply(this, arguments)) {
        return false;
      }
    }
    return true;
  };
};
goog.functions.or = function(var_args) {
  var functions = arguments;
  var length = functions.length;
  return function() {
    for (var i = 0;i < length;i++) {
      if (functions[i].apply(this, arguments)) {
        return true;
      }
    }
    return false;
  };
};
goog.functions.not = function(f) {
  return function() {
    return!f.apply(this, arguments);
  };
};
goog.functions.create = function(constructor, var_args) {
  var temp = function() {
  };
  temp.prototype = constructor.prototype;
  var obj = new temp;
  constructor.apply(obj, Array.prototype.slice.call(arguments, 1));
  return obj;
};
goog.define("goog.functions.CACHE_RETURN_VALUE", true);
goog.functions.cacheReturnValue = function(fn) {
  var called = false;
  var value;
  return function() {
    if (!goog.functions.CACHE_RETURN_VALUE) {
      return fn();
    }
    if (!called) {
      value = fn();
      called = true;
    }
    return value;
  };
};
goog.provide("goog.math");
goog.require("goog.array");
goog.require("goog.asserts");
goog.math.randomInt = function(a) {
  return Math.floor(Math.random() * a);
};
goog.math.uniformRandom = function(a, b) {
  return a + Math.random() * (b - a);
};
goog.math.clamp = function(value, min, max) {
  return Math.min(Math.max(value, min), max);
};
goog.math.modulo = function(a, b) {
  var r = a % b;
  return r * b < 0 ? r + b : r;
};
goog.math.lerp = function(a, b, x) {
  return a + x * (b - a);
};
goog.math.nearlyEquals = function(a, b, opt_tolerance) {
  return Math.abs(a - b) <= (opt_tolerance || 1E-6);
};
goog.math.standardAngle = function(angle) {
  return goog.math.modulo(angle, 360);
};
goog.math.standardAngleInRadians = function(angle) {
  return goog.math.modulo(angle, 2 * Math.PI);
};
goog.math.toRadians = function(angleDegrees) {
  return angleDegrees * Math.PI / 180;
};
goog.math.toDegrees = function(angleRadians) {
  return angleRadians * 180 / Math.PI;
};
goog.math.angleDx = function(degrees, radius) {
  return radius * Math.cos(goog.math.toRadians(degrees));
};
goog.math.angleDy = function(degrees, radius) {
  return radius * Math.sin(goog.math.toRadians(degrees));
};
goog.math.angle = function(x1, y1, x2, y2) {
  return goog.math.standardAngle(goog.math.toDegrees(Math.atan2(y2 - y1, x2 - x1)));
};
goog.math.angleDifference = function(startAngle, endAngle) {
  var d = goog.math.standardAngle(endAngle) - goog.math.standardAngle(startAngle);
  if (d > 180) {
    d = d - 360;
  } else {
    if (d <= -180) {
      d = 360 + d;
    }
  }
  return d;
};
goog.math.sign = function(x) {
  return x == 0 ? 0 : x < 0 ? -1 : 1;
};
goog.math.longestCommonSubsequence = function(array1, array2, opt_compareFn, opt_collectorFn) {
  var compare = opt_compareFn || function(a, b) {
    return a == b;
  };
  var collect = opt_collectorFn || function(i1, i2) {
    return array1[i1];
  };
  var length1 = array1.length;
  var length2 = array2.length;
  var arr = [];
  for (var i = 0;i < length1 + 1;i++) {
    arr[i] = [];
    arr[i][0] = 0;
  }
  for (var j = 0;j < length2 + 1;j++) {
    arr[0][j] = 0;
  }
  for (i = 1;i <= length1;i++) {
    for (j = 1;j <= length2;j++) {
      if (compare(array1[i - 1], array2[j - 1])) {
        arr[i][j] = arr[i - 1][j - 1] + 1;
      } else {
        arr[i][j] = Math.max(arr[i - 1][j], arr[i][j - 1]);
      }
    }
  }
  var result = [];
  var i = length1, j = length2;
  while (i > 0 && j > 0) {
    if (compare(array1[i - 1], array2[j - 1])) {
      result.unshift(collect(i - 1, j - 1));
      i--;
      j--;
    } else {
      if (arr[i - 1][j] > arr[i][j - 1]) {
        i--;
      } else {
        j--;
      }
    }
  }
  return result;
};
goog.math.sum = function(var_args) {
  return(goog.array.reduce(arguments, function(sum, value) {
    return sum + value;
  }, 0));
};
goog.math.average = function(var_args) {
  return goog.math.sum.apply(null, arguments) / arguments.length;
};
goog.math.sampleVariance = function(var_args) {
  var sampleSize = arguments.length;
  if (sampleSize < 2) {
    return 0;
  }
  var mean = goog.math.average.apply(null, arguments);
  var variance = goog.math.sum.apply(null, goog.array.map(arguments, function(val) {
    return Math.pow(val - mean, 2);
  })) / (sampleSize - 1);
  return variance;
};
goog.math.standardDeviation = function(var_args) {
  return Math.sqrt(goog.math.sampleVariance.apply(null, arguments));
};
goog.math.isInt = function(num) {
  return isFinite(num) && num % 1 == 0;
};
goog.math.isFiniteNumber = function(num) {
  return isFinite(num) && !isNaN(num);
};
goog.math.log10Floor = function(num) {
  if (num > 0) {
    var x = Math.round(Math.log(num) * Math.LOG10E);
    return x - (parseFloat("1e" + x) > num);
  }
  return num == 0 ? -Infinity : NaN;
};
goog.math.safeFloor = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.floor(num + (opt_epsilon || 2E-15));
};
goog.math.safeCeil = function(num, opt_epsilon) {
  goog.asserts.assert(!goog.isDef(opt_epsilon) || opt_epsilon > 0);
  return Math.ceil(num - (opt_epsilon || 2E-15));
};
goog.provide("goog.iter");
goog.provide("goog.iter.Iterable");
goog.provide("goog.iter.Iterator");
goog.provide("goog.iter.StopIteration");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.functions");
goog.require("goog.math");
goog.iter.Iterable;
if ("StopIteration" in goog.global) {
  goog.iter.StopIteration = goog.global["StopIteration"];
} else {
  goog.iter.StopIteration = Error("StopIteration");
}
goog.iter.Iterator = function() {
};
goog.iter.Iterator.prototype.next = function() {
  throw goog.iter.StopIteration;
};
goog.iter.Iterator.prototype.__iterator__ = function(opt_keys) {
  return this;
};
goog.iter.toIterator = function(iterable) {
  if (iterable instanceof goog.iter.Iterator) {
    return iterable;
  }
  if (typeof iterable.__iterator__ == "function") {
    return iterable.__iterator__(false);
  }
  if (goog.isArrayLike(iterable)) {
    var i = 0;
    var newIter = new goog.iter.Iterator;
    newIter.next = function() {
      while (true) {
        if (i >= iterable.length) {
          throw goog.iter.StopIteration;
        }
        if (!(i in iterable)) {
          i++;
          continue;
        }
        return iterable[i++];
      }
    };
    return newIter;
  }
  throw Error("Not implemented");
};
goog.iter.forEach = function(iterable, f, opt_obj) {
  if (goog.isArrayLike(iterable)) {
    try {
      goog.array.forEach((iterable), f, opt_obj);
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  } else {
    iterable = goog.iter.toIterator(iterable);
    try {
      while (true) {
        f.call(opt_obj, iterable.next(), undefined, iterable);
      }
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
    }
  }
};
goog.iter.filter = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (f.call(opt_obj, val, undefined, iterator)) {
        return val;
      }
    }
  };
  return newIter;
};
goog.iter.filterFalse = function(iterable, f, opt_obj) {
  return goog.iter.filter(iterable, goog.functions.not(f), opt_obj);
};
goog.iter.range = function(startOrStop, opt_stop, opt_step) {
  var start = 0;
  var stop = startOrStop;
  var step = opt_step || 1;
  if (arguments.length > 1) {
    start = startOrStop;
    stop = opt_stop;
  }
  if (step == 0) {
    throw Error("Range step argument must not be zero");
  }
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    if (step > 0 && start >= stop || step < 0 && start <= stop) {
      throw goog.iter.StopIteration;
    }
    var rv = start;
    start += step;
    return rv;
  };
  return newIter;
};
goog.iter.join = function(iterable, deliminator) {
  return goog.iter.toArray(iterable).join(deliminator);
};
goog.iter.map = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    var val = iterator.next();
    return f.call(opt_obj, val, undefined, iterator);
  };
  return newIter;
};
goog.iter.reduce = function(iterable, f, val, opt_obj) {
  var rval = val;
  goog.iter.forEach(iterable, function(val) {
    rval = f.call(opt_obj, rval, val);
  });
  return rval;
};
goog.iter.some = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return true;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return false;
};
goog.iter.every = function(iterable, f, opt_obj) {
  iterable = goog.iter.toIterator(iterable);
  try {
    while (true) {
      if (!f.call(opt_obj, iterable.next(), undefined, iterable)) {
        return false;
      }
    }
  } catch (ex) {
    if (ex !== goog.iter.StopIteration) {
      throw ex;
    }
  }
  return true;
};
goog.iter.chain = function(var_args) {
  var iterator = goog.iter.toIterator(arguments);
  var iter = new goog.iter.Iterator;
  var current = null;
  iter.next = function() {
    while (true) {
      if (current == null) {
        var it = iterator.next();
        current = goog.iter.toIterator(it);
      }
      try {
        return current.next();
      } catch (ex) {
        if (ex !== goog.iter.StopIteration) {
          throw ex;
        }
        current = null;
      }
    }
  };
  return iter;
};
goog.iter.chainFromIterable = function(iterable) {
  return goog.iter.chain.apply(undefined, iterable);
};
goog.iter.dropWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var dropping = true;
  newIter.next = function() {
    while (true) {
      var val = iterator.next();
      if (dropping && f.call(opt_obj, val, undefined, iterator)) {
        continue;
      } else {
        dropping = false;
      }
      return val;
    }
  };
  return newIter;
};
goog.iter.takeWhile = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var newIter = new goog.iter.Iterator;
  var taking = true;
  newIter.next = function() {
    while (true) {
      if (taking) {
        var val = iterator.next();
        if (f.call(opt_obj, val, undefined, iterator)) {
          return val;
        } else {
          taking = false;
        }
      } else {
        throw goog.iter.StopIteration;
      }
    }
  };
  return newIter;
};
goog.iter.toArray = function(iterable) {
  if (goog.isArrayLike(iterable)) {
    return goog.array.toArray((iterable));
  }
  iterable = goog.iter.toIterator(iterable);
  var array = [];
  goog.iter.forEach(iterable, function(val) {
    array.push(val);
  });
  return array;
};
goog.iter.equals = function(iterable1, iterable2) {
  var fillValue = {};
  var pairs = goog.iter.zipLongest(fillValue, iterable1, iterable2);
  return goog.iter.every(pairs, function(pair) {
    return pair[0] == pair[1];
  });
};
goog.iter.nextOrValue = function(iterable, defaultValue) {
  try {
    return goog.iter.toIterator(iterable).next();
  } catch (e) {
    if (e != goog.iter.StopIteration) {
      throw e;
    }
    return defaultValue;
  }
};
goog.iter.product = function(var_args) {
  var someArrayEmpty = goog.array.some(arguments, function(arr) {
    return!arr.length;
  });
  if (someArrayEmpty || !arguments.length) {
    return new goog.iter.Iterator;
  }
  var iter = new goog.iter.Iterator;
  var arrays = arguments;
  var indicies = goog.array.repeat(0, arrays.length);
  iter.next = function() {
    if (indicies) {
      var retVal = goog.array.map(indicies, function(valueIndex, arrayIndex) {
        return arrays[arrayIndex][valueIndex];
      });
      for (var i = indicies.length - 1;i >= 0;i--) {
        goog.asserts.assert(indicies);
        if (indicies[i] < arrays[i].length - 1) {
          indicies[i]++;
          break;
        }
        if (i == 0) {
          indicies = null;
          break;
        }
        indicies[i] = 0;
      }
      return retVal;
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.cycle = function(iterable) {
  var baseIterator = goog.iter.toIterator(iterable);
  var cache = [];
  var cacheIndex = 0;
  var iter = new goog.iter.Iterator;
  var useCache = false;
  iter.next = function() {
    var returnElement = null;
    if (!useCache) {
      try {
        returnElement = baseIterator.next();
        cache.push(returnElement);
        return returnElement;
      } catch (e) {
        if (e != goog.iter.StopIteration || goog.array.isEmpty(cache)) {
          throw e;
        }
        useCache = true;
      }
    }
    returnElement = cache[cacheIndex];
    cacheIndex = (cacheIndex + 1) % cache.length;
    return returnElement;
  };
  return iter;
};
goog.iter.count = function(opt_start, opt_step) {
  var counter = opt_start || 0;
  var step = goog.isDef(opt_step) ? opt_step : 1;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var returnValue = counter;
    counter += step;
    return returnValue;
  };
  return iter;
};
goog.iter.repeat = function(value) {
  var iter = new goog.iter.Iterator;
  iter.next = goog.functions.constant(value);
  return iter;
};
goog.iter.accumulate = function(iterable) {
  var iterator = goog.iter.toIterator(iterable);
  var total = 0;
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    total += iterator.next();
    return total;
  };
  return iter;
};
goog.iter.zip = function(var_args) {
  var args = arguments;
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var arr = goog.array.map(iterators, function(it) {
        return it.next();
      });
      return arr;
    };
  }
  return iter;
};
goog.iter.zipLongest = function(fillValue, var_args) {
  var args = goog.array.slice(arguments, 1);
  var iter = new goog.iter.Iterator;
  if (args.length > 0) {
    var iterators = goog.array.map(args, goog.iter.toIterator);
    iter.next = function() {
      var iteratorsHaveValues = false;
      var arr = goog.array.map(iterators, function(it) {
        var returnValue;
        try {
          returnValue = it.next();
          iteratorsHaveValues = true;
        } catch (ex) {
          if (ex !== goog.iter.StopIteration) {
            throw ex;
          }
          returnValue = fillValue;
        }
        return returnValue;
      });
      if (!iteratorsHaveValues) {
        throw goog.iter.StopIteration;
      }
      return arr;
    };
  }
  return iter;
};
goog.iter.compress = function(iterable, selectors) {
  var selectorIterator = goog.iter.toIterator(selectors);
  return goog.iter.filter(iterable, function() {
    return!!selectorIterator.next();
  });
};
goog.iter.GroupByIterator_ = function(iterable, opt_keyFunc) {
  this.iterator = goog.iter.toIterator(iterable);
  this.keyFunc = opt_keyFunc || goog.functions.identity;
  this.targetKey;
  this.currentKey;
  this.currentValue;
};
goog.inherits(goog.iter.GroupByIterator_, goog.iter.Iterator);
goog.iter.GroupByIterator_.prototype.next = function() {
  while (this.currentKey == this.targetKey) {
    this.currentValue = this.iterator.next();
    this.currentKey = this.keyFunc(this.currentValue);
  }
  this.targetKey = this.currentKey;
  return[this.currentKey, this.groupItems_(this.targetKey)];
};
goog.iter.GroupByIterator_.prototype.groupItems_ = function(targetKey) {
  var arr = [];
  while (this.currentKey == targetKey) {
    arr.push(this.currentValue);
    try {
      this.currentValue = this.iterator.next();
    } catch (ex) {
      if (ex !== goog.iter.StopIteration) {
        throw ex;
      }
      break;
    }
    this.currentKey = this.keyFunc(this.currentValue);
  }
  return arr;
};
goog.iter.groupBy = function(iterable, opt_keyFunc) {
  return new goog.iter.GroupByIterator_(iterable, opt_keyFunc);
};
goog.iter.starMap = function(iterable, f, opt_obj) {
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  iter.next = function() {
    var args = goog.iter.toArray(iterator.next());
    return f.apply(opt_obj, goog.array.concat(args, undefined, iterator));
  };
  return iter;
};
goog.iter.tee = function(iterable, opt_num) {
  var iterator = goog.iter.toIterator(iterable);
  var num = goog.isNumber(opt_num) ? opt_num : 2;
  var buffers = goog.array.map(goog.array.range(num), function() {
    return[];
  });
  var addNextIteratorValueToBuffers = function() {
    var val = iterator.next();
    goog.array.forEach(buffers, function(buffer) {
      buffer.push(val);
    });
  };
  var createIterator = function(buffer) {
    var iter = new goog.iter.Iterator;
    iter.next = function() {
      if (goog.array.isEmpty(buffer)) {
        addNextIteratorValueToBuffers();
      }
      goog.asserts.assert(!goog.array.isEmpty(buffer));
      return buffer.shift();
    };
    return iter;
  };
  return goog.array.map(buffers, createIterator);
};
goog.iter.enumerate = function(iterable, opt_start) {
  return goog.iter.zip(goog.iter.count(opt_start), iterable);
};
goog.iter.limit = function(iterable, limitSize) {
  goog.asserts.assert(goog.math.isInt(limitSize) && limitSize >= 0);
  var iterator = goog.iter.toIterator(iterable);
  var iter = new goog.iter.Iterator;
  var remaining = limitSize;
  iter.next = function() {
    if (remaining-- > 0) {
      return iterator.next();
    }
    throw goog.iter.StopIteration;
  };
  return iter;
};
goog.iter.consume = function(iterable, count) {
  goog.asserts.assert(goog.math.isInt(count) && count >= 0);
  var iterator = goog.iter.toIterator(iterable);
  while (count-- > 0) {
    goog.iter.nextOrValue(iterator, null);
  }
  return iterator;
};
goog.iter.slice = function(iterable, start, opt_end) {
  goog.asserts.assert(goog.math.isInt(start) && start >= 0);
  var iterator = goog.iter.consume(iterable, start);
  if (goog.isNumber(opt_end)) {
    goog.asserts.assert(goog.math.isInt((opt_end)) && opt_end >= start);
    iterator = goog.iter.limit(iterator, opt_end - start);
  }
  return iterator;
};
goog.iter.hasDuplicates_ = function(arr) {
  var deduped = [];
  goog.array.removeDuplicates(arr, deduped);
  return arr.length != deduped.length;
};
goog.iter.permutations = function(iterable, opt_length) {
  var elements = goog.iter.toArray(iterable);
  var length = goog.isNumber(opt_length) ? opt_length : elements.length;
  var sets = goog.array.repeat(elements, length);
  var product = goog.iter.product.apply(undefined, sets);
  return goog.iter.filter(product, function(arr) {
    return!goog.iter.hasDuplicates_(arr);
  });
};
goog.iter.combinations = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.iter.range(elements.length);
  var indexIterator = goog.iter.permutations(indexes, length);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.iter.combinationsWithReplacement = function(iterable, length) {
  var elements = goog.iter.toArray(iterable);
  var indexes = goog.array.range(elements.length);
  var sets = goog.array.repeat(indexes, length);
  var indexIterator = goog.iter.product.apply(undefined, sets);
  var sortedIndexIterator = goog.iter.filter(indexIterator, function(arr) {
    return goog.array.isSorted(arr);
  });
  var iter = new goog.iter.Iterator;
  function getIndexFromElements(index) {
    return elements[index];
  }
  iter.next = function() {
    return goog.array.map((sortedIndexIterator.next()), getIndexFromElements);
  };
  return iter;
};
goog.provide("goog.structs.Map");
goog.require("goog.iter.Iterator");
goog.require("goog.iter.StopIteration");
goog.require("goog.object");
goog.structs.Map = function(opt_map, var_args) {
  this.map_ = {};
  this.keys_ = [];
  this.count_ = 0;
  this.version_ = 0;
  var argLength = arguments.length;
  if (argLength > 1) {
    if (argLength % 2) {
      throw Error("Uneven number of arguments");
    }
    for (var i = 0;i < argLength;i += 2) {
      this.set(arguments[i], arguments[i + 1]);
    }
  } else {
    if (opt_map) {
      this.addAll((opt_map));
    }
  }
};
goog.structs.Map.prototype.getCount = function() {
  return this.count_;
};
goog.structs.Map.prototype.getValues = function() {
  this.cleanupKeysArray_();
  var rv = [];
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    rv.push(this.map_[key]);
  }
  return rv;
};
goog.structs.Map.prototype.getKeys = function() {
  this.cleanupKeysArray_();
  return(this.keys_.concat());
};
goog.structs.Map.prototype.containsKey = function(key) {
  return goog.structs.Map.hasKey_(this.map_, key);
};
goog.structs.Map.prototype.containsValue = function(val) {
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    if (goog.structs.Map.hasKey_(this.map_, key) && this.map_[key] == val) {
      return true;
    }
  }
  return false;
};
goog.structs.Map.prototype.equals = function(otherMap, opt_equalityFn) {
  if (this === otherMap) {
    return true;
  }
  if (this.count_ != otherMap.getCount()) {
    return false;
  }
  var equalityFn = opt_equalityFn || goog.structs.Map.defaultEquals;
  this.cleanupKeysArray_();
  for (var key, i = 0;key = this.keys_[i];i++) {
    if (!equalityFn(this.get(key), otherMap.get(key))) {
      return false;
    }
  }
  return true;
};
goog.structs.Map.defaultEquals = function(a, b) {
  return a === b;
};
goog.structs.Map.prototype.isEmpty = function() {
  return this.count_ == 0;
};
goog.structs.Map.prototype.clear = function() {
  this.map_ = {};
  this.keys_.length = 0;
  this.count_ = 0;
  this.version_ = 0;
};
goog.structs.Map.prototype.remove = function(key) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    delete this.map_[key];
    this.count_--;
    this.version_++;
    if (this.keys_.length > 2 * this.count_) {
      this.cleanupKeysArray_();
    }
    return true;
  }
  return false;
};
goog.structs.Map.prototype.cleanupKeysArray_ = function() {
  if (this.count_ != this.keys_.length) {
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (goog.structs.Map.hasKey_(this.map_, key)) {
        this.keys_[destIndex++] = key;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
  if (this.count_ != this.keys_.length) {
    var seen = {};
    var srcIndex = 0;
    var destIndex = 0;
    while (srcIndex < this.keys_.length) {
      var key = this.keys_[srcIndex];
      if (!goog.structs.Map.hasKey_(seen, key)) {
        this.keys_[destIndex++] = key;
        seen[key] = 1;
      }
      srcIndex++;
    }
    this.keys_.length = destIndex;
  }
};
goog.structs.Map.prototype.get = function(key, opt_val) {
  if (goog.structs.Map.hasKey_(this.map_, key)) {
    return this.map_[key];
  }
  return opt_val;
};
goog.structs.Map.prototype.set = function(key, value) {
  if (!goog.structs.Map.hasKey_(this.map_, key)) {
    this.count_++;
    this.keys_.push(key);
    this.version_++;
  }
  this.map_[key] = value;
};
goog.structs.Map.prototype.addAll = function(map) {
  var keys, values;
  if (map instanceof goog.structs.Map) {
    keys = map.getKeys();
    values = map.getValues();
  } else {
    keys = goog.object.getKeys(map);
    values = goog.object.getValues(map);
  }
  for (var i = 0;i < keys.length;i++) {
    this.set(keys[i], values[i]);
  }
};
goog.structs.Map.prototype.forEach = function(f, opt_obj) {
  var keys = this.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = this.get(key);
    f.call(opt_obj, value, key, this);
  }
};
goog.structs.Map.prototype.clone = function() {
  return new goog.structs.Map(this);
};
goog.structs.Map.prototype.transpose = function() {
  var transposed = new goog.structs.Map;
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    var value = this.map_[key];
    transposed.set(value, key);
  }
  return transposed;
};
goog.structs.Map.prototype.toObject = function() {
  this.cleanupKeysArray_();
  var obj = {};
  for (var i = 0;i < this.keys_.length;i++) {
    var key = this.keys_[i];
    obj[key] = this.map_[key];
  }
  return obj;
};
goog.structs.Map.prototype.getKeyIterator = function() {
  return this.__iterator__(true);
};
goog.structs.Map.prototype.getValueIterator = function() {
  return this.__iterator__(false);
};
goog.structs.Map.prototype.__iterator__ = function(opt_keys) {
  this.cleanupKeysArray_();
  var i = 0;
  var keys = this.keys_;
  var map = this.map_;
  var version = this.version_;
  var selfObj = this;
  var newIter = new goog.iter.Iterator;
  newIter.next = function() {
    while (true) {
      if (version != selfObj.version_) {
        throw Error("The map has changed since the iterator was created");
      }
      if (i >= keys.length) {
        throw goog.iter.StopIteration;
      }
      var key = keys[i++];
      return opt_keys ? key : map[key];
    }
  };
  return newIter;
};
goog.structs.Map.hasKey_ = function(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
};
goog.provide("goog.structs.Set");
goog.require("goog.structs");
goog.require("goog.structs.Collection");
goog.require("goog.structs.Map");
goog.structs.Set = function(opt_values) {
  this.map_ = new goog.structs.Map;
  if (opt_values) {
    this.addAll(opt_values);
  }
};
goog.structs.Set.getKey_ = function(val) {
  var type = typeof val;
  if (type == "object" && val || type == "function") {
    return "o" + goog.getUid((val));
  } else {
    return type.substr(0, 1) + val;
  }
};
goog.structs.Set.prototype.getCount = function() {
  return this.map_.getCount();
};
goog.structs.Set.prototype.add = function(element) {
  this.map_.set(goog.structs.Set.getKey_(element), element);
};
goog.structs.Set.prototype.addAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.add(values[i]);
  }
};
goog.structs.Set.prototype.removeAll = function(col) {
  var values = goog.structs.getValues(col);
  var l = values.length;
  for (var i = 0;i < l;i++) {
    this.remove(values[i]);
  }
};
goog.structs.Set.prototype.remove = function(element) {
  return this.map_.remove(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.clear = function() {
  this.map_.clear();
};
goog.structs.Set.prototype.isEmpty = function() {
  return this.map_.isEmpty();
};
goog.structs.Set.prototype.contains = function(element) {
  return this.map_.containsKey(goog.structs.Set.getKey_(element));
};
goog.structs.Set.prototype.containsAll = function(col) {
  return goog.structs.every(col, this.contains, this);
};
goog.structs.Set.prototype.intersection = function(col) {
  var result = new goog.structs.Set;
  var values = goog.structs.getValues(col);
  for (var i = 0;i < values.length;i++) {
    var value = values[i];
    if (this.contains(value)) {
      result.add(value);
    }
  }
  return result;
};
goog.structs.Set.prototype.difference = function(col) {
  var result = this.clone();
  result.removeAll(col);
  return result;
};
goog.structs.Set.prototype.getValues = function() {
  return this.map_.getValues();
};
goog.structs.Set.prototype.clone = function() {
  return new goog.structs.Set(this);
};
goog.structs.Set.prototype.equals = function(col) {
  return this.getCount() == goog.structs.getCount(col) && this.isSubsetOf(col);
};
goog.structs.Set.prototype.isSubsetOf = function(col) {
  var colCount = goog.structs.getCount(col);
  if (this.getCount() > colCount) {
    return false;
  }
  if (!(col instanceof goog.structs.Set) && colCount > 5) {
    col = new goog.structs.Set(col);
  }
  return goog.structs.every(this, function(value) {
    return goog.structs.contains(col, value);
  });
};
goog.structs.Set.prototype.__iterator__ = function(opt_keys) {
  return this.map_.__iterator__(false);
};
goog.provide("goog.debug");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs.Set");
goog.require("goog.userAgent");
goog.define("goog.debug.LOGGING_ENABLED", goog.DEBUG);
goog.debug.catchErrors = function(logFunc, opt_cancel, opt_target) {
  var target = opt_target || goog.global;
  var oldErrorHandler = target.onerror;
  var retVal = !!opt_cancel;
  if (goog.userAgent.WEBKIT && !goog.userAgent.isVersionOrHigher("535.3")) {
    retVal = !retVal;
  }
  target.onerror = function(message, url, line, opt_col, opt_error) {
    if (oldErrorHandler) {
      oldErrorHandler(message, url, line, opt_col, opt_error);
    }
    logFunc({message:message, fileName:url, line:line, col:opt_col, error:opt_error});
    return retVal;
  };
};
goog.debug.expose = function(obj, opt_showFn) {
  if (typeof obj == "undefined") {
    return "undefined";
  }
  if (obj == null) {
    return "NULL";
  }
  var str = [];
  for (var x in obj) {
    if (!opt_showFn && goog.isFunction(obj[x])) {
      continue;
    }
    var s = x + " \x3d ";
    try {
      s += obj[x];
    } catch (e) {
      s += "*** " + e + " ***";
    }
    str.push(s);
  }
  return str.join("\n");
};
goog.debug.deepExpose = function(obj, opt_showFn) {
  var str = [];
  var helper = function(obj, space, parentSeen) {
    var nestspace = space + "  ";
    var seen = new goog.structs.Set(parentSeen);
    var indentMultiline = function(str) {
      return str.replace(/\n/g, "\n" + space);
    };
    try {
      if (!goog.isDef(obj)) {
        str.push("undefined");
      } else {
        if (goog.isNull(obj)) {
          str.push("NULL");
        } else {
          if (goog.isString(obj)) {
            str.push('"' + indentMultiline(obj) + '"');
          } else {
            if (goog.isFunction(obj)) {
              str.push(indentMultiline(String(obj)));
            } else {
              if (goog.isObject(obj)) {
                if (seen.contains(obj)) {
                  str.push("*** reference loop detected ***");
                } else {
                  seen.add(obj);
                  str.push("{");
                  for (var x in obj) {
                    if (!opt_showFn && goog.isFunction(obj[x])) {
                      continue;
                    }
                    str.push("\n");
                    str.push(nestspace);
                    str.push(x + " \x3d ");
                    helper(obj[x], nestspace, seen);
                  }
                  str.push("\n" + space + "}");
                }
              } else {
                str.push(obj);
              }
            }
          }
        }
      }
    } catch (e) {
      str.push("*** " + e + " ***");
    }
  };
  helper(obj, "", new goog.structs.Set);
  return str.join("");
};
goog.debug.exposeArray = function(arr) {
  var str = [];
  for (var i = 0;i < arr.length;i++) {
    if (goog.isArray(arr[i])) {
      str.push(goog.debug.exposeArray(arr[i]));
    } else {
      str.push(arr[i]);
    }
  }
  return "[ " + str.join(", ") + " ]";
};
goog.debug.exposeException = function(err, opt_fn) {
  try {
    var e = goog.debug.normalizeErrorObject(err);
    var error = "Message: " + goog.string.htmlEscape(e.message) + '\nUrl: \x3ca href\x3d"view-source:' + e.fileName + '" target\x3d"_new"\x3e' + e.fileName + "\x3c/a\x3e\nLine: " + e.lineNumber + "\n\nBrowser stack:\n" + goog.string.htmlEscape(e.stack + "-\x3e ") + "[end]\n\nJS stack traversal:\n" + goog.string.htmlEscape(goog.debug.getStacktrace(opt_fn) + "-\x3e ");
    return error;
  } catch (e2) {
    return "Exception trying to expose exception! You win, we lose. " + e2;
  }
};
goog.debug.normalizeErrorObject = function(err) {
  var href = goog.getObjectByName("window.location.href");
  if (goog.isString(err)) {
    return{"message":err, "name":"Unknown error", "lineNumber":"Not available", "fileName":href, "stack":"Not available"};
  }
  var lineNumber, fileName;
  var threwError = false;
  try {
    lineNumber = err.lineNumber || err.line || "Not available";
  } catch (e) {
    lineNumber = "Not available";
    threwError = true;
  }
  try {
    fileName = err.fileName || err.filename || err.sourceURL || goog.global["$googDebugFname"] || href;
  } catch (e) {
    fileName = "Not available";
    threwError = true;
  }
  if (threwError || !err.lineNumber || !err.fileName || !err.stack || !err.message || !err.name) {
    return{"message":err.message || "Not available", "name":err.name || "UnknownError", "lineNumber":lineNumber, "fileName":fileName, "stack":err.stack || "Not available"};
  }
  return err;
};
goog.debug.enhanceError = function(err, opt_message) {
  var error;
  if (typeof err == "string") {
    error = Error(err);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(error, goog.debug.enhanceError);
    }
  } else {
    error = err;
  }
  if (!error.stack) {
    error.stack = goog.debug.getStacktrace(goog.debug.enhanceError);
  }
  if (opt_message) {
    var x = 0;
    while (error["message" + x]) {
      ++x;
    }
    error["message" + x] = String(opt_message);
  }
  return error;
};
goog.debug.getStacktraceSimple = function(opt_depth) {
  if (goog.STRICT_MODE_COMPATIBLE) {
    var stack = goog.debug.getNativeStackTrace_(goog.debug.getStacktraceSimple);
    if (stack) {
      return stack;
    }
  }
  var sb = [];
  var fn = arguments.callee.caller;
  var depth = 0;
  while (fn && (!opt_depth || depth < opt_depth)) {
    sb.push(goog.debug.getFunctionName(fn));
    sb.push("()\n");
    try {
      fn = fn.caller;
    } catch (e) {
      sb.push("[exception trying to get caller]\n");
      break;
    }
    depth++;
    if (depth >= goog.debug.MAX_STACK_DEPTH) {
      sb.push("[...long stack...]");
      break;
    }
  }
  if (opt_depth && depth >= opt_depth) {
    sb.push("[...reached max depth limit...]");
  } else {
    sb.push("[end]");
  }
  return sb.join("");
};
goog.debug.MAX_STACK_DEPTH = 50;
goog.debug.getNativeStackTrace_ = function(fn) {
  var tempErr = new Error;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(tempErr, fn);
    return String(tempErr.stack);
  } else {
    try {
      throw tempErr;
    } catch (e) {
      tempErr = e;
    }
    var stack = tempErr.stack;
    if (stack) {
      return String(stack);
    }
  }
  return null;
};
goog.debug.getStacktrace = function(opt_fn) {
  var stack;
  if (goog.STRICT_MODE_COMPATIBLE) {
    var contextFn = opt_fn || goog.debug.getStacktrace;
    stack = goog.debug.getNativeStackTrace_(contextFn);
  }
  if (!stack) {
    stack = goog.debug.getStacktraceHelper_(opt_fn || arguments.callee.caller, []);
  }
  return stack;
};
goog.debug.getStacktraceHelper_ = function(fn, visited) {
  var sb = [];
  if (goog.array.contains(visited, fn)) {
    sb.push("[...circular reference...]");
  } else {
    if (fn && visited.length < goog.debug.MAX_STACK_DEPTH) {
      sb.push(goog.debug.getFunctionName(fn) + "(");
      var args = fn.arguments;
      for (var i = 0;args && i < args.length;i++) {
        if (i > 0) {
          sb.push(", ");
        }
        var argDesc;
        var arg = args[i];
        switch(typeof arg) {
          case "object":
            argDesc = arg ? "object" : "null";
            break;
          case "string":
            argDesc = arg;
            break;
          case "number":
            argDesc = String(arg);
            break;
          case "boolean":
            argDesc = arg ? "true" : "false";
            break;
          case "function":
            argDesc = goog.debug.getFunctionName(arg);
            argDesc = argDesc ? argDesc : "[fn]";
            break;
          case "undefined":
          ;
          default:
            argDesc = typeof arg;
            break;
        }
        if (argDesc.length > 40) {
          argDesc = argDesc.substr(0, 40) + "...";
        }
        sb.push(argDesc);
      }
      visited.push(fn);
      sb.push(")\n");
      try {
        sb.push(goog.debug.getStacktraceHelper_(fn.caller, visited));
      } catch (e) {
        sb.push("[exception trying to get caller]\n");
      }
    } else {
      if (fn) {
        sb.push("[...long stack...]");
      } else {
        sb.push("[end]");
      }
    }
  }
  return sb.join("");
};
goog.debug.setFunctionResolver = function(resolver) {
  goog.debug.fnNameResolver_ = resolver;
};
goog.debug.getFunctionName = function(fn) {
  if (goog.debug.fnNameCache_[fn]) {
    return goog.debug.fnNameCache_[fn];
  }
  if (goog.debug.fnNameResolver_) {
    var name = goog.debug.fnNameResolver_(fn);
    if (name) {
      goog.debug.fnNameCache_[fn] = name;
      return name;
    }
  }
  var functionSource = String(fn);
  if (!goog.debug.fnNameCache_[functionSource]) {
    var matches = /function ([^\(]+)/.exec(functionSource);
    if (matches) {
      var method = matches[1];
      goog.debug.fnNameCache_[functionSource] = method;
    } else {
      goog.debug.fnNameCache_[functionSource] = "[Anonymous]";
    }
  }
  return goog.debug.fnNameCache_[functionSource];
};
goog.debug.makeWhitespaceVisible = function(string) {
  return string.replace(/ /g, "[_]").replace(/\f/g, "[f]").replace(/\n/g, "[n]\n").replace(/\r/g, "[r]").replace(/\t/g, "[t]");
};
goog.debug.fnNameCache_ = {};
goog.debug.fnNameResolver_;
goog.provide("goog.debug.LogRecord");
goog.debug.LogRecord = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  this.reset(level, msg, loggerName, opt_time, opt_sequenceNumber);
};
goog.debug.LogRecord.prototype.time_;
goog.debug.LogRecord.prototype.level_;
goog.debug.LogRecord.prototype.msg_;
goog.debug.LogRecord.prototype.loggerName_;
goog.debug.LogRecord.prototype.sequenceNumber_ = 0;
goog.debug.LogRecord.prototype.exception_ = null;
goog.debug.LogRecord.prototype.exceptionText_ = null;
goog.define("goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS", true);
goog.debug.LogRecord.nextSequenceNumber_ = 0;
goog.debug.LogRecord.prototype.reset = function(level, msg, loggerName, opt_time, opt_sequenceNumber) {
  if (goog.debug.LogRecord.ENABLE_SEQUENCE_NUMBERS) {
    this.sequenceNumber_ = typeof opt_sequenceNumber == "number" ? opt_sequenceNumber : goog.debug.LogRecord.nextSequenceNumber_++;
  }
  this.time_ = opt_time || goog.now();
  this.level_ = level;
  this.msg_ = msg;
  this.loggerName_ = loggerName;
  delete this.exception_;
  delete this.exceptionText_;
};
goog.debug.LogRecord.prototype.getLoggerName = function() {
  return this.loggerName_;
};
goog.debug.LogRecord.prototype.getException = function() {
  return this.exception_;
};
goog.debug.LogRecord.prototype.setException = function(exception) {
  this.exception_ = exception;
};
goog.debug.LogRecord.prototype.getExceptionText = function() {
  return this.exceptionText_;
};
goog.debug.LogRecord.prototype.setExceptionText = function(text) {
  this.exceptionText_ = text;
};
goog.debug.LogRecord.prototype.setLoggerName = function(loggerName) {
  this.loggerName_ = loggerName;
};
goog.debug.LogRecord.prototype.getLevel = function() {
  return this.level_;
};
goog.debug.LogRecord.prototype.setLevel = function(level) {
  this.level_ = level;
};
goog.debug.LogRecord.prototype.getMessage = function() {
  return this.msg_;
};
goog.debug.LogRecord.prototype.setMessage = function(msg) {
  this.msg_ = msg;
};
goog.debug.LogRecord.prototype.getMillis = function() {
  return this.time_;
};
goog.debug.LogRecord.prototype.setMillis = function(time) {
  this.time_ = time;
};
goog.debug.LogRecord.prototype.getSequenceNumber = function() {
  return this.sequenceNumber_;
};
goog.provide("goog.debug.LogBuffer");
goog.require("goog.asserts");
goog.require("goog.debug.LogRecord");
goog.debug.LogBuffer = function() {
  goog.asserts.assert(goog.debug.LogBuffer.isBufferingEnabled(), "Cannot use goog.debug.LogBuffer without defining " + "goog.debug.LogBuffer.CAPACITY.");
  this.clear();
};
goog.debug.LogBuffer.getInstance = function() {
  if (!goog.debug.LogBuffer.instance_) {
    goog.debug.LogBuffer.instance_ = new goog.debug.LogBuffer;
  }
  return goog.debug.LogBuffer.instance_;
};
goog.define("goog.debug.LogBuffer.CAPACITY", 0);
goog.debug.LogBuffer.prototype.buffer_;
goog.debug.LogBuffer.prototype.curIndex_;
goog.debug.LogBuffer.prototype.isFull_;
goog.debug.LogBuffer.prototype.addRecord = function(level, msg, loggerName) {
  var curIndex = (this.curIndex_ + 1) % goog.debug.LogBuffer.CAPACITY;
  this.curIndex_ = curIndex;
  if (this.isFull_) {
    var ret = this.buffer_[curIndex];
    ret.reset(level, msg, loggerName);
    return ret;
  }
  this.isFull_ = curIndex == goog.debug.LogBuffer.CAPACITY - 1;
  return this.buffer_[curIndex] = new goog.debug.LogRecord(level, msg, loggerName);
};
goog.debug.LogBuffer.isBufferingEnabled = function() {
  return goog.debug.LogBuffer.CAPACITY > 0;
};
goog.debug.LogBuffer.prototype.clear = function() {
  this.buffer_ = new Array(goog.debug.LogBuffer.CAPACITY);
  this.curIndex_ = -1;
  this.isFull_ = false;
};
goog.debug.LogBuffer.prototype.forEachRecord = function(func) {
  var buffer = this.buffer_;
  if (!buffer[0]) {
    return;
  }
  var curIndex = this.curIndex_;
  var i = this.isFull_ ? curIndex : -1;
  do {
    i = (i + 1) % goog.debug.LogBuffer.CAPACITY;
    func((buffer[i]));
  } while (i != curIndex);
};
goog.provide("goog.debug.LogManager");
goog.provide("goog.debug.Loggable");
goog.provide("goog.debug.Logger");
goog.provide("goog.debug.Logger.Level");
goog.require("goog.array");
goog.require("goog.asserts");
goog.require("goog.debug");
goog.require("goog.debug.LogBuffer");
goog.require("goog.debug.LogRecord");
goog.debug.Loggable;
goog.debug.Logger = function(name) {
  this.name_ = name;
  this.parent_ = null;
  this.level_ = null;
  this.children_ = null;
  this.handlers_ = null;
};
goog.debug.Logger.ROOT_LOGGER_NAME = "";
goog.define("goog.debug.Logger.ENABLE_HIERARCHY", true);
if (!goog.debug.Logger.ENABLE_HIERARCHY) {
  goog.debug.Logger.rootHandlers_ = [];
  goog.debug.Logger.rootLevel_;
}
goog.debug.Logger.Level = function(name, value) {
  this.name = name;
  this.value = value;
};
goog.debug.Logger.Level.prototype.toString = function() {
  return this.name;
};
goog.debug.Logger.Level.OFF = new goog.debug.Logger.Level("OFF", Infinity);
goog.debug.Logger.Level.SHOUT = new goog.debug.Logger.Level("SHOUT", 1200);
goog.debug.Logger.Level.SEVERE = new goog.debug.Logger.Level("SEVERE", 1E3);
goog.debug.Logger.Level.WARNING = new goog.debug.Logger.Level("WARNING", 900);
goog.debug.Logger.Level.INFO = new goog.debug.Logger.Level("INFO", 800);
goog.debug.Logger.Level.CONFIG = new goog.debug.Logger.Level("CONFIG", 700);
goog.debug.Logger.Level.FINE = new goog.debug.Logger.Level("FINE", 500);
goog.debug.Logger.Level.FINER = new goog.debug.Logger.Level("FINER", 400);
goog.debug.Logger.Level.FINEST = new goog.debug.Logger.Level("FINEST", 300);
goog.debug.Logger.Level.ALL = new goog.debug.Logger.Level("ALL", 0);
goog.debug.Logger.Level.PREDEFINED_LEVELS = [goog.debug.Logger.Level.OFF, goog.debug.Logger.Level.SHOUT, goog.debug.Logger.Level.SEVERE, goog.debug.Logger.Level.WARNING, goog.debug.Logger.Level.INFO, goog.debug.Logger.Level.CONFIG, goog.debug.Logger.Level.FINE, goog.debug.Logger.Level.FINER, goog.debug.Logger.Level.FINEST, goog.debug.Logger.Level.ALL];
goog.debug.Logger.Level.predefinedLevelsCache_ = null;
goog.debug.Logger.Level.createPredefinedLevelsCache_ = function() {
  goog.debug.Logger.Level.predefinedLevelsCache_ = {};
  for (var i = 0, level;level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];i++) {
    goog.debug.Logger.Level.predefinedLevelsCache_[level.value] = level;
    goog.debug.Logger.Level.predefinedLevelsCache_[level.name] = level;
  }
};
goog.debug.Logger.Level.getPredefinedLevel = function(name) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  return goog.debug.Logger.Level.predefinedLevelsCache_[name] || null;
};
goog.debug.Logger.Level.getPredefinedLevelByValue = function(value) {
  if (!goog.debug.Logger.Level.predefinedLevelsCache_) {
    goog.debug.Logger.Level.createPredefinedLevelsCache_();
  }
  if (value in goog.debug.Logger.Level.predefinedLevelsCache_) {
    return goog.debug.Logger.Level.predefinedLevelsCache_[value];
  }
  for (var i = 0;i < goog.debug.Logger.Level.PREDEFINED_LEVELS.length;++i) {
    var level = goog.debug.Logger.Level.PREDEFINED_LEVELS[i];
    if (level.value <= value) {
      return level;
    }
  }
  return null;
};
goog.debug.Logger.getLogger = function(name) {
  return goog.debug.LogManager.getLogger(name);
};
goog.debug.Logger.logToProfilers = function(msg) {
  if (goog.global["console"]) {
    if (goog.global["console"]["timeStamp"]) {
      goog.global["console"]["timeStamp"](msg);
    } else {
      if (goog.global["console"]["markTimeline"]) {
        goog.global["console"]["markTimeline"](msg);
      }
    }
  }
  if (goog.global["msWriteProfilerMark"]) {
    goog.global["msWriteProfilerMark"](msg);
  }
};
goog.debug.Logger.prototype.getName = function() {
  return this.name_;
};
goog.debug.Logger.prototype.addHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      if (!this.handlers_) {
        this.handlers_ = [];
      }
      this.handlers_.push(handler);
    } else {
      goog.asserts.assert(!this.name_, "Cannot call addHandler on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootHandlers_.push(handler);
    }
  }
};
goog.debug.Logger.prototype.removeHandler = function(handler) {
  if (goog.debug.LOGGING_ENABLED) {
    var handlers = goog.debug.Logger.ENABLE_HIERARCHY ? this.handlers_ : goog.debug.Logger.rootHandlers_;
    return!!handlers && goog.array.remove(handlers, handler);
  } else {
    return false;
  }
};
goog.debug.Logger.prototype.getParent = function() {
  return this.parent_;
};
goog.debug.Logger.prototype.getChildren = function() {
  if (!this.children_) {
    this.children_ = {};
  }
  return this.children_;
};
goog.debug.Logger.prototype.setLevel = function(level) {
  if (goog.debug.LOGGING_ENABLED) {
    if (goog.debug.Logger.ENABLE_HIERARCHY) {
      this.level_ = level;
    } else {
      goog.asserts.assert(!this.name_, "Cannot call setLevel() on a non-root logger when " + "goog.debug.Logger.ENABLE_HIERARCHY is false.");
      goog.debug.Logger.rootLevel_ = level;
    }
  }
};
goog.debug.Logger.prototype.getLevel = function() {
  return goog.debug.LOGGING_ENABLED ? this.level_ : goog.debug.Logger.Level.OFF;
};
goog.debug.Logger.prototype.getEffectiveLevel = function() {
  if (!goog.debug.LOGGING_ENABLED) {
    return goog.debug.Logger.Level.OFF;
  }
  if (!goog.debug.Logger.ENABLE_HIERARCHY) {
    return goog.debug.Logger.rootLevel_;
  }
  if (this.level_) {
    return this.level_;
  }
  if (this.parent_) {
    return this.parent_.getEffectiveLevel();
  }
  goog.asserts.fail("Root logger has no level set.");
  return null;
};
goog.debug.Logger.prototype.isLoggable = function(level) {
  return goog.debug.LOGGING_ENABLED && level.value >= this.getEffectiveLevel().value;
};
goog.debug.Logger.prototype.log = function(level, msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(level)) {
    if (goog.isFunction(msg)) {
      msg = msg();
    }
    this.doLogRecord_(this.getLogRecord(level, msg, opt_exception, goog.debug.Logger.prototype.log));
  }
};
goog.debug.Logger.prototype.getLogRecord = function(level, msg, opt_exception, opt_fnStackContext) {
  if (goog.debug.LogBuffer.isBufferingEnabled()) {
    var logRecord = goog.debug.LogBuffer.getInstance().addRecord(level, msg, this.name_)
  } else {
    logRecord = new goog.debug.LogRecord(level, String(msg), this.name_);
  }
  if (opt_exception) {
    var context;
    if (goog.STRICT_MODE_COMPATIBLE) {
      context = opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord;
    } else {
      context = opt_fnStackContext || arguments.callee.caller;
    }
    logRecord.setException(opt_exception);
    logRecord.setExceptionText(goog.debug.exposeException(opt_exception, opt_fnStackContext || goog.debug.Logger.prototype.getLogRecord));
  }
  return logRecord;
};
goog.debug.Logger.prototype.shout = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SHOUT, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.severe = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.SEVERE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.warning = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.WARNING, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.info = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.INFO, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.config = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.CONFIG, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.fine = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINE, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finer = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINER, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.finest = function(msg, opt_exception) {
  if (goog.debug.LOGGING_ENABLED) {
    this.log(goog.debug.Logger.Level.FINEST, msg, opt_exception);
  }
};
goog.debug.Logger.prototype.logRecord = function(logRecord) {
  if (goog.debug.LOGGING_ENABLED && this.isLoggable(logRecord.getLevel())) {
    this.doLogRecord_(logRecord);
  }
};
goog.debug.Logger.prototype.doLogRecord_ = function(logRecord) {
  goog.debug.Logger.logToProfilers("log:" + logRecord.getMessage());
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var target = this;
    while (target) {
      target.callPublish_(logRecord);
      target = target.getParent();
    }
  } else {
    for (var i = 0, handler;handler = goog.debug.Logger.rootHandlers_[i++];) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.callPublish_ = function(logRecord) {
  if (this.handlers_) {
    for (var i = 0, handler;handler = this.handlers_[i];i++) {
      handler(logRecord);
    }
  }
};
goog.debug.Logger.prototype.setParent_ = function(parent) {
  this.parent_ = parent;
};
goog.debug.Logger.prototype.addChild_ = function(name, logger) {
  this.getChildren()[name] = logger;
};
goog.debug.LogManager = {};
goog.debug.LogManager.loggers_ = {};
goog.debug.LogManager.rootLogger_ = null;
goog.debug.LogManager.initialize = function() {
  if (!goog.debug.LogManager.rootLogger_) {
    goog.debug.LogManager.rootLogger_ = new goog.debug.Logger(goog.debug.Logger.ROOT_LOGGER_NAME);
    goog.debug.LogManager.loggers_[goog.debug.Logger.ROOT_LOGGER_NAME] = goog.debug.LogManager.rootLogger_;
    goog.debug.LogManager.rootLogger_.setLevel(goog.debug.Logger.Level.CONFIG);
  }
};
goog.debug.LogManager.getLoggers = function() {
  return goog.debug.LogManager.loggers_;
};
goog.debug.LogManager.getRoot = function() {
  goog.debug.LogManager.initialize();
  return(goog.debug.LogManager.rootLogger_);
};
goog.debug.LogManager.getLogger = function(name) {
  goog.debug.LogManager.initialize();
  var ret = goog.debug.LogManager.loggers_[name];
  return ret || goog.debug.LogManager.createLogger_(name);
};
goog.debug.LogManager.createFunctionForCatchErrors = function(opt_logger) {
  return function(info) {
    var logger = opt_logger || goog.debug.LogManager.getRoot();
    logger.severe("Error: " + info.message + " (" + info.fileName + " @ Line: " + info.line + ")");
  };
};
goog.debug.LogManager.createLogger_ = function(name) {
  var logger = new goog.debug.Logger(name);
  if (goog.debug.Logger.ENABLE_HIERARCHY) {
    var lastDotIndex = name.lastIndexOf(".");
    var parentName = name.substr(0, lastDotIndex);
    var leafName = name.substr(lastDotIndex + 1);
    var parentLogger = goog.debug.LogManager.getLogger(parentName);
    parentLogger.addChild_(leafName, logger);
    logger.setParent_(parentLogger);
  }
  goog.debug.LogManager.loggers_[name] = logger;
  return logger;
};
goog.provide("goog.log");
goog.provide("goog.log.Level");
goog.provide("goog.log.LogRecord");
goog.provide("goog.log.Logger");
goog.require("goog.debug");
goog.require("goog.debug.LogManager");
goog.require("goog.debug.LogRecord");
goog.require("goog.debug.Logger");
goog.define("goog.log.ENABLED", goog.debug.LOGGING_ENABLED);
goog.log.ROOT_LOGGER_NAME = goog.debug.Logger.ROOT_LOGGER_NAME;
goog.log.Logger = goog.debug.Logger;
goog.log.Level = goog.debug.Logger.Level;
goog.log.LogRecord = goog.debug.LogRecord;
goog.log.getLogger = function(name, opt_level) {
  if (goog.log.ENABLED) {
    var logger = goog.debug.LogManager.getLogger(name);
    if (opt_level && logger) {
      logger.setLevel(opt_level);
    }
    return logger;
  } else {
    return null;
  }
};
goog.log.addHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    logger.addHandler(handler);
  }
};
goog.log.removeHandler = function(logger, handler) {
  if (goog.log.ENABLED && logger) {
    return logger.removeHandler(handler);
  } else {
    return false;
  }
};
goog.log.log = function(logger, level, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.log(level, msg, opt_exception);
  }
};
goog.log.error = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.severe(msg, opt_exception);
  }
};
goog.log.warning = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.warning(msg, opt_exception);
  }
};
goog.log.info = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.info(msg, opt_exception);
  }
};
goog.log.fine = function(logger, msg, opt_exception) {
  if (goog.log.ENABLED && logger) {
    logger.fine(msg, opt_exception);
  }
};
goog.provide("goog.net.HttpStatus");
goog.net.HttpStatus = {CONTINUE:100, SWITCHING_PROTOCOLS:101, OK:200, CREATED:201, ACCEPTED:202, NON_AUTHORITATIVE_INFORMATION:203, NO_CONTENT:204, RESET_CONTENT:205, PARTIAL_CONTENT:206, MULTIPLE_CHOICES:300, MOVED_PERMANENTLY:301, FOUND:302, SEE_OTHER:303, NOT_MODIFIED:304, USE_PROXY:305, TEMPORARY_REDIRECT:307, BAD_REQUEST:400, UNAUTHORIZED:401, PAYMENT_REQUIRED:402, FORBIDDEN:403, NOT_FOUND:404, METHOD_NOT_ALLOWED:405, NOT_ACCEPTABLE:406, PROXY_AUTHENTICATION_REQUIRED:407, REQUEST_TIMEOUT:408, 
CONFLICT:409, GONE:410, LENGTH_REQUIRED:411, PRECONDITION_FAILED:412, REQUEST_ENTITY_TOO_LARGE:413, REQUEST_URI_TOO_LONG:414, UNSUPPORTED_MEDIA_TYPE:415, REQUEST_RANGE_NOT_SATISFIABLE:416, EXPECTATION_FAILED:417, INTERNAL_SERVER_ERROR:500, NOT_IMPLEMENTED:501, BAD_GATEWAY:502, SERVICE_UNAVAILABLE:503, GATEWAY_TIMEOUT:504, HTTP_VERSION_NOT_SUPPORTED:505, QUIRK_IE_NO_CONTENT:1223};
goog.net.HttpStatus.isSuccess = function(status) {
  switch(status) {
    case goog.net.HttpStatus.OK:
    ;
    case goog.net.HttpStatus.CREATED:
    ;
    case goog.net.HttpStatus.ACCEPTED:
    ;
    case goog.net.HttpStatus.NO_CONTENT:
    ;
    case goog.net.HttpStatus.PARTIAL_CONTENT:
    ;
    case goog.net.HttpStatus.NOT_MODIFIED:
    ;
    case goog.net.HttpStatus.QUIRK_IE_NO_CONTENT:
      return true;
    default:
      return false;
  }
};
goog.provide("goog.net.XhrLike");
goog.net.XhrLike = function() {
};
goog.net.XhrLike.OrNative;
goog.net.XhrLike.prototype.onreadystatechange;
goog.net.XhrLike.prototype.responseText;
goog.net.XhrLike.prototype.responseXML;
goog.net.XhrLike.prototype.readyState;
goog.net.XhrLike.prototype.status;
goog.net.XhrLike.prototype.statusText;
goog.net.XhrLike.prototype.open = function(method, url, opt_async, opt_user, opt_password) {
};
goog.net.XhrLike.prototype.send = function(opt_data) {
};
goog.net.XhrLike.prototype.abort = function() {
};
goog.net.XhrLike.prototype.setRequestHeader = function(header, value) {
};
goog.net.XhrLike.prototype.getResponseHeader = function(header) {
};
goog.net.XhrLike.prototype.getAllResponseHeaders = function() {
};
goog.provide("goog.net.XmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.net.XmlHttpFactory = function() {
};
goog.net.XmlHttpFactory.prototype.cachedOptions_ = null;
goog.net.XmlHttpFactory.prototype.createInstance = goog.abstractMethod;
goog.net.XmlHttpFactory.prototype.getOptions = function() {
  return this.cachedOptions_ || (this.cachedOptions_ = this.internalGetOptions());
};
goog.net.XmlHttpFactory.prototype.internalGetOptions = goog.abstractMethod;
goog.provide("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XhrLike");
goog.require("goog.net.XmlHttpFactory");
goog.net.WrapperXmlHttpFactory = function(xhrFactory, optionsFactory) {
  goog.net.XmlHttpFactory.call(this);
  this.xhrFactory_ = xhrFactory;
  this.optionsFactory_ = optionsFactory;
};
goog.inherits(goog.net.WrapperXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.WrapperXmlHttpFactory.prototype.createInstance = function() {
  return this.xhrFactory_();
};
goog.net.WrapperXmlHttpFactory.prototype.getOptions = function() {
  return this.optionsFactory_();
};
goog.provide("goog.net.DefaultXmlHttpFactory");
goog.provide("goog.net.XmlHttp");
goog.provide("goog.net.XmlHttp.OptionType");
goog.provide("goog.net.XmlHttp.ReadyState");
goog.provide("goog.net.XmlHttpDefines");
goog.require("goog.asserts");
goog.require("goog.net.WrapperXmlHttpFactory");
goog.require("goog.net.XmlHttpFactory");
goog.net.XmlHttp = function() {
  return goog.net.XmlHttp.factory_.createInstance();
};
goog.define("goog.net.XmlHttp.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttpDefines = {};
goog.define("goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR", false);
goog.net.XmlHttp.getOptions = function() {
  return goog.net.XmlHttp.factory_.getOptions();
};
goog.net.XmlHttp.OptionType = {USE_NULL_FUNCTION:0, LOCAL_REQUEST_ERROR:1};
goog.net.XmlHttp.ReadyState = {UNINITIALIZED:0, LOADING:1, LOADED:2, INTERACTIVE:3, COMPLETE:4};
goog.net.XmlHttp.factory_;
goog.net.XmlHttp.setFactory = function(factory, optionsFactory) {
  goog.net.XmlHttp.setGlobalFactory(new goog.net.WrapperXmlHttpFactory(goog.asserts.assert(factory), goog.asserts.assert(optionsFactory)));
};
goog.net.XmlHttp.setGlobalFactory = function(factory) {
  goog.net.XmlHttp.factory_ = factory;
};
goog.net.DefaultXmlHttpFactory = function() {
  goog.net.XmlHttpFactory.call(this);
};
goog.inherits(goog.net.DefaultXmlHttpFactory, goog.net.XmlHttpFactory);
goog.net.DefaultXmlHttpFactory.prototype.createInstance = function() {
  var progId = this.getProgId_();
  if (progId) {
    return new ActiveXObject(progId);
  } else {
    return new XMLHttpRequest;
  }
};
goog.net.DefaultXmlHttpFactory.prototype.internalGetOptions = function() {
  var progId = this.getProgId_();
  var options = {};
  if (progId) {
    options[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] = true;
    options[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] = true;
  }
  return options;
};
goog.net.DefaultXmlHttpFactory.prototype.ieProgId_;
goog.net.DefaultXmlHttpFactory.prototype.getProgId_ = function() {
  if (goog.net.XmlHttp.ASSUME_NATIVE_XHR || goog.net.XmlHttpDefines.ASSUME_NATIVE_XHR) {
    return "";
  }
  if (!this.ieProgId_ && typeof XMLHttpRequest == "undefined" && typeof ActiveXObject != "undefined") {
    var ACTIVE_X_IDENTS = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"];
    for (var i = 0;i < ACTIVE_X_IDENTS.length;i++) {
      var candidate = ACTIVE_X_IDENTS[i];
      try {
        new ActiveXObject(candidate);
        this.ieProgId_ = candidate;
        return candidate;
      } catch (e) {
      }
    }
    throw Error("Could not create ActiveXObject. ActiveX might be disabled," + " or MSXML might not be installed");
  }
  return(this.ieProgId_);
};
goog.net.XmlHttp.setGlobalFactory(new goog.net.DefaultXmlHttpFactory);
goog.provide("goog.uri.utils");
goog.provide("goog.uri.utils.ComponentIndex");
goog.provide("goog.uri.utils.QueryArray");
goog.provide("goog.uri.utils.QueryValue");
goog.provide("goog.uri.utils.StandardQueryParam");
goog.require("goog.asserts");
goog.require("goog.string");
goog.require("goog.userAgent");
goog.uri.utils.CharCode_ = {AMPERSAND:38, EQUAL:61, HASH:35, QUESTION:63};
goog.uri.utils.buildFromEncodedParts = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_queryData, opt_fragment) {
  var out = "";
  if (opt_scheme) {
    out += opt_scheme + ":";
  }
  if (opt_domain) {
    out += "//";
    if (opt_userInfo) {
      out += opt_userInfo + "@";
    }
    out += opt_domain;
    if (opt_port) {
      out += ":" + opt_port;
    }
  }
  if (opt_path) {
    out += opt_path;
  }
  if (opt_queryData) {
    out += "?" + opt_queryData;
  }
  if (opt_fragment) {
    out += "#" + opt_fragment;
  }
  return out;
};
goog.uri.utils.splitRe_ = new RegExp("^" + "(?:" + "([^:/?#.]+)" + ":)?" + "(?://" + "(?:([^/?#]*)@)?" + "([^/#?]*?)" + "(?::([0-9]+))?" + "(?\x3d[/#?]|$)" + ")?" + "([^?#]+)?" + "(?:\\?([^#]*))?" + "(?:#(.*))?" + "$");
goog.uri.utils.ComponentIndex = {SCHEME:1, USER_INFO:2, DOMAIN:3, PORT:4, PATH:5, QUERY_DATA:6, FRAGMENT:7};
goog.uri.utils.split = function(uri) {
  goog.uri.utils.phishingProtection_();
  return(uri.match(goog.uri.utils.splitRe_));
};
goog.uri.utils.needsPhishingProtection_ = goog.userAgent.WEBKIT;
goog.uri.utils.phishingProtection_ = function() {
  if (goog.uri.utils.needsPhishingProtection_) {
    goog.uri.utils.needsPhishingProtection_ = false;
    var location = goog.global["location"];
    if (location) {
      var href = location["href"];
      if (href) {
        var domain = goog.uri.utils.getDomain(href);
        if (domain && domain != location["hostname"]) {
          goog.uri.utils.needsPhishingProtection_ = true;
          throw Error();
        }
      }
    }
  }
};
goog.uri.utils.decodeIfPossible_ = function(uri) {
  return uri && decodeURIComponent(uri);
};
goog.uri.utils.getComponentByIndex_ = function(componentIndex, uri) {
  return goog.uri.utils.split(uri)[componentIndex] || null;
};
goog.uri.utils.getScheme = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.SCHEME, uri);
};
goog.uri.utils.getEffectiveScheme = function(uri) {
  var scheme = goog.uri.utils.getScheme(uri);
  if (!scheme && self.location) {
    var protocol = self.location.protocol;
    scheme = protocol.substr(0, protocol.length - 1);
  }
  return scheme ? scheme.toLowerCase() : "";
};
goog.uri.utils.getUserInfoEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.USER_INFO, uri);
};
goog.uri.utils.getUserInfo = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getUserInfoEncoded(uri));
};
goog.uri.utils.getDomainEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.DOMAIN, uri);
};
goog.uri.utils.getDomain = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getDomainEncoded(uri));
};
goog.uri.utils.getPort = function(uri) {
  return Number(goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PORT, uri)) || null;
};
goog.uri.utils.getPathEncoded = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.PATH, uri);
};
goog.uri.utils.getPath = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getPathEncoded(uri));
};
goog.uri.utils.getQueryData = function(uri) {
  return goog.uri.utils.getComponentByIndex_(goog.uri.utils.ComponentIndex.QUERY_DATA, uri);
};
goog.uri.utils.getFragmentEncoded = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? null : uri.substr(hashIndex + 1);
};
goog.uri.utils.setFragmentEncoded = function(uri, fragment) {
  return goog.uri.utils.removeFragment(uri) + (fragment ? "#" + fragment : "");
};
goog.uri.utils.getFragment = function(uri) {
  return goog.uri.utils.decodeIfPossible_(goog.uri.utils.getFragmentEncoded(uri));
};
goog.uri.utils.getHost = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(pieces[goog.uri.utils.ComponentIndex.SCHEME], pieces[goog.uri.utils.ComponentIndex.USER_INFO], pieces[goog.uri.utils.ComponentIndex.DOMAIN], pieces[goog.uri.utils.ComponentIndex.PORT]);
};
goog.uri.utils.getPathAndAfter = function(uri) {
  var pieces = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(null, null, null, null, pieces[goog.uri.utils.ComponentIndex.PATH], pieces[goog.uri.utils.ComponentIndex.QUERY_DATA], pieces[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.removeFragment = function(uri) {
  var hashIndex = uri.indexOf("#");
  return hashIndex < 0 ? uri : uri.substr(0, hashIndex);
};
goog.uri.utils.haveSameDomain = function(uri1, uri2) {
  var pieces1 = goog.uri.utils.split(uri1);
  var pieces2 = goog.uri.utils.split(uri2);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.SCHEME] == pieces2[goog.uri.utils.ComponentIndex.SCHEME] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.uri.utils.assertNoFragmentsOrQueries_ = function(uri) {
  if (goog.DEBUG && (uri.indexOf("#") >= 0 || uri.indexOf("?") >= 0)) {
    throw Error("goog.uri.utils: Fragment or query identifiers are not " + "supported: [" + uri + "]");
  }
};
goog.uri.utils.QueryValue;
goog.uri.utils.QueryArray;
goog.uri.utils.appendQueryData_ = function(buffer) {
  if (buffer[1]) {
    var baseUri = (buffer[0]);
    var hashIndex = baseUri.indexOf("#");
    if (hashIndex >= 0) {
      buffer.push(baseUri.substr(hashIndex));
      buffer[0] = baseUri = baseUri.substr(0, hashIndex);
    }
    var questionIndex = baseUri.indexOf("?");
    if (questionIndex < 0) {
      buffer[1] = "?";
    } else {
      if (questionIndex == baseUri.length - 1) {
        buffer[1] = undefined;
      }
    }
  }
  return buffer.join("");
};
goog.uri.utils.appendKeyValuePairs_ = function(key, value, pairs) {
  if (goog.isArray(value)) {
    goog.asserts.assertArray(value);
    for (var j = 0;j < value.length;j++) {
      goog.uri.utils.appendKeyValuePairs_(key, String(value[j]), pairs);
    }
  } else {
    if (value != null) {
      pairs.push("\x26", key, value === "" ? "" : "\x3d", goog.string.urlEncode(value));
    }
  }
};
goog.uri.utils.buildQueryDataBuffer_ = function(buffer, keysAndValues, opt_startIndex) {
  goog.asserts.assert(Math.max(keysAndValues.length - (opt_startIndex || 0), 0) % 2 == 0, "goog.uri.utils: Key/value lists must be even in length.");
  for (var i = opt_startIndex || 0;i < keysAndValues.length;i += 2) {
    goog.uri.utils.appendKeyValuePairs_(keysAndValues[i], keysAndValues[i + 1], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryData = function(keysAndValues, opt_startIndex) {
  var buffer = goog.uri.utils.buildQueryDataBuffer_([], keysAndValues, opt_startIndex);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.buildQueryDataBufferFromMap_ = function(buffer, map) {
  for (var key in map) {
    goog.uri.utils.appendKeyValuePairs_(key, map[key], buffer);
  }
  return buffer;
};
goog.uri.utils.buildQueryDataFromMap = function(map) {
  var buffer = goog.uri.utils.buildQueryDataBufferFromMap_([], map);
  buffer[0] = "";
  return buffer.join("");
};
goog.uri.utils.appendParams = function(uri, var_args) {
  return goog.uri.utils.appendQueryData_(arguments.length == 2 ? goog.uri.utils.buildQueryDataBuffer_([uri], arguments[1], 0) : goog.uri.utils.buildQueryDataBuffer_([uri], arguments, 1));
};
goog.uri.utils.appendParamsFromMap = function(uri, map) {
  return goog.uri.utils.appendQueryData_(goog.uri.utils.buildQueryDataBufferFromMap_([uri], map));
};
goog.uri.utils.appendParam = function(uri, key, opt_value) {
  var paramArr = [uri, "\x26", key];
  if (goog.isDefAndNotNull(opt_value)) {
    paramArr.push("\x3d", goog.string.urlEncode(opt_value));
  }
  return goog.uri.utils.appendQueryData_(paramArr);
};
goog.uri.utils.findParam_ = function(uri, startIndex, keyEncoded, hashOrEndIndex) {
  var index = startIndex;
  var keyLength = keyEncoded.length;
  while ((index = uri.indexOf(keyEncoded, index)) >= 0 && index < hashOrEndIndex) {
    var precedingChar = uri.charCodeAt(index - 1);
    if (precedingChar == goog.uri.utils.CharCode_.AMPERSAND || precedingChar == goog.uri.utils.CharCode_.QUESTION) {
      var followingChar = uri.charCodeAt(index + keyLength);
      if (!followingChar || followingChar == goog.uri.utils.CharCode_.EQUAL || followingChar == goog.uri.utils.CharCode_.AMPERSAND || followingChar == goog.uri.utils.CharCode_.HASH) {
        return index;
      }
    }
    index += keyLength + 1;
  }
  return-1;
};
goog.uri.utils.hashOrEndRe_ = /#|$/;
goog.uri.utils.hasParam = function(uri, keyEncoded) {
  return goog.uri.utils.findParam_(uri, 0, keyEncoded, uri.search(goog.uri.utils.hashOrEndRe_)) >= 0;
};
goog.uri.utils.getParamValue = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var foundIndex = goog.uri.utils.findParam_(uri, 0, keyEncoded, hashOrEndIndex);
  if (foundIndex < 0) {
    return null;
  } else {
    var endPosition = uri.indexOf("\x26", foundIndex);
    if (endPosition < 0 || endPosition > hashOrEndIndex) {
      endPosition = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    return goog.string.urlDecode(uri.substr(foundIndex, endPosition - foundIndex));
  }
};
goog.uri.utils.getParamValues = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var result = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    position = uri.indexOf("\x26", foundIndex);
    if (position < 0 || position > hashOrEndIndex) {
      position = hashOrEndIndex;
    }
    foundIndex += keyEncoded.length + 1;
    result.push(goog.string.urlDecode(uri.substr(foundIndex, position - foundIndex)));
  }
  return result;
};
goog.uri.utils.trailingQueryPunctuationRe_ = /[?&]($|#)/;
goog.uri.utils.removeParam = function(uri, keyEncoded) {
  var hashOrEndIndex = uri.search(goog.uri.utils.hashOrEndRe_);
  var position = 0;
  var foundIndex;
  var buffer = [];
  while ((foundIndex = goog.uri.utils.findParam_(uri, position, keyEncoded, hashOrEndIndex)) >= 0) {
    buffer.push(uri.substring(position, foundIndex));
    position = Math.min(uri.indexOf("\x26", foundIndex) + 1 || hashOrEndIndex, hashOrEndIndex);
  }
  buffer.push(uri.substr(position));
  return buffer.join("").replace(goog.uri.utils.trailingQueryPunctuationRe_, "$1");
};
goog.uri.utils.setParam = function(uri, keyEncoded, value) {
  return goog.uri.utils.appendParam(goog.uri.utils.removeParam(uri, keyEncoded), keyEncoded, value);
};
goog.uri.utils.appendPath = function(baseUri, path) {
  goog.uri.utils.assertNoFragmentsOrQueries_(baseUri);
  if (goog.string.endsWith(baseUri, "/")) {
    baseUri = baseUri.substr(0, baseUri.length - 1);
  }
  if (goog.string.startsWith(path, "/")) {
    path = path.substr(1);
  }
  return goog.string.buildString(baseUri, "/", path);
};
goog.uri.utils.setPath = function(uri, path) {
  if (!goog.string.startsWith(path, "/")) {
    path = "/" + path;
  }
  var parts = goog.uri.utils.split(uri);
  return goog.uri.utils.buildFromEncodedParts(parts[goog.uri.utils.ComponentIndex.SCHEME], parts[goog.uri.utils.ComponentIndex.USER_INFO], parts[goog.uri.utils.ComponentIndex.DOMAIN], parts[goog.uri.utils.ComponentIndex.PORT], path, parts[goog.uri.utils.ComponentIndex.QUERY_DATA], parts[goog.uri.utils.ComponentIndex.FRAGMENT]);
};
goog.uri.utils.StandardQueryParam = {RANDOM:"zx"};
goog.uri.utils.makeUnique = function(uri) {
  return goog.uri.utils.setParam(uri, goog.uri.utils.StandardQueryParam.RANDOM, goog.string.getRandomString());
};
goog.provide("goog.net.XhrIo");
goog.provide("goog.net.XhrIo.ResponseType");
goog.require("goog.Timer");
goog.require("goog.array");
goog.require("goog.debug.entryPointRegistry");
goog.require("goog.events.EventTarget");
goog.require("goog.json");
goog.require("goog.log");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.HttpStatus");
goog.require("goog.net.XmlHttp");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.userAgent");
goog.forwardDeclare("goog.Uri");
goog.net.XhrIo = function(opt_xmlHttpFactory) {
  goog.net.XhrIo.base(this, "constructor");
  this.headers = new goog.structs.Map;
  this.xmlHttpFactory_ = opt_xmlHttpFactory || null;
  this.active_ = false;
  this.xhr_ = null;
  this.xhrOptions_ = null;
  this.lastUri_ = "";
  this.lastMethod_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastError_ = "";
  this.errorDispatched_ = false;
  this.inSend_ = false;
  this.inOpen_ = false;
  this.inAbort_ = false;
  this.timeoutInterval_ = 0;
  this.timeoutId_ = null;
  this.responseType_ = goog.net.XhrIo.ResponseType.DEFAULT;
  this.withCredentials_ = false;
  this.useXhr2Timeout_ = false;
};
goog.inherits(goog.net.XhrIo, goog.events.EventTarget);
goog.net.XhrIo.ResponseType = {DEFAULT:"", TEXT:"text", DOCUMENT:"document", BLOB:"blob", ARRAY_BUFFER:"arraybuffer"};
goog.net.XhrIo.prototype.logger_ = goog.log.getLogger("goog.net.XhrIo");
goog.net.XhrIo.CONTENT_TYPE_HEADER = "Content-Type";
goog.net.XhrIo.HTTP_SCHEME_PATTERN = /^https?$/i;
goog.net.XhrIo.METHODS_WITH_FORM_DATA = ["POST", "PUT"];
goog.net.XhrIo.FORM_CONTENT_TYPE = "application/x-www-form-urlencoded;charset\x3dutf-8";
goog.net.XhrIo.XHR2_TIMEOUT_ = "timeout";
goog.net.XhrIo.XHR2_ON_TIMEOUT_ = "ontimeout";
goog.net.XhrIo.sendInstances_ = [];
goog.net.XhrIo.send = function(url, opt_callback, opt_method, opt_content, opt_headers, opt_timeoutInterval, opt_withCredentials) {
  var x = new goog.net.XhrIo;
  goog.net.XhrIo.sendInstances_.push(x);
  if (opt_callback) {
    x.listen(goog.net.EventType.COMPLETE, opt_callback);
  }
  x.listenOnce(goog.net.EventType.READY, x.cleanupSend_);
  if (opt_timeoutInterval) {
    x.setTimeoutInterval(opt_timeoutInterval);
  }
  if (opt_withCredentials) {
    x.setWithCredentials(opt_withCredentials);
  }
  x.send(url, opt_method, opt_content, opt_headers);
  return x;
};
goog.net.XhrIo.cleanup = function() {
  var instances = goog.net.XhrIo.sendInstances_;
  while (instances.length) {
    instances.pop().dispose();
  }
};
goog.net.XhrIo.protectEntryPoints = function(errorHandler) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = errorHandler.protectEntryPoint(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
};
goog.net.XhrIo.prototype.cleanupSend_ = function() {
  this.dispose();
  goog.array.remove(goog.net.XhrIo.sendInstances_, this);
};
goog.net.XhrIo.prototype.getTimeoutInterval = function() {
  return this.timeoutInterval_;
};
goog.net.XhrIo.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrIo.prototype.setResponseType = function(type) {
  this.responseType_ = type;
};
goog.net.XhrIo.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.net.XhrIo.prototype.setWithCredentials = function(withCredentials) {
  this.withCredentials_ = withCredentials;
};
goog.net.XhrIo.prototype.getWithCredentials = function() {
  return this.withCredentials_;
};
goog.net.XhrIo.prototype.send = function(url, opt_method, opt_content, opt_headers) {
  if (this.xhr_) {
    throw Error("[goog.net.XhrIo] Object is active with another request\x3d" + this.lastUri_ + "; newUri\x3d" + url);
  }
  var method = opt_method ? opt_method.toUpperCase() : "GET";
  this.lastUri_ = url;
  this.lastError_ = "";
  this.lastErrorCode_ = goog.net.ErrorCode.NO_ERROR;
  this.lastMethod_ = method;
  this.errorDispatched_ = false;
  this.active_ = true;
  this.xhr_ = this.createXhr();
  this.xhrOptions_ = this.xmlHttpFactory_ ? this.xmlHttpFactory_.getOptions() : goog.net.XmlHttp.getOptions();
  this.xhr_.onreadystatechange = goog.bind(this.onReadyStateChange_, this);
  try {
    goog.log.fine(this.logger_, this.formatMsg_("Opening Xhr"));
    this.inOpen_ = true;
    this.xhr_.open(method, String(url), true);
    this.inOpen_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Error opening Xhr: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
    return;
  }
  var content = opt_content || "";
  var headers = this.headers.clone();
  if (opt_headers) {
    goog.structs.forEach(opt_headers, function(value, key) {
      headers.set(key, value);
    });
  }
  var contentTypeKey = goog.array.find(headers.getKeys(), goog.net.XhrIo.isContentTypeHeader_);
  var contentIsFormData = goog.global["FormData"] && content instanceof goog.global["FormData"];
  if (goog.array.contains(goog.net.XhrIo.METHODS_WITH_FORM_DATA, method) && !contentTypeKey && !contentIsFormData) {
    headers.set(goog.net.XhrIo.CONTENT_TYPE_HEADER, goog.net.XhrIo.FORM_CONTENT_TYPE);
  }
  headers.forEach(function(value, key) {
    this.xhr_.setRequestHeader(key, value);
  }, this);
  if (this.responseType_) {
    this.xhr_.responseType = this.responseType_;
  }
  if (goog.object.containsKey(this.xhr_, "withCredentials")) {
    this.xhr_.withCredentials = this.withCredentials_;
  }
  try {
    this.cleanUpTimeoutTimer_();
    if (this.timeoutInterval_ > 0) {
      this.useXhr2Timeout_ = goog.net.XhrIo.shouldUseXhr2Timeout_(this.xhr_);
      goog.log.fine(this.logger_, this.formatMsg_("Will abort after " + this.timeoutInterval_ + "ms if incomplete, xhr2 " + this.useXhr2Timeout_));
      if (this.useXhr2Timeout_) {
        this.xhr_[goog.net.XhrIo.XHR2_TIMEOUT_] = this.timeoutInterval_;
        this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = goog.bind(this.timeout_, this);
      } else {
        this.timeoutId_ = goog.Timer.callOnce(this.timeout_, this.timeoutInterval_, this);
      }
    }
    goog.log.fine(this.logger_, this.formatMsg_("Sending request"));
    this.inSend_ = true;
    this.xhr_.send(content);
    this.inSend_ = false;
  } catch (err) {
    goog.log.fine(this.logger_, this.formatMsg_("Send error: " + err.message));
    this.error_(goog.net.ErrorCode.EXCEPTION, err);
  }
};
goog.net.XhrIo.shouldUseXhr2Timeout_ = function(xhr) {
  return goog.userAgent.IE && goog.userAgent.isVersionOrHigher(9) && goog.isNumber(xhr[goog.net.XhrIo.XHR2_TIMEOUT_]) && goog.isDef(xhr[goog.net.XhrIo.XHR2_ON_TIMEOUT_]);
};
goog.net.XhrIo.isContentTypeHeader_ = function(header) {
  return goog.string.caseInsensitiveEquals(goog.net.XhrIo.CONTENT_TYPE_HEADER, header);
};
goog.net.XhrIo.prototype.createXhr = function() {
  return this.xmlHttpFactory_ ? this.xmlHttpFactory_.createInstance() : goog.net.XmlHttp();
};
goog.net.XhrIo.prototype.timeout_ = function() {
  if (typeof goog == "undefined") {
  } else {
    if (this.xhr_) {
      this.lastError_ = "Timed out after " + this.timeoutInterval_ + "ms, aborting";
      this.lastErrorCode_ = goog.net.ErrorCode.TIMEOUT;
      goog.log.fine(this.logger_, this.formatMsg_(this.lastError_));
      this.dispatchEvent(goog.net.EventType.TIMEOUT);
      this.abort(goog.net.ErrorCode.TIMEOUT);
    }
  }
};
goog.net.XhrIo.prototype.error_ = function(errorCode, err) {
  this.active_ = false;
  if (this.xhr_) {
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
  }
  this.lastError_ = err;
  this.lastErrorCode_ = errorCode;
  this.dispatchErrors_();
  this.cleanUpXhr_();
};
goog.net.XhrIo.prototype.dispatchErrors_ = function() {
  if (!this.errorDispatched_) {
    this.errorDispatched_ = true;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ERROR);
  }
};
goog.net.XhrIo.prototype.abort = function(opt_failureCode) {
  if (this.xhr_ && this.active_) {
    goog.log.fine(this.logger_, this.formatMsg_("Aborting"));
    this.active_ = false;
    this.inAbort_ = true;
    this.xhr_.abort();
    this.inAbort_ = false;
    this.lastErrorCode_ = opt_failureCode || goog.net.ErrorCode.ABORT;
    this.dispatchEvent(goog.net.EventType.COMPLETE);
    this.dispatchEvent(goog.net.EventType.ABORT);
    this.cleanUpXhr_();
  }
};
goog.net.XhrIo.prototype.disposeInternal = function() {
  if (this.xhr_) {
    if (this.active_) {
      this.active_ = false;
      this.inAbort_ = true;
      this.xhr_.abort();
      this.inAbort_ = false;
    }
    this.cleanUpXhr_(true);
  }
  goog.net.XhrIo.base(this, "disposeInternal");
};
goog.net.XhrIo.prototype.onReadyStateChange_ = function() {
  if (this.isDisposed()) {
    return;
  }
  if (!this.inOpen_ && !this.inSend_ && !this.inAbort_) {
    this.onReadyStateChangeEntryPoint_();
  } else {
    this.onReadyStateChangeHelper_();
  }
};
goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = function() {
  this.onReadyStateChangeHelper_();
};
goog.net.XhrIo.prototype.onReadyStateChangeHelper_ = function() {
  if (!this.active_) {
    return;
  }
  if (typeof goog == "undefined") {
  } else {
    if (this.xhrOptions_[goog.net.XmlHttp.OptionType.LOCAL_REQUEST_ERROR] && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE && this.getStatus() == 2) {
      goog.log.fine(this.logger_, this.formatMsg_("Local request error detected and ignored"));
    } else {
      if (this.inSend_ && this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE) {
        goog.Timer.callOnce(this.onReadyStateChange_, 0, this);
        return;
      }
      this.dispatchEvent(goog.net.EventType.READY_STATE_CHANGE);
      if (this.isComplete()) {
        goog.log.fine(this.logger_, this.formatMsg_("Request complete"));
        this.active_ = false;
        try {
          if (this.isSuccess()) {
            this.dispatchEvent(goog.net.EventType.COMPLETE);
            this.dispatchEvent(goog.net.EventType.SUCCESS);
          } else {
            this.lastErrorCode_ = goog.net.ErrorCode.HTTP_ERROR;
            this.lastError_ = this.getStatusText() + " [" + this.getStatus() + "]";
            this.dispatchErrors_();
          }
        } finally {
          this.cleanUpXhr_();
        }
      }
    }
  }
};
goog.net.XhrIo.prototype.cleanUpXhr_ = function(opt_fromDispose) {
  if (this.xhr_) {
    this.cleanUpTimeoutTimer_();
    var xhr = this.xhr_;
    var clearedOnReadyStateChange = this.xhrOptions_[goog.net.XmlHttp.OptionType.USE_NULL_FUNCTION] ? goog.nullFunction : null;
    this.xhr_ = null;
    this.xhrOptions_ = null;
    if (!opt_fromDispose) {
      this.dispatchEvent(goog.net.EventType.READY);
    }
    try {
      xhr.onreadystatechange = clearedOnReadyStateChange;
    } catch (e) {
      goog.log.error(this.logger_, "Problem encountered resetting onreadystatechange: " + e.message);
    }
  }
};
goog.net.XhrIo.prototype.cleanUpTimeoutTimer_ = function() {
  if (this.xhr_ && this.useXhr2Timeout_) {
    this.xhr_[goog.net.XhrIo.XHR2_ON_TIMEOUT_] = null;
  }
  if (goog.isNumber(this.timeoutId_)) {
    goog.Timer.clear(this.timeoutId_);
    this.timeoutId_ = null;
  }
};
goog.net.XhrIo.prototype.isActive = function() {
  return!!this.xhr_;
};
goog.net.XhrIo.prototype.isComplete = function() {
  return this.getReadyState() == goog.net.XmlHttp.ReadyState.COMPLETE;
};
goog.net.XhrIo.prototype.isSuccess = function() {
  var status = this.getStatus();
  return goog.net.HttpStatus.isSuccess(status) || status === 0 && !this.isLastUriEffectiveSchemeHttp_();
};
goog.net.XhrIo.prototype.isLastUriEffectiveSchemeHttp_ = function() {
  var scheme = goog.uri.utils.getEffectiveScheme(String(this.lastUri_));
  return goog.net.XhrIo.HTTP_SCHEME_PATTERN.test(scheme);
};
goog.net.XhrIo.prototype.getReadyState = function() {
  return this.xhr_ ? (this.xhr_.readyState) : goog.net.XmlHttp.ReadyState.UNINITIALIZED;
};
goog.net.XhrIo.prototype.getStatus = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.status : -1;
  } catch (e) {
    return-1;
  }
};
goog.net.XhrIo.prototype.getStatusText = function() {
  try {
    return this.getReadyState() > goog.net.XmlHttp.ReadyState.LOADED ? this.xhr_.statusText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get status: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getLastUri = function() {
  return String(this.lastUri_);
};
goog.net.XhrIo.prototype.getResponseText = function() {
  try {
    return this.xhr_ ? this.xhr_.responseText : "";
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseText: " + e.message);
    return "";
  }
};
goog.net.XhrIo.prototype.getResponseBody = function() {
  try {
    if (this.xhr_ && "responseBody" in this.xhr_) {
      return this.xhr_["responseBody"];
    }
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseBody: " + e.message);
  }
  return null;
};
goog.net.XhrIo.prototype.getResponseXml = function() {
  try {
    return this.xhr_ ? this.xhr_.responseXML : null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get responseXML: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseJson = function(opt_xssiPrefix) {
  if (!this.xhr_) {
    return undefined;
  }
  var responseText = this.xhr_.responseText;
  if (opt_xssiPrefix && responseText.indexOf(opt_xssiPrefix) == 0) {
    responseText = responseText.substring(opt_xssiPrefix.length);
  }
  return goog.json.parse(responseText);
};
goog.net.XhrIo.prototype.getResponse = function() {
  try {
    if (!this.xhr_) {
      return null;
    }
    if ("response" in this.xhr_) {
      return this.xhr_.response;
    }
    switch(this.responseType_) {
      case goog.net.XhrIo.ResponseType.DEFAULT:
      ;
      case goog.net.XhrIo.ResponseType.TEXT:
        return this.xhr_.responseText;
      case goog.net.XhrIo.ResponseType.ARRAY_BUFFER:
        if ("mozResponseArrayBuffer" in this.xhr_) {
          return this.xhr_.mozResponseArrayBuffer;
        }
      ;
    }
    goog.log.error(this.logger_, "Response type " + this.responseType_ + " is not " + "supported on this browser");
    return null;
  } catch (e) {
    goog.log.fine(this.logger_, "Can not get response: " + e.message);
    return null;
  }
};
goog.net.XhrIo.prototype.getResponseHeader = function(key) {
  return this.xhr_ && this.isComplete() ? this.xhr_.getResponseHeader(key) : undefined;
};
goog.net.XhrIo.prototype.getAllResponseHeaders = function() {
  return this.xhr_ && this.isComplete() ? this.xhr_.getAllResponseHeaders() : "";
};
goog.net.XhrIo.prototype.getResponseHeaders = function() {
  var headersObject = {};
  var headersArray = this.getAllResponseHeaders().split("\r\n");
  for (var i = 0;i < headersArray.length;i++) {
    if (goog.string.isEmpty(headersArray[i])) {
      continue;
    }
    var keyValue = goog.string.splitLimit(headersArray[i], ": ", 2);
    if (headersObject[keyValue[0]]) {
      headersObject[keyValue[0]] += ", " + keyValue[1];
    } else {
      headersObject[keyValue[0]] = keyValue[1];
    }
  }
  return headersObject;
};
goog.net.XhrIo.prototype.getLastErrorCode = function() {
  return this.lastErrorCode_;
};
goog.net.XhrIo.prototype.getLastError = function() {
  return goog.isString(this.lastError_) ? this.lastError_ : String(this.lastError_);
};
goog.net.XhrIo.prototype.formatMsg_ = function(msg) {
  return msg + " [" + this.lastMethod_ + " " + this.lastUri_ + " " + this.getStatus() + "]";
};
goog.debug.entryPointRegistry.register(function(transformer) {
  goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_ = transformer(goog.net.XhrIo.prototype.onReadyStateChangeEntryPoint_);
});
goog.provide("goog.structs.Queue");
goog.require("goog.array");
goog.structs.Queue = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.maybeFlip_ = function() {
  if (goog.array.isEmpty(this.front_)) {
    this.front_ = this.back_;
    this.front_.reverse();
    this.back_ = [];
  }
};
goog.structs.Queue.prototype.enqueue = function(element) {
  this.back_.push(element);
};
goog.structs.Queue.prototype.dequeue = function() {
  this.maybeFlip_();
  return this.front_.pop();
};
goog.structs.Queue.prototype.peek = function() {
  this.maybeFlip_();
  return goog.array.peek(this.front_);
};
goog.structs.Queue.prototype.getCount = function() {
  return this.front_.length + this.back_.length;
};
goog.structs.Queue.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.front_) && goog.array.isEmpty(this.back_);
};
goog.structs.Queue.prototype.clear = function() {
  this.front_ = [];
  this.back_ = [];
};
goog.structs.Queue.prototype.contains = function(obj) {
  return goog.array.contains(this.front_, obj) || goog.array.contains(this.back_, obj);
};
goog.structs.Queue.prototype.remove = function(obj) {
  var index = goog.array.lastIndexOf(this.front_, obj);
  if (index < 0) {
    return goog.array.remove(this.back_, obj);
  }
  goog.array.removeAt(this.front_, index);
  return true;
};
goog.structs.Queue.prototype.getValues = function() {
  var res = [];
  for (var i = this.front_.length - 1;i >= 0;--i) {
    res.push(this.front_[i]);
  }
  var len = this.back_.length;
  for (var i = 0;i < len;++i) {
    res.push(this.back_[i]);
  }
  return res;
};
goog.provide("goog.structs.Pool");
goog.require("goog.Disposable");
goog.require("goog.structs.Queue");
goog.require("goog.structs.Set");
goog.structs.Pool = function(opt_minCount, opt_maxCount) {
  goog.Disposable.call(this);
  this.minCount_ = opt_minCount || 0;
  this.maxCount_ = opt_maxCount || 10;
  if (this.minCount_ > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.freeQueue_ = new goog.structs.Queue;
  this.inUseSet_ = new goog.structs.Set;
  this.delay = 0;
  this.lastAccess = null;
  this.adjustForMinMax();
  var magicProps = {canBeReused:0};
};
goog.inherits(goog.structs.Pool, goog.Disposable);
goog.structs.Pool.ERROR_MIN_MAX_ = "[goog.structs.Pool] Min can not be greater than max";
goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_ = "[goog.structs.Pool] Objects not released";
goog.structs.Pool.prototype.setMinimumCount = function(min) {
  if (min > this.maxCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.minCount_ = min;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setMaximumCount = function(max) {
  if (max < this.minCount_) {
    throw Error(goog.structs.Pool.ERROR_MIN_MAX_);
  }
  this.maxCount_ = max;
  this.adjustForMinMax();
};
goog.structs.Pool.prototype.setDelay = function(delay) {
  this.delay = delay;
};
goog.structs.Pool.prototype.getObject = function() {
  var time = goog.now();
  if (goog.isDefAndNotNull(this.lastAccess) && time - this.lastAccess < this.delay) {
    return undefined;
  }
  var obj = this.removeFreeObject_();
  if (obj) {
    this.lastAccess = time;
    this.inUseSet_.add(obj);
  }
  return obj;
};
goog.structs.Pool.prototype.releaseObject = function(obj) {
  if (this.inUseSet_.remove(obj)) {
    this.addFreeObject(obj);
    return true;
  }
  return false;
};
goog.structs.Pool.prototype.removeFreeObject_ = function() {
  var obj;
  while (this.getFreeCount() > 0) {
    obj = this.freeQueue_.dequeue();
    if (!this.objectCanBeReused(obj)) {
      this.adjustForMinMax();
    } else {
      break;
    }
  }
  if (!obj && this.getCount() < this.maxCount_) {
    obj = this.createObject();
  }
  return obj;
};
goog.structs.Pool.prototype.addFreeObject = function(obj) {
  this.inUseSet_.remove(obj);
  if (this.objectCanBeReused(obj) && this.getCount() < this.maxCount_) {
    this.freeQueue_.enqueue(obj);
  } else {
    this.disposeObject(obj);
  }
};
goog.structs.Pool.prototype.adjustForMinMax = function() {
  var freeQueue = this.freeQueue_;
  while (this.getCount() < this.minCount_) {
    freeQueue.enqueue(this.createObject());
  }
  while (this.getCount() > this.maxCount_ && this.getFreeCount() > 0) {
    this.disposeObject(freeQueue.dequeue());
  }
};
goog.structs.Pool.prototype.createObject = function() {
  return{};
};
goog.structs.Pool.prototype.disposeObject = function(obj) {
  if (typeof obj.dispose == "function") {
    obj.dispose();
  } else {
    for (var i in obj) {
      obj[i] = null;
    }
  }
};
goog.structs.Pool.prototype.objectCanBeReused = function(obj) {
  if (typeof obj.canBeReused == "function") {
    return obj.canBeReused();
  }
  return true;
};
goog.structs.Pool.prototype.contains = function(obj) {
  return this.freeQueue_.contains(obj) || this.inUseSet_.contains(obj);
};
goog.structs.Pool.prototype.getCount = function() {
  return this.freeQueue_.getCount() + this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getInUseCount = function() {
  return this.inUseSet_.getCount();
};
goog.structs.Pool.prototype.getFreeCount = function() {
  return this.freeQueue_.getCount();
};
goog.structs.Pool.prototype.isEmpty = function() {
  return this.freeQueue_.isEmpty() && this.inUseSet_.isEmpty();
};
goog.structs.Pool.prototype.disposeInternal = function() {
  goog.structs.Pool.superClass_.disposeInternal.call(this);
  if (this.getInUseCount() > 0) {
    throw Error(goog.structs.Pool.ERROR_DISPOSE_UNRELEASED_OBJS_);
  }
  delete this.inUseSet_;
  var freeQueue = this.freeQueue_;
  while (!freeQueue.isEmpty()) {
    this.disposeObject(freeQueue.dequeue());
  }
  delete this.freeQueue_;
};
goog.provide("goog.structs.Node");
goog.structs.Node = function(key, value) {
  this.key_ = key;
  this.value_ = value;
};
goog.structs.Node.prototype.getKey = function() {
  return this.key_;
};
goog.structs.Node.prototype.getValue = function() {
  return this.value_;
};
goog.structs.Node.prototype.clone = function() {
  return new goog.structs.Node(this.key_, this.value_);
};
goog.provide("goog.structs.Heap");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.structs.Node");
goog.structs.Heap = function(opt_heap) {
  this.nodes_ = [];
  if (opt_heap) {
    this.insertAll(opt_heap);
  }
};
goog.structs.Heap.prototype.insert = function(key, value) {
  var node = new goog.structs.Node(key, value);
  var nodes = this.nodes_;
  nodes.push(node);
  this.moveUp_(nodes.length - 1);
};
goog.structs.Heap.prototype.insertAll = function(heap) {
  var keys, values;
  if (heap instanceof goog.structs.Heap) {
    keys = heap.getKeys();
    values = heap.getValues();
    if (heap.getCount() <= 0) {
      var nodes = this.nodes_;
      for (var i = 0;i < keys.length;i++) {
        nodes.push(new goog.structs.Node(keys[i], values[i]));
      }
      return;
    }
  } else {
    keys = goog.object.getKeys(heap);
    values = goog.object.getValues(heap);
  }
  for (var i = 0;i < keys.length;i++) {
    this.insert(keys[i], values[i]);
  }
};
goog.structs.Heap.prototype.remove = function() {
  var nodes = this.nodes_;
  var count = nodes.length;
  var rootNode = nodes[0];
  if (count <= 0) {
    return undefined;
  } else {
    if (count == 1) {
      goog.array.clear(nodes);
    } else {
      nodes[0] = nodes.pop();
      this.moveDown_(0);
    }
  }
  return rootNode.getValue();
};
goog.structs.Heap.prototype.peek = function() {
  var nodes = this.nodes_;
  if (nodes.length == 0) {
    return undefined;
  }
  return nodes[0].getValue();
};
goog.structs.Heap.prototype.peekKey = function() {
  return this.nodes_[0] && this.nodes_[0].getKey();
};
goog.structs.Heap.prototype.moveDown_ = function(index) {
  var nodes = this.nodes_;
  var count = nodes.length;
  var node = nodes[index];
  while (index < count >> 1) {
    var leftChildIndex = this.getLeftChildIndex_(index);
    var rightChildIndex = this.getRightChildIndex_(index);
    var smallerChildIndex = rightChildIndex < count && nodes[rightChildIndex].getKey() < nodes[leftChildIndex].getKey() ? rightChildIndex : leftChildIndex;
    if (nodes[smallerChildIndex].getKey() > node.getKey()) {
      break;
    }
    nodes[index] = nodes[smallerChildIndex];
    index = smallerChildIndex;
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.moveUp_ = function(index) {
  var nodes = this.nodes_;
  var node = nodes[index];
  while (index > 0) {
    var parentIndex = this.getParentIndex_(index);
    if (nodes[parentIndex].getKey() > node.getKey()) {
      nodes[index] = nodes[parentIndex];
      index = parentIndex;
    } else {
      break;
    }
  }
  nodes[index] = node;
};
goog.structs.Heap.prototype.getLeftChildIndex_ = function(index) {
  return index * 2 + 1;
};
goog.structs.Heap.prototype.getRightChildIndex_ = function(index) {
  return index * 2 + 2;
};
goog.structs.Heap.prototype.getParentIndex_ = function(index) {
  return index - 1 >> 1;
};
goog.structs.Heap.prototype.getValues = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getValue());
  }
  return rv;
};
goog.structs.Heap.prototype.getKeys = function() {
  var nodes = this.nodes_;
  var rv = [];
  var l = nodes.length;
  for (var i = 0;i < l;i++) {
    rv.push(nodes[i].getKey());
  }
  return rv;
};
goog.structs.Heap.prototype.containsValue = function(val) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getValue() == val;
  });
};
goog.structs.Heap.prototype.containsKey = function(key) {
  return goog.array.some(this.nodes_, function(node) {
    return node.getKey() == key;
  });
};
goog.structs.Heap.prototype.clone = function() {
  return new goog.structs.Heap(this);
};
goog.structs.Heap.prototype.getCount = function() {
  return this.nodes_.length;
};
goog.structs.Heap.prototype.isEmpty = function() {
  return goog.array.isEmpty(this.nodes_);
};
goog.structs.Heap.prototype.clear = function() {
  goog.array.clear(this.nodes_);
};
goog.provide("goog.structs.PriorityQueue");
goog.require("goog.structs.Heap");
goog.structs.PriorityQueue = function() {
  goog.structs.Heap.call(this);
};
goog.inherits(goog.structs.PriorityQueue, goog.structs.Heap);
goog.structs.PriorityQueue.prototype.enqueue = function(priority, value) {
  this.insert(priority, value);
};
goog.structs.PriorityQueue.prototype.dequeue = function() {
  return this.remove();
};
goog.provide("goog.structs.PriorityPool");
goog.require("goog.structs.Pool");
goog.require("goog.structs.PriorityQueue");
goog.structs.PriorityPool = function(opt_minCount, opt_maxCount) {
  this.delayTimeout_ = undefined;
  this.requestQueue_ = new goog.structs.PriorityQueue;
  goog.structs.Pool.call(this, opt_minCount, opt_maxCount);
};
goog.inherits(goog.structs.PriorityPool, goog.structs.Pool);
goog.structs.PriorityPool.DEFAULT_PRIORITY_ = 100;
goog.structs.PriorityPool.prototype.setDelay = function(delay) {
  goog.structs.PriorityPool.base(this, "setDelay", delay);
  if (!goog.isDefAndNotNull(this.lastAccess)) {
    return;
  }
  goog.global.clearTimeout(this.delayTimeout_);
  this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay + this.lastAccess - goog.now());
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.getObject = function(opt_callback, opt_priority) {
  if (!opt_callback) {
    var result = goog.structs.PriorityPool.base(this, "getObject");
    if (result && this.delay) {
      this.delayTimeout_ = goog.global.setTimeout(goog.bind(this.handleQueueRequests_, this), this.delay);
    }
    return result;
  }
  var priority = goog.isDef(opt_priority) ? opt_priority : goog.structs.PriorityPool.DEFAULT_PRIORITY_;
  this.requestQueue_.enqueue(priority, opt_callback);
  this.handleQueueRequests_();
  return undefined;
};
goog.structs.PriorityPool.prototype.handleQueueRequests_ = function() {
  var requestQueue = this.requestQueue_;
  while (requestQueue.getCount() > 0) {
    var obj = this.getObject();
    if (!obj) {
      return;
    } else {
      var requestCallback = requestQueue.dequeue();
      requestCallback.apply(this, [obj]);
    }
  }
};
goog.structs.PriorityPool.prototype.addFreeObject = function(obj) {
  goog.structs.PriorityPool.superClass_.addFreeObject.call(this, obj);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.adjustForMinMax = function() {
  goog.structs.PriorityPool.superClass_.adjustForMinMax.call(this);
  this.handleQueueRequests_();
};
goog.structs.PriorityPool.prototype.disposeInternal = function() {
  goog.structs.PriorityPool.superClass_.disposeInternal.call(this);
  goog.global.clearTimeout(this.delayTimeout_);
  this.requestQueue_.clear();
  this.requestQueue_ = null;
};
goog.provide("goog.net.XhrIoPool");
goog.require("goog.net.XhrIo");
goog.require("goog.structs.PriorityPool");
goog.net.XhrIoPool = function(opt_headers, opt_minCount, opt_maxCount) {
  goog.structs.PriorityPool.call(this, opt_minCount, opt_maxCount);
  this.headers_ = opt_headers;
};
goog.inherits(goog.net.XhrIoPool, goog.structs.PriorityPool);
goog.net.XhrIoPool.prototype.createObject = function() {
  var xhrIo = new goog.net.XhrIo;
  var headers = this.headers_;
  if (headers) {
    headers.forEach(function(value, key) {
      xhrIo.headers.set(key, value);
    });
  }
  return xhrIo;
};
goog.net.XhrIoPool.prototype.objectCanBeReused = function(obj) {
  var xhr = (obj);
  return!xhr.isDisposed() && !xhr.isActive();
};
goog.provide("goog.net.XhrManager");
goog.provide("goog.net.XhrManager.Event");
goog.provide("goog.net.XhrManager.Request");
goog.require("goog.events");
goog.require("goog.events.Event");
goog.require("goog.events.EventHandler");
goog.require("goog.events.EventTarget");
goog.require("goog.net.ErrorCode");
goog.require("goog.net.EventType");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrIoPool");
goog.require("goog.structs.Map");
goog.net.XhrManager = function(opt_maxRetries, opt_headers, opt_minCount, opt_maxCount, opt_timeoutInterval) {
  goog.net.XhrManager.base(this, "constructor");
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.timeoutInterval_ = goog.isDef(opt_timeoutInterval) ? Math.max(0, opt_timeoutInterval) : 0;
  this.xhrPool_ = new goog.net.XhrIoPool(opt_headers, opt_minCount, opt_maxCount);
  this.requests_ = new goog.structs.Map;
  this.eventHandler_ = new goog.events.EventHandler(this);
};
goog.inherits(goog.net.XhrManager, goog.events.EventTarget);
goog.net.XhrManager.ERROR_ID_IN_USE_ = "[goog.net.XhrManager] ID in use";
goog.net.XhrManager.XHR_EVENT_TYPES_ = [goog.net.EventType.READY, goog.net.EventType.COMPLETE, goog.net.EventType.SUCCESS, goog.net.EventType.ERROR, goog.net.EventType.ABORT, goog.net.EventType.TIMEOUT];
goog.net.XhrManager.prototype.setTimeoutInterval = function(ms) {
  this.timeoutInterval_ = Math.max(0, ms);
};
goog.net.XhrManager.prototype.getOutstandingCount = function() {
  return this.requests_.getCount();
};
goog.net.XhrManager.prototype.getOutstandingRequestIds = function() {
  return this.requests_.getKeys();
};
goog.net.XhrManager.prototype.send = function(id, url, opt_method, opt_content, opt_headers, opt_priority, opt_callback, opt_maxRetries, opt_responseType) {
  var requests = this.requests_;
  if (requests.get(id)) {
    throw Error(goog.net.XhrManager.ERROR_ID_IN_USE_);
  }
  var request = new goog.net.XhrManager.Request(url, goog.bind(this.handleEvent_, this, id), opt_method, opt_content, opt_headers, opt_callback, goog.isDef(opt_maxRetries) ? opt_maxRetries : this.maxRetries_, opt_responseType);
  this.requests_.set(id, request);
  var callback = goog.bind(this.handleAvailableXhr_, this, id);
  this.xhrPool_.getObject(callback, opt_priority);
  return request;
};
goog.net.XhrManager.prototype.abort = function(id, opt_force) {
  var request = this.requests_.get(id);
  if (request) {
    var xhrIo = request.xhrIo;
    request.setAborted(true);
    if (opt_force) {
      if (xhrIo) {
        this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
        goog.events.listenOnce(xhrIo, goog.net.EventType.READY, function() {
          this.xhrPool_.releaseObject(xhrIo);
        }, false, this);
      }
      this.requests_.remove(id);
    }
    if (xhrIo) {
      xhrIo.abort();
    }
  }
};
goog.net.XhrManager.prototype.handleAvailableXhr_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.xhrIo) {
    this.addXhrListener_(xhrIo, request.getXhrEventCallback());
    xhrIo.setTimeoutInterval(this.timeoutInterval_);
    xhrIo.setResponseType(request.getResponseType());
    request.xhrIo = xhrIo;
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.READY, this, id, xhrIo));
    this.retry_(id, xhrIo);
    if (request.getAborted()) {
      xhrIo.abort();
    }
  } else {
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleEvent_ = function(id, e) {
  var xhrIo = (e.target);
  switch(e.type) {
    case goog.net.EventType.READY:
      this.retry_(id, xhrIo);
      break;
    case goog.net.EventType.COMPLETE:
      return this.handleComplete_(id, xhrIo, e);
    case goog.net.EventType.SUCCESS:
      this.handleSuccess_(id, xhrIo);
      break;
    case goog.net.EventType.TIMEOUT:
    ;
    case goog.net.EventType.ERROR:
      this.handleError_(id, xhrIo);
      break;
    case goog.net.EventType.ABORT:
      this.handleAbort_(id, xhrIo);
      break;
  }
  return null;
};
goog.net.XhrManager.prototype.retry_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request && !request.getCompleted() && !request.hasReachedMaxRetries()) {
    request.increaseAttemptCount();
    xhrIo.send(request.getUrl(), request.getMethod(), request.getContent(), request.getHeaders());
  } else {
    if (request) {
      this.removeXhrListener_(xhrIo, request.getXhrEventCallback());
      this.requests_.remove(id);
    }
    this.xhrPool_.releaseObject(xhrIo);
  }
};
goog.net.XhrManager.prototype.handleComplete_ = function(id, xhrIo, e) {
  var request = this.requests_.get(id);
  if (xhrIo.getLastErrorCode() == goog.net.ErrorCode.ABORT || xhrIo.isSuccess() || request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.COMPLETE, this, id, xhrIo));
    if (request) {
      request.setCompleted(true);
      if (request.getCompleteCallback()) {
        return request.getCompleteCallback().call(xhrIo, e);
      }
    }
  }
  return null;
};
goog.net.XhrManager.prototype.handleAbort_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ABORT, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleSuccess_ = function(id, xhrIo) {
  this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.SUCCESS, this, id, xhrIo));
};
goog.net.XhrManager.prototype.handleError_ = function(id, xhrIo) {
  var request = this.requests_.get(id);
  if (request.hasReachedMaxRetries()) {
    this.dispatchEvent(new goog.net.XhrManager.Event(goog.net.EventType.ERROR, this, id, xhrIo));
  }
};
goog.net.XhrManager.prototype.removeXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.unlisten(xhrIo, types, func);
};
goog.net.XhrManager.prototype.addXhrListener_ = function(xhrIo, func, opt_types) {
  var types = opt_types || goog.net.XhrManager.XHR_EVENT_TYPES_;
  this.eventHandler_.listen(xhrIo, types, func);
};
goog.net.XhrManager.prototype.disposeInternal = function() {
  goog.net.XhrManager.superClass_.disposeInternal.call(this);
  this.xhrPool_.dispose();
  this.xhrPool_ = null;
  this.eventHandler_.dispose();
  this.eventHandler_ = null;
  this.requests_.clear();
  this.requests_ = null;
};
goog.net.XhrManager.Event = function(type, target, id, xhrIo) {
  goog.events.Event.call(this, type, target);
  this.id = id;
  this.xhrIo = xhrIo;
};
goog.inherits(goog.net.XhrManager.Event, goog.events.Event);
goog.net.XhrManager.Request = function(url, xhrEventCallback, opt_method, opt_content, opt_headers, opt_callback, opt_maxRetries, opt_responseType) {
  this.url_ = url;
  this.method_ = opt_method || "GET";
  this.content_ = opt_content;
  this.headers_ = opt_headers || null;
  this.maxRetries_ = goog.isDef(opt_maxRetries) ? opt_maxRetries : 1;
  this.attemptCount_ = 0;
  this.completed_ = false;
  this.aborted_ = false;
  this.xhrEventCallback_ = xhrEventCallback;
  this.completeCallback_ = opt_callback;
  this.responseType_ = opt_responseType || goog.net.XhrIo.ResponseType.DEFAULT;
  this.xhrIo = null;
};
goog.net.XhrManager.Request.prototype.getUrl = function() {
  return this.url_;
};
goog.net.XhrManager.Request.prototype.getMethod = function() {
  return this.method_;
};
goog.net.XhrManager.Request.prototype.getContent = function() {
  return this.content_;
};
goog.net.XhrManager.Request.prototype.getHeaders = function() {
  return this.headers_;
};
goog.net.XhrManager.Request.prototype.getMaxRetries = function() {
  return this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.getAttemptCount = function() {
  return this.attemptCount_;
};
goog.net.XhrManager.Request.prototype.increaseAttemptCount = function() {
  this.attemptCount_++;
};
goog.net.XhrManager.Request.prototype.hasReachedMaxRetries = function() {
  return this.attemptCount_ > this.maxRetries_;
};
goog.net.XhrManager.Request.prototype.setCompleted = function(complete) {
  this.completed_ = complete;
};
goog.net.XhrManager.Request.prototype.getCompleted = function() {
  return this.completed_;
};
goog.net.XhrManager.Request.prototype.setAborted = function(aborted) {
  this.aborted_ = aborted;
};
goog.net.XhrManager.Request.prototype.getAborted = function() {
  return this.aborted_;
};
goog.net.XhrManager.Request.prototype.getXhrEventCallback = function() {
  return this.xhrEventCallback_;
};
goog.net.XhrManager.Request.prototype.getCompleteCallback = function() {
  return this.completeCallback_;
};
goog.net.XhrManager.Request.prototype.getResponseType = function() {
  return this.responseType_;
};
goog.provide("goog.Uri");
goog.provide("goog.Uri.QueryData");
goog.require("goog.array");
goog.require("goog.string");
goog.require("goog.structs");
goog.require("goog.structs.Map");
goog.require("goog.uri.utils");
goog.require("goog.uri.utils.ComponentIndex");
goog.require("goog.uri.utils.StandardQueryParam");
goog.Uri = function(opt_uri, opt_ignoreCase) {
  var m;
  if (opt_uri instanceof goog.Uri) {
    this.ignoreCase_ = goog.isDef(opt_ignoreCase) ? opt_ignoreCase : opt_uri.getIgnoreCase();
    this.setScheme(opt_uri.getScheme());
    this.setUserInfo(opt_uri.getUserInfo());
    this.setDomain(opt_uri.getDomain());
    this.setPort(opt_uri.getPort());
    this.setPath(opt_uri.getPath());
    this.setQueryData(opt_uri.getQueryData().clone());
    this.setFragment(opt_uri.getFragment());
  } else {
    if (opt_uri && (m = goog.uri.utils.split(String(opt_uri)))) {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.setScheme(m[goog.uri.utils.ComponentIndex.SCHEME] || "", true);
      this.setUserInfo(m[goog.uri.utils.ComponentIndex.USER_INFO] || "", true);
      this.setDomain(m[goog.uri.utils.ComponentIndex.DOMAIN] || "", true);
      this.setPort(m[goog.uri.utils.ComponentIndex.PORT]);
      this.setPath(m[goog.uri.utils.ComponentIndex.PATH] || "", true);
      this.setQueryData(m[goog.uri.utils.ComponentIndex.QUERY_DATA] || "", true);
      this.setFragment(m[goog.uri.utils.ComponentIndex.FRAGMENT] || "", true);
    } else {
      this.ignoreCase_ = !!opt_ignoreCase;
      this.queryData_ = new goog.Uri.QueryData(null, null, this.ignoreCase_);
    }
  }
};
goog.Uri.preserveParameterTypesCompatibilityFlag = false;
goog.Uri.RANDOM_PARAM = goog.uri.utils.StandardQueryParam.RANDOM;
goog.Uri.prototype.scheme_ = "";
goog.Uri.prototype.userInfo_ = "";
goog.Uri.prototype.domain_ = "";
goog.Uri.prototype.port_ = null;
goog.Uri.prototype.path_ = "";
goog.Uri.prototype.queryData_;
goog.Uri.prototype.fragment_ = "";
goog.Uri.prototype.isReadOnly_ = false;
goog.Uri.prototype.ignoreCase_ = false;
goog.Uri.prototype.toString = function() {
  var out = [];
  var scheme = this.getScheme();
  if (scheme) {
    out.push(goog.Uri.encodeSpecialChars_(scheme, goog.Uri.reDisallowedInSchemeOrUserInfo_), ":");
  }
  var domain = this.getDomain();
  if (domain) {
    out.push("//");
    var userInfo = this.getUserInfo();
    if (userInfo) {
      out.push(goog.Uri.encodeSpecialChars_(userInfo, goog.Uri.reDisallowedInSchemeOrUserInfo_), "@");
    }
    out.push(goog.string.urlEncode(domain));
    var port = this.getPort();
    if (port != null) {
      out.push(":", String(port));
    }
  }
  var path = this.getPath();
  if (path) {
    if (this.hasDomain() && path.charAt(0) != "/") {
      out.push("/");
    }
    out.push(goog.Uri.encodeSpecialChars_(path, path.charAt(0) == "/" ? goog.Uri.reDisallowedInAbsolutePath_ : goog.Uri.reDisallowedInRelativePath_));
  }
  var query = this.getEncodedQuery();
  if (query) {
    out.push("?", query);
  }
  var fragment = this.getFragment();
  if (fragment) {
    out.push("#", goog.Uri.encodeSpecialChars_(fragment, goog.Uri.reDisallowedInFragment_));
  }
  return out.join("");
};
goog.Uri.prototype.resolve = function(relativeUri) {
  var absoluteUri = this.clone();
  var overridden = relativeUri.hasScheme();
  if (overridden) {
    absoluteUri.setScheme(relativeUri.getScheme());
  } else {
    overridden = relativeUri.hasUserInfo();
  }
  if (overridden) {
    absoluteUri.setUserInfo(relativeUri.getUserInfo());
  } else {
    overridden = relativeUri.hasDomain();
  }
  if (overridden) {
    absoluteUri.setDomain(relativeUri.getDomain());
  } else {
    overridden = relativeUri.hasPort();
  }
  var path = relativeUri.getPath();
  if (overridden) {
    absoluteUri.setPort(relativeUri.getPort());
  } else {
    overridden = relativeUri.hasPath();
    if (overridden) {
      if (path.charAt(0) != "/") {
        if (this.hasDomain() && !this.hasPath()) {
          path = "/" + path;
        } else {
          var lastSlashIndex = absoluteUri.getPath().lastIndexOf("/");
          if (lastSlashIndex != -1) {
            path = absoluteUri.getPath().substr(0, lastSlashIndex + 1) + path;
          }
        }
      }
      path = goog.Uri.removeDotSegments(path);
    }
  }
  if (overridden) {
    absoluteUri.setPath(path);
  } else {
    overridden = relativeUri.hasQuery();
  }
  if (overridden) {
    absoluteUri.setQueryData(relativeUri.getDecodedQuery());
  } else {
    overridden = relativeUri.hasFragment();
  }
  if (overridden) {
    absoluteUri.setFragment(relativeUri.getFragment());
  }
  return absoluteUri;
};
goog.Uri.prototype.clone = function() {
  return new goog.Uri(this);
};
goog.Uri.prototype.getScheme = function() {
  return this.scheme_;
};
goog.Uri.prototype.setScheme = function(newScheme, opt_decode) {
  this.enforceReadOnly();
  this.scheme_ = opt_decode ? goog.Uri.decodeOrEmpty_(newScheme) : newScheme;
  if (this.scheme_) {
    this.scheme_ = this.scheme_.replace(/:$/, "");
  }
  return this;
};
goog.Uri.prototype.hasScheme = function() {
  return!!this.scheme_;
};
goog.Uri.prototype.getUserInfo = function() {
  return this.userInfo_;
};
goog.Uri.prototype.setUserInfo = function(newUserInfo, opt_decode) {
  this.enforceReadOnly();
  this.userInfo_ = opt_decode ? goog.Uri.decodeOrEmpty_(newUserInfo) : newUserInfo;
  return this;
};
goog.Uri.prototype.hasUserInfo = function() {
  return!!this.userInfo_;
};
goog.Uri.prototype.getDomain = function() {
  return this.domain_;
};
goog.Uri.prototype.setDomain = function(newDomain, opt_decode) {
  this.enforceReadOnly();
  this.domain_ = opt_decode ? goog.Uri.decodeOrEmpty_(newDomain) : newDomain;
  return this;
};
goog.Uri.prototype.hasDomain = function() {
  return!!this.domain_;
};
goog.Uri.prototype.getPort = function() {
  return this.port_;
};
goog.Uri.prototype.setPort = function(newPort) {
  this.enforceReadOnly();
  if (newPort) {
    newPort = Number(newPort);
    if (isNaN(newPort) || newPort < 0) {
      throw Error("Bad port number " + newPort);
    }
    this.port_ = newPort;
  } else {
    this.port_ = null;
  }
  return this;
};
goog.Uri.prototype.hasPort = function() {
  return this.port_ != null;
};
goog.Uri.prototype.getPath = function() {
  return this.path_;
};
goog.Uri.prototype.setPath = function(newPath, opt_decode) {
  this.enforceReadOnly();
  this.path_ = opt_decode ? goog.Uri.decodeOrEmpty_(newPath) : newPath;
  return this;
};
goog.Uri.prototype.hasPath = function() {
  return!!this.path_;
};
goog.Uri.prototype.hasQuery = function() {
  return this.queryData_.toString() !== "";
};
goog.Uri.prototype.setQueryData = function(queryData, opt_decode) {
  this.enforceReadOnly();
  if (queryData instanceof goog.Uri.QueryData) {
    this.queryData_ = queryData;
    this.queryData_.setIgnoreCase(this.ignoreCase_);
  } else {
    if (!opt_decode) {
      queryData = goog.Uri.encodeSpecialChars_(queryData, goog.Uri.reDisallowedInQuery_);
    }
    this.queryData_ = new goog.Uri.QueryData(queryData, null, this.ignoreCase_);
  }
  return this;
};
goog.Uri.prototype.setQuery = function(newQuery, opt_decode) {
  return this.setQueryData(newQuery, opt_decode);
};
goog.Uri.prototype.getEncodedQuery = function() {
  return this.queryData_.toString();
};
goog.Uri.prototype.getDecodedQuery = function() {
  return this.queryData_.toDecodedString();
};
goog.Uri.prototype.getQueryData = function() {
  return this.queryData_;
};
goog.Uri.prototype.getQuery = function() {
  return this.getEncodedQuery();
};
goog.Uri.prototype.setParameterValue = function(key, value) {
  this.enforceReadOnly();
  this.queryData_.set(key, value);
  return this;
};
goog.Uri.prototype.setParameterValues = function(key, values) {
  this.enforceReadOnly();
  if (!goog.isArray(values)) {
    values = [String(values)];
  }
  this.queryData_.setValues(key, (values));
  return this;
};
goog.Uri.prototype.getParameterValues = function(name) {
  return this.queryData_.getValues(name);
};
goog.Uri.prototype.getParameterValue = function(paramName) {
  return(this.queryData_.get(paramName));
};
goog.Uri.prototype.getFragment = function() {
  return this.fragment_;
};
goog.Uri.prototype.setFragment = function(newFragment, opt_decode) {
  this.enforceReadOnly();
  this.fragment_ = opt_decode ? goog.Uri.decodeOrEmpty_(newFragment) : newFragment;
  return this;
};
goog.Uri.prototype.hasFragment = function() {
  return!!this.fragment_;
};
goog.Uri.prototype.hasSameDomainAs = function(uri2) {
  return(!this.hasDomain() && !uri2.hasDomain() || this.getDomain() == uri2.getDomain()) && (!this.hasPort() && !uri2.hasPort() || this.getPort() == uri2.getPort());
};
goog.Uri.prototype.makeUnique = function() {
  this.enforceReadOnly();
  this.setParameterValue(goog.Uri.RANDOM_PARAM, goog.string.getRandomString());
  return this;
};
goog.Uri.prototype.removeParameter = function(key) {
  this.enforceReadOnly();
  this.queryData_.remove(key);
  return this;
};
goog.Uri.prototype.setReadOnly = function(isReadOnly) {
  this.isReadOnly_ = isReadOnly;
  return this;
};
goog.Uri.prototype.isReadOnly = function() {
  return this.isReadOnly_;
};
goog.Uri.prototype.enforceReadOnly = function() {
  if (this.isReadOnly_) {
    throw Error("Tried to modify a read-only Uri");
  }
};
goog.Uri.prototype.setIgnoreCase = function(ignoreCase) {
  this.ignoreCase_ = ignoreCase;
  if (this.queryData_) {
    this.queryData_.setIgnoreCase(ignoreCase);
  }
  return this;
};
goog.Uri.prototype.getIgnoreCase = function() {
  return this.ignoreCase_;
};
goog.Uri.parse = function(uri, opt_ignoreCase) {
  return uri instanceof goog.Uri ? uri.clone() : new goog.Uri(uri, opt_ignoreCase);
};
goog.Uri.create = function(opt_scheme, opt_userInfo, opt_domain, opt_port, opt_path, opt_query, opt_fragment, opt_ignoreCase) {
  var uri = new goog.Uri(null, opt_ignoreCase);
  opt_scheme && uri.setScheme(opt_scheme);
  opt_userInfo && uri.setUserInfo(opt_userInfo);
  opt_domain && uri.setDomain(opt_domain);
  opt_port && uri.setPort(opt_port);
  opt_path && uri.setPath(opt_path);
  opt_query && uri.setQueryData(opt_query);
  opt_fragment && uri.setFragment(opt_fragment);
  return uri;
};
goog.Uri.resolve = function(base, rel) {
  if (!(base instanceof goog.Uri)) {
    base = goog.Uri.parse(base);
  }
  if (!(rel instanceof goog.Uri)) {
    rel = goog.Uri.parse(rel);
  }
  return base.resolve(rel);
};
goog.Uri.removeDotSegments = function(path) {
  if (path == ".." || path == ".") {
    return "";
  } else {
    if (!goog.string.contains(path, "./") && !goog.string.contains(path, "/.")) {
      return path;
    } else {
      var leadingSlash = goog.string.startsWith(path, "/");
      var segments = path.split("/");
      var out = [];
      for (var pos = 0;pos < segments.length;) {
        var segment = segments[pos++];
        if (segment == ".") {
          if (leadingSlash && pos == segments.length) {
            out.push("");
          }
        } else {
          if (segment == "..") {
            if (out.length > 1 || out.length == 1 && out[0] != "") {
              out.pop();
            }
            if (leadingSlash && pos == segments.length) {
              out.push("");
            }
          } else {
            out.push(segment);
            leadingSlash = true;
          }
        }
      }
      return out.join("/");
    }
  }
};
goog.Uri.decodeOrEmpty_ = function(val) {
  return val ? decodeURIComponent(val) : "";
};
goog.Uri.encodeSpecialChars_ = function(unescapedPart, extra) {
  if (goog.isString(unescapedPart)) {
    return encodeURI(unescapedPart).replace(extra, goog.Uri.encodeChar_);
  }
  return null;
};
goog.Uri.encodeChar_ = function(ch) {
  var n = ch.charCodeAt(0);
  return "%" + (n >> 4 & 15).toString(16) + (n & 15).toString(16);
};
goog.Uri.reDisallowedInSchemeOrUserInfo_ = /[#\/\?@]/g;
goog.Uri.reDisallowedInRelativePath_ = /[\#\?:]/g;
goog.Uri.reDisallowedInAbsolutePath_ = /[\#\?]/g;
goog.Uri.reDisallowedInQuery_ = /[\#\?@]/g;
goog.Uri.reDisallowedInFragment_ = /#/g;
goog.Uri.haveSameDomain = function(uri1String, uri2String) {
  var pieces1 = goog.uri.utils.split(uri1String);
  var pieces2 = goog.uri.utils.split(uri2String);
  return pieces1[goog.uri.utils.ComponentIndex.DOMAIN] == pieces2[goog.uri.utils.ComponentIndex.DOMAIN] && pieces1[goog.uri.utils.ComponentIndex.PORT] == pieces2[goog.uri.utils.ComponentIndex.PORT];
};
goog.Uri.QueryData = function(opt_query, opt_uri, opt_ignoreCase) {
  this.encodedQuery_ = opt_query || null;
  this.ignoreCase_ = !!opt_ignoreCase;
};
goog.Uri.QueryData.prototype.ensureKeyMapInitialized_ = function() {
  if (!this.keyMap_) {
    this.keyMap_ = new goog.structs.Map;
    this.count_ = 0;
    if (this.encodedQuery_) {
      var pairs = this.encodedQuery_.split("\x26");
      for (var i = 0;i < pairs.length;i++) {
        var indexOfEquals = pairs[i].indexOf("\x3d");
        var name = null;
        var value = null;
        if (indexOfEquals >= 0) {
          name = pairs[i].substring(0, indexOfEquals);
          value = pairs[i].substring(indexOfEquals + 1);
        } else {
          name = pairs[i];
        }
        name = goog.string.urlDecode(name);
        name = this.getKeyName_(name);
        this.add(name, value ? goog.string.urlDecode(value) : "");
      }
    }
  }
};
goog.Uri.QueryData.createFromMap = function(map, opt_uri, opt_ignoreCase) {
  var keys = goog.structs.getKeys(map);
  if (typeof keys == "undefined") {
    throw Error("Keys are undefined");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  var values = goog.structs.getValues(map);
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var value = values[i];
    if (!goog.isArray(value)) {
      queryData.add(key, value);
    } else {
      queryData.setValues(key, value);
    }
  }
  return queryData;
};
goog.Uri.QueryData.createFromKeysValues = function(keys, values, opt_uri, opt_ignoreCase) {
  if (keys.length != values.length) {
    throw Error("Mismatched lengths for keys/values");
  }
  var queryData = new goog.Uri.QueryData(null, null, opt_ignoreCase);
  for (var i = 0;i < keys.length;i++) {
    queryData.add(keys[i], values[i]);
  }
  return queryData;
};
goog.Uri.QueryData.prototype.keyMap_ = null;
goog.Uri.QueryData.prototype.count_ = null;
goog.Uri.QueryData.prototype.getCount = function() {
  this.ensureKeyMapInitialized_();
  return this.count_;
};
goog.Uri.QueryData.prototype.add = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  var values = this.keyMap_.get(key);
  if (!values) {
    this.keyMap_.set(key, values = []);
  }
  values.push(value);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.remove = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  if (this.keyMap_.containsKey(key)) {
    this.invalidateCache_();
    this.count_ -= this.keyMap_.get(key).length;
    return this.keyMap_.remove(key);
  }
  return false;
};
goog.Uri.QueryData.prototype.clear = function() {
  this.invalidateCache_();
  this.keyMap_ = null;
  this.count_ = 0;
};
goog.Uri.QueryData.prototype.isEmpty = function() {
  this.ensureKeyMapInitialized_();
  return this.count_ == 0;
};
goog.Uri.QueryData.prototype.containsKey = function(key) {
  this.ensureKeyMapInitialized_();
  key = this.getKeyName_(key);
  return this.keyMap_.containsKey(key);
};
goog.Uri.QueryData.prototype.containsValue = function(value) {
  var vals = this.getValues();
  return goog.array.contains(vals, value);
};
goog.Uri.QueryData.prototype.getKeys = function() {
  this.ensureKeyMapInitialized_();
  var vals = (this.keyMap_.getValues());
  var keys = this.keyMap_.getKeys();
  var rv = [];
  for (var i = 0;i < keys.length;i++) {
    var val = vals[i];
    for (var j = 0;j < val.length;j++) {
      rv.push(keys[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.getValues = function(opt_key) {
  this.ensureKeyMapInitialized_();
  var rv = [];
  if (goog.isString(opt_key)) {
    if (this.containsKey(opt_key)) {
      rv = goog.array.concat(rv, this.keyMap_.get(this.getKeyName_(opt_key)));
    }
  } else {
    var values = (this.keyMap_.getValues());
    for (var i = 0;i < values.length;i++) {
      rv = goog.array.concat(rv, values[i]);
    }
  }
  return rv;
};
goog.Uri.QueryData.prototype.set = function(key, value) {
  this.ensureKeyMapInitialized_();
  this.invalidateCache_();
  key = this.getKeyName_(key);
  if (this.containsKey(key)) {
    this.count_ -= this.keyMap_.get(key).length;
  }
  this.keyMap_.set(key, [value]);
  this.count_++;
  return this;
};
goog.Uri.QueryData.prototype.get = function(key, opt_default) {
  var values = key ? this.getValues(key) : [];
  if (goog.Uri.preserveParameterTypesCompatibilityFlag) {
    return values.length > 0 ? values[0] : opt_default;
  } else {
    return values.length > 0 ? String(values[0]) : opt_default;
  }
};
goog.Uri.QueryData.prototype.setValues = function(key, values) {
  this.remove(key);
  if (values.length > 0) {
    this.invalidateCache_();
    this.keyMap_.set(this.getKeyName_(key), goog.array.clone(values));
    this.count_ += values.length;
  }
};
goog.Uri.QueryData.prototype.toString = function() {
  if (this.encodedQuery_) {
    return this.encodedQuery_;
  }
  if (!this.keyMap_) {
    return "";
  }
  var sb = [];
  var keys = this.keyMap_.getKeys();
  for (var i = 0;i < keys.length;i++) {
    var key = keys[i];
    var encodedKey = goog.string.urlEncode(key);
    var val = this.getValues(key);
    for (var j = 0;j < val.length;j++) {
      var param = encodedKey;
      if (val[j] !== "") {
        param += "\x3d" + goog.string.urlEncode(val[j]);
      }
      sb.push(param);
    }
  }
  return this.encodedQuery_ = sb.join("\x26");
};
goog.Uri.QueryData.prototype.toDecodedString = function() {
  return goog.Uri.decodeOrEmpty_(this.toString());
};
goog.Uri.QueryData.prototype.invalidateCache_ = function() {
  this.encodedQuery_ = null;
};
goog.Uri.QueryData.prototype.filterKeys = function(keys) {
  this.ensureKeyMapInitialized_();
  this.keyMap_.forEach(function(value, key) {
    if (!goog.array.contains(keys, key)) {
      this.remove(key);
    }
  }, this);
  return this;
};
goog.Uri.QueryData.prototype.clone = function() {
  var rv = new goog.Uri.QueryData;
  rv.encodedQuery_ = this.encodedQuery_;
  if (this.keyMap_) {
    rv.keyMap_ = this.keyMap_.clone();
    rv.count_ = this.count_;
  }
  return rv;
};
goog.Uri.QueryData.prototype.getKeyName_ = function(arg) {
  var keyName = String(arg);
  if (this.ignoreCase_) {
    keyName = keyName.toLowerCase();
  }
  return keyName;
};
goog.Uri.QueryData.prototype.setIgnoreCase = function(ignoreCase) {
  var resetKeys = ignoreCase && !this.ignoreCase_;
  if (resetKeys) {
    this.ensureKeyMapInitialized_();
    this.invalidateCache_();
    this.keyMap_.forEach(function(value, key) {
      var lowerCase = key.toLowerCase();
      if (key != lowerCase) {
        this.remove(key);
        this.setValues(lowerCase, value);
      }
    }, this);
  }
  this.ignoreCase_ = ignoreCase;
};
goog.Uri.QueryData.prototype.extend = function(var_args) {
  for (var i = 0;i < arguments.length;i++) {
    var data = arguments[i];
    goog.structs.forEach(data, function(value, key) {
      this.add(key, value);
    }, this);
  }
};
goog.provide("goog.string.StringBuffer");
goog.string.StringBuffer = function(opt_a1, var_args) {
  if (opt_a1 != null) {
    this.append.apply(this, arguments);
  }
};
goog.string.StringBuffer.prototype.buffer_ = "";
goog.string.StringBuffer.prototype.set = function(s) {
  this.buffer_ = "" + s;
};
goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
  this.buffer_ += a1;
  if (opt_a2 != null) {
    for (var i = 1;i < arguments.length;i++) {
      this.buffer_ += arguments[i];
    }
  }
  return this;
};
goog.string.StringBuffer.prototype.clear = function() {
  this.buffer_ = "";
};
goog.string.StringBuffer.prototype.getLength = function() {
  return this.buffer_.length;
};
goog.string.StringBuffer.prototype.toString = function() {
  return this.buffer_;
};
goog.provide("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.array");
goog.require("goog.array");
goog.require("goog.object");
goog.require("goog.object");
goog.require("goog.string");
goog.require("goog.string");
cljs.core._STAR_clojurescript_version_STAR_ = "0.0-2356";
cljs.core._STAR_unchecked_if_STAR_ = false;
cljs.core._STAR_print_fn_STAR_ = function _STAR_print_fn_STAR_(_) {
  throw new Error("No *print-fn* fn set for evaluation environment");
};
cljs.core.set_print_fn_BANG_ = function set_print_fn_BANG_(f) {
  return cljs.core._STAR_print_fn_STAR_ = f;
};
cljs.core._STAR_flush_on_newline_STAR_ = true;
cljs.core._STAR_print_newline_STAR_ = true;
cljs.core._STAR_print_readably_STAR_ = true;
cljs.core._STAR_print_meta_STAR_ = false;
cljs.core._STAR_print_dup_STAR_ = false;
cljs.core._STAR_print_length_STAR_ = null;
cljs.core._STAR_print_level_STAR_ = null;
cljs.core.pr_opts = function pr_opts() {
  return new cljs.core.PersistentArrayMap(null, 5, [new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939), cljs.core._STAR_flush_on_newline_STAR_, new cljs.core.Keyword(null, "readably", "readably", 1129599760), cljs.core._STAR_print_readably_STAR_, new cljs.core.Keyword(null, "meta", "meta", 1499536964), cljs.core._STAR_print_meta_STAR_, new cljs.core.Keyword(null, "dup", "dup", 556298533), cljs.core._STAR_print_dup_STAR_, new cljs.core.Keyword(null, "print-length", "print-length", 
  1931866356), cljs.core._STAR_print_length_STAR_], null);
};
cljs.core.enable_console_print_BANG_ = function enable_console_print_BANG_() {
  cljs.core._STAR_print_newline_STAR_ = false;
  return cljs.core._STAR_print_fn_STAR_ = function() {
    var G__6132__delegate = function(args) {
      return console.log.apply(console, cljs.core.into_array.call(null, args));
    };
    var G__6132 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6132__delegate.call(this, args);
    };
    G__6132.cljs$lang$maxFixedArity = 0;
    G__6132.cljs$lang$applyTo = function(arglist__6133) {
      var args = cljs.core.seq(arglist__6133);
      return G__6132__delegate(args);
    };
    G__6132.cljs$core$IFn$_invoke$arity$variadic = G__6132__delegate;
    return G__6132;
  }();
};
cljs.core.truth_ = function truth_(x) {
  return x != null && x !== false;
};
cljs.core.not_native = null;
cljs.core.identical_QMARK_ = function identical_QMARK_(x, y) {
  return x === y;
};
cljs.core.nil_QMARK_ = function nil_QMARK_(x) {
  return x == null;
};
cljs.core.array_QMARK_ = function array_QMARK_(x) {
  return x instanceof Array;
};
cljs.core.number_QMARK_ = function number_QMARK_(n) {
  return typeof n === "number";
};
cljs.core.not = function not(x) {
  if (cljs.core.truth_(x)) {
    return false;
  } else {
    return true;
  }
};
cljs.core.some_QMARK_ = function some_QMARK_(x) {
  return!(x == null);
};
cljs.core.object_QMARK_ = function object_QMARK_(x) {
  if (!(x == null)) {
    return x.constructor === Object;
  } else {
    return false;
  }
};
cljs.core.string_QMARK_ = function string_QMARK_(x) {
  return goog.isString(x);
};
cljs.core.native_satisfies_QMARK_ = function native_satisfies_QMARK_(p, x) {
  var x__$1 = x == null ? null : x;
  if (p[goog.typeOf(x__$1)]) {
    return true;
  } else {
    if (p["_"]) {
      return true;
    } else {
      return false;
    }
  }
};
cljs.core.is_proto_ = function is_proto_(x) {
  return x.constructor.prototype === x;
};
cljs.core._STAR_main_cli_fn_STAR_ = null;
cljs.core.type = function type(x) {
  if (x == null) {
    return null;
  } else {
    return x.constructor;
  }
};
cljs.core.missing_protocol = function missing_protocol(proto, obj) {
  var ty = cljs.core.type.call(null, obj);
  var ty__$1 = cljs.core.truth_(function() {
    var and__3627__auto__ = ty;
    if (cljs.core.truth_(and__3627__auto__)) {
      return ty.cljs$lang$type;
    } else {
      return and__3627__auto__;
    }
  }()) ? ty.cljs$lang$ctorStr : goog.typeOf(obj);
  return new Error(["No protocol method ", proto, " defined for type ", ty__$1, ": ", obj].join(""));
};
cljs.core.type__GT_str = function type__GT_str(ty) {
  var temp__4124__auto__ = ty.cljs$lang$ctorStr;
  if (cljs.core.truth_(temp__4124__auto__)) {
    var s = temp__4124__auto__;
    return s;
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty);
  }
};
cljs.core.make_array = function() {
  var make_array = null;
  var make_array__1 = function(size) {
    return new Array(size);
  };
  var make_array__2 = function(type, size) {
    return make_array.call(null, size);
  };
  make_array = function(type, size) {
    switch(arguments.length) {
      case 1:
        return make_array__1.call(this, type);
      case 2:
        return make_array__2.call(this, type, size);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  make_array.cljs$core$IFn$_invoke$arity$1 = make_array__1;
  make_array.cljs$core$IFn$_invoke$arity$2 = make_array__2;
  return make_array;
}();
cljs.core.aclone = function aclone(arr) {
  var len = arr.length;
  var new_arr = new Array(len);
  var n__4508__auto___6134 = len;
  var i_6135 = 0;
  while (true) {
    if (i_6135 < n__4508__auto___6134) {
      new_arr[i_6135] = arr[i_6135];
      var G__6136 = i_6135 + 1;
      i_6135 = G__6136;
      continue;
    } else {
    }
    break;
  }
  return new_arr;
};
cljs.core.array = function array(var_args) {
  return Array.prototype.slice.call(arguments);
};
cljs.core.aget = function() {
  var aget = null;
  var aget__2 = function(array, i) {
    return array[i];
  };
  var aget__3 = function() {
    var G__6137__delegate = function(array, i, idxs) {
      return cljs.core.apply.call(null, aget, aget.call(null, array, i), idxs);
    };
    var G__6137 = function(array, i, var_args) {
      var idxs = null;
      if (arguments.length > 2) {
        idxs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6137__delegate.call(this, array, i, idxs);
    };
    G__6137.cljs$lang$maxFixedArity = 2;
    G__6137.cljs$lang$applyTo = function(arglist__6138) {
      var array = cljs.core.first(arglist__6138);
      arglist__6138 = cljs.core.next(arglist__6138);
      var i = cljs.core.first(arglist__6138);
      var idxs = cljs.core.rest(arglist__6138);
      return G__6137__delegate(array, i, idxs);
    };
    G__6137.cljs$core$IFn$_invoke$arity$variadic = G__6137__delegate;
    return G__6137;
  }();
  aget = function(array, i, var_args) {
    var idxs = var_args;
    switch(arguments.length) {
      case 2:
        return aget__2.call(this, array, i);
      default:
        return aget__3.cljs$core$IFn$_invoke$arity$variadic(array, i, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aget.cljs$lang$maxFixedArity = 2;
  aget.cljs$lang$applyTo = aget__3.cljs$lang$applyTo;
  aget.cljs$core$IFn$_invoke$arity$2 = aget__2;
  aget.cljs$core$IFn$_invoke$arity$variadic = aget__3.cljs$core$IFn$_invoke$arity$variadic;
  return aget;
}();
cljs.core.aset = function() {
  var aset = null;
  var aset__3 = function(array, i, val) {
    return array[i] = val;
  };
  var aset__4 = function() {
    var G__6139__delegate = function(array, idx, idx2, idxv) {
      return cljs.core.apply.call(null, aset, array[idx], idx2, idxv);
    };
    var G__6139 = function(array, idx, idx2, var_args) {
      var idxv = null;
      if (arguments.length > 3) {
        idxv = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6139__delegate.call(this, array, idx, idx2, idxv);
    };
    G__6139.cljs$lang$maxFixedArity = 3;
    G__6139.cljs$lang$applyTo = function(arglist__6140) {
      var array = cljs.core.first(arglist__6140);
      arglist__6140 = cljs.core.next(arglist__6140);
      var idx = cljs.core.first(arglist__6140);
      arglist__6140 = cljs.core.next(arglist__6140);
      var idx2 = cljs.core.first(arglist__6140);
      var idxv = cljs.core.rest(arglist__6140);
      return G__6139__delegate(array, idx, idx2, idxv);
    };
    G__6139.cljs$core$IFn$_invoke$arity$variadic = G__6139__delegate;
    return G__6139;
  }();
  aset = function(array, idx, idx2, var_args) {
    var idxv = var_args;
    switch(arguments.length) {
      case 3:
        return aset__3.call(this, array, idx, idx2);
      default:
        return aset__4.cljs$core$IFn$_invoke$arity$variadic(array, idx, idx2, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  aset.cljs$lang$maxFixedArity = 3;
  aset.cljs$lang$applyTo = aset__4.cljs$lang$applyTo;
  aset.cljs$core$IFn$_invoke$arity$3 = aset__3;
  aset.cljs$core$IFn$_invoke$arity$variadic = aset__4.cljs$core$IFn$_invoke$arity$variadic;
  return aset;
}();
cljs.core.alength = function alength(array) {
  return array.length;
};
cljs.core.into_array = function() {
  var into_array = null;
  var into_array__1 = function(aseq) {
    return into_array.call(null, null, aseq);
  };
  var into_array__2 = function(type, aseq) {
    return cljs.core.reduce.call(null, function(a, x) {
      a.push(x);
      return a;
    }, [], aseq);
  };
  into_array = function(type, aseq) {
    switch(arguments.length) {
      case 1:
        return into_array__1.call(this, type);
      case 2:
        return into_array__2.call(this, type, aseq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into_array.cljs$core$IFn$_invoke$arity$1 = into_array__1;
  into_array.cljs$core$IFn$_invoke$arity$2 = into_array__2;
  return into_array;
}();
cljs.core.Fn = function() {
  var obj6142 = {};
  return obj6142;
}();
cljs.core.IFn = function() {
  var obj6144 = {};
  return obj6144;
}();
cljs.core._invoke = function() {
  var _invoke = null;
  var _invoke__1 = function(this$) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$1;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$1(this$);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$);
    }
  };
  var _invoke__2 = function(this$, a) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$2;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$2(this$, a);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a);
    }
  };
  var _invoke__3 = function(this$, a, b) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$3;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$3(this$, a, b);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b);
    }
  };
  var _invoke__4 = function(this$, a, b, c) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$4;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$4(this$, a, b, c);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c);
    }
  };
  var _invoke__5 = function(this$, a, b, c, d) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$5;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$5(this$, a, b, c, d);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d);
    }
  };
  var _invoke__6 = function(this$, a, b, c, d, e) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$6;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$6(this$, a, b, c, d, e);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e);
    }
  };
  var _invoke__7 = function(this$, a, b, c, d, e, f) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$7;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$7(this$, a, b, c, d, e, f);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f);
    }
  };
  var _invoke__8 = function(this$, a, b, c, d, e, f, g) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$8;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$8(this$, a, b, c, d, e, f, g);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g);
    }
  };
  var _invoke__9 = function(this$, a, b, c, d, e, f, g, h) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$9;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$9(this$, a, b, c, d, e, f, g, h);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h);
    }
  };
  var _invoke__10 = function(this$, a, b, c, d, e, f, g, h, i) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$10;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$10(this$, a, b, c, d, e, f, g, h, i);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i);
    }
  };
  var _invoke__11 = function(this$, a, b, c, d, e, f, g, h, i, j) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$11;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$11(this$, a, b, c, d, e, f, g, h, i, j);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j);
    }
  };
  var _invoke__12 = function(this$, a, b, c, d, e, f, g, h, i, j, k) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$12;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$12(this$, a, b, c, d, e, f, g, h, i, j, k);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k);
    }
  };
  var _invoke__13 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$13;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$13(this$, a, b, c, d, e, f, g, h, i, j, k, l);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l);
    }
  };
  var _invoke__14 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$14;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$14(this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
    }
  };
  var _invoke__15 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$15;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$15(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    }
  };
  var _invoke__16 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$16;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$16(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    }
  };
  var _invoke__17 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$17;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$17(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    }
  };
  var _invoke__18 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$18;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$18(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    }
  };
  var _invoke__19 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$19;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$19(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    }
  };
  var _invoke__20 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$20;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$20(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    }
  };
  var _invoke__21 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$21;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$21(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    }
  };
  var _invoke__22 = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    if (function() {
      var and__3627__auto__ = this$;
      if (and__3627__auto__) {
        return this$.cljs$core$IFn$_invoke$arity$22;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return this$.cljs$core$IFn$_invoke$arity$22(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    } else {
      var x__4275__auto__ = this$ == null ? null : this$;
      return function() {
        var or__3639__auto__ = cljs.core._invoke[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._invoke["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IFn.-invoke", this$);
          }
        }
      }().call(null, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
  };
  _invoke = function(this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return _invoke__1.call(this, this$);
      case 2:
        return _invoke__2.call(this, this$, a);
      case 3:
        return _invoke__3.call(this, this$, a, b);
      case 4:
        return _invoke__4.call(this, this$, a, b, c);
      case 5:
        return _invoke__5.call(this, this$, a, b, c, d);
      case 6:
        return _invoke__6.call(this, this$, a, b, c, d, e);
      case 7:
        return _invoke__7.call(this, this$, a, b, c, d, e, f);
      case 8:
        return _invoke__8.call(this, this$, a, b, c, d, e, f, g);
      case 9:
        return _invoke__9.call(this, this$, a, b, c, d, e, f, g, h);
      case 10:
        return _invoke__10.call(this, this$, a, b, c, d, e, f, g, h, i);
      case 11:
        return _invoke__11.call(this, this$, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return _invoke__12.call(this, this$, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return _invoke__13.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return _invoke__14.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return _invoke__15.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return _invoke__16.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return _invoke__17.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return _invoke__18.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return _invoke__19.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return _invoke__20.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return _invoke__21.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return _invoke__22.call(this, this$, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _invoke.cljs$core$IFn$_invoke$arity$1 = _invoke__1;
  _invoke.cljs$core$IFn$_invoke$arity$2 = _invoke__2;
  _invoke.cljs$core$IFn$_invoke$arity$3 = _invoke__3;
  _invoke.cljs$core$IFn$_invoke$arity$4 = _invoke__4;
  _invoke.cljs$core$IFn$_invoke$arity$5 = _invoke__5;
  _invoke.cljs$core$IFn$_invoke$arity$6 = _invoke__6;
  _invoke.cljs$core$IFn$_invoke$arity$7 = _invoke__7;
  _invoke.cljs$core$IFn$_invoke$arity$8 = _invoke__8;
  _invoke.cljs$core$IFn$_invoke$arity$9 = _invoke__9;
  _invoke.cljs$core$IFn$_invoke$arity$10 = _invoke__10;
  _invoke.cljs$core$IFn$_invoke$arity$11 = _invoke__11;
  _invoke.cljs$core$IFn$_invoke$arity$12 = _invoke__12;
  _invoke.cljs$core$IFn$_invoke$arity$13 = _invoke__13;
  _invoke.cljs$core$IFn$_invoke$arity$14 = _invoke__14;
  _invoke.cljs$core$IFn$_invoke$arity$15 = _invoke__15;
  _invoke.cljs$core$IFn$_invoke$arity$16 = _invoke__16;
  _invoke.cljs$core$IFn$_invoke$arity$17 = _invoke__17;
  _invoke.cljs$core$IFn$_invoke$arity$18 = _invoke__18;
  _invoke.cljs$core$IFn$_invoke$arity$19 = _invoke__19;
  _invoke.cljs$core$IFn$_invoke$arity$20 = _invoke__20;
  _invoke.cljs$core$IFn$_invoke$arity$21 = _invoke__21;
  _invoke.cljs$core$IFn$_invoke$arity$22 = _invoke__22;
  return _invoke;
}();
cljs.core.ICloneable = function() {
  var obj6146 = {};
  return obj6146;
}();
cljs.core._clone = function _clone(value) {
  if (function() {
    var and__3627__auto__ = value;
    if (and__3627__auto__) {
      return value.cljs$core$ICloneable$_clone$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return value.cljs$core$ICloneable$_clone$arity$1(value);
  } else {
    var x__4275__auto__ = value == null ? null : value;
    return function() {
      var or__3639__auto__ = cljs.core._clone[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._clone["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICloneable.-clone", value);
        }
      }
    }().call(null, value);
  }
};
cljs.core.ICounted = function() {
  var obj6148 = {};
  return obj6148;
}();
cljs.core._count = function _count(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ICounted$_count$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ICounted$_count$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._count[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._count["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICounted.-count", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IEmptyableCollection = function() {
  var obj6150 = {};
  return obj6150;
}();
cljs.core._empty = function _empty(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IEmptyableCollection$_empty$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._empty[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._empty["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEmptyableCollection.-empty", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ICollection = function() {
  var obj6152 = {};
  return obj6152;
}();
cljs.core._conj = function _conj(coll, o) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ICollection$_conj$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ICollection$_conj$arity$2(coll, o);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._conj[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._conj["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ICollection.-conj", coll);
        }
      }
    }().call(null, coll, o);
  }
};
cljs.core.IIndexed = function() {
  var obj6154 = {};
  return obj6154;
}();
cljs.core._nth = function() {
  var _nth = null;
  var _nth__2 = function(coll, n) {
    if (function() {
      var and__3627__auto__ = coll;
      if (and__3627__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$2;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$2(coll, n);
    } else {
      var x__4275__auto__ = coll == null ? null : coll;
      return function() {
        var or__3639__auto__ = cljs.core._nth[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._nth["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n);
    }
  };
  var _nth__3 = function(coll, n, not_found) {
    if (function() {
      var and__3627__auto__ = coll;
      if (and__3627__auto__) {
        return coll.cljs$core$IIndexed$_nth$arity$3;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return coll.cljs$core$IIndexed$_nth$arity$3(coll, n, not_found);
    } else {
      var x__4275__auto__ = coll == null ? null : coll;
      return function() {
        var or__3639__auto__ = cljs.core._nth[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._nth["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IIndexed.-nth", coll);
          }
        }
      }().call(null, coll, n, not_found);
    }
  };
  _nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return _nth__2.call(this, coll, n);
      case 3:
        return _nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _nth.cljs$core$IFn$_invoke$arity$2 = _nth__2;
  _nth.cljs$core$IFn$_invoke$arity$3 = _nth__3;
  return _nth;
}();
cljs.core.ASeq = function() {
  var obj6156 = {};
  return obj6156;
}();
cljs.core.ISeq = function() {
  var obj6158 = {};
  return obj6158;
}();
cljs.core._first = function _first(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISeq$_first$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_first$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._first[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._first["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._rest = function _rest(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISeq$_rest$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISeq$_rest$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._rest[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._rest["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeq.-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INext = function() {
  var obj6160 = {};
  return obj6160;
}();
cljs.core._next = function _next(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$INext$_next$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$INext$_next$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._next[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._next["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INext.-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ILookup = function() {
  var obj6162 = {};
  return obj6162;
}();
cljs.core._lookup = function() {
  var _lookup = null;
  var _lookup__2 = function(o, k) {
    if (function() {
      var and__3627__auto__ = o;
      if (and__3627__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$2;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$2(o, k);
    } else {
      var x__4275__auto__ = o == null ? null : o;
      return function() {
        var or__3639__auto__ = cljs.core._lookup[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._lookup["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k);
    }
  };
  var _lookup__3 = function(o, k, not_found) {
    if (function() {
      var and__3627__auto__ = o;
      if (and__3627__auto__) {
        return o.cljs$core$ILookup$_lookup$arity$3;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return o.cljs$core$ILookup$_lookup$arity$3(o, k, not_found);
    } else {
      var x__4275__auto__ = o == null ? null : o;
      return function() {
        var or__3639__auto__ = cljs.core._lookup[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._lookup["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ILookup.-lookup", o);
          }
        }
      }().call(null, o, k, not_found);
    }
  };
  _lookup = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return _lookup__2.call(this, o, k);
      case 3:
        return _lookup__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _lookup.cljs$core$IFn$_invoke$arity$2 = _lookup__2;
  _lookup.cljs$core$IFn$_invoke$arity$3 = _lookup__3;
  return _lookup;
}();
cljs.core.IAssociative = function() {
  var obj6164 = {};
  return obj6164;
}();
cljs.core._contains_key_QMARK_ = function _contains_key_QMARK_(coll, k) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll, k);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._contains_key_QMARK_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._contains_key_QMARK_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-contains-key?", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core._assoc = function _assoc(coll, k, v) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IAssociative$_assoc$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IAssociative$_assoc$arity$3(coll, k, v);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._assoc[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._assoc["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IAssociative.-assoc", coll);
        }
      }
    }().call(null, coll, k, v);
  }
};
cljs.core.IMap = function() {
  var obj6166 = {};
  return obj6166;
}();
cljs.core._dissoc = function _dissoc(coll, k) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IMap$_dissoc$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IMap$_dissoc$arity$2(coll, k);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._dissoc[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._dissoc["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMap.-dissoc", coll);
        }
      }
    }().call(null, coll, k);
  }
};
cljs.core.IMapEntry = function() {
  var obj6168 = {};
  return obj6168;
}();
cljs.core._key = function _key(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IMapEntry$_key$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_key$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._key[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._key["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-key", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._val = function _val(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IMapEntry$_val$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IMapEntry$_val$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._val[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._val["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMapEntry.-val", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISet = function() {
  var obj6170 = {};
  return obj6170;
}();
cljs.core._disjoin = function _disjoin(coll, v) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISet$_disjoin$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISet$_disjoin$arity$2(coll, v);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._disjoin[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._disjoin["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISet.-disjoin", coll);
        }
      }
    }().call(null, coll, v);
  }
};
cljs.core.IStack = function() {
  var obj6172 = {};
  return obj6172;
}();
cljs.core._peek = function _peek(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IStack$_peek$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_peek$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._peek[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._peek["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-peek", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._pop = function _pop(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IStack$_pop$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IStack$_pop$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._pop[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._pop["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IStack.-pop", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IVector = function() {
  var obj6174 = {};
  return obj6174;
}();
cljs.core._assoc_n = function _assoc_n(coll, n, val) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IVector$_assoc_n$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IVector$_assoc_n$arity$3(coll, n, val);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._assoc_n[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._assoc_n["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IVector.-assoc-n", coll);
        }
      }
    }().call(null, coll, n, val);
  }
};
cljs.core.IDeref = function() {
  var obj6176 = {};
  return obj6176;
}();
cljs.core._deref = function _deref(o) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IDeref$_deref$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IDeref$_deref$arity$1(o);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._deref[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._deref["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDeref.-deref", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IDerefWithTimeout = function() {
  var obj6178 = {};
  return obj6178;
}();
cljs.core._deref_with_timeout = function _deref_with_timeout(o, msec, timeout_val) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o, msec, timeout_val);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._deref_with_timeout[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._deref_with_timeout["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IDerefWithTimeout.-deref-with-timeout", o);
        }
      }
    }().call(null, o, msec, timeout_val);
  }
};
cljs.core.IMeta = function() {
  var obj6180 = {};
  return obj6180;
}();
cljs.core._meta = function _meta(o) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IMeta$_meta$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IMeta$_meta$arity$1(o);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._meta[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._meta["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMeta.-meta", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.IWithMeta = function() {
  var obj6182 = {};
  return obj6182;
}();
cljs.core._with_meta = function _with_meta(o, meta) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IWithMeta$_with_meta$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IWithMeta$_with_meta$arity$2(o, meta);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._with_meta[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._with_meta["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWithMeta.-with-meta", o);
        }
      }
    }().call(null, o, meta);
  }
};
cljs.core.IReduce = function() {
  var obj6184 = {};
  return obj6184;
}();
cljs.core._reduce = function() {
  var _reduce = null;
  var _reduce__2 = function(coll, f) {
    if (function() {
      var and__3627__auto__ = coll;
      if (and__3627__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$2;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$2(coll, f);
    } else {
      var x__4275__auto__ = coll == null ? null : coll;
      return function() {
        var or__3639__auto__ = cljs.core._reduce[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._reduce["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f);
    }
  };
  var _reduce__3 = function(coll, f, start) {
    if (function() {
      var and__3627__auto__ = coll;
      if (and__3627__auto__) {
        return coll.cljs$core$IReduce$_reduce$arity$3;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return coll.cljs$core$IReduce$_reduce$arity$3(coll, f, start);
    } else {
      var x__4275__auto__ = coll == null ? null : coll;
      return function() {
        var or__3639__auto__ = cljs.core._reduce[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._reduce["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "IReduce.-reduce", coll);
          }
        }
      }().call(null, coll, f, start);
    }
  };
  _reduce = function(coll, f, start) {
    switch(arguments.length) {
      case 2:
        return _reduce__2.call(this, coll, f);
      case 3:
        return _reduce__3.call(this, coll, f, start);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _reduce.cljs$core$IFn$_invoke$arity$2 = _reduce__2;
  _reduce.cljs$core$IFn$_invoke$arity$3 = _reduce__3;
  return _reduce;
}();
cljs.core.IKVReduce = function() {
  var obj6186 = {};
  return obj6186;
}();
cljs.core._kv_reduce = function _kv_reduce(coll, f, init) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IKVReduce$_kv_reduce$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll, f, init);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._kv_reduce[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._kv_reduce["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IKVReduce.-kv-reduce", coll);
        }
      }
    }().call(null, coll, f, init);
  }
};
cljs.core.IEquiv = function() {
  var obj6188 = {};
  return obj6188;
}();
cljs.core._equiv = function _equiv(o, other) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IEquiv$_equiv$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IEquiv$_equiv$arity$2(o, other);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._equiv[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._equiv["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEquiv.-equiv", o);
        }
      }
    }().call(null, o, other);
  }
};
cljs.core.IHash = function() {
  var obj6190 = {};
  return obj6190;
}();
cljs.core._hash = function _hash(o) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IHash$_hash$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IHash$_hash$arity$1(o);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._hash[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._hash["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IHash.-hash", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISeqable = function() {
  var obj6192 = {};
  return obj6192;
}();
cljs.core._seq = function _seq(o) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$ISeqable$_seq$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$ISeqable$_seq$arity$1(o);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._seq[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._seq["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISeqable.-seq", o);
        }
      }
    }().call(null, o);
  }
};
cljs.core.ISequential = function() {
  var obj6194 = {};
  return obj6194;
}();
cljs.core.IList = function() {
  var obj6196 = {};
  return obj6196;
}();
cljs.core.IRecord = function() {
  var obj6198 = {};
  return obj6198;
}();
cljs.core.IReversible = function() {
  var obj6200 = {};
  return obj6200;
}();
cljs.core._rseq = function _rseq(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IReversible$_rseq$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IReversible$_rseq$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._rseq[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._rseq["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReversible.-rseq", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ISorted = function() {
  var obj6202 = {};
  return obj6202;
}();
cljs.core._sorted_seq = function _sorted_seq(coll, ascending_QMARK_) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll, ascending_QMARK_);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._sorted_seq[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._sorted_seq["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq", coll);
        }
      }
    }().call(null, coll, ascending_QMARK_);
  }
};
cljs.core._sorted_seq_from = function _sorted_seq_from(coll, k, ascending_QMARK_) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISorted$_sorted_seq_from$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll, k, ascending_QMARK_);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._sorted_seq_from[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._sorted_seq_from["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-sorted-seq-from", coll);
        }
      }
    }().call(null, coll, k, ascending_QMARK_);
  }
};
cljs.core._entry_key = function _entry_key(coll, entry) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISorted$_entry_key$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_entry_key$arity$2(coll, entry);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._entry_key[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._entry_key["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-entry-key", coll);
        }
      }
    }().call(null, coll, entry);
  }
};
cljs.core._comparator = function _comparator(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$ISorted$_comparator$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$ISorted$_comparator$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._comparator[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._comparator["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ISorted.-comparator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IWriter = function() {
  var obj6204 = {};
  return obj6204;
}();
cljs.core._write = function _write(writer, s) {
  if (function() {
    var and__3627__auto__ = writer;
    if (and__3627__auto__) {
      return writer.cljs$core$IWriter$_write$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_write$arity$2(writer, s);
  } else {
    var x__4275__auto__ = writer == null ? null : writer;
    return function() {
      var or__3639__auto__ = cljs.core._write[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._write["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-write", writer);
        }
      }
    }().call(null, writer, s);
  }
};
cljs.core._flush = function _flush(writer) {
  if (function() {
    var and__3627__auto__ = writer;
    if (and__3627__auto__) {
      return writer.cljs$core$IWriter$_flush$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return writer.cljs$core$IWriter$_flush$arity$1(writer);
  } else {
    var x__4275__auto__ = writer == null ? null : writer;
    return function() {
      var or__3639__auto__ = cljs.core._flush[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._flush["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWriter.-flush", writer);
        }
      }
    }().call(null, writer);
  }
};
cljs.core.IPrintWithWriter = function() {
  var obj6206 = {};
  return obj6206;
}();
cljs.core._pr_writer = function _pr_writer(o, writer, opts) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o, writer, opts);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._pr_writer[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._pr_writer["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPrintWithWriter.-pr-writer", o);
        }
      }
    }().call(null, o, writer, opts);
  }
};
cljs.core.IPending = function() {
  var obj6208 = {};
  return obj6208;
}();
cljs.core._realized_QMARK_ = function _realized_QMARK_(d) {
  if (function() {
    var and__3627__auto__ = d;
    if (and__3627__auto__) {
      return d.cljs$core$IPending$_realized_QMARK_$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return d.cljs$core$IPending$_realized_QMARK_$arity$1(d);
  } else {
    var x__4275__auto__ = d == null ? null : d;
    return function() {
      var or__3639__auto__ = cljs.core._realized_QMARK_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._realized_QMARK_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IPending.-realized?", d);
        }
      }
    }().call(null, d);
  }
};
cljs.core.IWatchable = function() {
  var obj6210 = {};
  return obj6210;
}();
cljs.core._notify_watches = function _notify_watches(this$, oldval, newval) {
  if (function() {
    var and__3627__auto__ = this$;
    if (and__3627__auto__) {
      return this$.cljs$core$IWatchable$_notify_watches$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$, oldval, newval);
  } else {
    var x__4275__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3639__auto__ = cljs.core._notify_watches[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._notify_watches["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-notify-watches", this$);
        }
      }
    }().call(null, this$, oldval, newval);
  }
};
cljs.core._add_watch = function _add_watch(this$, key, f) {
  if (function() {
    var and__3627__auto__ = this$;
    if (and__3627__auto__) {
      return this$.cljs$core$IWatchable$_add_watch$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_add_watch$arity$3(this$, key, f);
  } else {
    var x__4275__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3639__auto__ = cljs.core._add_watch[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._add_watch["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-add-watch", this$);
        }
      }
    }().call(null, this$, key, f);
  }
};
cljs.core._remove_watch = function _remove_watch(this$, key) {
  if (function() {
    var and__3627__auto__ = this$;
    if (and__3627__auto__) {
      return this$.cljs$core$IWatchable$_remove_watch$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$, key);
  } else {
    var x__4275__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3639__auto__ = cljs.core._remove_watch[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._remove_watch["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IWatchable.-remove-watch", this$);
        }
      }
    }().call(null, this$, key);
  }
};
cljs.core.IEditableCollection = function() {
  var obj6212 = {};
  return obj6212;
}();
cljs.core._as_transient = function _as_transient(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IEditableCollection$_as_transient$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._as_transient[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._as_transient["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEditableCollection.-as-transient", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.ITransientCollection = function() {
  var obj6214 = {};
  return obj6214;
}();
cljs.core._conj_BANG_ = function _conj_BANG_(tcoll, val) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll, val);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._conj_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._conj_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-conj!", tcoll);
        }
      }
    }().call(null, tcoll, val);
  }
};
cljs.core._persistent_BANG_ = function _persistent_BANG_(tcoll) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._persistent_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._persistent_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientCollection.-persistent!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientAssociative = function() {
  var obj6216 = {};
  return obj6216;
}();
cljs.core._assoc_BANG_ = function _assoc_BANG_(tcoll, key, val) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll, key, val);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._assoc_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._assoc_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientAssociative.-assoc!", tcoll);
        }
      }
    }().call(null, tcoll, key, val);
  }
};
cljs.core.ITransientMap = function() {
  var obj6218 = {};
  return obj6218;
}();
cljs.core._dissoc_BANG_ = function _dissoc_BANG_(tcoll, key) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll, key);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._dissoc_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._dissoc_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientMap.-dissoc!", tcoll);
        }
      }
    }().call(null, tcoll, key);
  }
};
cljs.core.ITransientVector = function() {
  var obj6220 = {};
  return obj6220;
}();
cljs.core._assoc_n_BANG_ = function _assoc_n_BANG_(tcoll, n, val) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll, n, val);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._assoc_n_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._assoc_n_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-assoc-n!", tcoll);
        }
      }
    }().call(null, tcoll, n, val);
  }
};
cljs.core._pop_BANG_ = function _pop_BANG_(tcoll) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._pop_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._pop_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientVector.-pop!", tcoll);
        }
      }
    }().call(null, tcoll);
  }
};
cljs.core.ITransientSet = function() {
  var obj6222 = {};
  return obj6222;
}();
cljs.core._disjoin_BANG_ = function _disjoin_BANG_(tcoll, v) {
  if (function() {
    var and__3627__auto__ = tcoll;
    if (and__3627__auto__) {
      return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll, v);
  } else {
    var x__4275__auto__ = tcoll == null ? null : tcoll;
    return function() {
      var or__3639__auto__ = cljs.core._disjoin_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._disjoin_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "ITransientSet.-disjoin!", tcoll);
        }
      }
    }().call(null, tcoll, v);
  }
};
cljs.core.IComparable = function() {
  var obj6224 = {};
  return obj6224;
}();
cljs.core._compare = function _compare(x, y) {
  if (function() {
    var and__3627__auto__ = x;
    if (and__3627__auto__) {
      return x.cljs$core$IComparable$_compare$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return x.cljs$core$IComparable$_compare$arity$2(x, y);
  } else {
    var x__4275__auto__ = x == null ? null : x;
    return function() {
      var or__3639__auto__ = cljs.core._compare[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._compare["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IComparable.-compare", x);
        }
      }
    }().call(null, x, y);
  }
};
cljs.core.IChunk = function() {
  var obj6226 = {};
  return obj6226;
}();
cljs.core._drop_first = function _drop_first(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IChunk$_drop_first$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._drop_first[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._drop_first["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunk.-drop-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedSeq = function() {
  var obj6228 = {};
  return obj6228;
}();
cljs.core._chunked_first = function _chunked_first(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._chunked_first[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._chunked_first["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-first", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core._chunked_rest = function _chunked_rest(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._chunked_rest[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._chunked_rest["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedSeq.-chunked-rest", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.IChunkedNext = function() {
  var obj6230 = {};
  return obj6230;
}();
cljs.core._chunked_next = function _chunked_next(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IChunkedNext$_chunked_next$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._chunked_next[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._chunked_next["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IChunkedNext.-chunked-next", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.INamed = function() {
  var obj6232 = {};
  return obj6232;
}();
cljs.core._name = function _name(x) {
  if (function() {
    var and__3627__auto__ = x;
    if (and__3627__auto__) {
      return x.cljs$core$INamed$_name$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_name$arity$1(x);
  } else {
    var x__4275__auto__ = x == null ? null : x;
    return function() {
      var or__3639__auto__ = cljs.core._name[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._name["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-name", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._namespace = function _namespace(x) {
  if (function() {
    var and__3627__auto__ = x;
    if (and__3627__auto__) {
      return x.cljs$core$INamed$_namespace$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return x.cljs$core$INamed$_namespace$arity$1(x);
  } else {
    var x__4275__auto__ = x == null ? null : x;
    return function() {
      var or__3639__auto__ = cljs.core._namespace[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._namespace["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "INamed.-namespace", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.IAtom = function() {
  var obj6234 = {};
  return obj6234;
}();
cljs.core.IReset = function() {
  var obj6236 = {};
  return obj6236;
}();
cljs.core._reset_BANG_ = function _reset_BANG_(o, new_value) {
  if (function() {
    var and__3627__auto__ = o;
    if (and__3627__auto__) {
      return o.cljs$core$IReset$_reset_BANG_$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return o.cljs$core$IReset$_reset_BANG_$arity$2(o, new_value);
  } else {
    var x__4275__auto__ = o == null ? null : o;
    return function() {
      var or__3639__auto__ = cljs.core._reset_BANG_[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._reset_BANG_["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IReset.-reset!", o);
        }
      }
    }().call(null, o, new_value);
  }
};
cljs.core.ISwap = function() {
  var obj6238 = {};
  return obj6238;
}();
cljs.core._swap_BANG_ = function() {
  var _swap_BANG_ = null;
  var _swap_BANG___2 = function(o, f) {
    if (function() {
      var and__3627__auto__ = o;
      if (and__3627__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$2;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$2(o, f);
    } else {
      var x__4275__auto__ = o == null ? null : o;
      return function() {
        var or__3639__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f);
    }
  };
  var _swap_BANG___3 = function(o, f, a) {
    if (function() {
      var and__3627__auto__ = o;
      if (and__3627__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$3;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$3(o, f, a);
    } else {
      var x__4275__auto__ = o == null ? null : o;
      return function() {
        var or__3639__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a);
    }
  };
  var _swap_BANG___4 = function(o, f, a, b) {
    if (function() {
      var and__3627__auto__ = o;
      if (and__3627__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$4;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$4(o, f, a, b);
    } else {
      var x__4275__auto__ = o == null ? null : o;
      return function() {
        var or__3639__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b);
    }
  };
  var _swap_BANG___5 = function(o, f, a, b, xs) {
    if (function() {
      var and__3627__auto__ = o;
      if (and__3627__auto__) {
        return o.cljs$core$ISwap$_swap_BANG_$arity$5;
      } else {
        return and__3627__auto__;
      }
    }()) {
      return o.cljs$core$ISwap$_swap_BANG_$arity$5(o, f, a, b, xs);
    } else {
      var x__4275__auto__ = o == null ? null : o;
      return function() {
        var or__3639__auto__ = cljs.core._swap_BANG_[goog.typeOf(x__4275__auto__)];
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = cljs.core._swap_BANG_["_"];
          if (or__3639__auto____$1) {
            return or__3639__auto____$1;
          } else {
            throw cljs.core.missing_protocol.call(null, "ISwap.-swap!", o);
          }
        }
      }().call(null, o, f, a, b, xs);
    }
  };
  _swap_BANG_ = function(o, f, a, b, xs) {
    switch(arguments.length) {
      case 2:
        return _swap_BANG___2.call(this, o, f);
      case 3:
        return _swap_BANG___3.call(this, o, f, a);
      case 4:
        return _swap_BANG___4.call(this, o, f, a, b);
      case 5:
        return _swap_BANG___5.call(this, o, f, a, b, xs);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _swap_BANG_.cljs$core$IFn$_invoke$arity$2 = _swap_BANG___2;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$3 = _swap_BANG___3;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$4 = _swap_BANG___4;
  _swap_BANG_.cljs$core$IFn$_invoke$arity$5 = _swap_BANG___5;
  return _swap_BANG_;
}();
cljs.core.IIterable = function() {
  var obj6240 = {};
  return obj6240;
}();
cljs.core._iterator = function _iterator(coll) {
  if (function() {
    var and__3627__auto__ = coll;
    if (and__3627__auto__) {
      return coll.cljs$core$IIterable$_iterator$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return coll.cljs$core$IIterable$_iterator$arity$1(coll);
  } else {
    var x__4275__auto__ = coll == null ? null : coll;
    return function() {
      var or__3639__auto__ = cljs.core._iterator[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._iterator["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IIterable.-iterator", coll);
        }
      }
    }().call(null, coll);
  }
};
cljs.core.StringBufferWriter = function(sb) {
  this.sb = sb;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 1073741824;
};
cljs.core.StringBufferWriter.cljs$lang$type = true;
cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";
cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/StringBufferWriter");
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = function(_, s) {
  var self__ = this;
  var ___$1 = this;
  return self__.sb.append(s);
};
cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return null;
};
cljs.core.__GT_StringBufferWriter = function __GT_StringBufferWriter(sb) {
  return new cljs.core.StringBufferWriter(sb);
};
cljs.core.pr_str_STAR_ = function pr_str_STAR_(obj) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core._pr_writer.call(null, obj, writer, cljs.core.pr_opts.call(null));
  cljs.core._flush.call(null, writer);
  return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
};
cljs.core.int_rotate_left = function int_rotate_left(x, n) {
  return x << n | x >>> -n;
};
if (typeof Math.imul !== "undefined" && !(Math.imul.call(null, 4294967295, 5) === 0)) {
  cljs.core.imul = function imul(a, b) {
    return Math.imul.call(null, a, b);
  };
} else {
  cljs.core.imul = function imul(a, b) {
    var ah = a >>> 16 & 65535;
    var al = a & 65535;
    var bh = b >>> 16 & 65535;
    var bl = b & 65535;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
  };
}
cljs.core.m3_seed = 0;
cljs.core.m3_C1 = 3432918353;
cljs.core.m3_C2 = 461845907;
cljs.core.m3_mix_K1 = function m3_mix_K1(k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, cljs.core.imul.call(null, k1, cljs.core.m3_C1), 15), cljs.core.m3_C2);
};
cljs.core.m3_mix_H1 = function m3_mix_H1(h1, k1) {
  return cljs.core.imul.call(null, cljs.core.int_rotate_left.call(null, h1 ^ k1, 13), 5) + 3864292196;
};
cljs.core.m3_fmix = function m3_fmix(h1, len) {
  var h1__$1 = h1;
  var h1__$2 = h1__$1 ^ len;
  var h1__$3 = h1__$2 ^ h1__$2 >>> 16;
  var h1__$4 = cljs.core.imul.call(null, h1__$3, 2246822507);
  var h1__$5 = h1__$4 ^ h1__$4 >>> 13;
  var h1__$6 = cljs.core.imul.call(null, h1__$5, 3266489909);
  var h1__$7 = h1__$6 ^ h1__$6 >>> 16;
  return h1__$7;
};
cljs.core.m3_hash_int = function m3_hash_int(in$) {
  if (in$ === 0) {
    return in$;
  } else {
    var k1 = cljs.core.m3_mix_K1.call(null, in$);
    var h1 = cljs.core.m3_mix_H1.call(null, cljs.core.m3_seed, k1);
    return cljs.core.m3_fmix.call(null, h1, 4);
  }
};
cljs.core.m3_hash_unencoded_chars = function m3_hash_unencoded_chars(in$) {
  var h1 = function() {
    var i = 1;
    var h1 = cljs.core.m3_seed;
    while (true) {
      if (i < in$.length) {
        var G__6241 = i + 2;
        var G__6242 = cljs.core.m3_mix_H1.call(null, h1, cljs.core.m3_mix_K1.call(null, in$.charCodeAt(i - 1) | in$.charCodeAt(i) << 16));
        i = G__6241;
        h1 = G__6242;
        continue;
      } else {
        return h1;
      }
      break;
    }
  }();
  var h1__$1 = (in$.length & 1) === 1 ? h1 ^ cljs.core.m3_mix_K1.call(null, in$.charCodeAt(in$.length - 1)) : h1;
  return cljs.core.m3_fmix.call(null, h1__$1, cljs.core.imul.call(null, 2, in$.length));
};
cljs.core.string_hash_cache = function() {
  var obj6244 = {};
  return obj6244;
}();
cljs.core.string_hash_cache_count = 0;
cljs.core.hash_string_STAR_ = function hash_string_STAR_(s) {
  if (!(s == null)) {
    var len = s.length;
    if (len > 0) {
      var i = 0;
      var hash = 0;
      while (true) {
        if (i < len) {
          var G__6245 = i + 1;
          var G__6246 = cljs.core.imul.call(null, 31, hash) + s.charCodeAt(i);
          i = G__6245;
          hash = G__6246;
          continue;
        } else {
          return hash;
        }
        break;
      }
    } else {
      return 0;
    }
  } else {
    return 0;
  }
};
cljs.core.add_to_string_hash_cache = function add_to_string_hash_cache(k) {
  var h = cljs.core.hash_string_STAR_.call(null, k);
  cljs.core.string_hash_cache[k] = h;
  cljs.core.string_hash_cache_count = cljs.core.string_hash_cache_count + 1;
  return h;
};
cljs.core.hash_string = function hash_string(k) {
  if (cljs.core.string_hash_cache_count > 255) {
    cljs.core.string_hash_cache = function() {
      var obj6250 = {};
      return obj6250;
    }();
    cljs.core.string_hash_cache_count = 0;
  } else {
  }
  var h = cljs.core.string_hash_cache[k];
  if (typeof h === "number") {
    return h;
  } else {
    return cljs.core.add_to_string_hash_cache.call(null, k);
  }
};
cljs.core.hash = function hash(o) {
  if (function() {
    var G__6252 = o;
    if (G__6252) {
      var bit__4295__auto__ = G__6252.cljs$lang$protocol_mask$partition0$ & 4194304;
      if (bit__4295__auto__ || G__6252.cljs$core$IHash$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._hash.call(null, o);
  } else {
    if (typeof o === "number") {
      return Math.floor.call(null, o) % 2147483647;
    } else {
      if (o === true) {
        return 1;
      } else {
        if (o === false) {
          return 0;
        } else {
          if (typeof o === "string") {
            return cljs.core.m3_hash_int.call(null, cljs.core.hash_string.call(null, o));
          } else {
            if (o == null) {
              return 0;
            } else {
              return cljs.core._hash.call(null, o);
            }
          }
        }
      }
    }
  }
};
cljs.core.hash_combine = function hash_combine(seed, hash) {
  return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
};
cljs.core.instance_QMARK_ = function instance_QMARK_(t, o) {
  return o instanceof t;
};
cljs.core.symbol_QMARK_ = function symbol_QMARK_(x) {
  return x instanceof cljs.core.Symbol;
};
cljs.core.hash_symbol = function hash_symbol(sym) {
  return cljs.core.hash_combine.call(null, cljs.core.m3_hash_unencoded_chars.call(null, sym.name), cljs.core.hash_string.call(null, sym.ns));
};
cljs.core.compare_symbols = function compare_symbols(a, b) {
  if (cljs.core.truth_(cljs.core._EQ_.call(null, a, b))) {
    return 0;
  } else {
    if (cljs.core.truth_(function() {
      var and__3627__auto__ = cljs.core.not.call(null, a.ns);
      if (and__3627__auto__) {
        return b.ns;
      } else {
        return and__3627__auto__;
      }
    }())) {
      return-1;
    } else {
      if (cljs.core.truth_(a.ns)) {
        if (cljs.core.not.call(null, b.ns)) {
          return 1;
        } else {
          var nsc = cljs.core.compare.call(null, a.ns, b.ns);
          if (nsc === 0) {
            return cljs.core.compare.call(null, a.name, b.name);
          } else {
            return nsc;
          }
        }
      } else {
        return cljs.core.compare.call(null, a.name, b.name);
      }
    }
  }
};
cljs.core.Symbol = function(ns, name, str, _hash, _meta) {
  this.ns = ns;
  this.name = name;
  this.str = str;
  this._hash = _hash;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition0$ = 2154168321;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Symbol.cljs$lang$type = true;
cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";
cljs.core.Symbol.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Symbol");
};
cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, self__.str);
};
cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = function(sym) {
  var self__ = this;
  var sym__$1 = this;
  var h__4050__auto__ = self__._hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_symbol.call(null, sym__$1);
    self__._hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Symbol(self__.ns, self__.name, self__.str, self__._hash, new_meta);
};
cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__._meta;
};
cljs.core.Symbol.prototype.call = function() {
  var G__6254 = null;
  var G__6254__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, null);
  };
  var G__6254__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var sym = self____$1;
    return cljs.core._lookup.call(null, coll, sym, not_found);
  };
  G__6254 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6254__2.call(this, self__, coll);
      case 3:
        return G__6254__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6254.cljs$core$IFn$_invoke$arity$2 = G__6254__2;
  G__6254.cljs$core$IFn$_invoke$arity$3 = G__6254__3;
  return G__6254;
}();
cljs.core.Symbol.prototype.apply = function(self__, args6253) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6253)));
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, null);
};
cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var sym = this;
  return cljs.core._lookup.call(null, coll, sym, not_found);
};
cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Symbol) {
    return self__.str === other.str;
  } else {
    return false;
  }
};
cljs.core.Symbol.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.str;
};
cljs.core.Symbol.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Symbol = function __GT_Symbol(ns, name, str, _hash, _meta) {
  return new cljs.core.Symbol(ns, name, str, _hash, _meta);
};
cljs.core.symbol = function() {
  var symbol = null;
  var symbol__1 = function(name) {
    if (name instanceof cljs.core.Symbol) {
      return name;
    } else {
      return symbol.call(null, null, name);
    }
  };
  var symbol__2 = function(ns, name) {
    var sym_str = !(ns == null) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) : name;
    return new cljs.core.Symbol(ns, name, sym_str, null, null);
  };
  symbol = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return symbol__1.call(this, ns);
      case 2:
        return symbol__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  symbol.cljs$core$IFn$_invoke$arity$1 = symbol__1;
  symbol.cljs$core$IFn$_invoke$arity$2 = symbol__2;
  return symbol;
}();
cljs.core.iterable_QMARK_ = function iterable_QMARK_(x) {
  var G__6256 = x;
  if (G__6256) {
    var bit__4302__auto__ = null;
    if (cljs.core.truth_(function() {
      var or__3639__auto__ = bit__4302__auto__;
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return G__6256.cljs$core$IIterable$;
      }
    }())) {
      return true;
    } else {
      if (!G__6256.cljs$lang$protocol_mask$partition$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__6256);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIterable, G__6256);
  }
};
cljs.core.clone = function clone(value) {
  return cljs.core._clone.call(null, value);
};
cljs.core.cloneable_QMARK_ = function cloneable_QMARK_(value) {
  var G__6258 = value;
  if (G__6258) {
    var bit__4302__auto__ = G__6258.cljs$lang$protocol_mask$partition1$ & 8192;
    if (bit__4302__auto__ || G__6258.cljs$core$ICloneable$) {
      return true;
    } else {
      if (!G__6258.cljs$lang$protocol_mask$partition1$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__6258);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICloneable, G__6258);
  }
};
cljs.core.seq = function seq(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6260 = coll;
      if (G__6260) {
        var bit__4295__auto__ = G__6260.cljs$lang$protocol_mask$partition0$ & 8388608;
        if (bit__4295__auto__ || G__6260.cljs$core$ISeqable$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._seq.call(null, coll);
    } else {
      if (coll instanceof Array) {
        if (coll.length === 0) {
          return null;
        } else {
          return new cljs.core.IndexedSeq(coll, 0);
        }
      } else {
        if (typeof coll === "string") {
          if (coll.length === 0) {
            return null;
          } else {
            return new cljs.core.IndexedSeq(coll, 0);
          }
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, coll)) {
            return cljs.core._seq.call(null, coll);
          } else {
            throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll) + " is not ISeqable");
          }
        }
      }
    }
  }
};
cljs.core.first = function first(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6262 = coll;
      if (G__6262) {
        var bit__4295__auto__ = G__6262.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4295__auto__ || G__6262.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._first.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s == null) {
        return null;
      } else {
        return cljs.core._first.call(null, s);
      }
    }
  }
};
cljs.core.rest = function rest(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6264 = coll;
      if (G__6264) {
        var bit__4295__auto__ = G__6264.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4295__auto__ || G__6264.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._rest.call(null, coll);
    } else {
      var s = cljs.core.seq.call(null, coll);
      if (s) {
        return cljs.core._rest.call(null, s);
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.next = function next(coll) {
  if (coll == null) {
    return null;
  } else {
    if (function() {
      var G__6266 = coll;
      if (G__6266) {
        var bit__4295__auto__ = G__6266.cljs$lang$protocol_mask$partition0$ & 128;
        if (bit__4295__auto__ || G__6266.cljs$core$INext$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._next.call(null, coll);
    } else {
      return cljs.core.seq.call(null, cljs.core.rest.call(null, coll));
    }
  }
};
cljs.core._EQ_ = function() {
  var _EQ_ = null;
  var _EQ___1 = function(x) {
    return true;
  };
  var _EQ___2 = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      return x === y || cljs.core._equiv.call(null, x, y);
    }
  };
  var _EQ___3 = function() {
    var G__6267__delegate = function(x, y, more) {
      while (true) {
        if (_EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__6268 = y;
            var G__6269 = cljs.core.first.call(null, more);
            var G__6270 = cljs.core.next.call(null, more);
            x = G__6268;
            y = G__6269;
            more = G__6270;
            continue;
          } else {
            return _EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6267 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6267__delegate.call(this, x, y, more);
    };
    G__6267.cljs$lang$maxFixedArity = 2;
    G__6267.cljs$lang$applyTo = function(arglist__6271) {
      var x = cljs.core.first(arglist__6271);
      arglist__6271 = cljs.core.next(arglist__6271);
      var y = cljs.core.first(arglist__6271);
      var more = cljs.core.rest(arglist__6271);
      return G__6267__delegate(x, y, more);
    };
    G__6267.cljs$core$IFn$_invoke$arity$variadic = G__6267__delegate;
    return G__6267;
  }();
  _EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ___1.call(this, x);
      case 2:
        return _EQ___2.call(this, x, y);
      default:
        return _EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ_.cljs$lang$maxFixedArity = 2;
  _EQ_.cljs$lang$applyTo = _EQ___3.cljs$lang$applyTo;
  _EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ___1;
  _EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ___2;
  _EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ_;
}();
cljs.core.mix_collection_hash = function mix_collection_hash(hash_basis, count) {
  var h1 = cljs.core.m3_seed;
  var k1 = cljs.core.m3_mix_K1.call(null, hash_basis);
  var h1__$1 = cljs.core.m3_mix_H1.call(null, h1, k1);
  return cljs.core.m3_fmix.call(null, h1__$1, count);
};
cljs.core.hash_ordered_coll = function hash_ordered_coll(coll) {
  var n = 0;
  var hash_code = 1;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6272 = n + 1;
      var G__6273 = cljs.core.imul.call(null, 31, hash_code) + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__6274 = cljs.core.next.call(null, coll__$1);
      n = G__6272;
      hash_code = G__6273;
      coll__$1 = G__6274;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.hash_unordered_coll = function hash_unordered_coll(coll) {
  var n = 0;
  var hash_code = 0;
  var coll__$1 = cljs.core.seq.call(null, coll);
  while (true) {
    if (!(coll__$1 == null)) {
      var G__6275 = n + 1;
      var G__6276 = hash_code + cljs.core.hash.call(null, cljs.core.first.call(null, coll__$1)) | 0;
      var G__6277 = cljs.core.next.call(null, coll__$1);
      n = G__6275;
      hash_code = G__6276;
      coll__$1 = G__6277;
      continue;
    } else {
      return cljs.core.mix_collection_hash.call(null, hash_code, n);
    }
    break;
  }
};
cljs.core.ICounted["null"] = true;
cljs.core._count["null"] = function(_) {
  return 0;
};
Date.prototype.cljs$core$IEquiv$ = true;
Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var o__$1 = this;
  return other instanceof Date && o__$1.toString() === other.toString();
};
cljs.core.IEquiv["number"] = true;
cljs.core._equiv["number"] = function(x, o) {
  return x === o;
};
cljs.core.IMeta["function"] = true;
cljs.core._meta["function"] = function(_) {
  return null;
};
cljs.core.Fn["function"] = true;
cljs.core.IHash["_"] = true;
cljs.core._hash["_"] = function(o) {
  return goog.getUid(o);
};
cljs.core.inc = function inc(x) {
  return x + 1;
};
cljs.core.Reduced = function(val) {
  this.val = val;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Reduced.cljs$lang$type = true;
cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";
cljs.core.Reduced.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Reduced");
};
cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = function(o) {
  var self__ = this;
  var o__$1 = this;
  return self__.val;
};
cljs.core.__GT_Reduced = function __GT_Reduced(val) {
  return new cljs.core.Reduced(val);
};
cljs.core.reduced = function reduced(x) {
  return new cljs.core.Reduced(x);
};
cljs.core.reduced_QMARK_ = function reduced_QMARK_(r) {
  return r instanceof cljs.core.Reduced;
};
cljs.core.deref = function deref(o) {
  return cljs.core._deref.call(null, o);
};
cljs.core.ci_reduce = function() {
  var ci_reduce = null;
  var ci_reduce__2 = function(cicoll, f) {
    var cnt = cljs.core._count.call(null, cicoll);
    if (cnt === 0) {
      return f.call(null);
    } else {
      var val = cljs.core._nth.call(null, cicoll, 0);
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, cljs.core._nth.call(null, cicoll, n));
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__6278 = nval;
            var G__6279 = n + 1;
            val = G__6278;
            n = G__6279;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var ci_reduce__3 = function(cicoll, f, val) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6280 = nval;
          var G__6281 = n + 1;
          val__$1 = G__6280;
          n = G__6281;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var ci_reduce__4 = function(cicoll, f, val, idx) {
    var cnt = cljs.core._count.call(null, cicoll);
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, cljs.core._nth.call(null, cicoll, n));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6282 = nval;
          var G__6283 = n + 1;
          val__$1 = G__6282;
          n = G__6283;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  ci_reduce = function(cicoll, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return ci_reduce__2.call(this, cicoll, f);
      case 3:
        return ci_reduce__3.call(this, cicoll, f, val);
      case 4:
        return ci_reduce__4.call(this, cicoll, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ci_reduce.cljs$core$IFn$_invoke$arity$2 = ci_reduce__2;
  ci_reduce.cljs$core$IFn$_invoke$arity$3 = ci_reduce__3;
  ci_reduce.cljs$core$IFn$_invoke$arity$4 = ci_reduce__4;
  return ci_reduce;
}();
cljs.core.array_reduce = function() {
  var array_reduce = null;
  var array_reduce__2 = function(arr, f) {
    var cnt = arr.length;
    if (arr.length === 0) {
      return f.call(null);
    } else {
      var val = arr[0];
      var n = 1;
      while (true) {
        if (n < cnt) {
          var nval = f.call(null, val, arr[n]);
          if (cljs.core.reduced_QMARK_.call(null, nval)) {
            return cljs.core.deref.call(null, nval);
          } else {
            var G__6284 = nval;
            var G__6285 = n + 1;
            val = G__6284;
            n = G__6285;
            continue;
          }
        } else {
          return val;
        }
        break;
      }
    }
  };
  var array_reduce__3 = function(arr, f, val) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = 0;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6286 = nval;
          var G__6287 = n + 1;
          val__$1 = G__6286;
          n = G__6287;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  var array_reduce__4 = function(arr, f, val, idx) {
    var cnt = arr.length;
    var val__$1 = val;
    var n = idx;
    while (true) {
      if (n < cnt) {
        var nval = f.call(null, val__$1, arr[n]);
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6288 = nval;
          var G__6289 = n + 1;
          val__$1 = G__6288;
          n = G__6289;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  array_reduce = function(arr, f, val, idx) {
    switch(arguments.length) {
      case 2:
        return array_reduce__2.call(this, arr, f);
      case 3:
        return array_reduce__3.call(this, arr, f, val);
      case 4:
        return array_reduce__4.call(this, arr, f, val, idx);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_reduce.cljs$core$IFn$_invoke$arity$2 = array_reduce__2;
  array_reduce.cljs$core$IFn$_invoke$arity$3 = array_reduce__3;
  array_reduce.cljs$core$IFn$_invoke$arity$4 = array_reduce__4;
  return array_reduce;
}();
cljs.core.counted_QMARK_ = function counted_QMARK_(x) {
  var G__6291 = x;
  if (G__6291) {
    var bit__4302__auto__ = G__6291.cljs$lang$protocol_mask$partition0$ & 2;
    if (bit__4302__auto__ || G__6291.cljs$core$ICounted$) {
      return true;
    } else {
      if (!G__6291.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__6291);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, G__6291);
  }
};
cljs.core.indexed_QMARK_ = function indexed_QMARK_(x) {
  var G__6293 = x;
  if (G__6293) {
    var bit__4302__auto__ = G__6293.cljs$lang$protocol_mask$partition0$ & 16;
    if (bit__4302__auto__ || G__6293.cljs$core$IIndexed$) {
      return true;
    } else {
      if (!G__6293.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__6293);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, G__6293);
  }
};
cljs.core.IndexedSeq = function(arr, i) {
  this.arr = arr;
  this.i = i;
  this.cljs$lang$protocol_mask$partition0$ = 166199550;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.IndexedSeq.cljs$lang$type = true;
cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";
cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/IndexedSeq");
};
cljs.core.IndexedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.IndexedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var i__$1 = n + self__.i;
  if (i__$1 < self__.arr.length) {
    return self__.arr[i__$1];
  } else {
    return not_found;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.IndexedSeq(self__.arr, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr.length - self__.i;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var c = cljs.core._count.call(null, coll__$1);
  if (c > 0) {
    return new cljs.core.RSeq(coll__$1, c - 1, null);
  } else {
    return null;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.i], self__.i + 1);
};
cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.i);
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.arr[self__.i];
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (self__.i + 1 < self__.arr.length) {
    return new cljs.core.IndexedSeq(self__.arr, self__.i + 1);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_IndexedSeq = function __GT_IndexedSeq(arr, i) {
  return new cljs.core.IndexedSeq(arr, i);
};
cljs.core.prim_seq = function() {
  var prim_seq = null;
  var prim_seq__1 = function(prim) {
    return prim_seq.call(null, prim, 0);
  };
  var prim_seq__2 = function(prim, i) {
    if (i < prim.length) {
      return new cljs.core.IndexedSeq(prim, i);
    } else {
      return null;
    }
  };
  prim_seq = function(prim, i) {
    switch(arguments.length) {
      case 1:
        return prim_seq__1.call(this, prim);
      case 2:
        return prim_seq__2.call(this, prim, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  prim_seq.cljs$core$IFn$_invoke$arity$1 = prim_seq__1;
  prim_seq.cljs$core$IFn$_invoke$arity$2 = prim_seq__2;
  return prim_seq;
}();
cljs.core.array_seq = function() {
  var array_seq = null;
  var array_seq__1 = function(array) {
    return cljs.core.prim_seq.call(null, array, 0);
  };
  var array_seq__2 = function(array, i) {
    return cljs.core.prim_seq.call(null, array, i);
  };
  array_seq = function(array, i) {
    switch(arguments.length) {
      case 1:
        return array_seq__1.call(this, array);
      case 2:
        return array_seq__2.call(this, array, i);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_seq.cljs$core$IFn$_invoke$arity$1 = array_seq__1;
  array_seq.cljs$core$IFn$_invoke$arity$2 = array_seq__2;
  return array_seq;
}();
cljs.core.RSeq = function(ci, i, meta) {
  this.ci = ci;
  this.i = i;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.RSeq.cljs$lang$type = true;
cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";
cljs.core.RSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/RSeq");
};
cljs.core.RSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.RSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return null;
  }
};
cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.i + 1;
};
cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(col, f) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(col, f, start) {
  var self__ = this;
  var col__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, col__$1);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.ci, self__.i);
};
cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i > 0) {
    return new cljs.core.RSeq(self__.ci, self__.i - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.RSeq(self__.ci, self__.i, new_meta);
};
cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_RSeq = function __GT_RSeq(ci, i, meta) {
  return new cljs.core.RSeq(ci, i, meta);
};
cljs.core.second = function second(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.ffirst = function ffirst(coll) {
  return cljs.core.first.call(null, cljs.core.first.call(null, coll));
};
cljs.core.nfirst = function nfirst(coll) {
  return cljs.core.next.call(null, cljs.core.first.call(null, coll));
};
cljs.core.fnext = function fnext(coll) {
  return cljs.core.first.call(null, cljs.core.next.call(null, coll));
};
cljs.core.nnext = function nnext(coll) {
  return cljs.core.next.call(null, cljs.core.next.call(null, coll));
};
cljs.core.last = function last(s) {
  while (true) {
    var sn = cljs.core.next.call(null, s);
    if (!(sn == null)) {
      var G__6294 = sn;
      s = G__6294;
      continue;
    } else {
      return cljs.core.first.call(null, s);
    }
    break;
  }
};
cljs.core.IEquiv["_"] = true;
cljs.core._equiv["_"] = function(x, o) {
  return x === o;
};
cljs.core.conj = function() {
  var conj = null;
  var conj__0 = function() {
    return cljs.core.PersistentVector.EMPTY;
  };
  var conj__1 = function(coll) {
    return coll;
  };
  var conj__2 = function(coll, x) {
    if (!(coll == null)) {
      return cljs.core._conj.call(null, coll, x);
    } else {
      return cljs.core._conj.call(null, cljs.core.List.EMPTY, x);
    }
  };
  var conj__3 = function() {
    var G__6295__delegate = function(coll, x, xs) {
      while (true) {
        if (cljs.core.truth_(xs)) {
          var G__6296 = conj.call(null, coll, x);
          var G__6297 = cljs.core.first.call(null, xs);
          var G__6298 = cljs.core.next.call(null, xs);
          coll = G__6296;
          x = G__6297;
          xs = G__6298;
          continue;
        } else {
          return conj.call(null, coll, x);
        }
        break;
      }
    };
    var G__6295 = function(coll, x, var_args) {
      var xs = null;
      if (arguments.length > 2) {
        xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6295__delegate.call(this, coll, x, xs);
    };
    G__6295.cljs$lang$maxFixedArity = 2;
    G__6295.cljs$lang$applyTo = function(arglist__6299) {
      var coll = cljs.core.first(arglist__6299);
      arglist__6299 = cljs.core.next(arglist__6299);
      var x = cljs.core.first(arglist__6299);
      var xs = cljs.core.rest(arglist__6299);
      return G__6295__delegate(coll, x, xs);
    };
    G__6295.cljs$core$IFn$_invoke$arity$variadic = G__6295__delegate;
    return G__6295;
  }();
  conj = function(coll, x, var_args) {
    var xs = var_args;
    switch(arguments.length) {
      case 0:
        return conj__0.call(this);
      case 1:
        return conj__1.call(this, coll);
      case 2:
        return conj__2.call(this, coll, x);
      default:
        return conj__3.cljs$core$IFn$_invoke$arity$variadic(coll, x, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj.cljs$lang$maxFixedArity = 2;
  conj.cljs$lang$applyTo = conj__3.cljs$lang$applyTo;
  conj.cljs$core$IFn$_invoke$arity$0 = conj__0;
  conj.cljs$core$IFn$_invoke$arity$1 = conj__1;
  conj.cljs$core$IFn$_invoke$arity$2 = conj__2;
  conj.cljs$core$IFn$_invoke$arity$variadic = conj__3.cljs$core$IFn$_invoke$arity$variadic;
  return conj;
}();
cljs.core.empty = function empty(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._empty.call(null, coll);
  }
};
cljs.core.accumulating_seq_count = function accumulating_seq_count(coll) {
  var s = cljs.core.seq.call(null, coll);
  var acc = 0;
  while (true) {
    if (cljs.core.counted_QMARK_.call(null, s)) {
      return acc + cljs.core._count.call(null, s);
    } else {
      var G__6300 = cljs.core.next.call(null, s);
      var G__6301 = acc + 1;
      s = G__6300;
      acc = G__6301;
      continue;
    }
    break;
  }
};
cljs.core.count = function count(coll) {
  if (!(coll == null)) {
    if (function() {
      var G__6303 = coll;
      if (G__6303) {
        var bit__4295__auto__ = G__6303.cljs$lang$protocol_mask$partition0$ & 2;
        if (bit__4295__auto__ || G__6303.cljs$core$ICounted$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._count.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return coll.length;
      } else {
        if (typeof coll === "string") {
          return coll.length;
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICounted, coll)) {
            return cljs.core._count.call(null, coll);
          } else {
            return cljs.core.accumulating_seq_count.call(null, coll);
          }
        }
      }
    }
  } else {
    return 0;
  }
};
cljs.core.linear_traversal_nth = function() {
  var linear_traversal_nth = null;
  var linear_traversal_nth__2 = function(coll, n) {
    while (true) {
      if (coll == null) {
        throw new Error("Index out of bounds");
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            throw new Error("Index out of bounds");
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__6304 = cljs.core.next.call(null, coll);
              var G__6305 = n - 1;
              coll = G__6304;
              n = G__6305;
              continue;
            } else {
              throw new Error("Index out of bounds");
            }
          }
        }
      }
      break;
    }
  };
  var linear_traversal_nth__3 = function(coll, n, not_found) {
    while (true) {
      if (coll == null) {
        return not_found;
      } else {
        if (n === 0) {
          if (cljs.core.seq.call(null, coll)) {
            return cljs.core.first.call(null, coll);
          } else {
            return not_found;
          }
        } else {
          if (cljs.core.indexed_QMARK_.call(null, coll)) {
            return cljs.core._nth.call(null, coll, n, not_found);
          } else {
            if (cljs.core.seq.call(null, coll)) {
              var G__6306 = cljs.core.next.call(null, coll);
              var G__6307 = n - 1;
              var G__6308 = not_found;
              coll = G__6306;
              n = G__6307;
              not_found = G__6308;
              continue;
            } else {
              return not_found;
            }
          }
        }
      }
      break;
    }
  };
  linear_traversal_nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return linear_traversal_nth__2.call(this, coll, n);
      case 3:
        return linear_traversal_nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = linear_traversal_nth__2;
  linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = linear_traversal_nth__3;
  return linear_traversal_nth;
}();
cljs.core.nth = function() {
  var nth = null;
  var nth__2 = function(coll, n) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number");
    } else {
      if (coll == null) {
        return coll;
      } else {
        if (function() {
          var G__6313 = coll;
          if (G__6313) {
            var bit__4295__auto__ = G__6313.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4295__auto__ || G__6313.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return null;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return null;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__6314 = coll;
                  if (G__6314) {
                    var bit__4302__auto__ = G__6314.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4302__auto__ || G__6314.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6314.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6314);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6314);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  var nth__3 = function(coll, n, not_found) {
    if (!(typeof n === "number")) {
      throw new Error("index argument to nth must be a number.");
    } else {
      if (coll == null) {
        return not_found;
      } else {
        if (function() {
          var G__6315 = coll;
          if (G__6315) {
            var bit__4295__auto__ = G__6315.cljs$lang$protocol_mask$partition0$ & 16;
            if (bit__4295__auto__ || G__6315.cljs$core$IIndexed$) {
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }()) {
          return cljs.core._nth.call(null, coll, n, not_found);
        } else {
          if (coll instanceof Array) {
            if (n < coll.length) {
              return coll[n];
            } else {
              return not_found;
            }
          } else {
            if (typeof coll === "string") {
              if (n < coll.length) {
                return coll[n];
              } else {
                return not_found;
              }
            } else {
              if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IIndexed, coll)) {
                return cljs.core._nth.call(null, coll, n);
              } else {
                if (function() {
                  var G__6316 = coll;
                  if (G__6316) {
                    var bit__4302__auto__ = G__6316.cljs$lang$protocol_mask$partition0$ & 64;
                    if (bit__4302__auto__ || G__6316.cljs$core$ISeq$) {
                      return true;
                    } else {
                      if (!G__6316.cljs$lang$protocol_mask$partition0$) {
                        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6316);
                      } else {
                        return false;
                      }
                    }
                  } else {
                    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6316);
                  }
                }()) {
                  return cljs.core.linear_traversal_nth.call(null, coll, n, not_found);
                } else {
                  throw new Error("nth not supported on this type " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str.call(null, cljs.core.type.call(null, coll))));
                }
              }
            }
          }
        }
      }
    }
  };
  nth = function(coll, n, not_found) {
    switch(arguments.length) {
      case 2:
        return nth__2.call(this, coll, n);
      case 3:
        return nth__3.call(this, coll, n, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  nth.cljs$core$IFn$_invoke$arity$2 = nth__2;
  nth.cljs$core$IFn$_invoke$arity$3 = nth__3;
  return nth;
}();
cljs.core.get = function() {
  var get = null;
  var get__2 = function(o, k) {
    if (o == null) {
      return null;
    } else {
      if (function() {
        var G__6319 = o;
        if (G__6319) {
          var bit__4295__auto__ = G__6319.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4295__auto__ || G__6319.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return null;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return null;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k);
            } else {
              return null;
            }
          }
        }
      }
    }
  };
  var get__3 = function(o, k, not_found) {
    if (!(o == null)) {
      if (function() {
        var G__6320 = o;
        if (G__6320) {
          var bit__4295__auto__ = G__6320.cljs$lang$protocol_mask$partition0$ & 256;
          if (bit__4295__auto__ || G__6320.cljs$core$ILookup$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core._lookup.call(null, o, k, not_found);
      } else {
        if (o instanceof Array) {
          if (k < o.length) {
            return o[k];
          } else {
            return not_found;
          }
        } else {
          if (typeof o === "string") {
            if (k < o.length) {
              return o[k];
            } else {
              return not_found;
            }
          } else {
            if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, o)) {
              return cljs.core._lookup.call(null, o, k, not_found);
            } else {
              return not_found;
            }
          }
        }
      }
    } else {
      return not_found;
    }
  };
  get = function(o, k, not_found) {
    switch(arguments.length) {
      case 2:
        return get__2.call(this, o, k);
      case 3:
        return get__3.call(this, o, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get.cljs$core$IFn$_invoke$arity$2 = get__2;
  get.cljs$core$IFn$_invoke$arity$3 = get__3;
  return get;
}();
cljs.core.assoc = function() {
  var assoc = null;
  var assoc__3 = function(coll, k, v) {
    if (!(coll == null)) {
      return cljs.core._assoc.call(null, coll, k, v);
    } else {
      return cljs.core.PersistentHashMap.fromArrays([k], [v]);
    }
  };
  var assoc__4 = function() {
    var G__6321__delegate = function(coll, k, v, kvs) {
      while (true) {
        var ret = assoc.call(null, coll, k, v);
        if (cljs.core.truth_(kvs)) {
          var G__6322 = ret;
          var G__6323 = cljs.core.first.call(null, kvs);
          var G__6324 = cljs.core.second.call(null, kvs);
          var G__6325 = cljs.core.nnext.call(null, kvs);
          coll = G__6322;
          k = G__6323;
          v = G__6324;
          kvs = G__6325;
          continue;
        } else {
          return ret;
        }
        break;
      }
    };
    var G__6321 = function(coll, k, v, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6321__delegate.call(this, coll, k, v, kvs);
    };
    G__6321.cljs$lang$maxFixedArity = 3;
    G__6321.cljs$lang$applyTo = function(arglist__6326) {
      var coll = cljs.core.first(arglist__6326);
      arglist__6326 = cljs.core.next(arglist__6326);
      var k = cljs.core.first(arglist__6326);
      arglist__6326 = cljs.core.next(arglist__6326);
      var v = cljs.core.first(arglist__6326);
      var kvs = cljs.core.rest(arglist__6326);
      return G__6321__delegate(coll, k, v, kvs);
    };
    G__6321.cljs$core$IFn$_invoke$arity$variadic = G__6321__delegate;
    return G__6321;
  }();
  assoc = function(coll, k, v, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc__3.call(this, coll, k, v);
      default:
        return assoc__4.cljs$core$IFn$_invoke$arity$variadic(coll, k, v, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc.cljs$lang$maxFixedArity = 3;
  assoc.cljs$lang$applyTo = assoc__4.cljs$lang$applyTo;
  assoc.cljs$core$IFn$_invoke$arity$3 = assoc__3;
  assoc.cljs$core$IFn$_invoke$arity$variadic = assoc__4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc;
}();
cljs.core.dissoc = function() {
  var dissoc = null;
  var dissoc__1 = function(coll) {
    return coll;
  };
  var dissoc__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._dissoc.call(null, coll, k);
    }
  };
  var dissoc__3 = function() {
    var G__6327__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = dissoc.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6328 = ret;
            var G__6329 = cljs.core.first.call(null, ks);
            var G__6330 = cljs.core.next.call(null, ks);
            coll = G__6328;
            k = G__6329;
            ks = G__6330;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6327 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6327__delegate.call(this, coll, k, ks);
    };
    G__6327.cljs$lang$maxFixedArity = 2;
    G__6327.cljs$lang$applyTo = function(arglist__6331) {
      var coll = cljs.core.first(arglist__6331);
      arglist__6331 = cljs.core.next(arglist__6331);
      var k = cljs.core.first(arglist__6331);
      var ks = cljs.core.rest(arglist__6331);
      return G__6327__delegate(coll, k, ks);
    };
    G__6327.cljs$core$IFn$_invoke$arity$variadic = G__6327__delegate;
    return G__6327;
  }();
  dissoc = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return dissoc__1.call(this, coll);
      case 2:
        return dissoc__2.call(this, coll, k);
      default:
        return dissoc__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc.cljs$lang$maxFixedArity = 2;
  dissoc.cljs$lang$applyTo = dissoc__3.cljs$lang$applyTo;
  dissoc.cljs$core$IFn$_invoke$arity$1 = dissoc__1;
  dissoc.cljs$core$IFn$_invoke$arity$2 = dissoc__2;
  dissoc.cljs$core$IFn$_invoke$arity$variadic = dissoc__3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc;
}();
cljs.core.fn_QMARK_ = function fn_QMARK_(f) {
  var or__3639__auto__ = goog.isFunction(f);
  if (or__3639__auto__) {
    return or__3639__auto__;
  } else {
    var G__6335 = f;
    if (G__6335) {
      var bit__4302__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3639__auto____$1 = bit__4302__auto__;
        if (cljs.core.truth_(or__3639__auto____$1)) {
          return or__3639__auto____$1;
        } else {
          return G__6335.cljs$core$Fn$;
        }
      }())) {
        return true;
      } else {
        if (!G__6335.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__6335);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.Fn, G__6335);
    }
  }
};
cljs.core.MetaFn = function(afn, meta) {
  this.afn = afn;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 393217;
};
cljs.core.MetaFn.cljs$lang$type = true;
cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";
cljs.core.MetaFn.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/MetaFn");
};
cljs.core.MetaFn.prototype.call = function() {
  var G__6337 = null;
  var G__6337__1 = function(self__) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null);
  };
  var G__6337__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a);
  };
  var G__6337__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b);
  };
  var G__6337__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c);
  };
  var G__6337__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d);
  };
  var G__6337__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e);
  };
  var G__6337__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f);
  };
  var G__6337__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g);
  };
  var G__6337__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__6337__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__6337__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__6337__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__6337__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__6337__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__6337__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__6337__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__6337__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__6337__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__6337__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__6337__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__6337__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__6337__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var _ = self____$1;
    return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__6337 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 1:
        return G__6337__1.call(this, self__);
      case 2:
        return G__6337__2.call(this, self__, a);
      case 3:
        return G__6337__3.call(this, self__, a, b);
      case 4:
        return G__6337__4.call(this, self__, a, b, c);
      case 5:
        return G__6337__5.call(this, self__, a, b, c, d);
      case 6:
        return G__6337__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__6337__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__6337__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__6337__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__6337__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__6337__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__6337__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__6337__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__6337__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__6337__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__6337__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__6337__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__6337__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__6337__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__6337__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__6337__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__6337__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6337.cljs$core$IFn$_invoke$arity$1 = G__6337__1;
  G__6337.cljs$core$IFn$_invoke$arity$2 = G__6337__2;
  G__6337.cljs$core$IFn$_invoke$arity$3 = G__6337__3;
  G__6337.cljs$core$IFn$_invoke$arity$4 = G__6337__4;
  G__6337.cljs$core$IFn$_invoke$arity$5 = G__6337__5;
  G__6337.cljs$core$IFn$_invoke$arity$6 = G__6337__6;
  G__6337.cljs$core$IFn$_invoke$arity$7 = G__6337__7;
  G__6337.cljs$core$IFn$_invoke$arity$8 = G__6337__8;
  G__6337.cljs$core$IFn$_invoke$arity$9 = G__6337__9;
  G__6337.cljs$core$IFn$_invoke$arity$10 = G__6337__10;
  G__6337.cljs$core$IFn$_invoke$arity$11 = G__6337__11;
  G__6337.cljs$core$IFn$_invoke$arity$12 = G__6337__12;
  G__6337.cljs$core$IFn$_invoke$arity$13 = G__6337__13;
  G__6337.cljs$core$IFn$_invoke$arity$14 = G__6337__14;
  G__6337.cljs$core$IFn$_invoke$arity$15 = G__6337__15;
  G__6337.cljs$core$IFn$_invoke$arity$16 = G__6337__16;
  G__6337.cljs$core$IFn$_invoke$arity$17 = G__6337__17;
  G__6337.cljs$core$IFn$_invoke$arity$18 = G__6337__18;
  G__6337.cljs$core$IFn$_invoke$arity$19 = G__6337__19;
  G__6337.cljs$core$IFn$_invoke$arity$20 = G__6337__20;
  G__6337.cljs$core$IFn$_invoke$arity$21 = G__6337__21;
  G__6337.cljs$core$IFn$_invoke$arity$22 = G__6337__22;
  return G__6337;
}();
cljs.core.MetaFn.prototype.apply = function(self__, args6336) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6336)));
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = function() {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var _ = this;
  return self__.afn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var _ = this;
  return cljs.core.apply.call(null, self__.afn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.MetaFn.prototype.cljs$core$Fn$ = true;
cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_, new_meta) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.MetaFn(self__.afn, new_meta);
};
cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.__GT_MetaFn = function __GT_MetaFn(afn, meta) {
  return new cljs.core.MetaFn(afn, meta);
};
cljs.core.with_meta = function with_meta(o, meta) {
  if (cljs.core.fn_QMARK_.call(null, o) && !function() {
    var G__6341 = o;
    if (G__6341) {
      var bit__4302__auto__ = G__6341.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4302__auto__ || G__6341.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__6341.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6341);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__6341);
    }
  }()) {
    return new cljs.core.MetaFn(o, meta);
  } else {
    if (o == null) {
      return null;
    } else {
      return cljs.core._with_meta.call(null, o, meta);
    }
  }
};
cljs.core.meta = function meta(o) {
  if (function() {
    var and__3627__auto__ = !(o == null);
    if (and__3627__auto__) {
      var G__6345 = o;
      if (G__6345) {
        var bit__4302__auto__ = G__6345.cljs$lang$protocol_mask$partition0$ & 131072;
        if (bit__4302__auto__ || G__6345.cljs$core$IMeta$) {
          return true;
        } else {
          if (!G__6345.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6345);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__6345);
      }
    } else {
      return and__3627__auto__;
    }
  }()) {
    return cljs.core._meta.call(null, o);
  } else {
    return null;
  }
};
cljs.core.peek = function peek(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._peek.call(null, coll);
  }
};
cljs.core.pop = function pop(coll) {
  if (coll == null) {
    return null;
  } else {
    return cljs.core._pop.call(null, coll);
  }
};
cljs.core.disj = function() {
  var disj = null;
  var disj__1 = function(coll) {
    return coll;
  };
  var disj__2 = function(coll, k) {
    if (coll == null) {
      return null;
    } else {
      return cljs.core._disjoin.call(null, coll, k);
    }
  };
  var disj__3 = function() {
    var G__6346__delegate = function(coll, k, ks) {
      while (true) {
        if (coll == null) {
          return null;
        } else {
          var ret = disj.call(null, coll, k);
          if (cljs.core.truth_(ks)) {
            var G__6347 = ret;
            var G__6348 = cljs.core.first.call(null, ks);
            var G__6349 = cljs.core.next.call(null, ks);
            coll = G__6347;
            k = G__6348;
            ks = G__6349;
            continue;
          } else {
            return ret;
          }
        }
        break;
      }
    };
    var G__6346 = function(coll, k, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6346__delegate.call(this, coll, k, ks);
    };
    G__6346.cljs$lang$maxFixedArity = 2;
    G__6346.cljs$lang$applyTo = function(arglist__6350) {
      var coll = cljs.core.first(arglist__6350);
      arglist__6350 = cljs.core.next(arglist__6350);
      var k = cljs.core.first(arglist__6350);
      var ks = cljs.core.rest(arglist__6350);
      return G__6346__delegate(coll, k, ks);
    };
    G__6346.cljs$core$IFn$_invoke$arity$variadic = G__6346__delegate;
    return G__6346;
  }();
  disj = function(coll, k, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 1:
        return disj__1.call(this, coll);
      case 2:
        return disj__2.call(this, coll, k);
      default:
        return disj__3.cljs$core$IFn$_invoke$arity$variadic(coll, k, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj.cljs$lang$maxFixedArity = 2;
  disj.cljs$lang$applyTo = disj__3.cljs$lang$applyTo;
  disj.cljs$core$IFn$_invoke$arity$1 = disj__1;
  disj.cljs$core$IFn$_invoke$arity$2 = disj__2;
  disj.cljs$core$IFn$_invoke$arity$variadic = disj__3.cljs$core$IFn$_invoke$arity$variadic;
  return disj;
}();
cljs.core.empty_QMARK_ = function empty_QMARK_(coll) {
  return coll == null || cljs.core.not.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.coll_QMARK_ = function coll_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6352 = x;
    if (G__6352) {
      var bit__4302__auto__ = G__6352.cljs$lang$protocol_mask$partition0$ & 8;
      if (bit__4302__auto__ || G__6352.cljs$core$ICollection$) {
        return true;
      } else {
        if (!G__6352.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__6352);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ICollection, G__6352);
    }
  }
};
cljs.core.set_QMARK_ = function set_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6354 = x;
    if (G__6354) {
      var bit__4302__auto__ = G__6354.cljs$lang$protocol_mask$partition0$ & 4096;
      if (bit__4302__auto__ || G__6354.cljs$core$ISet$) {
        return true;
      } else {
        if (!G__6354.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__6354);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISet, G__6354);
    }
  }
};
cljs.core.associative_QMARK_ = function associative_QMARK_(x) {
  var G__6356 = x;
  if (G__6356) {
    var bit__4302__auto__ = G__6356.cljs$lang$protocol_mask$partition0$ & 512;
    if (bit__4302__auto__ || G__6356.cljs$core$IAssociative$) {
      return true;
    } else {
      if (!G__6356.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__6356);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IAssociative, G__6356);
  }
};
cljs.core.sequential_QMARK_ = function sequential_QMARK_(x) {
  var G__6358 = x;
  if (G__6358) {
    var bit__4302__auto__ = G__6358.cljs$lang$protocol_mask$partition0$ & 16777216;
    if (bit__4302__auto__ || G__6358.cljs$core$ISequential$) {
      return true;
    } else {
      if (!G__6358.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__6358);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISequential, G__6358);
  }
};
cljs.core.sorted_QMARK_ = function sorted_QMARK_(x) {
  var G__6360 = x;
  if (G__6360) {
    var bit__4302__auto__ = G__6360.cljs$lang$protocol_mask$partition0$ & 268435456;
    if (bit__4302__auto__ || G__6360.cljs$core$ISorted$) {
      return true;
    } else {
      if (!G__6360.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__6360);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISorted, G__6360);
  }
};
cljs.core.reduceable_QMARK_ = function reduceable_QMARK_(x) {
  var G__6362 = x;
  if (G__6362) {
    var bit__4302__auto__ = G__6362.cljs$lang$protocol_mask$partition0$ & 524288;
    if (bit__4302__auto__ || G__6362.cljs$core$IReduce$) {
      return true;
    } else {
      if (!G__6362.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__6362);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, G__6362);
  }
};
cljs.core.map_QMARK_ = function map_QMARK_(x) {
  if (x == null) {
    return false;
  } else {
    var G__6364 = x;
    if (G__6364) {
      var bit__4302__auto__ = G__6364.cljs$lang$protocol_mask$partition0$ & 1024;
      if (bit__4302__auto__ || G__6364.cljs$core$IMap$) {
        return true;
      } else {
        if (!G__6364.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__6364);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMap, G__6364);
    }
  }
};
cljs.core.vector_QMARK_ = function vector_QMARK_(x) {
  var G__6366 = x;
  if (G__6366) {
    var bit__4302__auto__ = G__6366.cljs$lang$protocol_mask$partition0$ & 16384;
    if (bit__4302__auto__ || G__6366.cljs$core$IVector$) {
      return true;
    } else {
      if (!G__6366.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__6366);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IVector, G__6366);
  }
};
cljs.core.chunked_seq_QMARK_ = function chunked_seq_QMARK_(x) {
  var G__6368 = x;
  if (G__6368) {
    var bit__4295__auto__ = G__6368.cljs$lang$protocol_mask$partition1$ & 512;
    if (bit__4295__auto__ || G__6368.cljs$core$IChunkedSeq$) {
      return true;
    } else {
      return false;
    }
  } else {
    return false;
  }
};
cljs.core.js_obj = function() {
  var js_obj = null;
  var js_obj__0 = function() {
    var obj6372 = {};
    return obj6372;
  };
  var js_obj__1 = function() {
    var G__6373__delegate = function(keyvals) {
      return cljs.core.apply.call(null, goog.object.create, keyvals);
    };
    var G__6373 = function(var_args) {
      var keyvals = null;
      if (arguments.length > 0) {
        keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6373__delegate.call(this, keyvals);
    };
    G__6373.cljs$lang$maxFixedArity = 0;
    G__6373.cljs$lang$applyTo = function(arglist__6374) {
      var keyvals = cljs.core.seq(arglist__6374);
      return G__6373__delegate(keyvals);
    };
    G__6373.cljs$core$IFn$_invoke$arity$variadic = G__6373__delegate;
    return G__6373;
  }();
  js_obj = function(var_args) {
    var keyvals = var_args;
    switch(arguments.length) {
      case 0:
        return js_obj__0.call(this);
      default:
        return js_obj__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_obj.cljs$lang$maxFixedArity = 0;
  js_obj.cljs$lang$applyTo = js_obj__1.cljs$lang$applyTo;
  js_obj.cljs$core$IFn$_invoke$arity$0 = js_obj__0;
  js_obj.cljs$core$IFn$_invoke$arity$variadic = js_obj__1.cljs$core$IFn$_invoke$arity$variadic;
  return js_obj;
}();
cljs.core.js_keys = function js_keys(obj) {
  var keys = [];
  goog.object.forEach(obj, function(keys) {
    return function(val, key, obj__$1) {
      return keys.push(key);
    };
  }(keys));
  return keys;
};
cljs.core.js_delete = function js_delete(obj, key) {
  return delete obj[key];
};
cljs.core.array_copy = function array_copy(from, i, to, j, len) {
  var i__$1 = i;
  var j__$1 = j;
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6375 = i__$1 + 1;
      var G__6376 = j__$1 + 1;
      var G__6377 = len__$1 - 1;
      i__$1 = G__6375;
      j__$1 = G__6376;
      len__$1 = G__6377;
      continue;
    }
    break;
  }
};
cljs.core.array_copy_downward = function array_copy_downward(from, i, to, j, len) {
  var i__$1 = i + (len - 1);
  var j__$1 = j + (len - 1);
  var len__$1 = len;
  while (true) {
    if (len__$1 === 0) {
      return to;
    } else {
      to[j__$1] = from[i__$1];
      var G__6378 = i__$1 - 1;
      var G__6379 = j__$1 - 1;
      var G__6380 = len__$1 - 1;
      i__$1 = G__6378;
      j__$1 = G__6379;
      len__$1 = G__6380;
      continue;
    }
    break;
  }
};
cljs.core.lookup_sentinel = function() {
  var obj6382 = {};
  return obj6382;
}();
cljs.core.false_QMARK_ = function false_QMARK_(x) {
  return x === false;
};
cljs.core.true_QMARK_ = function true_QMARK_(x) {
  return x === true;
};
cljs.core.undefined_QMARK_ = function undefined_QMARK_(x) {
  return void 0 === x;
};
cljs.core.seq_QMARK_ = function seq_QMARK_(s) {
  if (s == null) {
    return false;
  } else {
    var G__6384 = s;
    if (G__6384) {
      var bit__4302__auto__ = G__6384.cljs$lang$protocol_mask$partition0$ & 64;
      if (bit__4302__auto__ || G__6384.cljs$core$ISeq$) {
        return true;
      } else {
        if (!G__6384.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6384);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeq, G__6384);
    }
  }
};
cljs.core.seqable_QMARK_ = function seqable_QMARK_(s) {
  var G__6386 = s;
  if (G__6386) {
    var bit__4302__auto__ = G__6386.cljs$lang$protocol_mask$partition0$ & 8388608;
    if (bit__4302__auto__ || G__6386.cljs$core$ISeqable$) {
      return true;
    } else {
      if (!G__6386.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__6386);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ISeqable, G__6386);
  }
};
cljs.core.boolean$ = function boolean$(x) {
  if (cljs.core.truth_(x)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ifn_QMARK_ = function ifn_QMARK_(f) {
  var or__3639__auto__ = cljs.core.fn_QMARK_.call(null, f);
  if (or__3639__auto__) {
    return or__3639__auto__;
  } else {
    var G__6390 = f;
    if (G__6390) {
      var bit__4302__auto__ = G__6390.cljs$lang$protocol_mask$partition0$ & 1;
      if (bit__4302__auto__ || G__6390.cljs$core$IFn$) {
        return true;
      } else {
        if (!G__6390.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__6390);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IFn, G__6390);
    }
  }
};
cljs.core.integer_QMARK_ = function integer_QMARK_(n) {
  return typeof n === "number" && !isNaN(n) && !(n === Infinity) && parseFloat(n) === parseInt(n, 10);
};
cljs.core.contains_QMARK_ = function contains_QMARK_(coll, v) {
  if (cljs.core.get.call(null, coll, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return false;
  } else {
    return true;
  }
};
cljs.core.find = function find(coll, k) {
  if (!(coll == null) && cljs.core.associative_QMARK_.call(null, coll) && cljs.core.contains_QMARK_.call(null, coll, k)) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k, cljs.core.get.call(null, coll, k)], null);
  } else {
    return null;
  }
};
cljs.core.distinct_QMARK_ = function() {
  var distinct_QMARK_ = null;
  var distinct_QMARK___1 = function(x) {
    return true;
  };
  var distinct_QMARK___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var distinct_QMARK___3 = function() {
    var G__6391__delegate = function(x, y, more) {
      if (!cljs.core._EQ_.call(null, x, y)) {
        var s = cljs.core.PersistentHashSet.fromArray([x, y], true);
        var xs = more;
        while (true) {
          var x__$1 = cljs.core.first.call(null, xs);
          var etc = cljs.core.next.call(null, xs);
          if (cljs.core.truth_(xs)) {
            if (cljs.core.contains_QMARK_.call(null, s, x__$1)) {
              return false;
            } else {
              var G__6392 = cljs.core.conj.call(null, s, x__$1);
              var G__6393 = etc;
              s = G__6392;
              xs = G__6393;
              continue;
            }
          } else {
            return true;
          }
          break;
        }
      } else {
        return false;
      }
    };
    var G__6391 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6391__delegate.call(this, x, y, more);
    };
    G__6391.cljs$lang$maxFixedArity = 2;
    G__6391.cljs$lang$applyTo = function(arglist__6394) {
      var x = cljs.core.first(arglist__6394);
      arglist__6394 = cljs.core.next(arglist__6394);
      var y = cljs.core.first(arglist__6394);
      var more = cljs.core.rest(arglist__6394);
      return G__6391__delegate(x, y, more);
    };
    G__6391.cljs$core$IFn$_invoke$arity$variadic = G__6391__delegate;
    return G__6391;
  }();
  distinct_QMARK_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return distinct_QMARK___1.call(this, x);
      case 2:
        return distinct_QMARK___2.call(this, x, y);
      default:
        return distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  distinct_QMARK_.cljs$lang$maxFixedArity = 2;
  distinct_QMARK_.cljs$lang$applyTo = distinct_QMARK___3.cljs$lang$applyTo;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = distinct_QMARK___1;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = distinct_QMARK___2;
  distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = distinct_QMARK___3.cljs$core$IFn$_invoke$arity$variadic;
  return distinct_QMARK_;
}();
cljs.core.sequence = function sequence(coll) {
  if (cljs.core.seq_QMARK_.call(null, coll)) {
    return coll;
  } else {
    var or__3639__auto__ = cljs.core.seq.call(null, coll);
    if (or__3639__auto__) {
      return or__3639__auto__;
    } else {
      return cljs.core.List.EMPTY;
    }
  }
};
cljs.core.compare = function compare(x, y) {
  if (x === y) {
    return 0;
  } else {
    if (x == null) {
      return-1;
    } else {
      if (y == null) {
        return 1;
      } else {
        if (cljs.core.type.call(null, x) === cljs.core.type.call(null, y)) {
          if (function() {
            var G__6396 = x;
            if (G__6396) {
              var bit__4295__auto__ = G__6396.cljs$lang$protocol_mask$partition1$ & 2048;
              if (bit__4295__auto__ || G__6396.cljs$core$IComparable$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._compare.call(null, x, y);
          } else {
            return goog.array.defaultCompare(x, y);
          }
        } else {
          throw new Error("compare on non-nil objects of different types");
        }
      }
    }
  }
};
cljs.core.compare_indexed = function() {
  var compare_indexed = null;
  var compare_indexed__2 = function(xs, ys) {
    var xl = cljs.core.count.call(null, xs);
    var yl = cljs.core.count.call(null, ys);
    if (xl < yl) {
      return-1;
    } else {
      if (xl > yl) {
        return 1;
      } else {
        return compare_indexed.call(null, xs, ys, xl, 0);
      }
    }
  };
  var compare_indexed__4 = function(xs, ys, len, n) {
    while (true) {
      var d = cljs.core.compare.call(null, cljs.core.nth.call(null, xs, n), cljs.core.nth.call(null, ys, n));
      if (d === 0 && n + 1 < len) {
        var G__6397 = xs;
        var G__6398 = ys;
        var G__6399 = len;
        var G__6400 = n + 1;
        xs = G__6397;
        ys = G__6398;
        len = G__6399;
        n = G__6400;
        continue;
      } else {
        return d;
      }
      break;
    }
  };
  compare_indexed = function(xs, ys, len, n) {
    switch(arguments.length) {
      case 2:
        return compare_indexed__2.call(this, xs, ys);
      case 4:
        return compare_indexed__4.call(this, xs, ys, len, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  compare_indexed.cljs$core$IFn$_invoke$arity$2 = compare_indexed__2;
  compare_indexed.cljs$core$IFn$_invoke$arity$4 = compare_indexed__4;
  return compare_indexed;
}();
cljs.core.fn__GT_comparator = function fn__GT_comparator(f) {
  if (cljs.core._EQ_.call(null, f, cljs.core.compare)) {
    return cljs.core.compare;
  } else {
    return function(x, y) {
      var r = f.call(null, x, y);
      if (typeof r === "number") {
        return r;
      } else {
        if (cljs.core.truth_(r)) {
          return-1;
        } else {
          if (cljs.core.truth_(f.call(null, y, x))) {
            return 1;
          } else {
            return 0;
          }
        }
      }
    };
  }
};
cljs.core.sort = function() {
  var sort = null;
  var sort__1 = function(coll) {
    return sort.call(null, cljs.core.compare, coll);
  };
  var sort__2 = function(comp, coll) {
    if (cljs.core.seq.call(null, coll)) {
      var a = cljs.core.to_array.call(null, coll);
      goog.array.stableSort(a, cljs.core.fn__GT_comparator.call(null, comp));
      return cljs.core.seq.call(null, a);
    } else {
      return cljs.core.List.EMPTY;
    }
  };
  sort = function(comp, coll) {
    switch(arguments.length) {
      case 1:
        return sort__1.call(this, comp);
      case 2:
        return sort__2.call(this, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort.cljs$core$IFn$_invoke$arity$1 = sort__1;
  sort.cljs$core$IFn$_invoke$arity$2 = sort__2;
  return sort;
}();
cljs.core.sort_by = function() {
  var sort_by = null;
  var sort_by__2 = function(keyfn, coll) {
    return sort_by.call(null, keyfn, cljs.core.compare, coll);
  };
  var sort_by__3 = function(keyfn, comp, coll) {
    return cljs.core.sort.call(null, function(x, y) {
      return cljs.core.fn__GT_comparator.call(null, comp).call(null, keyfn.call(null, x), keyfn.call(null, y));
    }, coll);
  };
  sort_by = function(keyfn, comp, coll) {
    switch(arguments.length) {
      case 2:
        return sort_by__2.call(this, keyfn, comp);
      case 3:
        return sort_by__3.call(this, keyfn, comp, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sort_by.cljs$core$IFn$_invoke$arity$2 = sort_by__2;
  sort_by.cljs$core$IFn$_invoke$arity$3 = sort_by__3;
  return sort_by;
}();
cljs.core.seq_reduce = function() {
  var seq_reduce = null;
  var seq_reduce__2 = function(f, coll) {
    var temp__4124__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4124__auto__) {
      var s = temp__4124__auto__;
      return cljs.core.reduce.call(null, f, cljs.core.first.call(null, s), cljs.core.next.call(null, s));
    } else {
      return f.call(null);
    }
  };
  var seq_reduce__3 = function(f, val, coll) {
    var val__$1 = val;
    var coll__$1 = cljs.core.seq.call(null, coll);
    while (true) {
      if (coll__$1) {
        var nval = f.call(null, val__$1, cljs.core.first.call(null, coll__$1));
        if (cljs.core.reduced_QMARK_.call(null, nval)) {
          return cljs.core.deref.call(null, nval);
        } else {
          var G__6401 = nval;
          var G__6402 = cljs.core.next.call(null, coll__$1);
          val__$1 = G__6401;
          coll__$1 = G__6402;
          continue;
        }
      } else {
        return val__$1;
      }
      break;
    }
  };
  seq_reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return seq_reduce__2.call(this, f, val);
      case 3:
        return seq_reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  seq_reduce.cljs$core$IFn$_invoke$arity$2 = seq_reduce__2;
  seq_reduce.cljs$core$IFn$_invoke$arity$3 = seq_reduce__3;
  return seq_reduce;
}();
cljs.core.shuffle = function shuffle(coll) {
  var a = cljs.core.to_array.call(null, coll);
  goog.array.shuffle(a);
  return cljs.core.vec.call(null, a);
};
cljs.core.reduce = function() {
  var reduce = null;
  var reduce__2 = function(f, coll) {
    if (function() {
      var G__6405 = coll;
      if (G__6405) {
        var bit__4295__auto__ = G__6405.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4295__auto__ || G__6405.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f);
          } else {
            return cljs.core.seq_reduce.call(null, f, coll);
          }
        }
      }
    }
  };
  var reduce__3 = function(f, val, coll) {
    if (function() {
      var G__6406 = coll;
      if (G__6406) {
        var bit__4295__auto__ = G__6406.cljs$lang$protocol_mask$partition0$ & 524288;
        if (bit__4295__auto__ || G__6406.cljs$core$IReduce$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core._reduce.call(null, coll, f, val);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_reduce.call(null, coll, f, val);
      } else {
        if (typeof coll === "string") {
          return cljs.core.array_reduce.call(null, coll, f, val);
        } else {
          if (cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReduce, coll)) {
            return cljs.core._reduce.call(null, coll, f, val);
          } else {
            return cljs.core.seq_reduce.call(null, f, val, coll);
          }
        }
      }
    }
  };
  reduce = function(f, val, coll) {
    switch(arguments.length) {
      case 2:
        return reduce__2.call(this, f, val);
      case 3:
        return reduce__3.call(this, f, val, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reduce.cljs$core$IFn$_invoke$arity$2 = reduce__2;
  reduce.cljs$core$IFn$_invoke$arity$3 = reduce__3;
  return reduce;
}();
cljs.core.reduce_kv = function reduce_kv(f, init, coll) {
  if (!(coll == null)) {
    return cljs.core._kv_reduce.call(null, coll, f, init);
  } else {
    return init;
  }
};
cljs.core.identity = function identity(x) {
  return x;
};
cljs.core.completing = function() {
  var completing = null;
  var completing__1 = function(f) {
    return completing.call(null, f, cljs.core.identity);
  };
  var completing__2 = function(f, cf) {
    return function() {
      var G__6407 = null;
      var G__6407__0 = function() {
        return f.call(null);
      };
      var G__6407__1 = function(x) {
        return cf.call(null, x);
      };
      var G__6407__2 = function(x, y) {
        return f.call(null, x, y);
      };
      G__6407 = function(x, y) {
        switch(arguments.length) {
          case 0:
            return G__6407__0.call(this);
          case 1:
            return G__6407__1.call(this, x);
          case 2:
            return G__6407__2.call(this, x, y);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6407.cljs$core$IFn$_invoke$arity$0 = G__6407__0;
      G__6407.cljs$core$IFn$_invoke$arity$1 = G__6407__1;
      G__6407.cljs$core$IFn$_invoke$arity$2 = G__6407__2;
      return G__6407;
    }();
  };
  completing = function(f, cf) {
    switch(arguments.length) {
      case 1:
        return completing__1.call(this, f);
      case 2:
        return completing__2.call(this, f, cf);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  completing.cljs$core$IFn$_invoke$arity$1 = completing__1;
  completing.cljs$core$IFn$_invoke$arity$2 = completing__2;
  return completing;
}();
cljs.core.transduce = function() {
  var transduce = null;
  var transduce__3 = function(xform, f, coll) {
    return transduce.call(null, xform, f, f.call(null), coll);
  };
  var transduce__4 = function(xform, f, init, coll) {
    var f__$1 = xform.call(null, f);
    var ret = cljs.core.reduce.call(null, f__$1, init, coll);
    return f__$1.call(null, ret);
  };
  transduce = function(xform, f, init, coll) {
    switch(arguments.length) {
      case 3:
        return transduce__3.call(this, xform, f, init);
      case 4:
        return transduce__4.call(this, xform, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transduce.cljs$core$IFn$_invoke$arity$3 = transduce__3;
  transduce.cljs$core$IFn$_invoke$arity$4 = transduce__4;
  return transduce;
}();
cljs.core._PLUS_ = function() {
  var _PLUS_ = null;
  var _PLUS___0 = function() {
    return 0;
  };
  var _PLUS___1 = function(x) {
    return x;
  };
  var _PLUS___2 = function(x, y) {
    return x + y;
  };
  var _PLUS___3 = function() {
    var G__6408__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _PLUS_, x + y, more);
    };
    var G__6408 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6408__delegate.call(this, x, y, more);
    };
    G__6408.cljs$lang$maxFixedArity = 2;
    G__6408.cljs$lang$applyTo = function(arglist__6409) {
      var x = cljs.core.first(arglist__6409);
      arglist__6409 = cljs.core.next(arglist__6409);
      var y = cljs.core.first(arglist__6409);
      var more = cljs.core.rest(arglist__6409);
      return G__6408__delegate(x, y, more);
    };
    G__6408.cljs$core$IFn$_invoke$arity$variadic = G__6408__delegate;
    return G__6408;
  }();
  _PLUS_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _PLUS___0.call(this);
      case 1:
        return _PLUS___1.call(this, x);
      case 2:
        return _PLUS___2.call(this, x, y);
      default:
        return _PLUS___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _PLUS_.cljs$lang$maxFixedArity = 2;
  _PLUS_.cljs$lang$applyTo = _PLUS___3.cljs$lang$applyTo;
  _PLUS_.cljs$core$IFn$_invoke$arity$0 = _PLUS___0;
  _PLUS_.cljs$core$IFn$_invoke$arity$1 = _PLUS___1;
  _PLUS_.cljs$core$IFn$_invoke$arity$2 = _PLUS___2;
  _PLUS_.cljs$core$IFn$_invoke$arity$variadic = _PLUS___3.cljs$core$IFn$_invoke$arity$variadic;
  return _PLUS_;
}();
cljs.core._ = function() {
  var _ = null;
  var ___1 = function(x) {
    return-x;
  };
  var ___2 = function(x, y) {
    return x - y;
  };
  var ___3 = function() {
    var G__6410__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _, x - y, more);
    };
    var G__6410 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6410__delegate.call(this, x, y, more);
    };
    G__6410.cljs$lang$maxFixedArity = 2;
    G__6410.cljs$lang$applyTo = function(arglist__6411) {
      var x = cljs.core.first(arglist__6411);
      arglist__6411 = cljs.core.next(arglist__6411);
      var y = cljs.core.first(arglist__6411);
      var more = cljs.core.rest(arglist__6411);
      return G__6410__delegate(x, y, more);
    };
    G__6410.cljs$core$IFn$_invoke$arity$variadic = G__6410__delegate;
    return G__6410;
  }();
  _ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return ___1.call(this, x);
      case 2:
        return ___2.call(this, x, y);
      default:
        return ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _.cljs$lang$maxFixedArity = 2;
  _.cljs$lang$applyTo = ___3.cljs$lang$applyTo;
  _.cljs$core$IFn$_invoke$arity$1 = ___1;
  _.cljs$core$IFn$_invoke$arity$2 = ___2;
  _.cljs$core$IFn$_invoke$arity$variadic = ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _;
}();
cljs.core._STAR_ = function() {
  var _STAR_ = null;
  var _STAR___0 = function() {
    return 1;
  };
  var _STAR___1 = function(x) {
    return x;
  };
  var _STAR___2 = function(x, y) {
    return x * y;
  };
  var _STAR___3 = function() {
    var G__6412__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _STAR_, x * y, more);
    };
    var G__6412 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6412__delegate.call(this, x, y, more);
    };
    G__6412.cljs$lang$maxFixedArity = 2;
    G__6412.cljs$lang$applyTo = function(arglist__6413) {
      var x = cljs.core.first(arglist__6413);
      arglist__6413 = cljs.core.next(arglist__6413);
      var y = cljs.core.first(arglist__6413);
      var more = cljs.core.rest(arglist__6413);
      return G__6412__delegate(x, y, more);
    };
    G__6412.cljs$core$IFn$_invoke$arity$variadic = G__6412__delegate;
    return G__6412;
  }();
  _STAR_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return _STAR___0.call(this);
      case 1:
        return _STAR___1.call(this, x);
      case 2:
        return _STAR___2.call(this, x, y);
      default:
        return _STAR___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _STAR_.cljs$lang$maxFixedArity = 2;
  _STAR_.cljs$lang$applyTo = _STAR___3.cljs$lang$applyTo;
  _STAR_.cljs$core$IFn$_invoke$arity$0 = _STAR___0;
  _STAR_.cljs$core$IFn$_invoke$arity$1 = _STAR___1;
  _STAR_.cljs$core$IFn$_invoke$arity$2 = _STAR___2;
  _STAR_.cljs$core$IFn$_invoke$arity$variadic = _STAR___3.cljs$core$IFn$_invoke$arity$variadic;
  return _STAR_;
}();
cljs.core._SLASH_ = function() {
  var _SLASH_ = null;
  var _SLASH___1 = function(x) {
    return _SLASH_.call(null, 1, x);
  };
  var _SLASH___2 = function(x, y) {
    return x / y;
  };
  var _SLASH___3 = function() {
    var G__6414__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, _SLASH_, _SLASH_.call(null, x, y), more);
    };
    var G__6414 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6414__delegate.call(this, x, y, more);
    };
    G__6414.cljs$lang$maxFixedArity = 2;
    G__6414.cljs$lang$applyTo = function(arglist__6415) {
      var x = cljs.core.first(arglist__6415);
      arglist__6415 = cljs.core.next(arglist__6415);
      var y = cljs.core.first(arglist__6415);
      var more = cljs.core.rest(arglist__6415);
      return G__6414__delegate(x, y, more);
    };
    G__6414.cljs$core$IFn$_invoke$arity$variadic = G__6414__delegate;
    return G__6414;
  }();
  _SLASH_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _SLASH___1.call(this, x);
      case 2:
        return _SLASH___2.call(this, x, y);
      default:
        return _SLASH___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _SLASH_.cljs$lang$maxFixedArity = 2;
  _SLASH_.cljs$lang$applyTo = _SLASH___3.cljs$lang$applyTo;
  _SLASH_.cljs$core$IFn$_invoke$arity$1 = _SLASH___1;
  _SLASH_.cljs$core$IFn$_invoke$arity$2 = _SLASH___2;
  _SLASH_.cljs$core$IFn$_invoke$arity$variadic = _SLASH___3.cljs$core$IFn$_invoke$arity$variadic;
  return _SLASH_;
}();
cljs.core._LT_ = function() {
  var _LT_ = null;
  var _LT___1 = function(x) {
    return true;
  };
  var _LT___2 = function(x, y) {
    return x < y;
  };
  var _LT___3 = function() {
    var G__6416__delegate = function(x, y, more) {
      while (true) {
        if (x < y) {
          if (cljs.core.next.call(null, more)) {
            var G__6417 = y;
            var G__6418 = cljs.core.first.call(null, more);
            var G__6419 = cljs.core.next.call(null, more);
            x = G__6417;
            y = G__6418;
            more = G__6419;
            continue;
          } else {
            return y < cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6416 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6416__delegate.call(this, x, y, more);
    };
    G__6416.cljs$lang$maxFixedArity = 2;
    G__6416.cljs$lang$applyTo = function(arglist__6420) {
      var x = cljs.core.first(arglist__6420);
      arglist__6420 = cljs.core.next(arglist__6420);
      var y = cljs.core.first(arglist__6420);
      var more = cljs.core.rest(arglist__6420);
      return G__6416__delegate(x, y, more);
    };
    G__6416.cljs$core$IFn$_invoke$arity$variadic = G__6416__delegate;
    return G__6416;
  }();
  _LT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT___1.call(this, x);
      case 2:
        return _LT___2.call(this, x, y);
      default:
        return _LT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT_.cljs$lang$maxFixedArity = 2;
  _LT_.cljs$lang$applyTo = _LT___3.cljs$lang$applyTo;
  _LT_.cljs$core$IFn$_invoke$arity$1 = _LT___1;
  _LT_.cljs$core$IFn$_invoke$arity$2 = _LT___2;
  _LT_.cljs$core$IFn$_invoke$arity$variadic = _LT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT_;
}();
cljs.core._LT__EQ_ = function() {
  var _LT__EQ_ = null;
  var _LT__EQ___1 = function(x) {
    return true;
  };
  var _LT__EQ___2 = function(x, y) {
    return x <= y;
  };
  var _LT__EQ___3 = function() {
    var G__6421__delegate = function(x, y, more) {
      while (true) {
        if (x <= y) {
          if (cljs.core.next.call(null, more)) {
            var G__6422 = y;
            var G__6423 = cljs.core.first.call(null, more);
            var G__6424 = cljs.core.next.call(null, more);
            x = G__6422;
            y = G__6423;
            more = G__6424;
            continue;
          } else {
            return y <= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6421 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6421__delegate.call(this, x, y, more);
    };
    G__6421.cljs$lang$maxFixedArity = 2;
    G__6421.cljs$lang$applyTo = function(arglist__6425) {
      var x = cljs.core.first(arglist__6425);
      arglist__6425 = cljs.core.next(arglist__6425);
      var y = cljs.core.first(arglist__6425);
      var more = cljs.core.rest(arglist__6425);
      return G__6421__delegate(x, y, more);
    };
    G__6421.cljs$core$IFn$_invoke$arity$variadic = G__6421__delegate;
    return G__6421;
  }();
  _LT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _LT__EQ___1.call(this, x);
      case 2:
        return _LT__EQ___2.call(this, x, y);
      default:
        return _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _LT__EQ_.cljs$lang$maxFixedArity = 2;
  _LT__EQ_.cljs$lang$applyTo = _LT__EQ___3.cljs$lang$applyTo;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$1 = _LT__EQ___1;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$2 = _LT__EQ___2;
  _LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _LT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _LT__EQ_;
}();
cljs.core._GT_ = function() {
  var _GT_ = null;
  var _GT___1 = function(x) {
    return true;
  };
  var _GT___2 = function(x, y) {
    return x > y;
  };
  var _GT___3 = function() {
    var G__6426__delegate = function(x, y, more) {
      while (true) {
        if (x > y) {
          if (cljs.core.next.call(null, more)) {
            var G__6427 = y;
            var G__6428 = cljs.core.first.call(null, more);
            var G__6429 = cljs.core.next.call(null, more);
            x = G__6427;
            y = G__6428;
            more = G__6429;
            continue;
          } else {
            return y > cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6426 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6426__delegate.call(this, x, y, more);
    };
    G__6426.cljs$lang$maxFixedArity = 2;
    G__6426.cljs$lang$applyTo = function(arglist__6430) {
      var x = cljs.core.first(arglist__6430);
      arglist__6430 = cljs.core.next(arglist__6430);
      var y = cljs.core.first(arglist__6430);
      var more = cljs.core.rest(arglist__6430);
      return G__6426__delegate(x, y, more);
    };
    G__6426.cljs$core$IFn$_invoke$arity$variadic = G__6426__delegate;
    return G__6426;
  }();
  _GT_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT___1.call(this, x);
      case 2:
        return _GT___2.call(this, x, y);
      default:
        return _GT___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT_.cljs$lang$maxFixedArity = 2;
  _GT_.cljs$lang$applyTo = _GT___3.cljs$lang$applyTo;
  _GT_.cljs$core$IFn$_invoke$arity$1 = _GT___1;
  _GT_.cljs$core$IFn$_invoke$arity$2 = _GT___2;
  _GT_.cljs$core$IFn$_invoke$arity$variadic = _GT___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT_;
}();
cljs.core._GT__EQ_ = function() {
  var _GT__EQ_ = null;
  var _GT__EQ___1 = function(x) {
    return true;
  };
  var _GT__EQ___2 = function(x, y) {
    return x >= y;
  };
  var _GT__EQ___3 = function() {
    var G__6431__delegate = function(x, y, more) {
      while (true) {
        if (x >= y) {
          if (cljs.core.next.call(null, more)) {
            var G__6432 = y;
            var G__6433 = cljs.core.first.call(null, more);
            var G__6434 = cljs.core.next.call(null, more);
            x = G__6432;
            y = G__6433;
            more = G__6434;
            continue;
          } else {
            return y >= cljs.core.first.call(null, more);
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6431 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6431__delegate.call(this, x, y, more);
    };
    G__6431.cljs$lang$maxFixedArity = 2;
    G__6431.cljs$lang$applyTo = function(arglist__6435) {
      var x = cljs.core.first(arglist__6435);
      arglist__6435 = cljs.core.next(arglist__6435);
      var y = cljs.core.first(arglist__6435);
      var more = cljs.core.rest(arglist__6435);
      return G__6431__delegate(x, y, more);
    };
    G__6431.cljs$core$IFn$_invoke$arity$variadic = G__6431__delegate;
    return G__6431;
  }();
  _GT__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _GT__EQ___1.call(this, x);
      case 2:
        return _GT__EQ___2.call(this, x, y);
      default:
        return _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _GT__EQ_.cljs$lang$maxFixedArity = 2;
  _GT__EQ_.cljs$lang$applyTo = _GT__EQ___3.cljs$lang$applyTo;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$1 = _GT__EQ___1;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$2 = _GT__EQ___2;
  _GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = _GT__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _GT__EQ_;
}();
cljs.core.dec = function dec(x) {
  return x - 1;
};
cljs.core.max = function() {
  var max = null;
  var max__1 = function(x) {
    return x;
  };
  var max__2 = function(x, y) {
    var x__3946__auto__ = x;
    var y__3947__auto__ = y;
    return x__3946__auto__ > y__3947__auto__ ? x__3946__auto__ : y__3947__auto__;
  };
  var max__3 = function() {
    var G__6436__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, max, function() {
        var x__3946__auto__ = x;
        var y__3947__auto__ = y;
        return x__3946__auto__ > y__3947__auto__ ? x__3946__auto__ : y__3947__auto__;
      }(), more);
    };
    var G__6436 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6436__delegate.call(this, x, y, more);
    };
    G__6436.cljs$lang$maxFixedArity = 2;
    G__6436.cljs$lang$applyTo = function(arglist__6437) {
      var x = cljs.core.first(arglist__6437);
      arglist__6437 = cljs.core.next(arglist__6437);
      var y = cljs.core.first(arglist__6437);
      var more = cljs.core.rest(arglist__6437);
      return G__6436__delegate(x, y, more);
    };
    G__6436.cljs$core$IFn$_invoke$arity$variadic = G__6436__delegate;
    return G__6436;
  }();
  max = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return max__1.call(this, x);
      case 2:
        return max__2.call(this, x, y);
      default:
        return max__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max.cljs$lang$maxFixedArity = 2;
  max.cljs$lang$applyTo = max__3.cljs$lang$applyTo;
  max.cljs$core$IFn$_invoke$arity$1 = max__1;
  max.cljs$core$IFn$_invoke$arity$2 = max__2;
  max.cljs$core$IFn$_invoke$arity$variadic = max__3.cljs$core$IFn$_invoke$arity$variadic;
  return max;
}();
cljs.core.min = function() {
  var min = null;
  var min__1 = function(x) {
    return x;
  };
  var min__2 = function(x, y) {
    var x__3953__auto__ = x;
    var y__3954__auto__ = y;
    return x__3953__auto__ < y__3954__auto__ ? x__3953__auto__ : y__3954__auto__;
  };
  var min__3 = function() {
    var G__6438__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, min, function() {
        var x__3953__auto__ = x;
        var y__3954__auto__ = y;
        return x__3953__auto__ < y__3954__auto__ ? x__3953__auto__ : y__3954__auto__;
      }(), more);
    };
    var G__6438 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6438__delegate.call(this, x, y, more);
    };
    G__6438.cljs$lang$maxFixedArity = 2;
    G__6438.cljs$lang$applyTo = function(arglist__6439) {
      var x = cljs.core.first(arglist__6439);
      arglist__6439 = cljs.core.next(arglist__6439);
      var y = cljs.core.first(arglist__6439);
      var more = cljs.core.rest(arglist__6439);
      return G__6438__delegate(x, y, more);
    };
    G__6438.cljs$core$IFn$_invoke$arity$variadic = G__6438__delegate;
    return G__6438;
  }();
  min = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return min__1.call(this, x);
      case 2:
        return min__2.call(this, x, y);
      default:
        return min__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min.cljs$lang$maxFixedArity = 2;
  min.cljs$lang$applyTo = min__3.cljs$lang$applyTo;
  min.cljs$core$IFn$_invoke$arity$1 = min__1;
  min.cljs$core$IFn$_invoke$arity$2 = min__2;
  min.cljs$core$IFn$_invoke$arity$variadic = min__3.cljs$core$IFn$_invoke$arity$variadic;
  return min;
}();
cljs.core.byte$ = function byte$(x) {
  return x;
};
cljs.core.char$ = function char$(x) {
  if (typeof x === "number") {
    return String.fromCharCode(x);
  } else {
    if (typeof x === "string" && x.length === 1) {
      return x;
    } else {
      throw new Error("Argument to char must be a character or number");
    }
  }
};
cljs.core.short$ = function short$(x) {
  return x;
};
cljs.core.float$ = function float$(x) {
  return x;
};
cljs.core.double$ = function double$(x) {
  return x;
};
cljs.core.unchecked_byte = function unchecked_byte(x) {
  return x;
};
cljs.core.unchecked_char = function unchecked_char(x) {
  return x;
};
cljs.core.unchecked_short = function unchecked_short(x) {
  return x;
};
cljs.core.unchecked_float = function unchecked_float(x) {
  return x;
};
cljs.core.unchecked_double = function unchecked_double(x) {
  return x;
};
cljs.core.unchecked_add = function() {
  var unchecked_add = null;
  var unchecked_add__0 = function() {
    return 0;
  };
  var unchecked_add__1 = function(x) {
    return x;
  };
  var unchecked_add__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add__3 = function() {
    var G__6440__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add, x + y, more);
    };
    var G__6440 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6440__delegate.call(this, x, y, more);
    };
    G__6440.cljs$lang$maxFixedArity = 2;
    G__6440.cljs$lang$applyTo = function(arglist__6441) {
      var x = cljs.core.first(arglist__6441);
      arglist__6441 = cljs.core.next(arglist__6441);
      var y = cljs.core.first(arglist__6441);
      var more = cljs.core.rest(arglist__6441);
      return G__6440__delegate(x, y, more);
    };
    G__6440.cljs$core$IFn$_invoke$arity$variadic = G__6440__delegate;
    return G__6440;
  }();
  unchecked_add = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add__0.call(this);
      case 1:
        return unchecked_add__1.call(this, x);
      case 2:
        return unchecked_add__2.call(this, x, y);
      default:
        return unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add.cljs$lang$maxFixedArity = 2;
  unchecked_add.cljs$lang$applyTo = unchecked_add__3.cljs$lang$applyTo;
  unchecked_add.cljs$core$IFn$_invoke$arity$0 = unchecked_add__0;
  unchecked_add.cljs$core$IFn$_invoke$arity$1 = unchecked_add__1;
  unchecked_add.cljs$core$IFn$_invoke$arity$2 = unchecked_add__2;
  unchecked_add.cljs$core$IFn$_invoke$arity$variadic = unchecked_add__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add;
}();
cljs.core.unchecked_add_int = function() {
  var unchecked_add_int = null;
  var unchecked_add_int__0 = function() {
    return 0;
  };
  var unchecked_add_int__1 = function(x) {
    return x;
  };
  var unchecked_add_int__2 = function(x, y) {
    return x + y;
  };
  var unchecked_add_int__3 = function() {
    var G__6442__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_add_int, x + y, more);
    };
    var G__6442 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6442__delegate.call(this, x, y, more);
    };
    G__6442.cljs$lang$maxFixedArity = 2;
    G__6442.cljs$lang$applyTo = function(arglist__6443) {
      var x = cljs.core.first(arglist__6443);
      arglist__6443 = cljs.core.next(arglist__6443);
      var y = cljs.core.first(arglist__6443);
      var more = cljs.core.rest(arglist__6443);
      return G__6442__delegate(x, y, more);
    };
    G__6442.cljs$core$IFn$_invoke$arity$variadic = G__6442__delegate;
    return G__6442;
  }();
  unchecked_add_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_add_int__0.call(this);
      case 1:
        return unchecked_add_int__1.call(this, x);
      case 2:
        return unchecked_add_int__2.call(this, x, y);
      default:
        return unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_add_int.cljs$lang$maxFixedArity = 2;
  unchecked_add_int.cljs$lang$applyTo = unchecked_add_int__3.cljs$lang$applyTo;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = unchecked_add_int__0;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = unchecked_add_int__1;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = unchecked_add_int__2;
  unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_add_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_add_int;
}();
cljs.core.unchecked_dec = function unchecked_dec(x) {
  return x - 1;
};
cljs.core.unchecked_dec_int = function unchecked_dec_int(x) {
  return x - 1;
};
cljs.core.unchecked_divide_int = function() {
  var unchecked_divide_int = null;
  var unchecked_divide_int__1 = function(x) {
    return unchecked_divide_int.call(null, 1, x);
  };
  var unchecked_divide_int__2 = function(x, y) {
    return x / y;
  };
  var unchecked_divide_int__3 = function() {
    var G__6444__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_divide_int, unchecked_divide_int.call(null, x, y), more);
    };
    var G__6444 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6444__delegate.call(this, x, y, more);
    };
    G__6444.cljs$lang$maxFixedArity = 2;
    G__6444.cljs$lang$applyTo = function(arglist__6445) {
      var x = cljs.core.first(arglist__6445);
      arglist__6445 = cljs.core.next(arglist__6445);
      var y = cljs.core.first(arglist__6445);
      var more = cljs.core.rest(arglist__6445);
      return G__6444__delegate(x, y, more);
    };
    G__6444.cljs$core$IFn$_invoke$arity$variadic = G__6444__delegate;
    return G__6444;
  }();
  unchecked_divide_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_divide_int__1.call(this, x);
      case 2:
        return unchecked_divide_int__2.call(this, x, y);
      default:
        return unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_divide_int.cljs$lang$maxFixedArity = 2;
  unchecked_divide_int.cljs$lang$applyTo = unchecked_divide_int__3.cljs$lang$applyTo;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = unchecked_divide_int__1;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = unchecked_divide_int__2;
  unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_divide_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_divide_int;
}();
cljs.core.unchecked_inc = function unchecked_inc(x) {
  return x + 1;
};
cljs.core.unchecked_inc_int = function unchecked_inc_int(x) {
  return x + 1;
};
cljs.core.unchecked_multiply = function() {
  var unchecked_multiply = null;
  var unchecked_multiply__0 = function() {
    return 1;
  };
  var unchecked_multiply__1 = function(x) {
    return x;
  };
  var unchecked_multiply__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply__3 = function() {
    var G__6446__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply, x * y, more);
    };
    var G__6446 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6446__delegate.call(this, x, y, more);
    };
    G__6446.cljs$lang$maxFixedArity = 2;
    G__6446.cljs$lang$applyTo = function(arglist__6447) {
      var x = cljs.core.first(arglist__6447);
      arglist__6447 = cljs.core.next(arglist__6447);
      var y = cljs.core.first(arglist__6447);
      var more = cljs.core.rest(arglist__6447);
      return G__6446__delegate(x, y, more);
    };
    G__6446.cljs$core$IFn$_invoke$arity$variadic = G__6446__delegate;
    return G__6446;
  }();
  unchecked_multiply = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply__0.call(this);
      case 1:
        return unchecked_multiply__1.call(this, x);
      case 2:
        return unchecked_multiply__2.call(this, x, y);
      default:
        return unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply.cljs$lang$maxFixedArity = 2;
  unchecked_multiply.cljs$lang$applyTo = unchecked_multiply__3.cljs$lang$applyTo;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply__0;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply__1;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply__2;
  unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply;
}();
cljs.core.unchecked_multiply_int = function() {
  var unchecked_multiply_int = null;
  var unchecked_multiply_int__0 = function() {
    return 1;
  };
  var unchecked_multiply_int__1 = function(x) {
    return x;
  };
  var unchecked_multiply_int__2 = function(x, y) {
    return x * y;
  };
  var unchecked_multiply_int__3 = function() {
    var G__6448__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_multiply_int, x * y, more);
    };
    var G__6448 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6448__delegate.call(this, x, y, more);
    };
    G__6448.cljs$lang$maxFixedArity = 2;
    G__6448.cljs$lang$applyTo = function(arglist__6449) {
      var x = cljs.core.first(arglist__6449);
      arglist__6449 = cljs.core.next(arglist__6449);
      var y = cljs.core.first(arglist__6449);
      var more = cljs.core.rest(arglist__6449);
      return G__6448__delegate(x, y, more);
    };
    G__6448.cljs$core$IFn$_invoke$arity$variadic = G__6448__delegate;
    return G__6448;
  }();
  unchecked_multiply_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 0:
        return unchecked_multiply_int__0.call(this);
      case 1:
        return unchecked_multiply_int__1.call(this, x);
      case 2:
        return unchecked_multiply_int__2.call(this, x, y);
      default:
        return unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_multiply_int.cljs$lang$maxFixedArity = 2;
  unchecked_multiply_int.cljs$lang$applyTo = unchecked_multiply_int__3.cljs$lang$applyTo;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = unchecked_multiply_int__0;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = unchecked_multiply_int__1;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = unchecked_multiply_int__2;
  unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_multiply_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_multiply_int;
}();
cljs.core.unchecked_negate = function unchecked_negate(x) {
  return-x;
};
cljs.core.unchecked_negate_int = function unchecked_negate_int(x) {
  return-x;
};
cljs.core.unchecked_remainder_int = function unchecked_remainder_int(x, n) {
  return cljs.core.mod.call(null, x, n);
};
cljs.core.unchecked_subtract = function() {
  var unchecked_subtract = null;
  var unchecked_subtract__1 = function(x) {
    return-x;
  };
  var unchecked_subtract__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract__3 = function() {
    var G__6450__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract, x - y, more);
    };
    var G__6450 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6450__delegate.call(this, x, y, more);
    };
    G__6450.cljs$lang$maxFixedArity = 2;
    G__6450.cljs$lang$applyTo = function(arglist__6451) {
      var x = cljs.core.first(arglist__6451);
      arglist__6451 = cljs.core.next(arglist__6451);
      var y = cljs.core.first(arglist__6451);
      var more = cljs.core.rest(arglist__6451);
      return G__6450__delegate(x, y, more);
    };
    G__6450.cljs$core$IFn$_invoke$arity$variadic = G__6450__delegate;
    return G__6450;
  }();
  unchecked_subtract = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract__1.call(this, x);
      case 2:
        return unchecked_subtract__2.call(this, x, y);
      default:
        return unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract.cljs$lang$maxFixedArity = 2;
  unchecked_subtract.cljs$lang$applyTo = unchecked_subtract__3.cljs$lang$applyTo;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract__1;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract__2;
  unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract;
}();
cljs.core.unchecked_subtract_int = function() {
  var unchecked_subtract_int = null;
  var unchecked_subtract_int__1 = function(x) {
    return-x;
  };
  var unchecked_subtract_int__2 = function(x, y) {
    return x - y;
  };
  var unchecked_subtract_int__3 = function() {
    var G__6452__delegate = function(x, y, more) {
      return cljs.core.reduce.call(null, unchecked_subtract_int, x - y, more);
    };
    var G__6452 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6452__delegate.call(this, x, y, more);
    };
    G__6452.cljs$lang$maxFixedArity = 2;
    G__6452.cljs$lang$applyTo = function(arglist__6453) {
      var x = cljs.core.first(arglist__6453);
      arglist__6453 = cljs.core.next(arglist__6453);
      var y = cljs.core.first(arglist__6453);
      var more = cljs.core.rest(arglist__6453);
      return G__6452__delegate(x, y, more);
    };
    G__6452.cljs$core$IFn$_invoke$arity$variadic = G__6452__delegate;
    return G__6452;
  }();
  unchecked_subtract_int = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return unchecked_subtract_int__1.call(this, x);
      case 2:
        return unchecked_subtract_int__2.call(this, x, y);
      default:
        return unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  unchecked_subtract_int.cljs$lang$maxFixedArity = 2;
  unchecked_subtract_int.cljs$lang$applyTo = unchecked_subtract_int__3.cljs$lang$applyTo;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = unchecked_subtract_int__1;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = unchecked_subtract_int__2;
  unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = unchecked_subtract_int__3.cljs$core$IFn$_invoke$arity$variadic;
  return unchecked_subtract_int;
}();
cljs.core.fix = function fix(q) {
  if (q >= 0) {
    return Math.floor.call(null, q);
  } else {
    return Math.ceil.call(null, q);
  }
};
cljs.core.int$ = function int$(x) {
  return x | 0;
};
cljs.core.unchecked_int = function unchecked_int(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.long$ = function long$(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.unchecked_long = function unchecked_long(x) {
  return cljs.core.fix.call(null, x);
};
cljs.core.booleans = function booleans(x) {
  return x;
};
cljs.core.bytes = function bytes(x) {
  return x;
};
cljs.core.chars = function chars(x) {
  return x;
};
cljs.core.shorts = function shorts(x) {
  return x;
};
cljs.core.ints = function ints(x) {
  return x;
};
cljs.core.floats = function floats(x) {
  return x;
};
cljs.core.doubles = function doubles(x) {
  return x;
};
cljs.core.longs = function longs(x) {
  return x;
};
cljs.core.js_mod = function js_mod(n, d) {
  return n % d;
};
cljs.core.mod = function mod(n, d) {
  return(n % d + d) % d;
};
cljs.core.quot = function quot(n, d) {
  var rem = n % d;
  return cljs.core.fix.call(null, (n - rem) / d);
};
cljs.core.rem = function rem(n, d) {
  var q = cljs.core.quot.call(null, n, d);
  return n - d * q;
};
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return Math.random.call(null);
  };
  var rand__1 = function(n) {
    return n * rand.call(null);
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return cljs.core.fix.call(null, cljs.core.rand.call(null, n));
};
cljs.core.bit_xor = function bit_xor(x, y) {
  return x ^ y;
};
cljs.core.bit_and = function bit_and(x, y) {
  return x & y;
};
cljs.core.bit_or = function bit_or(x, y) {
  return x | y;
};
cljs.core.bit_and_not = function bit_and_not(x, y) {
  return x & ~y;
};
cljs.core.bit_clear = function bit_clear(x, n) {
  return x & ~(1 << n);
};
cljs.core.bit_flip = function bit_flip(x, n) {
  return x ^ 1 << n;
};
cljs.core.bit_not = function bit_not(x) {
  return~x;
};
cljs.core.bit_set = function bit_set(x, n) {
  return x | 1 << n;
};
cljs.core.bit_test = function bit_test(x, n) {
  return(x & 1 << n) != 0;
};
cljs.core.bit_shift_left = function bit_shift_left(x, n) {
  return x << n;
};
cljs.core.bit_shift_right = function bit_shift_right(x, n) {
  return x >> n;
};
cljs.core.bit_shift_right_zero_fill = function bit_shift_right_zero_fill(x, n) {
  return x >>> n;
};
cljs.core.unsigned_bit_shift_right = function unsigned_bit_shift_right(x, n) {
  return x >>> n;
};
cljs.core.bit_count = function bit_count(v) {
  var v__$1 = v - (v >> 1 & 1431655765);
  var v__$2 = (v__$1 & 858993459) + (v__$1 >> 2 & 858993459);
  return(v__$2 + (v__$2 >> 4) & 252645135) * 16843009 >> 24;
};
cljs.core._EQ__EQ_ = function() {
  var _EQ__EQ_ = null;
  var _EQ__EQ___1 = function(x) {
    return true;
  };
  var _EQ__EQ___2 = function(x, y) {
    return cljs.core._equiv.call(null, x, y);
  };
  var _EQ__EQ___3 = function() {
    var G__6454__delegate = function(x, y, more) {
      while (true) {
        if (_EQ__EQ_.call(null, x, y)) {
          if (cljs.core.next.call(null, more)) {
            var G__6455 = y;
            var G__6456 = cljs.core.first.call(null, more);
            var G__6457 = cljs.core.next.call(null, more);
            x = G__6455;
            y = G__6456;
            more = G__6457;
            continue;
          } else {
            return _EQ__EQ_.call(null, y, cljs.core.first.call(null, more));
          }
        } else {
          return false;
        }
        break;
      }
    };
    var G__6454 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6454__delegate.call(this, x, y, more);
    };
    G__6454.cljs$lang$maxFixedArity = 2;
    G__6454.cljs$lang$applyTo = function(arglist__6458) {
      var x = cljs.core.first(arglist__6458);
      arglist__6458 = cljs.core.next(arglist__6458);
      var y = cljs.core.first(arglist__6458);
      var more = cljs.core.rest(arglist__6458);
      return G__6454__delegate(x, y, more);
    };
    G__6454.cljs$core$IFn$_invoke$arity$variadic = G__6454__delegate;
    return G__6454;
  }();
  _EQ__EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return _EQ__EQ___1.call(this, x);
      case 2:
        return _EQ__EQ___2.call(this, x, y);
      default:
        return _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  _EQ__EQ_.cljs$lang$maxFixedArity = 2;
  _EQ__EQ_.cljs$lang$applyTo = _EQ__EQ___3.cljs$lang$applyTo;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = _EQ__EQ___1;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = _EQ__EQ___2;
  _EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = _EQ__EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return _EQ__EQ_;
}();
cljs.core.pos_QMARK_ = function pos_QMARK_(n) {
  return n > 0;
};
cljs.core.zero_QMARK_ = function zero_QMARK_(n) {
  return n === 0;
};
cljs.core.neg_QMARK_ = function neg_QMARK_(x) {
  return x < 0;
};
cljs.core.nthnext = function nthnext(coll, n) {
  var n__$1 = n;
  var xs = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs && n__$1 > 0) {
      var G__6459 = n__$1 - 1;
      var G__6460 = cljs.core.next.call(null, xs);
      n__$1 = G__6459;
      xs = G__6460;
      continue;
    } else {
      return xs;
    }
    break;
  }
};
cljs.core.str = function() {
  var str = null;
  var str__0 = function() {
    return "";
  };
  var str__1 = function(x) {
    if (x == null) {
      return "";
    } else {
      return "" + x;
    }
  };
  var str__2 = function() {
    var G__6461__delegate = function(x, ys) {
      var sb = new goog.string.StringBuffer(str.call(null, x));
      var more = ys;
      while (true) {
        if (cljs.core.truth_(more)) {
          var G__6462 = sb.append(str.call(null, cljs.core.first.call(null, more)));
          var G__6463 = cljs.core.next.call(null, more);
          sb = G__6462;
          more = G__6463;
          continue;
        } else {
          return sb.toString();
        }
        break;
      }
    };
    var G__6461 = function(x, var_args) {
      var ys = null;
      if (arguments.length > 1) {
        ys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6461__delegate.call(this, x, ys);
    };
    G__6461.cljs$lang$maxFixedArity = 1;
    G__6461.cljs$lang$applyTo = function(arglist__6464) {
      var x = cljs.core.first(arglist__6464);
      var ys = cljs.core.rest(arglist__6464);
      return G__6461__delegate(x, ys);
    };
    G__6461.cljs$core$IFn$_invoke$arity$variadic = G__6461__delegate;
    return G__6461;
  }();
  str = function(x, var_args) {
    var ys = var_args;
    switch(arguments.length) {
      case 0:
        return str__0.call(this);
      case 1:
        return str__1.call(this, x);
      default:
        return str__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  str.cljs$lang$maxFixedArity = 1;
  str.cljs$lang$applyTo = str__2.cljs$lang$applyTo;
  str.cljs$core$IFn$_invoke$arity$0 = str__0;
  str.cljs$core$IFn$_invoke$arity$1 = str__1;
  str.cljs$core$IFn$_invoke$arity$variadic = str__2.cljs$core$IFn$_invoke$arity$variadic;
  return str;
}();
cljs.core.subs = function() {
  var subs = null;
  var subs__2 = function(s, start) {
    return s.substring(start);
  };
  var subs__3 = function(s, start, end) {
    return s.substring(start, end);
  };
  subs = function(s, start, end) {
    switch(arguments.length) {
      case 2:
        return subs__2.call(this, s, start);
      case 3:
        return subs__3.call(this, s, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subs.cljs$core$IFn$_invoke$arity$2 = subs__2;
  subs.cljs$core$IFn$_invoke$arity$3 = subs__3;
  return subs;
}();
cljs.core.equiv_sequential = function equiv_sequential(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.sequential_QMARK_.call(null, y) ? cljs.core.counted_QMARK_.call(null, x) && cljs.core.counted_QMARK_.call(null, y) && !(cljs.core.count.call(null, x) === cljs.core.count.call(null, y)) ? false : function() {
    var xs = cljs.core.seq.call(null, x);
    var ys = cljs.core.seq.call(null, y);
    while (true) {
      if (xs == null) {
        return ys == null;
      } else {
        if (ys == null) {
          return false;
        } else {
          if (cljs.core._EQ_.call(null, cljs.core.first.call(null, xs), cljs.core.first.call(null, ys))) {
            var G__6465 = cljs.core.next.call(null, xs);
            var G__6466 = cljs.core.next.call(null, ys);
            xs = G__6465;
            ys = G__6466;
            continue;
          } else {
            return false;
          }
        }
      }
      break;
    }
  }() : null);
};
cljs.core.hash_coll = function hash_coll(coll) {
  if (cljs.core.seq.call(null, coll)) {
    var res = cljs.core.hash.call(null, cljs.core.first.call(null, coll));
    var s = cljs.core.next.call(null, coll);
    while (true) {
      if (s == null) {
        return res;
      } else {
        var G__6467 = cljs.core.hash_combine.call(null, res, cljs.core.hash.call(null, cljs.core.first.call(null, s)));
        var G__6468 = cljs.core.next.call(null, s);
        res = G__6467;
        s = G__6468;
        continue;
      }
      break;
    }
  } else {
    return 0;
  }
};
cljs.core.hash_imap = function hash_imap(m) {
  var h = 0;
  var s = cljs.core.seq.call(null, m);
  while (true) {
    if (s) {
      var e = cljs.core.first.call(null, s);
      var G__6469 = (h + (cljs.core.hash.call(null, cljs.core.key.call(null, e)) ^ cljs.core.hash.call(null, cljs.core.val.call(null, e)))) % 4503599627370496;
      var G__6470 = cljs.core.next.call(null, s);
      h = G__6469;
      s = G__6470;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.hash_iset = function hash_iset(s) {
  var h = 0;
  var s__$1 = cljs.core.seq.call(null, s);
  while (true) {
    if (s__$1) {
      var e = cljs.core.first.call(null, s__$1);
      var G__6471 = (h + cljs.core.hash.call(null, e)) % 4503599627370496;
      var G__6472 = cljs.core.next.call(null, s__$1);
      h = G__6471;
      s__$1 = G__6472;
      continue;
    } else {
      return h;
    }
    break;
  }
};
cljs.core.extend_object_BANG_ = function extend_object_BANG_(obj, fn_map) {
  var seq__6479_6485 = cljs.core.seq.call(null, fn_map);
  var chunk__6480_6486 = null;
  var count__6481_6487 = 0;
  var i__6482_6488 = 0;
  while (true) {
    if (i__6482_6488 < count__6481_6487) {
      var vec__6483_6489 = cljs.core._nth.call(null, chunk__6480_6486, i__6482_6488);
      var key_name_6490 = cljs.core.nth.call(null, vec__6483_6489, 0, null);
      var f_6491 = cljs.core.nth.call(null, vec__6483_6489, 1, null);
      var str_name_6492 = cljs.core.name.call(null, key_name_6490);
      obj[str_name_6492] = f_6491;
      var G__6493 = seq__6479_6485;
      var G__6494 = chunk__6480_6486;
      var G__6495 = count__6481_6487;
      var G__6496 = i__6482_6488 + 1;
      seq__6479_6485 = G__6493;
      chunk__6480_6486 = G__6494;
      count__6481_6487 = G__6495;
      i__6482_6488 = G__6496;
      continue;
    } else {
      var temp__4126__auto___6497 = cljs.core.seq.call(null, seq__6479_6485);
      if (temp__4126__auto___6497) {
        var seq__6479_6498__$1 = temp__4126__auto___6497;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6479_6498__$1)) {
          var c__4408__auto___6499 = cljs.core.chunk_first.call(null, seq__6479_6498__$1);
          var G__6500 = cljs.core.chunk_rest.call(null, seq__6479_6498__$1);
          var G__6501 = c__4408__auto___6499;
          var G__6502 = cljs.core.count.call(null, c__4408__auto___6499);
          var G__6503 = 0;
          seq__6479_6485 = G__6500;
          chunk__6480_6486 = G__6501;
          count__6481_6487 = G__6502;
          i__6482_6488 = G__6503;
          continue;
        } else {
          var vec__6484_6504 = cljs.core.first.call(null, seq__6479_6498__$1);
          var key_name_6505 = cljs.core.nth.call(null, vec__6484_6504, 0, null);
          var f_6506 = cljs.core.nth.call(null, vec__6484_6504, 1, null);
          var str_name_6507 = cljs.core.name.call(null, key_name_6505);
          obj[str_name_6507] = f_6506;
          var G__6508 = cljs.core.next.call(null, seq__6479_6498__$1);
          var G__6509 = null;
          var G__6510 = 0;
          var G__6511 = 0;
          seq__6479_6485 = G__6508;
          chunk__6480_6486 = G__6509;
          count__6481_6487 = G__6510;
          i__6482_6488 = G__6511;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return obj;
};
cljs.core.List = function(meta, first, rest, count, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.count = count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65937646;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.List.cljs$lang$type = true;
cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";
cljs.core.List.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/List");
};
cljs.core.List.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.List.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.List(self__.meta, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return null;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._rest.call(null, coll__$1);
};
cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.count === 1) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(meta__$1, self__.first, self__.rest, self__.count, self__.__hash);
};
cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, coll__$1, self__.count + 1, null);
};
cljs.core.__GT_List = function __GT_List(meta, first, rest, count, __hash) {
  return new cljs.core.List(meta, first, rest, count, __hash);
};
cljs.core.EmptyList = function(meta) {
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition0$ = 65937614;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.EmptyList.cljs$lang$type = true;
cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";
cljs.core.EmptyList.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/EmptyList");
};
cljs.core.EmptyList.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.EmptyList.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.EmptyList(self__.meta);
};
cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  throw new Error("Can't pop empty list");
};
cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return 0;
};
cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return null;
};
cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.EmptyList(meta__$1);
};
cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.List(self__.meta, o, null, 1, null);
};
cljs.core.__GT_EmptyList = function __GT_EmptyList(meta) {
  return new cljs.core.EmptyList(meta);
};
cljs.core.List.EMPTY = new cljs.core.EmptyList(null);
cljs.core.reversible_QMARK_ = function reversible_QMARK_(coll) {
  var G__6513 = coll;
  if (G__6513) {
    var bit__4302__auto__ = G__6513.cljs$lang$protocol_mask$partition0$ & 134217728;
    if (bit__4302__auto__ || G__6513.cljs$core$IReversible$) {
      return true;
    } else {
      if (!G__6513.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__6513);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IReversible, G__6513);
  }
};
cljs.core.rseq = function rseq(coll) {
  return cljs.core._rseq.call(null, coll);
};
cljs.core.reverse = function reverse(coll) {
  if (cljs.core.reversible_QMARK_.call(null, coll)) {
    return cljs.core.rseq.call(null, coll);
  } else {
    return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
  }
};
cljs.core.list = function() {
  var list__delegate = function(xs) {
    var arr = xs instanceof cljs.core.IndexedSeq && xs.i === 0 ? xs.arr : function() {
      var arr = [];
      var xs__$1 = xs;
      while (true) {
        if (!(xs__$1 == null)) {
          arr.push(cljs.core._first.call(null, xs__$1));
          var G__6514 = cljs.core._next.call(null, xs__$1);
          xs__$1 = G__6514;
          continue;
        } else {
          return arr;
        }
        break;
      }
    }();
    var i = arr.length;
    var r = cljs.core.List.EMPTY;
    while (true) {
      if (i > 0) {
        var G__6515 = i - 1;
        var G__6516 = cljs.core._conj.call(null, r, arr[i - 1]);
        i = G__6515;
        r = G__6516;
        continue;
      } else {
        return r;
      }
      break;
    }
  };
  var list = function(var_args) {
    var xs = null;
    if (arguments.length > 0) {
      xs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return list__delegate.call(this, xs);
  };
  list.cljs$lang$maxFixedArity = 0;
  list.cljs$lang$applyTo = function(arglist__6517) {
    var xs = cljs.core.seq(arglist__6517);
    return list__delegate(xs);
  };
  list.cljs$core$IFn$_invoke$arity$variadic = list__delegate;
  return list;
}();
cljs.core.Cons = function(meta, first, rest, __hash) {
  this.meta = meta;
  this.first = first;
  this.rest = rest;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 65929452;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Cons.cljs$lang$type = true;
cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";
cljs.core.Cons.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Cons");
};
cljs.core.Cons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Cons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Cons(self__.meta, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core.seq.call(null, self__.rest);
  }
};
cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.first;
};
cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(meta__$1, self__.first, self__.rest, self__.__hash);
};
cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.Cons(null, o, coll__$1, self__.__hash);
};
cljs.core.__GT_Cons = function __GT_Cons(meta, first, rest, __hash) {
  return new cljs.core.Cons(meta, first, rest, __hash);
};
cljs.core.cons = function cons(x, coll) {
  if (function() {
    var or__3639__auto__ = coll == null;
    if (or__3639__auto__) {
      return or__3639__auto__;
    } else {
      var G__6521 = coll;
      if (G__6521) {
        var bit__4295__auto__ = G__6521.cljs$lang$protocol_mask$partition0$ & 64;
        if (bit__4295__auto__ || G__6521.cljs$core$ISeq$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }()) {
    return new cljs.core.Cons(null, x, coll, null);
  } else {
    return new cljs.core.Cons(null, x, cljs.core.seq.call(null, coll), null);
  }
};
cljs.core.list_QMARK_ = function list_QMARK_(x) {
  var G__6523 = x;
  if (G__6523) {
    var bit__4302__auto__ = G__6523.cljs$lang$protocol_mask$partition0$ & 33554432;
    if (bit__4302__auto__ || G__6523.cljs$core$IList$) {
      return true;
    } else {
      if (!G__6523.cljs$lang$protocol_mask$partition0$) {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__6523);
      } else {
        return false;
      }
    }
  } else {
    return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IList, G__6523);
  }
};
cljs.core.hash_keyword = function hash_keyword(k) {
  return cljs.core.hash_symbol.call(null, k) + 2654435769 | 0;
};
cljs.core.Keyword = function(ns, name, fqn, _hash) {
  this.ns = ns;
  this.name = name;
  this.fqn = fqn;
  this._hash = _hash;
  this.cljs$lang$protocol_mask$partition0$ = 2153775105;
  this.cljs$lang$protocol_mask$partition1$ = 4096;
};
cljs.core.Keyword.cljs$lang$type = true;
cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";
cljs.core.Keyword.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Keyword");
};
cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(o, writer, _) {
  var self__ = this;
  var o__$1 = this;
  return cljs.core._write.call(null, writer, ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn));
};
cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.name;
};
cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.ns;
};
cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var h__4050__auto__ = self__._hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_keyword.call(null, this$__$1);
    self__._hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.Keyword.prototype.call = function() {
  var G__6525 = null;
  var G__6525__2 = function(self__, coll) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw);
  };
  var G__6525__3 = function(self__, coll, not_found) {
    var self__ = this;
    var self____$1 = this;
    var kw = self____$1;
    return cljs.core.get.call(null, coll, kw, not_found);
  };
  G__6525 = function(self__, coll, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6525__2.call(this, self__, coll);
      case 3:
        return G__6525__3.call(this, self__, coll, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6525.cljs$core$IFn$_invoke$arity$2 = G__6525__2;
  G__6525.cljs$core$IFn$_invoke$arity$3 = G__6525__3;
  return G__6525;
}();
cljs.core.Keyword.prototype.apply = function(self__, args6524) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6524)));
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = function(coll) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw);
};
cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = function(coll, not_found) {
  var self__ = this;
  var kw = this;
  return cljs.core.get.call(null, coll, kw, not_found);
};
cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  if (other instanceof cljs.core.Keyword) {
    return self__.fqn === other.fqn;
  } else {
    return false;
  }
};
cljs.core.Keyword.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return ":" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn);
};
cljs.core.Keyword.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Keyword = function __GT_Keyword(ns, name, fqn, _hash) {
  return new cljs.core.Keyword(ns, name, fqn, _hash);
};
cljs.core.keyword_QMARK_ = function keyword_QMARK_(x) {
  return x instanceof cljs.core.Keyword;
};
cljs.core.keyword_identical_QMARK_ = function keyword_identical_QMARK_(x, y) {
  if (x === y) {
    return true;
  } else {
    if (x instanceof cljs.core.Keyword && y instanceof cljs.core.Keyword) {
      return x.fqn === y.fqn;
    } else {
      return false;
    }
  }
};
cljs.core.namespace = function namespace(x) {
  if (function() {
    var G__6527 = x;
    if (G__6527) {
      var bit__4295__auto__ = G__6527.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4295__auto__ || G__6527.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._namespace.call(null, x);
  } else {
    throw new Error("Doesn't support namespace: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
  }
};
cljs.core.keyword = function() {
  var keyword = null;
  var keyword__1 = function(name) {
    if (name instanceof cljs.core.Keyword) {
      return name;
    } else {
      if (name instanceof cljs.core.Symbol) {
        return new cljs.core.Keyword(cljs.core.namespace.call(null, name), cljs.core.name.call(null, name), name.str, null);
      } else {
        if (typeof name === "string") {
          var parts = name.split("/");
          if (parts.length === 2) {
            return new cljs.core.Keyword(parts[0], parts[1], name, null);
          } else {
            return new cljs.core.Keyword(null, parts[0], name, null);
          }
        } else {
          return null;
        }
      }
    }
  };
  var keyword__2 = function(ns, name) {
    return new cljs.core.Keyword(ns, name, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(ns) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns) + "/" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name), null);
  };
  keyword = function(ns, name) {
    switch(arguments.length) {
      case 1:
        return keyword__1.call(this, ns);
      case 2:
        return keyword__2.call(this, ns, name);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keyword.cljs$core$IFn$_invoke$arity$1 = keyword__1;
  keyword.cljs$core$IFn$_invoke$arity$2 = keyword__2;
  return keyword;
}();
cljs.core.LazySeq = function(meta, fn, s, __hash) {
  this.meta = meta;
  this.fn = fn;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.LazySeq.cljs$lang$type = true;
cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";
cljs.core.LazySeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/LazySeq");
};
cljs.core.LazySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.LazySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.LazySeq.prototype.sval = function() {
  var self__ = this;
  var coll = this;
  if (self__.fn == null) {
    return self__.s;
  } else {
    self__.s = self__.fn.call(null);
    self__.fn = null;
    return self__.s;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.next.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (self__.s == null) {
    return null;
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  cljs.core._seq.call(null, coll__$1);
  if (!(self__.s == null)) {
    return cljs.core.rest.call(null, self__.s);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  coll__$1.sval();
  if (self__.s == null) {
    return null;
  } else {
    var ls = self__.s;
    while (true) {
      if (ls instanceof cljs.core.LazySeq) {
        var G__6528 = ls.sval();
        ls = G__6528;
        continue;
      } else {
        self__.s = ls;
        return cljs.core.seq.call(null, self__.s);
      }
      break;
    }
  }
};
cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.LazySeq(meta__$1, self__.fn, self__.s, self__.__hash);
};
cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_LazySeq = function __GT_LazySeq(meta, fn, s, __hash) {
  return new cljs.core.LazySeq(meta, fn, s, __hash);
};
cljs.core.ChunkBuffer = function(buf, end) {
  this.buf = buf;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2;
};
cljs.core.ChunkBuffer.cljs$lang$type = true;
cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";
cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ChunkBuffer");
};
cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end;
};
cljs.core.ChunkBuffer.prototype.add = function(o) {
  var self__ = this;
  var _ = this;
  self__.buf[self__.end] = o;
  return self__.end = self__.end + 1;
};
cljs.core.ChunkBuffer.prototype.chunk = function(o) {
  var self__ = this;
  var _ = this;
  var ret = new cljs.core.ArrayChunk(self__.buf, 0, self__.end);
  self__.buf = null;
  return ret;
};
cljs.core.__GT_ChunkBuffer = function __GT_ChunkBuffer(buf, end) {
  return new cljs.core.ChunkBuffer(buf, end);
};
cljs.core.chunk_buffer = function chunk_buffer(capacity) {
  return new cljs.core.ChunkBuffer(new Array(capacity), 0);
};
cljs.core.ArrayChunk = function(arr, off, end) {
  this.arr = arr;
  this.off = off;
  this.end = end;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 524306;
};
cljs.core.ArrayChunk.cljs$lang$type = true;
cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";
cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ArrayChunk");
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, self__.arr[self__.off], self__.off + 1);
};
cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_reduce.call(null, self__.arr, f, start, self__.off);
};
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = true;
cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off === self__.end) {
    throw new Error("-drop-first of empty chunk");
  } else {
    return new cljs.core.ArrayChunk(self__.arr, self__.off + 1, self__.end);
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, i) {
  var self__ = this;
  var coll__$1 = this;
  return self__.arr[self__.off + i];
};
cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, i, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (i >= 0 && i < self__.end - self__.off) {
    return self__.arr[self__.off + i];
  } else {
    return not_found;
  }
};
cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.end - self__.off;
};
cljs.core.__GT_ArrayChunk = function __GT_ArrayChunk(arr, off, end) {
  return new cljs.core.ArrayChunk(arr, off, end);
};
cljs.core.array_chunk = function() {
  var array_chunk = null;
  var array_chunk__1 = function(arr) {
    return new cljs.core.ArrayChunk(arr, 0, arr.length);
  };
  var array_chunk__2 = function(arr, off) {
    return new cljs.core.ArrayChunk(arr, off, arr.length);
  };
  var array_chunk__3 = function(arr, off, end) {
    return new cljs.core.ArrayChunk(arr, off, end);
  };
  array_chunk = function(arr, off, end) {
    switch(arguments.length) {
      case 1:
        return array_chunk__1.call(this, arr);
      case 2:
        return array_chunk__2.call(this, arr, off);
      case 3:
        return array_chunk__3.call(this, arr, off, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  array_chunk.cljs$core$IFn$_invoke$arity$1 = array_chunk__1;
  array_chunk.cljs$core$IFn$_invoke$arity$2 = array_chunk__2;
  array_chunk.cljs$core$IFn$_invoke$arity$3 = array_chunk__3;
  return array_chunk;
}();
cljs.core.ChunkedCons = function(chunk, more, meta, __hash) {
  this.chunk = chunk;
  this.more = more;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31850732;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedCons.cljs$lang$type = true;
cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";
cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ChunkedCons");
};
cljs.core.ChunkedCons.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedCons.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    var more__$1 = cljs.core._seq.call(null, self__.more);
    if (more__$1 == null) {
      return null;
    } else {
      return more__$1;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.chunk, 0);
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._count.call(null, self__.chunk) > 1) {
    return new cljs.core.ChunkedCons(cljs.core._drop_first.call(null, self__.chunk), self__.more, self__.meta, null);
  } else {
    if (self__.more == null) {
      return cljs.core.List.EMPTY;
    } else {
      return self__.more;
    }
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.chunk;
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.more;
  }
};
cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ChunkedCons(self__.chunk, self__.more, m, self__.__hash);
};
cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, this$__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.more == null) {
    return null;
  } else {
    return self__.more;
  }
};
cljs.core.__GT_ChunkedCons = function __GT_ChunkedCons(chunk, more, meta, __hash) {
  return new cljs.core.ChunkedCons(chunk, more, meta, __hash);
};
cljs.core.chunk_cons = function chunk_cons(chunk, rest) {
  if (cljs.core._count.call(null, chunk) === 0) {
    return rest;
  } else {
    return new cljs.core.ChunkedCons(chunk, rest, null, null);
  }
};
cljs.core.chunk_append = function chunk_append(b, x) {
  return b.add(x);
};
cljs.core.chunk = function chunk(b) {
  return b.chunk();
};
cljs.core.chunk_first = function chunk_first(s) {
  return cljs.core._chunked_first.call(null, s);
};
cljs.core.chunk_rest = function chunk_rest(s) {
  return cljs.core._chunked_rest.call(null, s);
};
cljs.core.chunk_next = function chunk_next(s) {
  if (function() {
    var G__6530 = s;
    if (G__6530) {
      var bit__4295__auto__ = G__6530.cljs$lang$protocol_mask$partition1$ & 1024;
      if (bit__4295__auto__ || G__6530.cljs$core$IChunkedNext$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._chunked_next.call(null, s);
  } else {
    return cljs.core.seq.call(null, cljs.core._chunked_rest.call(null, s));
  }
};
cljs.core.to_array = function to_array(s) {
  var ary = [];
  var s__$1 = s;
  while (true) {
    if (cljs.core.seq.call(null, s__$1)) {
      ary.push(cljs.core.first.call(null, s__$1));
      var G__6531 = cljs.core.next.call(null, s__$1);
      s__$1 = G__6531;
      continue;
    } else {
      return ary;
    }
    break;
  }
};
cljs.core.to_array_2d = function to_array_2d(coll) {
  var ret = new Array(cljs.core.count.call(null, coll));
  var i_6532 = 0;
  var xs_6533 = cljs.core.seq.call(null, coll);
  while (true) {
    if (xs_6533) {
      ret[i_6532] = cljs.core.to_array.call(null, cljs.core.first.call(null, xs_6533));
      var G__6534 = i_6532 + 1;
      var G__6535 = cljs.core.next.call(null, xs_6533);
      i_6532 = G__6534;
      xs_6533 = G__6535;
      continue;
    } else {
    }
    break;
  }
  return ret;
};
cljs.core.int_array = function() {
  var int_array = null;
  var int_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return int_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var int_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6536 = i + 1;
          var G__6537 = cljs.core.next.call(null, s__$1);
          i = G__6536;
          s__$1 = G__6537;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4508__auto___6538 = size;
      var i_6539 = 0;
      while (true) {
        if (i_6539 < n__4508__auto___6538) {
          a[i_6539] = init_val_or_seq;
          var G__6540 = i_6539 + 1;
          i_6539 = G__6540;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  int_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return int_array__1.call(this, size);
      case 2:
        return int_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  int_array.cljs$core$IFn$_invoke$arity$1 = int_array__1;
  int_array.cljs$core$IFn$_invoke$arity$2 = int_array__2;
  return int_array;
}();
cljs.core.long_array = function() {
  var long_array = null;
  var long_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return long_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var long_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6541 = i + 1;
          var G__6542 = cljs.core.next.call(null, s__$1);
          i = G__6541;
          s__$1 = G__6542;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4508__auto___6543 = size;
      var i_6544 = 0;
      while (true) {
        if (i_6544 < n__4508__auto___6543) {
          a[i_6544] = init_val_or_seq;
          var G__6545 = i_6544 + 1;
          i_6544 = G__6545;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  long_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return long_array__1.call(this, size);
      case 2:
        return long_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  long_array.cljs$core$IFn$_invoke$arity$1 = long_array__1;
  long_array.cljs$core$IFn$_invoke$arity$2 = long_array__2;
  return long_array;
}();
cljs.core.double_array = function() {
  var double_array = null;
  var double_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return double_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var double_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6546 = i + 1;
          var G__6547 = cljs.core.next.call(null, s__$1);
          i = G__6546;
          s__$1 = G__6547;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4508__auto___6548 = size;
      var i_6549 = 0;
      while (true) {
        if (i_6549 < n__4508__auto___6548) {
          a[i_6549] = init_val_or_seq;
          var G__6550 = i_6549 + 1;
          i_6549 = G__6550;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  double_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return double_array__1.call(this, size);
      case 2:
        return double_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  double_array.cljs$core$IFn$_invoke$arity$1 = double_array__1;
  double_array.cljs$core$IFn$_invoke$arity$2 = double_array__2;
  return double_array;
}();
cljs.core.object_array = function() {
  var object_array = null;
  var object_array__1 = function(size_or_seq) {
    if (typeof size_or_seq === "number") {
      return object_array.call(null, size_or_seq, null);
    } else {
      return cljs.core.into_array.call(null, size_or_seq);
    }
  };
  var object_array__2 = function(size, init_val_or_seq) {
    var a = new Array(size);
    if (cljs.core.seq_QMARK_.call(null, init_val_or_seq)) {
      var s = cljs.core.seq.call(null, init_val_or_seq);
      var i = 0;
      var s__$1 = s;
      while (true) {
        if (s__$1 && i < size) {
          a[i] = cljs.core.first.call(null, s__$1);
          var G__6551 = i + 1;
          var G__6552 = cljs.core.next.call(null, s__$1);
          i = G__6551;
          s__$1 = G__6552;
          continue;
        } else {
          return a;
        }
        break;
      }
    } else {
      var n__4508__auto___6553 = size;
      var i_6554 = 0;
      while (true) {
        if (i_6554 < n__4508__auto___6553) {
          a[i_6554] = init_val_or_seq;
          var G__6555 = i_6554 + 1;
          i_6554 = G__6555;
          continue;
        } else {
        }
        break;
      }
      return a;
    }
  };
  object_array = function(size, init_val_or_seq) {
    switch(arguments.length) {
      case 1:
        return object_array__1.call(this, size);
      case 2:
        return object_array__2.call(this, size, init_val_or_seq);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  object_array.cljs$core$IFn$_invoke$arity$1 = object_array__1;
  object_array.cljs$core$IFn$_invoke$arity$2 = object_array__2;
  return object_array;
}();
cljs.core.bounded_count = function bounded_count(s, n) {
  if (cljs.core.counted_QMARK_.call(null, s)) {
    return cljs.core.count.call(null, s);
  } else {
    var s__$1 = s;
    var i = n;
    var sum = 0;
    while (true) {
      if (i > 0 && cljs.core.seq.call(null, s__$1)) {
        var G__6556 = cljs.core.next.call(null, s__$1);
        var G__6557 = i - 1;
        var G__6558 = sum + 1;
        s__$1 = G__6556;
        i = G__6557;
        sum = G__6558;
        continue;
      } else {
        return sum;
      }
      break;
    }
  }
};
cljs.core.spread = function spread(arglist) {
  if (arglist == null) {
    return null;
  } else {
    if (cljs.core.next.call(null, arglist) == null) {
      return cljs.core.seq.call(null, cljs.core.first.call(null, arglist));
    } else {
      return cljs.core.cons.call(null, cljs.core.first.call(null, arglist), spread.call(null, cljs.core.next.call(null, arglist)));
    }
  }
};
cljs.core.concat = function() {
  var concat = null;
  var concat__0 = function() {
    return new cljs.core.LazySeq(null, function() {
      return null;
    }, null, null);
  };
  var concat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return x;
    }, null, null);
  };
  var concat__2 = function(x, y) {
    return new cljs.core.LazySeq(null, function() {
      var s = cljs.core.seq.call(null, x);
      if (s) {
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, s), concat.call(null, cljs.core.chunk_rest.call(null, s), y));
        } else {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), concat.call(null, cljs.core.rest.call(null, s), y));
        }
      } else {
        return y;
      }
    }, null, null);
  };
  var concat__3 = function() {
    var G__6559__delegate = function(x, y, zs) {
      var cat = function cat(xys, zs__$1) {
        return new cljs.core.LazySeq(null, function() {
          var xys__$1 = cljs.core.seq.call(null, xys);
          if (xys__$1) {
            if (cljs.core.chunked_seq_QMARK_.call(null, xys__$1)) {
              return cljs.core.chunk_cons.call(null, cljs.core.chunk_first.call(null, xys__$1), cat.call(null, cljs.core.chunk_rest.call(null, xys__$1), zs__$1));
            } else {
              return cljs.core.cons.call(null, cljs.core.first.call(null, xys__$1), cat.call(null, cljs.core.rest.call(null, xys__$1), zs__$1));
            }
          } else {
            if (cljs.core.truth_(zs__$1)) {
              return cat.call(null, cljs.core.first.call(null, zs__$1), cljs.core.next.call(null, zs__$1));
            } else {
              return null;
            }
          }
        }, null, null);
      };
      return cat.call(null, concat.call(null, x, y), zs);
    };
    var G__6559 = function(x, y, var_args) {
      var zs = null;
      if (arguments.length > 2) {
        zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6559__delegate.call(this, x, y, zs);
    };
    G__6559.cljs$lang$maxFixedArity = 2;
    G__6559.cljs$lang$applyTo = function(arglist__6560) {
      var x = cljs.core.first(arglist__6560);
      arglist__6560 = cljs.core.next(arglist__6560);
      var y = cljs.core.first(arglist__6560);
      var zs = cljs.core.rest(arglist__6560);
      return G__6559__delegate(x, y, zs);
    };
    G__6559.cljs$core$IFn$_invoke$arity$variadic = G__6559__delegate;
    return G__6559;
  }();
  concat = function(x, y, var_args) {
    var zs = var_args;
    switch(arguments.length) {
      case 0:
        return concat__0.call(this);
      case 1:
        return concat__1.call(this, x);
      case 2:
        return concat__2.call(this, x, y);
      default:
        return concat__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  concat.cljs$lang$maxFixedArity = 2;
  concat.cljs$lang$applyTo = concat__3.cljs$lang$applyTo;
  concat.cljs$core$IFn$_invoke$arity$0 = concat__0;
  concat.cljs$core$IFn$_invoke$arity$1 = concat__1;
  concat.cljs$core$IFn$_invoke$arity$2 = concat__2;
  concat.cljs$core$IFn$_invoke$arity$variadic = concat__3.cljs$core$IFn$_invoke$arity$variadic;
  return concat;
}();
cljs.core.list_STAR_ = function() {
  var list_STAR_ = null;
  var list_STAR___1 = function(args) {
    return cljs.core.seq.call(null, args);
  };
  var list_STAR___2 = function(a, args) {
    return cljs.core.cons.call(null, a, args);
  };
  var list_STAR___3 = function(a, b, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, args));
  };
  var list_STAR___4 = function(a, b, c, args) {
    return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, args)));
  };
  var list_STAR___5 = function() {
    var G__6561__delegate = function(a, b, c, d, more) {
      return cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, more)))));
    };
    var G__6561 = function(a, b, c, d, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6561__delegate.call(this, a, b, c, d, more);
    };
    G__6561.cljs$lang$maxFixedArity = 4;
    G__6561.cljs$lang$applyTo = function(arglist__6562) {
      var a = cljs.core.first(arglist__6562);
      arglist__6562 = cljs.core.next(arglist__6562);
      var b = cljs.core.first(arglist__6562);
      arglist__6562 = cljs.core.next(arglist__6562);
      var c = cljs.core.first(arglist__6562);
      arglist__6562 = cljs.core.next(arglist__6562);
      var d = cljs.core.first(arglist__6562);
      var more = cljs.core.rest(arglist__6562);
      return G__6561__delegate(a, b, c, d, more);
    };
    G__6561.cljs$core$IFn$_invoke$arity$variadic = G__6561__delegate;
    return G__6561;
  }();
  list_STAR_ = function(a, b, c, d, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return list_STAR___1.call(this, a);
      case 2:
        return list_STAR___2.call(this, a, b);
      case 3:
        return list_STAR___3.call(this, a, b, c);
      case 4:
        return list_STAR___4.call(this, a, b, c, d);
      default:
        return list_STAR___5.cljs$core$IFn$_invoke$arity$variadic(a, b, c, d, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  list_STAR_.cljs$lang$maxFixedArity = 4;
  list_STAR_.cljs$lang$applyTo = list_STAR___5.cljs$lang$applyTo;
  list_STAR_.cljs$core$IFn$_invoke$arity$1 = list_STAR___1;
  list_STAR_.cljs$core$IFn$_invoke$arity$2 = list_STAR___2;
  list_STAR_.cljs$core$IFn$_invoke$arity$3 = list_STAR___3;
  list_STAR_.cljs$core$IFn$_invoke$arity$4 = list_STAR___4;
  list_STAR_.cljs$core$IFn$_invoke$arity$variadic = list_STAR___5.cljs$core$IFn$_invoke$arity$variadic;
  return list_STAR_;
}();
cljs.core.transient$ = function transient$(coll) {
  return cljs.core._as_transient.call(null, coll);
};
cljs.core.persistent_BANG_ = function persistent_BANG_(tcoll) {
  return cljs.core._persistent_BANG_.call(null, tcoll);
};
cljs.core.conj_BANG_ = function() {
  var conj_BANG_ = null;
  var conj_BANG___0 = function() {
    return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  };
  var conj_BANG___1 = function(coll) {
    return coll;
  };
  var conj_BANG___2 = function(tcoll, val) {
    return cljs.core._conj_BANG_.call(null, tcoll, val);
  };
  var conj_BANG___3 = function() {
    var G__6563__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._conj_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__6564 = ntcoll;
          var G__6565 = cljs.core.first.call(null, vals);
          var G__6566 = cljs.core.next.call(null, vals);
          tcoll = G__6564;
          val = G__6565;
          vals = G__6566;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6563 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6563__delegate.call(this, tcoll, val, vals);
    };
    G__6563.cljs$lang$maxFixedArity = 2;
    G__6563.cljs$lang$applyTo = function(arglist__6567) {
      var tcoll = cljs.core.first(arglist__6567);
      arglist__6567 = cljs.core.next(arglist__6567);
      var val = cljs.core.first(arglist__6567);
      var vals = cljs.core.rest(arglist__6567);
      return G__6563__delegate(tcoll, val, vals);
    };
    G__6563.cljs$core$IFn$_invoke$arity$variadic = G__6563__delegate;
    return G__6563;
  }();
  conj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 0:
        return conj_BANG___0.call(this);
      case 1:
        return conj_BANG___1.call(this, tcoll);
      case 2:
        return conj_BANG___2.call(this, tcoll, val);
      default:
        return conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  conj_BANG_.cljs$lang$maxFixedArity = 2;
  conj_BANG_.cljs$lang$applyTo = conj_BANG___3.cljs$lang$applyTo;
  conj_BANG_.cljs$core$IFn$_invoke$arity$0 = conj_BANG___0;
  conj_BANG_.cljs$core$IFn$_invoke$arity$1 = conj_BANG___1;
  conj_BANG_.cljs$core$IFn$_invoke$arity$2 = conj_BANG___2;
  conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = conj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return conj_BANG_;
}();
cljs.core.assoc_BANG_ = function() {
  var assoc_BANG_ = null;
  var assoc_BANG___3 = function(tcoll, key, val) {
    return cljs.core._assoc_BANG_.call(null, tcoll, key, val);
  };
  var assoc_BANG___4 = function() {
    var G__6568__delegate = function(tcoll, key, val, kvs) {
      while (true) {
        var ntcoll = cljs.core._assoc_BANG_.call(null, tcoll, key, val);
        if (cljs.core.truth_(kvs)) {
          var G__6569 = ntcoll;
          var G__6570 = cljs.core.first.call(null, kvs);
          var G__6571 = cljs.core.second.call(null, kvs);
          var G__6572 = cljs.core.nnext.call(null, kvs);
          tcoll = G__6569;
          key = G__6570;
          val = G__6571;
          kvs = G__6572;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6568 = function(tcoll, key, val, var_args) {
      var kvs = null;
      if (arguments.length > 3) {
        kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6568__delegate.call(this, tcoll, key, val, kvs);
    };
    G__6568.cljs$lang$maxFixedArity = 3;
    G__6568.cljs$lang$applyTo = function(arglist__6573) {
      var tcoll = cljs.core.first(arglist__6573);
      arglist__6573 = cljs.core.next(arglist__6573);
      var key = cljs.core.first(arglist__6573);
      arglist__6573 = cljs.core.next(arglist__6573);
      var val = cljs.core.first(arglist__6573);
      var kvs = cljs.core.rest(arglist__6573);
      return G__6568__delegate(tcoll, key, val, kvs);
    };
    G__6568.cljs$core$IFn$_invoke$arity$variadic = G__6568__delegate;
    return G__6568;
  }();
  assoc_BANG_ = function(tcoll, key, val, var_args) {
    var kvs = var_args;
    switch(arguments.length) {
      case 3:
        return assoc_BANG___3.call(this, tcoll, key, val);
      default:
        return assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, val, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  assoc_BANG_.cljs$lang$maxFixedArity = 3;
  assoc_BANG_.cljs$lang$applyTo = assoc_BANG___4.cljs$lang$applyTo;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = assoc_BANG___3;
  assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = assoc_BANG___4.cljs$core$IFn$_invoke$arity$variadic;
  return assoc_BANG_;
}();
cljs.core.dissoc_BANG_ = function() {
  var dissoc_BANG_ = null;
  var dissoc_BANG___2 = function(tcoll, key) {
    return cljs.core._dissoc_BANG_.call(null, tcoll, key);
  };
  var dissoc_BANG___3 = function() {
    var G__6574__delegate = function(tcoll, key, ks) {
      while (true) {
        var ntcoll = cljs.core._dissoc_BANG_.call(null, tcoll, key);
        if (cljs.core.truth_(ks)) {
          var G__6575 = ntcoll;
          var G__6576 = cljs.core.first.call(null, ks);
          var G__6577 = cljs.core.next.call(null, ks);
          tcoll = G__6575;
          key = G__6576;
          ks = G__6577;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6574 = function(tcoll, key, var_args) {
      var ks = null;
      if (arguments.length > 2) {
        ks = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6574__delegate.call(this, tcoll, key, ks);
    };
    G__6574.cljs$lang$maxFixedArity = 2;
    G__6574.cljs$lang$applyTo = function(arglist__6578) {
      var tcoll = cljs.core.first(arglist__6578);
      arglist__6578 = cljs.core.next(arglist__6578);
      var key = cljs.core.first(arglist__6578);
      var ks = cljs.core.rest(arglist__6578);
      return G__6574__delegate(tcoll, key, ks);
    };
    G__6574.cljs$core$IFn$_invoke$arity$variadic = G__6574__delegate;
    return G__6574;
  }();
  dissoc_BANG_ = function(tcoll, key, var_args) {
    var ks = var_args;
    switch(arguments.length) {
      case 2:
        return dissoc_BANG___2.call(this, tcoll, key);
      default:
        return dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, key, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dissoc_BANG_.cljs$lang$maxFixedArity = 2;
  dissoc_BANG_.cljs$lang$applyTo = dissoc_BANG___3.cljs$lang$applyTo;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = dissoc_BANG___2;
  dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = dissoc_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return dissoc_BANG_;
}();
cljs.core.pop_BANG_ = function pop_BANG_(tcoll) {
  return cljs.core._pop_BANG_.call(null, tcoll);
};
cljs.core.disj_BANG_ = function() {
  var disj_BANG_ = null;
  var disj_BANG___2 = function(tcoll, val) {
    return cljs.core._disjoin_BANG_.call(null, tcoll, val);
  };
  var disj_BANG___3 = function() {
    var G__6579__delegate = function(tcoll, val, vals) {
      while (true) {
        var ntcoll = cljs.core._disjoin_BANG_.call(null, tcoll, val);
        if (cljs.core.truth_(vals)) {
          var G__6580 = ntcoll;
          var G__6581 = cljs.core.first.call(null, vals);
          var G__6582 = cljs.core.next.call(null, vals);
          tcoll = G__6580;
          val = G__6581;
          vals = G__6582;
          continue;
        } else {
          return ntcoll;
        }
        break;
      }
    };
    var G__6579 = function(tcoll, val, var_args) {
      var vals = null;
      if (arguments.length > 2) {
        vals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6579__delegate.call(this, tcoll, val, vals);
    };
    G__6579.cljs$lang$maxFixedArity = 2;
    G__6579.cljs$lang$applyTo = function(arglist__6583) {
      var tcoll = cljs.core.first(arglist__6583);
      arglist__6583 = cljs.core.next(arglist__6583);
      var val = cljs.core.first(arglist__6583);
      var vals = cljs.core.rest(arglist__6583);
      return G__6579__delegate(tcoll, val, vals);
    };
    G__6579.cljs$core$IFn$_invoke$arity$variadic = G__6579__delegate;
    return G__6579;
  }();
  disj_BANG_ = function(tcoll, val, var_args) {
    var vals = var_args;
    switch(arguments.length) {
      case 2:
        return disj_BANG___2.call(this, tcoll, val);
      default:
        return disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic(tcoll, val, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  disj_BANG_.cljs$lang$maxFixedArity = 2;
  disj_BANG_.cljs$lang$applyTo = disj_BANG___3.cljs$lang$applyTo;
  disj_BANG_.cljs$core$IFn$_invoke$arity$2 = disj_BANG___2;
  disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = disj_BANG___3.cljs$core$IFn$_invoke$arity$variadic;
  return disj_BANG_;
}();
cljs.core.apply_to = function apply_to(f, argc, args) {
  var args__$1 = cljs.core.seq.call(null, args);
  if (argc === 0) {
    return f.call(null);
  } else {
    var a4552 = cljs.core._first.call(null, args__$1);
    var args__$2 = cljs.core._rest.call(null, args__$1);
    if (argc === 1) {
      if (f.cljs$core$IFn$_invoke$arity$1) {
        return f.cljs$core$IFn$_invoke$arity$1(a4552);
      } else {
        return f.call(null, a4552);
      }
    } else {
      var b4553 = cljs.core._first.call(null, args__$2);
      var args__$3 = cljs.core._rest.call(null, args__$2);
      if (argc === 2) {
        if (f.cljs$core$IFn$_invoke$arity$2) {
          return f.cljs$core$IFn$_invoke$arity$2(a4552, b4553);
        } else {
          return f.call(null, a4552, b4553);
        }
      } else {
        var c4554 = cljs.core._first.call(null, args__$3);
        var args__$4 = cljs.core._rest.call(null, args__$3);
        if (argc === 3) {
          if (f.cljs$core$IFn$_invoke$arity$3) {
            return f.cljs$core$IFn$_invoke$arity$3(a4552, b4553, c4554);
          } else {
            return f.call(null, a4552, b4553, c4554);
          }
        } else {
          var d4555 = cljs.core._first.call(null, args__$4);
          var args__$5 = cljs.core._rest.call(null, args__$4);
          if (argc === 4) {
            if (f.cljs$core$IFn$_invoke$arity$4) {
              return f.cljs$core$IFn$_invoke$arity$4(a4552, b4553, c4554, d4555);
            } else {
              return f.call(null, a4552, b4553, c4554, d4555);
            }
          } else {
            var e4556 = cljs.core._first.call(null, args__$5);
            var args__$6 = cljs.core._rest.call(null, args__$5);
            if (argc === 5) {
              if (f.cljs$core$IFn$_invoke$arity$5) {
                return f.cljs$core$IFn$_invoke$arity$5(a4552, b4553, c4554, d4555, e4556);
              } else {
                return f.call(null, a4552, b4553, c4554, d4555, e4556);
              }
            } else {
              var f4557 = cljs.core._first.call(null, args__$6);
              var args__$7 = cljs.core._rest.call(null, args__$6);
              if (argc === 6) {
                if (f.cljs$core$IFn$_invoke$arity$6) {
                  return f.cljs$core$IFn$_invoke$arity$6(a4552, b4553, c4554, d4555, e4556, f4557);
                } else {
                  return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557);
                }
              } else {
                var g4558 = cljs.core._first.call(null, args__$7);
                var args__$8 = cljs.core._rest.call(null, args__$7);
                if (argc === 7) {
                  if (f.cljs$core$IFn$_invoke$arity$7) {
                    return f.cljs$core$IFn$_invoke$arity$7(a4552, b4553, c4554, d4555, e4556, f4557, g4558);
                  } else {
                    return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558);
                  }
                } else {
                  var h4559 = cljs.core._first.call(null, args__$8);
                  var args__$9 = cljs.core._rest.call(null, args__$8);
                  if (argc === 8) {
                    if (f.cljs$core$IFn$_invoke$arity$8) {
                      return f.cljs$core$IFn$_invoke$arity$8(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559);
                    } else {
                      return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559);
                    }
                  } else {
                    var i4560 = cljs.core._first.call(null, args__$9);
                    var args__$10 = cljs.core._rest.call(null, args__$9);
                    if (argc === 9) {
                      if (f.cljs$core$IFn$_invoke$arity$9) {
                        return f.cljs$core$IFn$_invoke$arity$9(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560);
                      } else {
                        return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560);
                      }
                    } else {
                      var j4561 = cljs.core._first.call(null, args__$10);
                      var args__$11 = cljs.core._rest.call(null, args__$10);
                      if (argc === 10) {
                        if (f.cljs$core$IFn$_invoke$arity$10) {
                          return f.cljs$core$IFn$_invoke$arity$10(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561);
                        } else {
                          return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561);
                        }
                      } else {
                        var k4562 = cljs.core._first.call(null, args__$11);
                        var args__$12 = cljs.core._rest.call(null, args__$11);
                        if (argc === 11) {
                          if (f.cljs$core$IFn$_invoke$arity$11) {
                            return f.cljs$core$IFn$_invoke$arity$11(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562);
                          } else {
                            return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562);
                          }
                        } else {
                          var l4563 = cljs.core._first.call(null, args__$12);
                          var args__$13 = cljs.core._rest.call(null, args__$12);
                          if (argc === 12) {
                            if (f.cljs$core$IFn$_invoke$arity$12) {
                              return f.cljs$core$IFn$_invoke$arity$12(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563);
                            } else {
                              return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563);
                            }
                          } else {
                            var m4564 = cljs.core._first.call(null, args__$13);
                            var args__$14 = cljs.core._rest.call(null, args__$13);
                            if (argc === 13) {
                              if (f.cljs$core$IFn$_invoke$arity$13) {
                                return f.cljs$core$IFn$_invoke$arity$13(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564);
                              } else {
                                return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564);
                              }
                            } else {
                              var n4565 = cljs.core._first.call(null, args__$14);
                              var args__$15 = cljs.core._rest.call(null, args__$14);
                              if (argc === 14) {
                                if (f.cljs$core$IFn$_invoke$arity$14) {
                                  return f.cljs$core$IFn$_invoke$arity$14(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565);
                                } else {
                                  return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565);
                                }
                              } else {
                                var o4566 = cljs.core._first.call(null, args__$15);
                                var args__$16 = cljs.core._rest.call(null, args__$15);
                                if (argc === 15) {
                                  if (f.cljs$core$IFn$_invoke$arity$15) {
                                    return f.cljs$core$IFn$_invoke$arity$15(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566);
                                  } else {
                                    return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566);
                                  }
                                } else {
                                  var p4567 = cljs.core._first.call(null, args__$16);
                                  var args__$17 = cljs.core._rest.call(null, args__$16);
                                  if (argc === 16) {
                                    if (f.cljs$core$IFn$_invoke$arity$16) {
                                      return f.cljs$core$IFn$_invoke$arity$16(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567);
                                    } else {
                                      return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567);
                                    }
                                  } else {
                                    var q4568 = cljs.core._first.call(null, args__$17);
                                    var args__$18 = cljs.core._rest.call(null, args__$17);
                                    if (argc === 17) {
                                      if (f.cljs$core$IFn$_invoke$arity$17) {
                                        return f.cljs$core$IFn$_invoke$arity$17(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568);
                                      } else {
                                        return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568);
                                      }
                                    } else {
                                      var r4569 = cljs.core._first.call(null, args__$18);
                                      var args__$19 = cljs.core._rest.call(null, args__$18);
                                      if (argc === 18) {
                                        if (f.cljs$core$IFn$_invoke$arity$18) {
                                          return f.cljs$core$IFn$_invoke$arity$18(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568, r4569);
                                        } else {
                                          return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568, r4569);
                                        }
                                      } else {
                                        var s4570 = cljs.core._first.call(null, args__$19);
                                        var args__$20 = cljs.core._rest.call(null, args__$19);
                                        if (argc === 19) {
                                          if (f.cljs$core$IFn$_invoke$arity$19) {
                                            return f.cljs$core$IFn$_invoke$arity$19(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568, r4569, s4570);
                                          } else {
                                            return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568, r4569, s4570);
                                          }
                                        } else {
                                          var t4571 = cljs.core._first.call(null, args__$20);
                                          var args__$21 = cljs.core._rest.call(null, args__$20);
                                          if (argc === 20) {
                                            if (f.cljs$core$IFn$_invoke$arity$20) {
                                              return f.cljs$core$IFn$_invoke$arity$20(a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568, r4569, s4570, t4571);
                                            } else {
                                              return f.call(null, a4552, b4553, c4554, d4555, e4556, f4557, g4558, h4559, i4560, j4561, k4562, l4563, m4564, n4565, o4566, p4567, q4568, r4569, s4570, t4571);
                                            }
                                          } else {
                                            throw new Error("Only up to 20 arguments supported on functions");
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.apply = function() {
  var apply = null;
  var apply__2 = function(f, args) {
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, args, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, args);
      } else {
        return f.cljs$lang$applyTo(args);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, args));
    }
  };
  var apply__3 = function(f, x, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__4 = function(f, x, y, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__5 = function(f, x, y, z, args) {
    var arglist = cljs.core.list_STAR_.call(null, x, y, z, args);
    var fixed_arity = f.cljs$lang$maxFixedArity;
    if (f.cljs$lang$applyTo) {
      var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
      if (bc <= fixed_arity) {
        return cljs.core.apply_to.call(null, f, bc, arglist);
      } else {
        return f.cljs$lang$applyTo(arglist);
      }
    } else {
      return f.apply(f, cljs.core.to_array.call(null, arglist));
    }
  };
  var apply__6 = function() {
    var G__6584__delegate = function(f, a, b, c, d, args) {
      var arglist = cljs.core.cons.call(null, a, cljs.core.cons.call(null, b, cljs.core.cons.call(null, c, cljs.core.cons.call(null, d, cljs.core.spread.call(null, args)))));
      var fixed_arity = f.cljs$lang$maxFixedArity;
      if (f.cljs$lang$applyTo) {
        var bc = cljs.core.bounded_count.call(null, arglist, fixed_arity + 1);
        if (bc <= fixed_arity) {
          return cljs.core.apply_to.call(null, f, bc, arglist);
        } else {
          return f.cljs$lang$applyTo(arglist);
        }
      } else {
        return f.apply(f, cljs.core.to_array.call(null, arglist));
      }
    };
    var G__6584 = function(f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 5) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 5), 0);
      }
      return G__6584__delegate.call(this, f, a, b, c, d, args);
    };
    G__6584.cljs$lang$maxFixedArity = 5;
    G__6584.cljs$lang$applyTo = function(arglist__6585) {
      var f = cljs.core.first(arglist__6585);
      arglist__6585 = cljs.core.next(arglist__6585);
      var a = cljs.core.first(arglist__6585);
      arglist__6585 = cljs.core.next(arglist__6585);
      var b = cljs.core.first(arglist__6585);
      arglist__6585 = cljs.core.next(arglist__6585);
      var c = cljs.core.first(arglist__6585);
      arglist__6585 = cljs.core.next(arglist__6585);
      var d = cljs.core.first(arglist__6585);
      var args = cljs.core.rest(arglist__6585);
      return G__6584__delegate(f, a, b, c, d, args);
    };
    G__6584.cljs$core$IFn$_invoke$arity$variadic = G__6584__delegate;
    return G__6584;
  }();
  apply = function(f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return apply__2.call(this, f, a);
      case 3:
        return apply__3.call(this, f, a, b);
      case 4:
        return apply__4.call(this, f, a, b, c);
      case 5:
        return apply__5.call(this, f, a, b, c, d);
      default:
        return apply__6.cljs$core$IFn$_invoke$arity$variadic(f, a, b, c, d, cljs.core.array_seq(arguments, 5));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  apply.cljs$lang$maxFixedArity = 5;
  apply.cljs$lang$applyTo = apply__6.cljs$lang$applyTo;
  apply.cljs$core$IFn$_invoke$arity$2 = apply__2;
  apply.cljs$core$IFn$_invoke$arity$3 = apply__3;
  apply.cljs$core$IFn$_invoke$arity$4 = apply__4;
  apply.cljs$core$IFn$_invoke$arity$5 = apply__5;
  apply.cljs$core$IFn$_invoke$arity$variadic = apply__6.cljs$core$IFn$_invoke$arity$variadic;
  return apply;
}();
cljs.core.vary_meta = function() {
  var vary_meta = null;
  var vary_meta__2 = function(obj, f) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj)));
  };
  var vary_meta__3 = function(obj, f, a) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a));
  };
  var vary_meta__4 = function(obj, f, a, b) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b));
  };
  var vary_meta__5 = function(obj, f, a, b, c) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c));
  };
  var vary_meta__6 = function(obj, f, a, b, c, d) {
    return cljs.core.with_meta.call(null, obj, f.call(null, cljs.core.meta.call(null, obj), a, b, c, d));
  };
  var vary_meta__7 = function() {
    var G__6586__delegate = function(obj, f, a, b, c, d, args) {
      return cljs.core.with_meta.call(null, obj, cljs.core.apply.call(null, f, cljs.core.meta.call(null, obj), a, b, c, d, args));
    };
    var G__6586 = function(obj, f, a, b, c, d, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__6586__delegate.call(this, obj, f, a, b, c, d, args);
    };
    G__6586.cljs$lang$maxFixedArity = 6;
    G__6586.cljs$lang$applyTo = function(arglist__6587) {
      var obj = cljs.core.first(arglist__6587);
      arglist__6587 = cljs.core.next(arglist__6587);
      var f = cljs.core.first(arglist__6587);
      arglist__6587 = cljs.core.next(arglist__6587);
      var a = cljs.core.first(arglist__6587);
      arglist__6587 = cljs.core.next(arglist__6587);
      var b = cljs.core.first(arglist__6587);
      arglist__6587 = cljs.core.next(arglist__6587);
      var c = cljs.core.first(arglist__6587);
      arglist__6587 = cljs.core.next(arglist__6587);
      var d = cljs.core.first(arglist__6587);
      var args = cljs.core.rest(arglist__6587);
      return G__6586__delegate(obj, f, a, b, c, d, args);
    };
    G__6586.cljs$core$IFn$_invoke$arity$variadic = G__6586__delegate;
    return G__6586;
  }();
  vary_meta = function(obj, f, a, b, c, d, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 2:
        return vary_meta__2.call(this, obj, f);
      case 3:
        return vary_meta__3.call(this, obj, f, a);
      case 4:
        return vary_meta__4.call(this, obj, f, a, b);
      case 5:
        return vary_meta__5.call(this, obj, f, a, b, c);
      case 6:
        return vary_meta__6.call(this, obj, f, a, b, c, d);
      default:
        return vary_meta__7.cljs$core$IFn$_invoke$arity$variadic(obj, f, a, b, c, d, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  vary_meta.cljs$lang$maxFixedArity = 6;
  vary_meta.cljs$lang$applyTo = vary_meta__7.cljs$lang$applyTo;
  vary_meta.cljs$core$IFn$_invoke$arity$2 = vary_meta__2;
  vary_meta.cljs$core$IFn$_invoke$arity$3 = vary_meta__3;
  vary_meta.cljs$core$IFn$_invoke$arity$4 = vary_meta__4;
  vary_meta.cljs$core$IFn$_invoke$arity$5 = vary_meta__5;
  vary_meta.cljs$core$IFn$_invoke$arity$6 = vary_meta__6;
  vary_meta.cljs$core$IFn$_invoke$arity$variadic = vary_meta__7.cljs$core$IFn$_invoke$arity$variadic;
  return vary_meta;
}();
cljs.core.not_EQ_ = function() {
  var not_EQ_ = null;
  var not_EQ___1 = function(x) {
    return false;
  };
  var not_EQ___2 = function(x, y) {
    return!cljs.core._EQ_.call(null, x, y);
  };
  var not_EQ___3 = function() {
    var G__6588__delegate = function(x, y, more) {
      return cljs.core.not.call(null, cljs.core.apply.call(null, cljs.core._EQ_, x, y, more));
    };
    var G__6588 = function(x, y, var_args) {
      var more = null;
      if (arguments.length > 2) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6588__delegate.call(this, x, y, more);
    };
    G__6588.cljs$lang$maxFixedArity = 2;
    G__6588.cljs$lang$applyTo = function(arglist__6589) {
      var x = cljs.core.first(arglist__6589);
      arglist__6589 = cljs.core.next(arglist__6589);
      var y = cljs.core.first(arglist__6589);
      var more = cljs.core.rest(arglist__6589);
      return G__6588__delegate(x, y, more);
    };
    G__6588.cljs$core$IFn$_invoke$arity$variadic = G__6588__delegate;
    return G__6588;
  }();
  not_EQ_ = function(x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return not_EQ___1.call(this, x);
      case 2:
        return not_EQ___2.call(this, x, y);
      default:
        return not_EQ___3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  not_EQ_.cljs$lang$maxFixedArity = 2;
  not_EQ_.cljs$lang$applyTo = not_EQ___3.cljs$lang$applyTo;
  not_EQ_.cljs$core$IFn$_invoke$arity$1 = not_EQ___1;
  not_EQ_.cljs$core$IFn$_invoke$arity$2 = not_EQ___2;
  not_EQ_.cljs$core$IFn$_invoke$arity$variadic = not_EQ___3.cljs$core$IFn$_invoke$arity$variadic;
  return not_EQ_;
}();
cljs.core.not_empty = function not_empty(coll) {
  if (cljs.core.seq.call(null, coll)) {
    return coll;
  } else {
    return null;
  }
};
cljs.core.nil_iter = function nil_iter() {
  if (typeof cljs.core.t6593 !== "undefined") {
  } else {
    cljs.core.t6593 = function(nil_iter, meta6594) {
      this.nil_iter = nil_iter;
      this.meta6594 = meta6594;
      this.cljs$lang$protocol_mask$partition1$ = 0;
      this.cljs$lang$protocol_mask$partition0$ = 393216;
    };
    cljs.core.t6593.cljs$lang$type = true;
    cljs.core.t6593.cljs$lang$ctorStr = "cljs.core/t6593";
    cljs.core.t6593.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
      return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/t6593");
    };
    cljs.core.t6593.prototype.hasNext = function() {
      var self__ = this;
      var _ = this;
      return false;
    };
    cljs.core.t6593.prototype.next = function() {
      var self__ = this;
      var _ = this;
      return new Error("No such element");
    };
    cljs.core.t6593.prototype.remove = function() {
      var self__ = this;
      var _ = this;
      return new Error("Unsupported operation");
    };
    cljs.core.t6593.prototype.cljs$core$IMeta$_meta$arity$1 = function(_6595) {
      var self__ = this;
      var _6595__$1 = this;
      return self__.meta6594;
    };
    cljs.core.t6593.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_6595, meta6594__$1) {
      var self__ = this;
      var _6595__$1 = this;
      return new cljs.core.t6593(self__.nil_iter, meta6594__$1);
    };
    cljs.core.__GT_t6593 = function __GT_t6593(nil_iter__$1, meta6594) {
      return new cljs.core.t6593(nil_iter__$1, meta6594);
    };
  }
  return new cljs.core.t6593(nil_iter, null);
};
cljs.core.StringIter = function(s, i) {
  this.s = s;
  this.i = i;
};
cljs.core.StringIter.cljs$lang$type = true;
cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";
cljs.core.StringIter.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/StringIter");
};
cljs.core.StringIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.s.length;
};
cljs.core.StringIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.s.charAt(self__.i);
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.StringIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_StringIter = function __GT_StringIter(s, i) {
  return new cljs.core.StringIter(s, i);
};
cljs.core.string_iter = function string_iter(x) {
  return new cljs.core.StringIter(x, 0);
};
cljs.core.ArrayIter = function(arr, i) {
  this.arr = arr;
  this.i = i;
};
cljs.core.ArrayIter.cljs$lang$type = true;
cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";
cljs.core.ArrayIter.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ArrayIter");
};
cljs.core.ArrayIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  return self__.i < self__.arr.length;
};
cljs.core.ArrayIter.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var ret = self__.arr[self__.i];
  self__.i = self__.i + 1;
  return ret;
};
cljs.core.ArrayIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_ArrayIter = function __GT_ArrayIter(arr, i) {
  return new cljs.core.ArrayIter(arr, i);
};
cljs.core.array_iter = function array_iter(x) {
  return new cljs.core.ArrayIter(x, 0);
};
cljs.core.INIT = {};
cljs.core.START = {};
cljs.core.SeqIter = function(_seq, _next) {
  this._seq = _seq;
  this._next = _next;
};
cljs.core.SeqIter.cljs$lang$type = true;
cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";
cljs.core.SeqIter.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/SeqIter");
};
cljs.core.SeqIter.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  if (self__._seq === cljs.core.INIT) {
    self__._seq = cljs.core.START;
    self__._next = cljs.core.seq.call(null, self__._next);
  } else {
    if (self__._seq === self__._next) {
      self__._next = cljs.core.next.call(null, self__._seq);
    } else {
    }
  }
  return!(self__._next == null);
};
cljs.core.SeqIter.prototype.next = function() {
  var self__ = this;
  var this$ = this;
  if (cljs.core.not.call(null, this$.hasNext())) {
    throw new Error("No such element");
  } else {
    self__._seq = self__._next;
    return cljs.core.first.call(null, self__._next);
  }
};
cljs.core.SeqIter.prototype.remove = function() {
  var self__ = this;
  var _ = this;
  return new Error("Unsupported operation");
};
cljs.core.__GT_SeqIter = function __GT_SeqIter(_seq, _next) {
  return new cljs.core.SeqIter(_seq, _next);
};
cljs.core.seq_iter = function seq_iter(coll) {
  return new cljs.core.SeqIter(cljs.core.INIT, coll);
};
cljs.core.iter = function iter(coll) {
  if (coll == null) {
    return cljs.core.nil_iter.call(null);
  } else {
    if (typeof coll === "string") {
      return cljs.core.string_iter.call(null, coll);
    } else {
      if (coll instanceof Array) {
        return cljs.core.array_iter.call(null, coll);
      } else {
        if (cljs.core.iterable_QMARK_.call(null, coll)) {
          return cljs.core._iterator.call(null, coll);
        } else {
          if (cljs.core.seqable_QMARK_.call(null, coll)) {
            return cljs.core.seq_iter.call(null, coll);
          } else {
            throw new Error("Cannot create iterator from " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll));
          }
        }
      }
    }
  }
};
cljs.core.lazy_transformer = function lazy_transformer(stepper) {
  return new cljs.core.LazyTransformer(stepper, null, null, null);
};
cljs.core.Stepper = function(xform, iter) {
  this.xform = xform;
  this.iter = iter;
};
cljs.core.Stepper.cljs$lang$type = true;
cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";
cljs.core.Stepper.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Stepper");
};
cljs.core.Stepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3627__auto__ = !(lt.stepper == null);
      if (and__3627__auto__) {
        return self__.iter.hasNext();
      } else {
        return and__3627__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, self__.xform.call(null, lt, self__.iter.next()))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_Stepper = function __GT_Stepper(xform, iter) {
  return new cljs.core.Stepper(xform, iter);
};
cljs.core.stepper = function stepper(xform, iter) {
  var stepfn = function() {
    var stepfn = null;
    var stepfn__1 = function(result) {
      var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
      lt.stepper = null;
      return result;
    };
    var stepfn__2 = function(result, input) {
      var lt = result;
      lt.first = input;
      lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
      lt.stepper = null;
      return lt.rest;
    };
    stepfn = function(result, input) {
      switch(arguments.length) {
        case 1:
          return stepfn__1.call(this, result);
        case 2:
          return stepfn__2.call(this, result, input);
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
    stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
    return stepfn;
  }();
  return new cljs.core.Stepper(xform.call(null, stepfn), iter);
};
cljs.core.MultiStepper = function(xform, iters, nexts) {
  this.xform = xform;
  this.iters = iters;
  this.nexts = nexts;
};
cljs.core.MultiStepper.cljs$lang$type = true;
cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";
cljs.core.MultiStepper.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/MultiStepper");
};
cljs.core.MultiStepper.prototype.hasNext = function() {
  var self__ = this;
  var _ = this;
  var iters__$1 = cljs.core.seq.call(null, self__.iters);
  while (true) {
    if (!(iters__$1 == null)) {
      var iter = cljs.core.first.call(null, iters__$1);
      if (cljs.core.not.call(null, iter.hasNext())) {
        return false;
      } else {
        var G__6596 = cljs.core.next.call(null, iters__$1);
        iters__$1 = G__6596;
        continue;
      }
    } else {
      return true;
    }
    break;
  }
};
cljs.core.MultiStepper.prototype.next = function() {
  var self__ = this;
  var _ = this;
  var n__4508__auto___6597 = self__.iters.length;
  var i_6598 = 0;
  while (true) {
    if (i_6598 < n__4508__auto___6597) {
      self__.nexts[i_6598] = self__.iters[i_6598].next();
      var G__6599 = i_6598 + 1;
      i_6598 = G__6599;
      continue;
    } else {
    }
    break;
  }
  return cljs.core.prim_seq.call(null, self__.nexts, 0);
};
cljs.core.MultiStepper.prototype.step = function(lt) {
  var self__ = this;
  var this$ = this;
  while (true) {
    if (cljs.core.truth_(function() {
      var and__3627__auto__ = !(lt.stepper == null);
      if (and__3627__auto__) {
        return this$.hasNext();
      } else {
        return and__3627__auto__;
      }
    }())) {
      if (cljs.core.reduced_QMARK_.call(null, cljs.core.apply.call(null, self__.xform, cljs.core.cons.call(null, lt, this$.next())))) {
        if (lt.rest == null) {
        } else {
          lt.rest.stepper = null;
        }
      } else {
        continue;
      }
    } else {
    }
    break;
  }
  if (lt.stepper == null) {
    return null;
  } else {
    return self__.xform.call(null, lt);
  }
};
cljs.core.__GT_MultiStepper = function __GT_MultiStepper(xform, iters, nexts) {
  return new cljs.core.MultiStepper(xform, iters, nexts);
};
cljs.core.multi_stepper = function() {
  var multi_stepper = null;
  var multi_stepper__2 = function(xform, iters) {
    return multi_stepper.call(null, xform, iters, new Array(iters.length));
  };
  var multi_stepper__3 = function(xform, iters, nexts) {
    var stepfn = function() {
      var stepfn = null;
      var stepfn__1 = function(result) {
        var lt = cljs.core.reduced_QMARK_.call(null, result) ? cljs.core.deref.call(null, result) : result;
        lt.stepper = null;
        return lt;
      };
      var stepfn__2 = function(result, input) {
        var lt = result;
        lt.first = input;
        lt.rest = cljs.core.lazy_transformer.call(null, lt.stepper);
        lt.stepper = null;
        return lt.rest;
      };
      stepfn = function(result, input) {
        switch(arguments.length) {
          case 1:
            return stepfn__1.call(this, result);
          case 2:
            return stepfn__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      stepfn.cljs$core$IFn$_invoke$arity$1 = stepfn__1;
      stepfn.cljs$core$IFn$_invoke$arity$2 = stepfn__2;
      return stepfn;
    }();
    return new cljs.core.MultiStepper(xform.call(null, stepfn), iters, nexts);
  };
  multi_stepper = function(xform, iters, nexts) {
    switch(arguments.length) {
      case 2:
        return multi_stepper__2.call(this, xform, iters);
      case 3:
        return multi_stepper__3.call(this, xform, iters, nexts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  multi_stepper.cljs$core$IFn$_invoke$arity$2 = multi_stepper__2;
  multi_stepper.cljs$core$IFn$_invoke$arity$3 = multi_stepper__3;
  return multi_stepper;
}();
cljs.core.LazyTransformer = function(stepper, first, rest, meta) {
  this.stepper = stepper;
  this.first = first;
  this.rest = rest;
  this.meta = meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31719628;
};
cljs.core.LazyTransformer.cljs$lang$type = true;
cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";
cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/LazyTransformer");
};
cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return cljs.core._seq.call(null, self__.rest);
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return self__.first;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    cljs.core._seq.call(null, this$__$1);
  }
  if (self__.rest == null) {
    return cljs.core.List.EMPTY;
  } else {
    return self__.rest;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  if (self__.stepper == null) {
  } else {
    self__.stepper.step(this$__$1);
  }
  if (self__.rest == null) {
    return null;
  } else {
    return this$__$1;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, this$__$1);
};
cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var self__ = this;
  var this$__$1 = this;
  var s = cljs.core._seq.call(null, this$__$1);
  if (!(s == null)) {
    return cljs.core.equiv_sequential.call(null, this$__$1, other);
  } else {
    return cljs.core.sequential_QMARK_.call(null, other) && cljs.core.seq.call(null, other) == null;
  }
};
cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.List.EMPTY;
};
cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = function(this$, o) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.cons.call(null, o, cljs.core._seq.call(null, this$__$1));
};
cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(this$, new_meta) {
  var self__ = this;
  var this$__$1 = this;
  return new cljs.core.LazyTransformer(self__.stepper, self__.first, self__.rest, new_meta);
};
cljs.core.__GT_LazyTransformer = function __GT_LazyTransformer(stepper, first, rest, meta) {
  return new cljs.core.LazyTransformer(stepper, first, rest, meta);
};
cljs.core.LazyTransformer.create = function(xform, coll) {
  return new cljs.core.LazyTransformer(cljs.core.stepper.call(null, xform, cljs.core.iter.call(null, coll)), null, null, null);
};
cljs.core.LazyTransformer.createMulti = function(xform, colls) {
  var iters = [];
  var seq__6600_6604 = cljs.core.seq.call(null, colls);
  var chunk__6601_6605 = null;
  var count__6602_6606 = 0;
  var i__6603_6607 = 0;
  while (true) {
    if (i__6603_6607 < count__6602_6606) {
      var coll_6608 = cljs.core._nth.call(null, chunk__6601_6605, i__6603_6607);
      iters.push(cljs.core.iter.call(null, coll_6608));
      var G__6609 = seq__6600_6604;
      var G__6610 = chunk__6601_6605;
      var G__6611 = count__6602_6606;
      var G__6612 = i__6603_6607 + 1;
      seq__6600_6604 = G__6609;
      chunk__6601_6605 = G__6610;
      count__6602_6606 = G__6611;
      i__6603_6607 = G__6612;
      continue;
    } else {
      var temp__4126__auto___6613 = cljs.core.seq.call(null, seq__6600_6604);
      if (temp__4126__auto___6613) {
        var seq__6600_6614__$1 = temp__4126__auto___6613;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6600_6614__$1)) {
          var c__4408__auto___6615 = cljs.core.chunk_first.call(null, seq__6600_6614__$1);
          var G__6616 = cljs.core.chunk_rest.call(null, seq__6600_6614__$1);
          var G__6617 = c__4408__auto___6615;
          var G__6618 = cljs.core.count.call(null, c__4408__auto___6615);
          var G__6619 = 0;
          seq__6600_6604 = G__6616;
          chunk__6601_6605 = G__6617;
          count__6602_6606 = G__6618;
          i__6603_6607 = G__6619;
          continue;
        } else {
          var coll_6620 = cljs.core.first.call(null, seq__6600_6614__$1);
          iters.push(cljs.core.iter.call(null, coll_6620));
          var G__6621 = cljs.core.next.call(null, seq__6600_6614__$1);
          var G__6622 = null;
          var G__6623 = 0;
          var G__6624 = 0;
          seq__6600_6604 = G__6621;
          chunk__6601_6605 = G__6622;
          count__6602_6606 = G__6623;
          i__6603_6607 = G__6624;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return new cljs.core.LazyTransformer(cljs.core.multi_stepper.call(null, xform, iters, new Array(iters.length)), null, null, null);
};
cljs.core.sequence = function() {
  var sequence = null;
  var sequence__1 = function(coll) {
    if (cljs.core.seq_QMARK_.call(null, coll)) {
      return coll;
    } else {
      var or__3639__auto__ = cljs.core.seq.call(null, coll);
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        return cljs.core.List.EMPTY;
      }
    }
  };
  var sequence__2 = function(xform, coll) {
    return cljs.core.LazyTransformer.create(xform, coll);
  };
  var sequence__3 = function() {
    var G__6625__delegate = function(xform, coll, colls) {
      return cljs.core.LazyTransformer.createMulti(xform, cljs.core.to_array.call(null, cljs.core.cons.call(null, coll, colls)));
    };
    var G__6625 = function(xform, coll, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6625__delegate.call(this, xform, coll, colls);
    };
    G__6625.cljs$lang$maxFixedArity = 2;
    G__6625.cljs$lang$applyTo = function(arglist__6626) {
      var xform = cljs.core.first(arglist__6626);
      arglist__6626 = cljs.core.next(arglist__6626);
      var coll = cljs.core.first(arglist__6626);
      var colls = cljs.core.rest(arglist__6626);
      return G__6625__delegate(xform, coll, colls);
    };
    G__6625.cljs$core$IFn$_invoke$arity$variadic = G__6625__delegate;
    return G__6625;
  }();
  sequence = function(xform, coll, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return sequence__1.call(this, xform);
      case 2:
        return sequence__2.call(this, xform, coll);
      default:
        return sequence__3.cljs$core$IFn$_invoke$arity$variadic(xform, coll, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  sequence.cljs$lang$maxFixedArity = 2;
  sequence.cljs$lang$applyTo = sequence__3.cljs$lang$applyTo;
  sequence.cljs$core$IFn$_invoke$arity$1 = sequence__1;
  sequence.cljs$core$IFn$_invoke$arity$2 = sequence__2;
  sequence.cljs$core$IFn$_invoke$arity$variadic = sequence__3.cljs$core$IFn$_invoke$arity$variadic;
  return sequence;
}();
cljs.core.every_QMARK_ = function every_QMARK_(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll) == null) {
      return true;
    } else {
      if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, coll)))) {
        var G__6627 = pred;
        var G__6628 = cljs.core.next.call(null, coll);
        pred = G__6627;
        coll = G__6628;
        continue;
      } else {
        return false;
      }
    }
    break;
  }
};
cljs.core.not_every_QMARK_ = function not_every_QMARK_(pred, coll) {
  return!cljs.core.every_QMARK_.call(null, pred, coll);
};
cljs.core.some = function some(pred, coll) {
  while (true) {
    if (cljs.core.seq.call(null, coll)) {
      var or__3639__auto__ = pred.call(null, cljs.core.first.call(null, coll));
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        var G__6629 = pred;
        var G__6630 = cljs.core.next.call(null, coll);
        pred = G__6629;
        coll = G__6630;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.not_any_QMARK_ = function not_any_QMARK_(pred, coll) {
  return cljs.core.not.call(null, cljs.core.some.call(null, pred, coll));
};
cljs.core.even_QMARK_ = function even_QMARK_(n) {
  if (cljs.core.integer_QMARK_.call(null, n)) {
    return(n & 1) === 0;
  } else {
    throw new Error("Argument must be an integer: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n));
  }
};
cljs.core.odd_QMARK_ = function odd_QMARK_(n) {
  return!cljs.core.even_QMARK_.call(null, n);
};
cljs.core.complement = function complement(f) {
  return function() {
    var G__6631 = null;
    var G__6631__0 = function() {
      return cljs.core.not.call(null, f.call(null));
    };
    var G__6631__1 = function(x) {
      return cljs.core.not.call(null, f.call(null, x));
    };
    var G__6631__2 = function(x, y) {
      return cljs.core.not.call(null, f.call(null, x, y));
    };
    var G__6631__3 = function() {
      var G__6632__delegate = function(x, y, zs) {
        return cljs.core.not.call(null, cljs.core.apply.call(null, f, x, y, zs));
      };
      var G__6632 = function(x, y, var_args) {
        var zs = null;
        if (arguments.length > 2) {
          zs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
        }
        return G__6632__delegate.call(this, x, y, zs);
      };
      G__6632.cljs$lang$maxFixedArity = 2;
      G__6632.cljs$lang$applyTo = function(arglist__6633) {
        var x = cljs.core.first(arglist__6633);
        arglist__6633 = cljs.core.next(arglist__6633);
        var y = cljs.core.first(arglist__6633);
        var zs = cljs.core.rest(arglist__6633);
        return G__6632__delegate(x, y, zs);
      };
      G__6632.cljs$core$IFn$_invoke$arity$variadic = G__6632__delegate;
      return G__6632;
    }();
    G__6631 = function(x, y, var_args) {
      var zs = var_args;
      switch(arguments.length) {
        case 0:
          return G__6631__0.call(this);
        case 1:
          return G__6631__1.call(this, x);
        case 2:
          return G__6631__2.call(this, x, y);
        default:
          return G__6631__3.cljs$core$IFn$_invoke$arity$variadic(x, y, cljs.core.array_seq(arguments, 2));
      }
      throw new Error("Invalid arity: " + arguments.length);
    };
    G__6631.cljs$lang$maxFixedArity = 2;
    G__6631.cljs$lang$applyTo = G__6631__3.cljs$lang$applyTo;
    G__6631.cljs$core$IFn$_invoke$arity$0 = G__6631__0;
    G__6631.cljs$core$IFn$_invoke$arity$1 = G__6631__1;
    G__6631.cljs$core$IFn$_invoke$arity$2 = G__6631__2;
    G__6631.cljs$core$IFn$_invoke$arity$variadic = G__6631__3.cljs$core$IFn$_invoke$arity$variadic;
    return G__6631;
  }();
};
cljs.core.constantly = function constantly(x) {
  return function() {
    var G__6634__delegate = function(args) {
      return x;
    };
    var G__6634 = function(var_args) {
      var args = null;
      if (arguments.length > 0) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__6634__delegate.call(this, args);
    };
    G__6634.cljs$lang$maxFixedArity = 0;
    G__6634.cljs$lang$applyTo = function(arglist__6635) {
      var args = cljs.core.seq(arglist__6635);
      return G__6634__delegate(args);
    };
    G__6634.cljs$core$IFn$_invoke$arity$variadic = G__6634__delegate;
    return G__6634;
  }();
};
cljs.core.comp = function() {
  var comp = null;
  var comp__0 = function() {
    return cljs.core.identity;
  };
  var comp__1 = function(f) {
    return f;
  };
  var comp__2 = function(f, g) {
    return function() {
      var G__6636 = null;
      var G__6636__0 = function() {
        return f.call(null, g.call(null));
      };
      var G__6636__1 = function(x) {
        return f.call(null, g.call(null, x));
      };
      var G__6636__2 = function(x, y) {
        return f.call(null, g.call(null, x, y));
      };
      var G__6636__3 = function(x, y, z) {
        return f.call(null, g.call(null, x, y, z));
      };
      var G__6636__4 = function() {
        var G__6637__delegate = function(x, y, z, args) {
          return f.call(null, cljs.core.apply.call(null, g, x, y, z, args));
        };
        var G__6637 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6637__delegate.call(this, x, y, z, args);
        };
        G__6637.cljs$lang$maxFixedArity = 3;
        G__6637.cljs$lang$applyTo = function(arglist__6638) {
          var x = cljs.core.first(arglist__6638);
          arglist__6638 = cljs.core.next(arglist__6638);
          var y = cljs.core.first(arglist__6638);
          arglist__6638 = cljs.core.next(arglist__6638);
          var z = cljs.core.first(arglist__6638);
          var args = cljs.core.rest(arglist__6638);
          return G__6637__delegate(x, y, z, args);
        };
        G__6637.cljs$core$IFn$_invoke$arity$variadic = G__6637__delegate;
        return G__6637;
      }();
      G__6636 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6636__0.call(this);
          case 1:
            return G__6636__1.call(this, x);
          case 2:
            return G__6636__2.call(this, x, y);
          case 3:
            return G__6636__3.call(this, x, y, z);
          default:
            return G__6636__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6636.cljs$lang$maxFixedArity = 3;
      G__6636.cljs$lang$applyTo = G__6636__4.cljs$lang$applyTo;
      G__6636.cljs$core$IFn$_invoke$arity$0 = G__6636__0;
      G__6636.cljs$core$IFn$_invoke$arity$1 = G__6636__1;
      G__6636.cljs$core$IFn$_invoke$arity$2 = G__6636__2;
      G__6636.cljs$core$IFn$_invoke$arity$3 = G__6636__3;
      G__6636.cljs$core$IFn$_invoke$arity$variadic = G__6636__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6636;
    }();
  };
  var comp__3 = function(f, g, h) {
    return function() {
      var G__6639 = null;
      var G__6639__0 = function() {
        return f.call(null, g.call(null, h.call(null)));
      };
      var G__6639__1 = function(x) {
        return f.call(null, g.call(null, h.call(null, x)));
      };
      var G__6639__2 = function(x, y) {
        return f.call(null, g.call(null, h.call(null, x, y)));
      };
      var G__6639__3 = function(x, y, z) {
        return f.call(null, g.call(null, h.call(null, x, y, z)));
      };
      var G__6639__4 = function() {
        var G__6640__delegate = function(x, y, z, args) {
          return f.call(null, g.call(null, cljs.core.apply.call(null, h, x, y, z, args)));
        };
        var G__6640 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6640__delegate.call(this, x, y, z, args);
        };
        G__6640.cljs$lang$maxFixedArity = 3;
        G__6640.cljs$lang$applyTo = function(arglist__6641) {
          var x = cljs.core.first(arglist__6641);
          arglist__6641 = cljs.core.next(arglist__6641);
          var y = cljs.core.first(arglist__6641);
          arglist__6641 = cljs.core.next(arglist__6641);
          var z = cljs.core.first(arglist__6641);
          var args = cljs.core.rest(arglist__6641);
          return G__6640__delegate(x, y, z, args);
        };
        G__6640.cljs$core$IFn$_invoke$arity$variadic = G__6640__delegate;
        return G__6640;
      }();
      G__6639 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__6639__0.call(this);
          case 1:
            return G__6639__1.call(this, x);
          case 2:
            return G__6639__2.call(this, x, y);
          case 3:
            return G__6639__3.call(this, x, y, z);
          default:
            return G__6639__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6639.cljs$lang$maxFixedArity = 3;
      G__6639.cljs$lang$applyTo = G__6639__4.cljs$lang$applyTo;
      G__6639.cljs$core$IFn$_invoke$arity$0 = G__6639__0;
      G__6639.cljs$core$IFn$_invoke$arity$1 = G__6639__1;
      G__6639.cljs$core$IFn$_invoke$arity$2 = G__6639__2;
      G__6639.cljs$core$IFn$_invoke$arity$3 = G__6639__3;
      G__6639.cljs$core$IFn$_invoke$arity$variadic = G__6639__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6639;
    }();
  };
  var comp__4 = function() {
    var G__6642__delegate = function(f1, f2, f3, fs) {
      var fs__$1 = cljs.core.reverse.call(null, cljs.core.list_STAR_.call(null, f1, f2, f3, fs));
      return function(fs__$1) {
        return function() {
          var G__6643__delegate = function(args) {
            var ret = cljs.core.apply.call(null, cljs.core.first.call(null, fs__$1), args);
            var fs__$2 = cljs.core.next.call(null, fs__$1);
            while (true) {
              if (fs__$2) {
                var G__6644 = cljs.core.first.call(null, fs__$2).call(null, ret);
                var G__6645 = cljs.core.next.call(null, fs__$2);
                ret = G__6644;
                fs__$2 = G__6645;
                continue;
              } else {
                return ret;
              }
              break;
            }
          };
          var G__6643 = function(var_args) {
            var args = null;
            if (arguments.length > 0) {
              args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
            }
            return G__6643__delegate.call(this, args);
          };
          G__6643.cljs$lang$maxFixedArity = 0;
          G__6643.cljs$lang$applyTo = function(arglist__6646) {
            var args = cljs.core.seq(arglist__6646);
            return G__6643__delegate(args);
          };
          G__6643.cljs$core$IFn$_invoke$arity$variadic = G__6643__delegate;
          return G__6643;
        }();
      }(fs__$1);
    };
    var G__6642 = function(f1, f2, f3, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6642__delegate.call(this, f1, f2, f3, fs);
    };
    G__6642.cljs$lang$maxFixedArity = 3;
    G__6642.cljs$lang$applyTo = function(arglist__6647) {
      var f1 = cljs.core.first(arglist__6647);
      arglist__6647 = cljs.core.next(arglist__6647);
      var f2 = cljs.core.first(arglist__6647);
      arglist__6647 = cljs.core.next(arglist__6647);
      var f3 = cljs.core.first(arglist__6647);
      var fs = cljs.core.rest(arglist__6647);
      return G__6642__delegate(f1, f2, f3, fs);
    };
    G__6642.cljs$core$IFn$_invoke$arity$variadic = G__6642__delegate;
    return G__6642;
  }();
  comp = function(f1, f2, f3, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 0:
        return comp__0.call(this);
      case 1:
        return comp__1.call(this, f1);
      case 2:
        return comp__2.call(this, f1, f2);
      case 3:
        return comp__3.call(this, f1, f2, f3);
      default:
        return comp__4.cljs$core$IFn$_invoke$arity$variadic(f1, f2, f3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  comp.cljs$lang$maxFixedArity = 3;
  comp.cljs$lang$applyTo = comp__4.cljs$lang$applyTo;
  comp.cljs$core$IFn$_invoke$arity$0 = comp__0;
  comp.cljs$core$IFn$_invoke$arity$1 = comp__1;
  comp.cljs$core$IFn$_invoke$arity$2 = comp__2;
  comp.cljs$core$IFn$_invoke$arity$3 = comp__3;
  comp.cljs$core$IFn$_invoke$arity$variadic = comp__4.cljs$core$IFn$_invoke$arity$variadic;
  return comp;
}();
cljs.core.partial = function() {
  var partial = null;
  var partial__1 = function(f) {
    return f;
  };
  var partial__2 = function(f, arg1) {
    return function() {
      var G__6648__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, args);
      };
      var G__6648 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__6648__delegate.call(this, args);
      };
      G__6648.cljs$lang$maxFixedArity = 0;
      G__6648.cljs$lang$applyTo = function(arglist__6649) {
        var args = cljs.core.seq(arglist__6649);
        return G__6648__delegate(args);
      };
      G__6648.cljs$core$IFn$_invoke$arity$variadic = G__6648__delegate;
      return G__6648;
    }();
  };
  var partial__3 = function(f, arg1, arg2) {
    return function() {
      var G__6650__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, args);
      };
      var G__6650 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__6650__delegate.call(this, args);
      };
      G__6650.cljs$lang$maxFixedArity = 0;
      G__6650.cljs$lang$applyTo = function(arglist__6651) {
        var args = cljs.core.seq(arglist__6651);
        return G__6650__delegate(args);
      };
      G__6650.cljs$core$IFn$_invoke$arity$variadic = G__6650__delegate;
      return G__6650;
    }();
  };
  var partial__4 = function(f, arg1, arg2, arg3) {
    return function() {
      var G__6652__delegate = function(args) {
        return cljs.core.apply.call(null, f, arg1, arg2, arg3, args);
      };
      var G__6652 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__6652__delegate.call(this, args);
      };
      G__6652.cljs$lang$maxFixedArity = 0;
      G__6652.cljs$lang$applyTo = function(arglist__6653) {
        var args = cljs.core.seq(arglist__6653);
        return G__6652__delegate(args);
      };
      G__6652.cljs$core$IFn$_invoke$arity$variadic = G__6652__delegate;
      return G__6652;
    }();
  };
  var partial__5 = function() {
    var G__6654__delegate = function(f, arg1, arg2, arg3, more) {
      return function() {
        var G__6655__delegate = function(args) {
          return cljs.core.apply.call(null, f, arg1, arg2, arg3, cljs.core.concat.call(null, more, args));
        };
        var G__6655 = function(var_args) {
          var args = null;
          if (arguments.length > 0) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
          }
          return G__6655__delegate.call(this, args);
        };
        G__6655.cljs$lang$maxFixedArity = 0;
        G__6655.cljs$lang$applyTo = function(arglist__6656) {
          var args = cljs.core.seq(arglist__6656);
          return G__6655__delegate(args);
        };
        G__6655.cljs$core$IFn$_invoke$arity$variadic = G__6655__delegate;
        return G__6655;
      }();
    };
    var G__6654 = function(f, arg1, arg2, arg3, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6654__delegate.call(this, f, arg1, arg2, arg3, more);
    };
    G__6654.cljs$lang$maxFixedArity = 4;
    G__6654.cljs$lang$applyTo = function(arglist__6657) {
      var f = cljs.core.first(arglist__6657);
      arglist__6657 = cljs.core.next(arglist__6657);
      var arg1 = cljs.core.first(arglist__6657);
      arglist__6657 = cljs.core.next(arglist__6657);
      var arg2 = cljs.core.first(arglist__6657);
      arglist__6657 = cljs.core.next(arglist__6657);
      var arg3 = cljs.core.first(arglist__6657);
      var more = cljs.core.rest(arglist__6657);
      return G__6654__delegate(f, arg1, arg2, arg3, more);
    };
    G__6654.cljs$core$IFn$_invoke$arity$variadic = G__6654__delegate;
    return G__6654;
  }();
  partial = function(f, arg1, arg2, arg3, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 1:
        return partial__1.call(this, f);
      case 2:
        return partial__2.call(this, f, arg1);
      case 3:
        return partial__3.call(this, f, arg1, arg2);
      case 4:
        return partial__4.call(this, f, arg1, arg2, arg3);
      default:
        return partial__5.cljs$core$IFn$_invoke$arity$variadic(f, arg1, arg2, arg3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partial.cljs$lang$maxFixedArity = 4;
  partial.cljs$lang$applyTo = partial__5.cljs$lang$applyTo;
  partial.cljs$core$IFn$_invoke$arity$1 = partial__1;
  partial.cljs$core$IFn$_invoke$arity$2 = partial__2;
  partial.cljs$core$IFn$_invoke$arity$3 = partial__3;
  partial.cljs$core$IFn$_invoke$arity$4 = partial__4;
  partial.cljs$core$IFn$_invoke$arity$variadic = partial__5.cljs$core$IFn$_invoke$arity$variadic;
  return partial;
}();
cljs.core.fnil = function() {
  var fnil = null;
  var fnil__2 = function(f, x) {
    return function() {
      var G__6658 = null;
      var G__6658__1 = function(a) {
        return f.call(null, a == null ? x : a);
      };
      var G__6658__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b);
      };
      var G__6658__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b, c);
      };
      var G__6658__4 = function() {
        var G__6659__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b, c, ds);
        };
        var G__6659 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6659__delegate.call(this, a, b, c, ds);
        };
        G__6659.cljs$lang$maxFixedArity = 3;
        G__6659.cljs$lang$applyTo = function(arglist__6660) {
          var a = cljs.core.first(arglist__6660);
          arglist__6660 = cljs.core.next(arglist__6660);
          var b = cljs.core.first(arglist__6660);
          arglist__6660 = cljs.core.next(arglist__6660);
          var c = cljs.core.first(arglist__6660);
          var ds = cljs.core.rest(arglist__6660);
          return G__6659__delegate(a, b, c, ds);
        };
        G__6659.cljs$core$IFn$_invoke$arity$variadic = G__6659__delegate;
        return G__6659;
      }();
      G__6658 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 1:
            return G__6658__1.call(this, a);
          case 2:
            return G__6658__2.call(this, a, b);
          case 3:
            return G__6658__3.call(this, a, b, c);
          default:
            return G__6658__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6658.cljs$lang$maxFixedArity = 3;
      G__6658.cljs$lang$applyTo = G__6658__4.cljs$lang$applyTo;
      G__6658.cljs$core$IFn$_invoke$arity$1 = G__6658__1;
      G__6658.cljs$core$IFn$_invoke$arity$2 = G__6658__2;
      G__6658.cljs$core$IFn$_invoke$arity$3 = G__6658__3;
      G__6658.cljs$core$IFn$_invoke$arity$variadic = G__6658__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6658;
    }();
  };
  var fnil__3 = function(f, x, y) {
    return function() {
      var G__6661 = null;
      var G__6661__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__6661__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c);
      };
      var G__6661__4 = function() {
        var G__6662__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c, ds);
        };
        var G__6662 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6662__delegate.call(this, a, b, c, ds);
        };
        G__6662.cljs$lang$maxFixedArity = 3;
        G__6662.cljs$lang$applyTo = function(arglist__6663) {
          var a = cljs.core.first(arglist__6663);
          arglist__6663 = cljs.core.next(arglist__6663);
          var b = cljs.core.first(arglist__6663);
          arglist__6663 = cljs.core.next(arglist__6663);
          var c = cljs.core.first(arglist__6663);
          var ds = cljs.core.rest(arglist__6663);
          return G__6662__delegate(a, b, c, ds);
        };
        G__6662.cljs$core$IFn$_invoke$arity$variadic = G__6662__delegate;
        return G__6662;
      }();
      G__6661 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__6661__2.call(this, a, b);
          case 3:
            return G__6661__3.call(this, a, b, c);
          default:
            return G__6661__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6661.cljs$lang$maxFixedArity = 3;
      G__6661.cljs$lang$applyTo = G__6661__4.cljs$lang$applyTo;
      G__6661.cljs$core$IFn$_invoke$arity$2 = G__6661__2;
      G__6661.cljs$core$IFn$_invoke$arity$3 = G__6661__3;
      G__6661.cljs$core$IFn$_invoke$arity$variadic = G__6661__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6661;
    }();
  };
  var fnil__4 = function(f, x, y, z) {
    return function() {
      var G__6664 = null;
      var G__6664__2 = function(a, b) {
        return f.call(null, a == null ? x : a, b == null ? y : b);
      };
      var G__6664__3 = function(a, b, c) {
        return f.call(null, a == null ? x : a, b == null ? y : b, c == null ? z : c);
      };
      var G__6664__4 = function() {
        var G__6665__delegate = function(a, b, c, ds) {
          return cljs.core.apply.call(null, f, a == null ? x : a, b == null ? y : b, c == null ? z : c, ds);
        };
        var G__6665 = function(a, b, c, var_args) {
          var ds = null;
          if (arguments.length > 3) {
            ds = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6665__delegate.call(this, a, b, c, ds);
        };
        G__6665.cljs$lang$maxFixedArity = 3;
        G__6665.cljs$lang$applyTo = function(arglist__6666) {
          var a = cljs.core.first(arglist__6666);
          arglist__6666 = cljs.core.next(arglist__6666);
          var b = cljs.core.first(arglist__6666);
          arglist__6666 = cljs.core.next(arglist__6666);
          var c = cljs.core.first(arglist__6666);
          var ds = cljs.core.rest(arglist__6666);
          return G__6665__delegate(a, b, c, ds);
        };
        G__6665.cljs$core$IFn$_invoke$arity$variadic = G__6665__delegate;
        return G__6665;
      }();
      G__6664 = function(a, b, c, var_args) {
        var ds = var_args;
        switch(arguments.length) {
          case 2:
            return G__6664__2.call(this, a, b);
          case 3:
            return G__6664__3.call(this, a, b, c);
          default:
            return G__6664__4.cljs$core$IFn$_invoke$arity$variadic(a, b, c, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__6664.cljs$lang$maxFixedArity = 3;
      G__6664.cljs$lang$applyTo = G__6664__4.cljs$lang$applyTo;
      G__6664.cljs$core$IFn$_invoke$arity$2 = G__6664__2;
      G__6664.cljs$core$IFn$_invoke$arity$3 = G__6664__3;
      G__6664.cljs$core$IFn$_invoke$arity$variadic = G__6664__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__6664;
    }();
  };
  fnil = function(f, x, y, z) {
    switch(arguments.length) {
      case 2:
        return fnil__2.call(this, f, x);
      case 3:
        return fnil__3.call(this, f, x, y);
      case 4:
        return fnil__4.call(this, f, x, y, z);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  fnil.cljs$core$IFn$_invoke$arity$2 = fnil__2;
  fnil.cljs$core$IFn$_invoke$arity$3 = fnil__3;
  fnil.cljs$core$IFn$_invoke$arity$4 = fnil__4;
  return fnil;
}();
cljs.core.map_indexed = function map_indexed(f, coll) {
  var mapi = function mapi(idx, coll__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4508__auto___6667 = size;
          var i_6668 = 0;
          while (true) {
            if (i_6668 < n__4508__auto___6667) {
              cljs.core.chunk_append.call(null, b, f.call(null, idx + i_6668, cljs.core._nth.call(null, c, i_6668)));
              var G__6669 = i_6668 + 1;
              i_6668 = G__6669;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), mapi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, idx, cljs.core.first.call(null, s)), mapi.call(null, idx + 1, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  return mapi.call(null, 0, coll);
};
cljs.core.keep = function() {
  var keep = null;
  var keep__1 = function(f) {
    return function(f1) {
      return function() {
        var G__6670 = null;
        var G__6670__0 = function() {
          return f1.call(null);
        };
        var G__6670__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6670__2 = function(result, input) {
          var v = f.call(null, input);
          if (v == null) {
            return result;
          } else {
            return f1.call(null, result, v);
          }
        };
        G__6670 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__6670__0.call(this);
            case 1:
              return G__6670__1.call(this, result);
            case 2:
              return G__6670__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6670.cljs$core$IFn$_invoke$arity$0 = G__6670__0;
        G__6670.cljs$core$IFn$_invoke$arity$1 = G__6670__1;
        G__6670.cljs$core$IFn$_invoke$arity$2 = G__6670__2;
        return G__6670;
      }();
    };
  };
  var keep__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4508__auto___6671 = size;
          var i_6672 = 0;
          while (true) {
            if (i_6672 < n__4508__auto___6671) {
              var x_6673 = f.call(null, cljs.core._nth.call(null, c, i_6672));
              if (x_6673 == null) {
              } else {
                cljs.core.chunk_append.call(null, b, x_6673);
              }
              var G__6674 = i_6672 + 1;
              i_6672 = G__6674;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keep.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          var x = f.call(null, cljs.core.first.call(null, s));
          if (x == null) {
            return keep.call(null, f, cljs.core.rest.call(null, s));
          } else {
            return cljs.core.cons.call(null, x, keep.call(null, f, cljs.core.rest.call(null, s)));
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  keep = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep__1.call(this, f);
      case 2:
        return keep__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep.cljs$core$IFn$_invoke$arity$1 = keep__1;
  keep.cljs$core$IFn$_invoke$arity$2 = keep__2;
  return keep;
}();
cljs.core.Atom = function(state, meta, validator, watches) {
  this.state = state;
  this.meta = meta;
  this.validator = validator;
  this.watches = watches;
  this.cljs$lang$protocol_mask$partition0$ = 6455296;
  this.cljs$lang$protocol_mask$partition1$ = 16386;
};
cljs.core.Atom.cljs$lang$type = true;
cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";
cljs.core.Atom.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Atom");
};
cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = function(this$, oldval, newval) {
  var self__ = this;
  var this$__$1 = this;
  var seq__6675 = cljs.core.seq.call(null, self__.watches);
  var chunk__6676 = null;
  var count__6677 = 0;
  var i__6678 = 0;
  while (true) {
    if (i__6678 < count__6677) {
      var vec__6679 = cljs.core._nth.call(null, chunk__6676, i__6678);
      var key = cljs.core.nth.call(null, vec__6679, 0, null);
      var f = cljs.core.nth.call(null, vec__6679, 1, null);
      f.call(null, key, this$__$1, oldval, newval);
      var G__6681 = seq__6675;
      var G__6682 = chunk__6676;
      var G__6683 = count__6677;
      var G__6684 = i__6678 + 1;
      seq__6675 = G__6681;
      chunk__6676 = G__6682;
      count__6677 = G__6683;
      i__6678 = G__6684;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6675);
      if (temp__4126__auto__) {
        var seq__6675__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6675__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__6675__$1);
          var G__6685 = cljs.core.chunk_rest.call(null, seq__6675__$1);
          var G__6686 = c__4408__auto__;
          var G__6687 = cljs.core.count.call(null, c__4408__auto__);
          var G__6688 = 0;
          seq__6675 = G__6685;
          chunk__6676 = G__6686;
          count__6677 = G__6687;
          i__6678 = G__6688;
          continue;
        } else {
          var vec__6680 = cljs.core.first.call(null, seq__6675__$1);
          var key = cljs.core.nth.call(null, vec__6680, 0, null);
          var f = cljs.core.nth.call(null, vec__6680, 1, null);
          f.call(null, key, this$__$1, oldval, newval);
          var G__6689 = cljs.core.next.call(null, seq__6675__$1);
          var G__6690 = null;
          var G__6691 = 0;
          var G__6692 = 0;
          seq__6675 = G__6689;
          chunk__6676 = G__6690;
          count__6677 = G__6691;
          i__6678 = G__6692;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = function(this$, key, f) {
  var self__ = this;
  var this$__$1 = this;
  this$__$1.watches = cljs.core.assoc.call(null, self__.watches, key, f);
  return this$__$1;
};
cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = function(this$, key) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1.watches = cljs.core.dissoc.call(null, self__.watches, key);
};
cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.meta;
};
cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return self__.state;
};
cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return o__$1 === other;
};
cljs.core.Atom.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_Atom = function __GT_Atom(state, meta, validator, watches) {
  return new cljs.core.Atom(state, meta, validator, watches);
};
cljs.core.atom = function() {
  var atom = null;
  var atom__1 = function(x) {
    return new cljs.core.Atom(x, null, null, null);
  };
  var atom__2 = function() {
    var G__6696__delegate = function(x, p__6693) {
      var map__6695 = p__6693;
      var map__6695__$1 = cljs.core.seq_QMARK_.call(null, map__6695) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6695) : map__6695;
      var validator = cljs.core.get.call(null, map__6695__$1, new cljs.core.Keyword(null, "validator", "validator", -1966190681));
      var meta = cljs.core.get.call(null, map__6695__$1, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
      return new cljs.core.Atom(x, meta, validator, null);
    };
    var G__6696 = function(x, var_args) {
      var p__6693 = null;
      if (arguments.length > 1) {
        p__6693 = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6696__delegate.call(this, x, p__6693);
    };
    G__6696.cljs$lang$maxFixedArity = 1;
    G__6696.cljs$lang$applyTo = function(arglist__6697) {
      var x = cljs.core.first(arglist__6697);
      var p__6693 = cljs.core.rest(arglist__6697);
      return G__6696__delegate(x, p__6693);
    };
    G__6696.cljs$core$IFn$_invoke$arity$variadic = G__6696__delegate;
    return G__6696;
  }();
  atom = function(x, var_args) {
    var p__6693 = var_args;
    switch(arguments.length) {
      case 1:
        return atom__1.call(this, x);
      default:
        return atom__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  atom.cljs$lang$maxFixedArity = 1;
  atom.cljs$lang$applyTo = atom__2.cljs$lang$applyTo;
  atom.cljs$core$IFn$_invoke$arity$1 = atom__1;
  atom.cljs$core$IFn$_invoke$arity$variadic = atom__2.cljs$core$IFn$_invoke$arity$variadic;
  return atom;
}();
cljs.core.reset_BANG_ = function reset_BANG_(a, new_value) {
  if (a instanceof cljs.core.Atom) {
    var validate = a.validator;
    if (validate == null) {
    } else {
      if (cljs.core.truth_(validate.call(null, new_value))) {
      } else {
        throw new Error("Assert failed: Validator rejected reference state\n" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "validate", "validate", 1439230700, null), new cljs.core.Symbol(null, "new-value", "new-value", -1567397401, null)))));
      }
    }
    var old_value = a.state;
    a.state = new_value;
    if (a.watches == null) {
    } else {
      cljs.core._notify_watches.call(null, a, old_value, new_value);
    }
    return new_value;
  } else {
    return cljs.core._reset_BANG_.call(null, a, new_value);
  }
};
cljs.core.swap_BANG_ = function() {
  var swap_BANG_ = null;
  var swap_BANG___2 = function(a, f) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f);
    }
  };
  var swap_BANG___3 = function(a, f, x) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x);
    }
  };
  var swap_BANG___4 = function(a, f, x, y) {
    if (a instanceof cljs.core.Atom) {
      return cljs.core.reset_BANG_.call(null, a, f.call(null, a.state, x, y));
    } else {
      return cljs.core._swap_BANG_.call(null, a, f, x, y);
    }
  };
  var swap_BANG___5 = function() {
    var G__6698__delegate = function(a, f, x, y, more) {
      if (a instanceof cljs.core.Atom) {
        return cljs.core.reset_BANG_.call(null, a, cljs.core.apply.call(null, f, a.state, x, y, more));
      } else {
        return cljs.core._swap_BANG_.call(null, a, f, x, y, more);
      }
    };
    var G__6698 = function(a, f, x, y, var_args) {
      var more = null;
      if (arguments.length > 4) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6698__delegate.call(this, a, f, x, y, more);
    };
    G__6698.cljs$lang$maxFixedArity = 4;
    G__6698.cljs$lang$applyTo = function(arglist__6699) {
      var a = cljs.core.first(arglist__6699);
      arglist__6699 = cljs.core.next(arglist__6699);
      var f = cljs.core.first(arglist__6699);
      arglist__6699 = cljs.core.next(arglist__6699);
      var x = cljs.core.first(arglist__6699);
      arglist__6699 = cljs.core.next(arglist__6699);
      var y = cljs.core.first(arglist__6699);
      var more = cljs.core.rest(arglist__6699);
      return G__6698__delegate(a, f, x, y, more);
    };
    G__6698.cljs$core$IFn$_invoke$arity$variadic = G__6698__delegate;
    return G__6698;
  }();
  swap_BANG_ = function(a, f, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return swap_BANG___2.call(this, a, f);
      case 3:
        return swap_BANG___3.call(this, a, f, x);
      case 4:
        return swap_BANG___4.call(this, a, f, x, y);
      default:
        return swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic(a, f, x, y, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  swap_BANG_.cljs$lang$maxFixedArity = 4;
  swap_BANG_.cljs$lang$applyTo = swap_BANG___5.cljs$lang$applyTo;
  swap_BANG_.cljs$core$IFn$_invoke$arity$2 = swap_BANG___2;
  swap_BANG_.cljs$core$IFn$_invoke$arity$3 = swap_BANG___3;
  swap_BANG_.cljs$core$IFn$_invoke$arity$4 = swap_BANG___4;
  swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_BANG___5.cljs$core$IFn$_invoke$arity$variadic;
  return swap_BANG_;
}();
cljs.core.compare_and_set_BANG_ = function compare_and_set_BANG_(a, oldval, newval) {
  if (cljs.core._EQ_.call(null, a.state, oldval)) {
    cljs.core.reset_BANG_.call(null, a, newval);
    return true;
  } else {
    return false;
  }
};
cljs.core.set_validator_BANG_ = function set_validator_BANG_(iref, val) {
  return iref.validator = val;
};
cljs.core.get_validator = function get_validator(iref) {
  return iref.validator;
};
cljs.core.keep_indexed = function() {
  var keep_indexed = null;
  var keep_indexed__1 = function(f) {
    return function(f1) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__6700 = null;
          var G__6700__0 = function() {
            return f1.call(null);
          };
          var G__6700__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6700__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            var v = f.call(null, i, input);
            if (v == null) {
              return result;
            } else {
              return f1.call(null, result, v);
            }
          };
          G__6700 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6700__0.call(this);
              case 1:
                return G__6700__1.call(this, result);
              case 2:
                return G__6700__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6700.cljs$core$IFn$_invoke$arity$0 = G__6700__0;
          G__6700.cljs$core$IFn$_invoke$arity$1 = G__6700__1;
          G__6700.cljs$core$IFn$_invoke$arity$2 = G__6700__2;
          return G__6700;
        }();
      }(ia);
    };
  };
  var keep_indexed__2 = function(f, coll) {
    var keepi = function keepi(idx, coll__$1) {
      return new cljs.core.LazySeq(null, function() {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll__$1);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
            var c = cljs.core.chunk_first.call(null, s);
            var size = cljs.core.count.call(null, c);
            var b = cljs.core.chunk_buffer.call(null, size);
            var n__4508__auto___6701 = size;
            var i_6702 = 0;
            while (true) {
              if (i_6702 < n__4508__auto___6701) {
                var x_6703 = f.call(null, idx + i_6702, cljs.core._nth.call(null, c, i_6702));
                if (x_6703 == null) {
                } else {
                  cljs.core.chunk_append.call(null, b, x_6703);
                }
                var G__6704 = i_6702 + 1;
                i_6702 = G__6704;
                continue;
              } else {
              }
              break;
            }
            return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), keepi.call(null, idx + size, cljs.core.chunk_rest.call(null, s)));
          } else {
            var x = f.call(null, idx, cljs.core.first.call(null, s));
            if (x == null) {
              return keepi.call(null, idx + 1, cljs.core.rest.call(null, s));
            } else {
              return cljs.core.cons.call(null, x, keepi.call(null, idx + 1, cljs.core.rest.call(null, s)));
            }
          }
        } else {
          return null;
        }
      }, null, null);
    };
    return keepi.call(null, 0, coll);
  };
  keep_indexed = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return keep_indexed__1.call(this, f);
      case 2:
        return keep_indexed__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  keep_indexed.cljs$core$IFn$_invoke$arity$1 = keep_indexed__1;
  keep_indexed.cljs$core$IFn$_invoke$arity$2 = keep_indexed__2;
  return keep_indexed;
}();
cljs.core.every_pred = function() {
  var every_pred = null;
  var every_pred__1 = function(p) {
    return function() {
      var ep1 = null;
      var ep1__0 = function() {
        return true;
      };
      var ep1__1 = function(x) {
        return cljs.core.boolean$.call(null, p.call(null, x));
      };
      var ep1__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            return p.call(null, y);
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep1__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            var and__3627__auto____$1 = p.call(null, y);
            if (cljs.core.truth_(and__3627__auto____$1)) {
              return p.call(null, z);
            } else {
              return and__3627__auto____$1;
            }
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep1__4 = function() {
        var G__6711__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep1.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, p, args));
        };
        var G__6711 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6711__delegate.call(this, x, y, z, args);
        };
        G__6711.cljs$lang$maxFixedArity = 3;
        G__6711.cljs$lang$applyTo = function(arglist__6712) {
          var x = cljs.core.first(arglist__6712);
          arglist__6712 = cljs.core.next(arglist__6712);
          var y = cljs.core.first(arglist__6712);
          arglist__6712 = cljs.core.next(arglist__6712);
          var z = cljs.core.first(arglist__6712);
          var args = cljs.core.rest(arglist__6712);
          return G__6711__delegate(x, y, z, args);
        };
        G__6711.cljs$core$IFn$_invoke$arity$variadic = G__6711__delegate;
        return G__6711;
      }();
      ep1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep1__0.call(this);
          case 1:
            return ep1__1.call(this, x);
          case 2:
            return ep1__2.call(this, x, y);
          case 3:
            return ep1__3.call(this, x, y, z);
          default:
            return ep1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep1.cljs$lang$maxFixedArity = 3;
      ep1.cljs$lang$applyTo = ep1__4.cljs$lang$applyTo;
      ep1.cljs$core$IFn$_invoke$arity$0 = ep1__0;
      ep1.cljs$core$IFn$_invoke$arity$1 = ep1__1;
      ep1.cljs$core$IFn$_invoke$arity$2 = ep1__2;
      ep1.cljs$core$IFn$_invoke$arity$3 = ep1__3;
      ep1.cljs$core$IFn$_invoke$arity$variadic = ep1__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep1;
    }();
  };
  var every_pred__2 = function(p1, p2) {
    return function() {
      var ep2 = null;
      var ep2__0 = function() {
        return true;
      };
      var ep2__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            return p2.call(null, x);
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep2__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            var and__3627__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3627__auto____$1)) {
              var and__3627__auto____$2 = p2.call(null, x);
              if (cljs.core.truth_(and__3627__auto____$2)) {
                return p2.call(null, y);
              } else {
                return and__3627__auto____$2;
              }
            } else {
              return and__3627__auto____$1;
            }
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep2__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            var and__3627__auto____$1 = p1.call(null, y);
            if (cljs.core.truth_(and__3627__auto____$1)) {
              var and__3627__auto____$2 = p1.call(null, z);
              if (cljs.core.truth_(and__3627__auto____$2)) {
                var and__3627__auto____$3 = p2.call(null, x);
                if (cljs.core.truth_(and__3627__auto____$3)) {
                  var and__3627__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3627__auto____$4)) {
                    return p2.call(null, z);
                  } else {
                    return and__3627__auto____$4;
                  }
                } else {
                  return and__3627__auto____$3;
                }
              } else {
                return and__3627__auto____$2;
              }
            } else {
              return and__3627__auto____$1;
            }
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep2__4 = function() {
        var G__6713__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep2.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__6705_SHARP_) {
            var and__3627__auto__ = p1.call(null, p1__6705_SHARP_);
            if (cljs.core.truth_(and__3627__auto__)) {
              return p2.call(null, p1__6705_SHARP_);
            } else {
              return and__3627__auto__;
            }
          }, args));
        };
        var G__6713 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6713__delegate.call(this, x, y, z, args);
        };
        G__6713.cljs$lang$maxFixedArity = 3;
        G__6713.cljs$lang$applyTo = function(arglist__6714) {
          var x = cljs.core.first(arglist__6714);
          arglist__6714 = cljs.core.next(arglist__6714);
          var y = cljs.core.first(arglist__6714);
          arglist__6714 = cljs.core.next(arglist__6714);
          var z = cljs.core.first(arglist__6714);
          var args = cljs.core.rest(arglist__6714);
          return G__6713__delegate(x, y, z, args);
        };
        G__6713.cljs$core$IFn$_invoke$arity$variadic = G__6713__delegate;
        return G__6713;
      }();
      ep2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep2__0.call(this);
          case 1:
            return ep2__1.call(this, x);
          case 2:
            return ep2__2.call(this, x, y);
          case 3:
            return ep2__3.call(this, x, y, z);
          default:
            return ep2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep2.cljs$lang$maxFixedArity = 3;
      ep2.cljs$lang$applyTo = ep2__4.cljs$lang$applyTo;
      ep2.cljs$core$IFn$_invoke$arity$0 = ep2__0;
      ep2.cljs$core$IFn$_invoke$arity$1 = ep2__1;
      ep2.cljs$core$IFn$_invoke$arity$2 = ep2__2;
      ep2.cljs$core$IFn$_invoke$arity$3 = ep2__3;
      ep2.cljs$core$IFn$_invoke$arity$variadic = ep2__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep2;
    }();
  };
  var every_pred__3 = function(p1, p2, p3) {
    return function() {
      var ep3 = null;
      var ep3__0 = function() {
        return true;
      };
      var ep3__1 = function(x) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            var and__3627__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3627__auto____$1)) {
              return p3.call(null, x);
            } else {
              return and__3627__auto____$1;
            }
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep3__2 = function(x, y) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            var and__3627__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3627__auto____$1)) {
              var and__3627__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3627__auto____$2)) {
                var and__3627__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3627__auto____$3)) {
                  var and__3627__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3627__auto____$4)) {
                    return p3.call(null, y);
                  } else {
                    return and__3627__auto____$4;
                  }
                } else {
                  return and__3627__auto____$3;
                }
              } else {
                return and__3627__auto____$2;
              }
            } else {
              return and__3627__auto____$1;
            }
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep3__3 = function(x, y, z) {
        return cljs.core.boolean$.call(null, function() {
          var and__3627__auto__ = p1.call(null, x);
          if (cljs.core.truth_(and__3627__auto__)) {
            var and__3627__auto____$1 = p2.call(null, x);
            if (cljs.core.truth_(and__3627__auto____$1)) {
              var and__3627__auto____$2 = p3.call(null, x);
              if (cljs.core.truth_(and__3627__auto____$2)) {
                var and__3627__auto____$3 = p1.call(null, y);
                if (cljs.core.truth_(and__3627__auto____$3)) {
                  var and__3627__auto____$4 = p2.call(null, y);
                  if (cljs.core.truth_(and__3627__auto____$4)) {
                    var and__3627__auto____$5 = p3.call(null, y);
                    if (cljs.core.truth_(and__3627__auto____$5)) {
                      var and__3627__auto____$6 = p1.call(null, z);
                      if (cljs.core.truth_(and__3627__auto____$6)) {
                        var and__3627__auto____$7 = p2.call(null, z);
                        if (cljs.core.truth_(and__3627__auto____$7)) {
                          return p3.call(null, z);
                        } else {
                          return and__3627__auto____$7;
                        }
                      } else {
                        return and__3627__auto____$6;
                      }
                    } else {
                      return and__3627__auto____$5;
                    }
                  } else {
                    return and__3627__auto____$4;
                  }
                } else {
                  return and__3627__auto____$3;
                }
              } else {
                return and__3627__auto____$2;
              }
            } else {
              return and__3627__auto____$1;
            }
          } else {
            return and__3627__auto__;
          }
        }());
      };
      var ep3__4 = function() {
        var G__6715__delegate = function(x, y, z, args) {
          return cljs.core.boolean$.call(null, ep3.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(p1__6706_SHARP_) {
            var and__3627__auto__ = p1.call(null, p1__6706_SHARP_);
            if (cljs.core.truth_(and__3627__auto__)) {
              var and__3627__auto____$1 = p2.call(null, p1__6706_SHARP_);
              if (cljs.core.truth_(and__3627__auto____$1)) {
                return p3.call(null, p1__6706_SHARP_);
              } else {
                return and__3627__auto____$1;
              }
            } else {
              return and__3627__auto__;
            }
          }, args));
        };
        var G__6715 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6715__delegate.call(this, x, y, z, args);
        };
        G__6715.cljs$lang$maxFixedArity = 3;
        G__6715.cljs$lang$applyTo = function(arglist__6716) {
          var x = cljs.core.first(arglist__6716);
          arglist__6716 = cljs.core.next(arglist__6716);
          var y = cljs.core.first(arglist__6716);
          arglist__6716 = cljs.core.next(arglist__6716);
          var z = cljs.core.first(arglist__6716);
          var args = cljs.core.rest(arglist__6716);
          return G__6715__delegate(x, y, z, args);
        };
        G__6715.cljs$core$IFn$_invoke$arity$variadic = G__6715__delegate;
        return G__6715;
      }();
      ep3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return ep3__0.call(this);
          case 1:
            return ep3__1.call(this, x);
          case 2:
            return ep3__2.call(this, x, y);
          case 3:
            return ep3__3.call(this, x, y, z);
          default:
            return ep3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      ep3.cljs$lang$maxFixedArity = 3;
      ep3.cljs$lang$applyTo = ep3__4.cljs$lang$applyTo;
      ep3.cljs$core$IFn$_invoke$arity$0 = ep3__0;
      ep3.cljs$core$IFn$_invoke$arity$1 = ep3__1;
      ep3.cljs$core$IFn$_invoke$arity$2 = ep3__2;
      ep3.cljs$core$IFn$_invoke$arity$3 = ep3__3;
      ep3.cljs$core$IFn$_invoke$arity$variadic = ep3__4.cljs$core$IFn$_invoke$arity$variadic;
      return ep3;
    }();
  };
  var every_pred__4 = function() {
    var G__6717__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var epn = null;
          var epn__0 = function() {
            return true;
          };
          var epn__1 = function(x) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__6707_SHARP_) {
                return p1__6707_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var epn__2 = function(x, y) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__6708_SHARP_) {
                var and__3627__auto__ = p1__6708_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3627__auto__)) {
                  return p1__6708_SHARP_.call(null, y);
                } else {
                  return and__3627__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__3 = function(x, y, z) {
            return cljs.core.every_QMARK_.call(null, function(ps__$1) {
              return function(p1__6709_SHARP_) {
                var and__3627__auto__ = p1__6709_SHARP_.call(null, x);
                if (cljs.core.truth_(and__3627__auto__)) {
                  var and__3627__auto____$1 = p1__6709_SHARP_.call(null, y);
                  if (cljs.core.truth_(and__3627__auto____$1)) {
                    return p1__6709_SHARP_.call(null, z);
                  } else {
                    return and__3627__auto____$1;
                  }
                } else {
                  return and__3627__auto__;
                }
              };
            }(ps__$1), ps__$1);
          };
          var epn__4 = function() {
            var G__6718__delegate = function(x, y, z, args) {
              return cljs.core.boolean$.call(null, epn.call(null, x, y, z) && cljs.core.every_QMARK_.call(null, function(ps__$1) {
                return function(p1__6710_SHARP_) {
                  return cljs.core.every_QMARK_.call(null, p1__6710_SHARP_, args);
                };
              }(ps__$1), ps__$1));
            };
            var G__6718 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__6718__delegate.call(this, x, y, z, args);
            };
            G__6718.cljs$lang$maxFixedArity = 3;
            G__6718.cljs$lang$applyTo = function(arglist__6719) {
              var x = cljs.core.first(arglist__6719);
              arglist__6719 = cljs.core.next(arglist__6719);
              var y = cljs.core.first(arglist__6719);
              arglist__6719 = cljs.core.next(arglist__6719);
              var z = cljs.core.first(arglist__6719);
              var args = cljs.core.rest(arglist__6719);
              return G__6718__delegate(x, y, z, args);
            };
            G__6718.cljs$core$IFn$_invoke$arity$variadic = G__6718__delegate;
            return G__6718;
          }();
          epn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return epn__0.call(this);
              case 1:
                return epn__1.call(this, x);
              case 2:
                return epn__2.call(this, x, y);
              case 3:
                return epn__3.call(this, x, y, z);
              default:
                return epn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          epn.cljs$lang$maxFixedArity = 3;
          epn.cljs$lang$applyTo = epn__4.cljs$lang$applyTo;
          epn.cljs$core$IFn$_invoke$arity$0 = epn__0;
          epn.cljs$core$IFn$_invoke$arity$1 = epn__1;
          epn.cljs$core$IFn$_invoke$arity$2 = epn__2;
          epn.cljs$core$IFn$_invoke$arity$3 = epn__3;
          epn.cljs$core$IFn$_invoke$arity$variadic = epn__4.cljs$core$IFn$_invoke$arity$variadic;
          return epn;
        }();
      }(ps__$1);
    };
    var G__6717 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6717__delegate.call(this, p1, p2, p3, ps);
    };
    G__6717.cljs$lang$maxFixedArity = 3;
    G__6717.cljs$lang$applyTo = function(arglist__6720) {
      var p1 = cljs.core.first(arglist__6720);
      arglist__6720 = cljs.core.next(arglist__6720);
      var p2 = cljs.core.first(arglist__6720);
      arglist__6720 = cljs.core.next(arglist__6720);
      var p3 = cljs.core.first(arglist__6720);
      var ps = cljs.core.rest(arglist__6720);
      return G__6717__delegate(p1, p2, p3, ps);
    };
    G__6717.cljs$core$IFn$_invoke$arity$variadic = G__6717__delegate;
    return G__6717;
  }();
  every_pred = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return every_pred__1.call(this, p1);
      case 2:
        return every_pred__2.call(this, p1, p2);
      case 3:
        return every_pred__3.call(this, p1, p2, p3);
      default:
        return every_pred__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  every_pred.cljs$lang$maxFixedArity = 3;
  every_pred.cljs$lang$applyTo = every_pred__4.cljs$lang$applyTo;
  every_pred.cljs$core$IFn$_invoke$arity$1 = every_pred__1;
  every_pred.cljs$core$IFn$_invoke$arity$2 = every_pred__2;
  every_pred.cljs$core$IFn$_invoke$arity$3 = every_pred__3;
  every_pred.cljs$core$IFn$_invoke$arity$variadic = every_pred__4.cljs$core$IFn$_invoke$arity$variadic;
  return every_pred;
}();
cljs.core.some_fn = function() {
  var some_fn = null;
  var some_fn__1 = function(p) {
    return function() {
      var sp1 = null;
      var sp1__0 = function() {
        return null;
      };
      var sp1__1 = function(x) {
        return p.call(null, x);
      };
      var sp1__2 = function(x, y) {
        var or__3639__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          return p.call(null, y);
        }
      };
      var sp1__3 = function(x, y, z) {
        var or__3639__auto__ = p.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = p.call(null, y);
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            return p.call(null, z);
          }
        }
      };
      var sp1__4 = function() {
        var G__6727__delegate = function(x, y, z, args) {
          var or__3639__auto__ = sp1.call(null, x, y, z);
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return cljs.core.some.call(null, p, args);
          }
        };
        var G__6727 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6727__delegate.call(this, x, y, z, args);
        };
        G__6727.cljs$lang$maxFixedArity = 3;
        G__6727.cljs$lang$applyTo = function(arglist__6728) {
          var x = cljs.core.first(arglist__6728);
          arglist__6728 = cljs.core.next(arglist__6728);
          var y = cljs.core.first(arglist__6728);
          arglist__6728 = cljs.core.next(arglist__6728);
          var z = cljs.core.first(arglist__6728);
          var args = cljs.core.rest(arglist__6728);
          return G__6727__delegate(x, y, z, args);
        };
        G__6727.cljs$core$IFn$_invoke$arity$variadic = G__6727__delegate;
        return G__6727;
      }();
      sp1 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp1__0.call(this);
          case 1:
            return sp1__1.call(this, x);
          case 2:
            return sp1__2.call(this, x, y);
          case 3:
            return sp1__3.call(this, x, y, z);
          default:
            return sp1__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp1.cljs$lang$maxFixedArity = 3;
      sp1.cljs$lang$applyTo = sp1__4.cljs$lang$applyTo;
      sp1.cljs$core$IFn$_invoke$arity$0 = sp1__0;
      sp1.cljs$core$IFn$_invoke$arity$1 = sp1__1;
      sp1.cljs$core$IFn$_invoke$arity$2 = sp1__2;
      sp1.cljs$core$IFn$_invoke$arity$3 = sp1__3;
      sp1.cljs$core$IFn$_invoke$arity$variadic = sp1__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp1;
    }();
  };
  var some_fn__2 = function(p1, p2) {
    return function() {
      var sp2 = null;
      var sp2__0 = function() {
        return null;
      };
      var sp2__1 = function(x) {
        var or__3639__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          return p2.call(null, x);
        }
      };
      var sp2__2 = function(x, y) {
        var or__3639__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            var or__3639__auto____$2 = p2.call(null, x);
            if (cljs.core.truth_(or__3639__auto____$2)) {
              return or__3639__auto____$2;
            } else {
              return p2.call(null, y);
            }
          }
        }
      };
      var sp2__3 = function(x, y, z) {
        var or__3639__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = p1.call(null, y);
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            var or__3639__auto____$2 = p1.call(null, z);
            if (cljs.core.truth_(or__3639__auto____$2)) {
              return or__3639__auto____$2;
            } else {
              var or__3639__auto____$3 = p2.call(null, x);
              if (cljs.core.truth_(or__3639__auto____$3)) {
                return or__3639__auto____$3;
              } else {
                var or__3639__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3639__auto____$4)) {
                  return or__3639__auto____$4;
                } else {
                  return p2.call(null, z);
                }
              }
            }
          }
        }
      };
      var sp2__4 = function() {
        var G__6729__delegate = function(x, y, z, args) {
          var or__3639__auto__ = sp2.call(null, x, y, z);
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3639__auto__) {
              return function(p1__6721_SHARP_) {
                var or__3639__auto____$1 = p1.call(null, p1__6721_SHARP_);
                if (cljs.core.truth_(or__3639__auto____$1)) {
                  return or__3639__auto____$1;
                } else {
                  return p2.call(null, p1__6721_SHARP_);
                }
              };
            }(or__3639__auto__), args);
          }
        };
        var G__6729 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6729__delegate.call(this, x, y, z, args);
        };
        G__6729.cljs$lang$maxFixedArity = 3;
        G__6729.cljs$lang$applyTo = function(arglist__6730) {
          var x = cljs.core.first(arglist__6730);
          arglist__6730 = cljs.core.next(arglist__6730);
          var y = cljs.core.first(arglist__6730);
          arglist__6730 = cljs.core.next(arglist__6730);
          var z = cljs.core.first(arglist__6730);
          var args = cljs.core.rest(arglist__6730);
          return G__6729__delegate(x, y, z, args);
        };
        G__6729.cljs$core$IFn$_invoke$arity$variadic = G__6729__delegate;
        return G__6729;
      }();
      sp2 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp2__0.call(this);
          case 1:
            return sp2__1.call(this, x);
          case 2:
            return sp2__2.call(this, x, y);
          case 3:
            return sp2__3.call(this, x, y, z);
          default:
            return sp2__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp2.cljs$lang$maxFixedArity = 3;
      sp2.cljs$lang$applyTo = sp2__4.cljs$lang$applyTo;
      sp2.cljs$core$IFn$_invoke$arity$0 = sp2__0;
      sp2.cljs$core$IFn$_invoke$arity$1 = sp2__1;
      sp2.cljs$core$IFn$_invoke$arity$2 = sp2__2;
      sp2.cljs$core$IFn$_invoke$arity$3 = sp2__3;
      sp2.cljs$core$IFn$_invoke$arity$variadic = sp2__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp2;
    }();
  };
  var some_fn__3 = function(p1, p2, p3) {
    return function() {
      var sp3 = null;
      var sp3__0 = function() {
        return null;
      };
      var sp3__1 = function(x) {
        var or__3639__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            return p3.call(null, x);
          }
        }
      };
      var sp3__2 = function(x, y) {
        var or__3639__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            var or__3639__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3639__auto____$2)) {
              return or__3639__auto____$2;
            } else {
              var or__3639__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3639__auto____$3)) {
                return or__3639__auto____$3;
              } else {
                var or__3639__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3639__auto____$4)) {
                  return or__3639__auto____$4;
                } else {
                  return p3.call(null, y);
                }
              }
            }
          }
        }
      };
      var sp3__3 = function(x, y, z) {
        var or__3639__auto__ = p1.call(null, x);
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          var or__3639__auto____$1 = p2.call(null, x);
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            var or__3639__auto____$2 = p3.call(null, x);
            if (cljs.core.truth_(or__3639__auto____$2)) {
              return or__3639__auto____$2;
            } else {
              var or__3639__auto____$3 = p1.call(null, y);
              if (cljs.core.truth_(or__3639__auto____$3)) {
                return or__3639__auto____$3;
              } else {
                var or__3639__auto____$4 = p2.call(null, y);
                if (cljs.core.truth_(or__3639__auto____$4)) {
                  return or__3639__auto____$4;
                } else {
                  var or__3639__auto____$5 = p3.call(null, y);
                  if (cljs.core.truth_(or__3639__auto____$5)) {
                    return or__3639__auto____$5;
                  } else {
                    var or__3639__auto____$6 = p1.call(null, z);
                    if (cljs.core.truth_(or__3639__auto____$6)) {
                      return or__3639__auto____$6;
                    } else {
                      var or__3639__auto____$7 = p2.call(null, z);
                      if (cljs.core.truth_(or__3639__auto____$7)) {
                        return or__3639__auto____$7;
                      } else {
                        return p3.call(null, z);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      };
      var sp3__4 = function() {
        var G__6731__delegate = function(x, y, z, args) {
          var or__3639__auto__ = sp3.call(null, x, y, z);
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return cljs.core.some.call(null, function(or__3639__auto__) {
              return function(p1__6722_SHARP_) {
                var or__3639__auto____$1 = p1.call(null, p1__6722_SHARP_);
                if (cljs.core.truth_(or__3639__auto____$1)) {
                  return or__3639__auto____$1;
                } else {
                  var or__3639__auto____$2 = p2.call(null, p1__6722_SHARP_);
                  if (cljs.core.truth_(or__3639__auto____$2)) {
                    return or__3639__auto____$2;
                  } else {
                    return p3.call(null, p1__6722_SHARP_);
                  }
                }
              };
            }(or__3639__auto__), args);
          }
        };
        var G__6731 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__6731__delegate.call(this, x, y, z, args);
        };
        G__6731.cljs$lang$maxFixedArity = 3;
        G__6731.cljs$lang$applyTo = function(arglist__6732) {
          var x = cljs.core.first(arglist__6732);
          arglist__6732 = cljs.core.next(arglist__6732);
          var y = cljs.core.first(arglist__6732);
          arglist__6732 = cljs.core.next(arglist__6732);
          var z = cljs.core.first(arglist__6732);
          var args = cljs.core.rest(arglist__6732);
          return G__6731__delegate(x, y, z, args);
        };
        G__6731.cljs$core$IFn$_invoke$arity$variadic = G__6731__delegate;
        return G__6731;
      }();
      sp3 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return sp3__0.call(this);
          case 1:
            return sp3__1.call(this, x);
          case 2:
            return sp3__2.call(this, x, y);
          case 3:
            return sp3__3.call(this, x, y, z);
          default:
            return sp3__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      sp3.cljs$lang$maxFixedArity = 3;
      sp3.cljs$lang$applyTo = sp3__4.cljs$lang$applyTo;
      sp3.cljs$core$IFn$_invoke$arity$0 = sp3__0;
      sp3.cljs$core$IFn$_invoke$arity$1 = sp3__1;
      sp3.cljs$core$IFn$_invoke$arity$2 = sp3__2;
      sp3.cljs$core$IFn$_invoke$arity$3 = sp3__3;
      sp3.cljs$core$IFn$_invoke$arity$variadic = sp3__4.cljs$core$IFn$_invoke$arity$variadic;
      return sp3;
    }();
  };
  var some_fn__4 = function() {
    var G__6733__delegate = function(p1, p2, p3, ps) {
      var ps__$1 = cljs.core.list_STAR_.call(null, p1, p2, p3, ps);
      return function(ps__$1) {
        return function() {
          var spn = null;
          var spn__0 = function() {
            return null;
          };
          var spn__1 = function(x) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__6723_SHARP_) {
                return p1__6723_SHARP_.call(null, x);
              };
            }(ps__$1), ps__$1);
          };
          var spn__2 = function(x, y) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__6724_SHARP_) {
                var or__3639__auto__ = p1__6724_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3639__auto__)) {
                  return or__3639__auto__;
                } else {
                  return p1__6724_SHARP_.call(null, y);
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__3 = function(x, y, z) {
            return cljs.core.some.call(null, function(ps__$1) {
              return function(p1__6725_SHARP_) {
                var or__3639__auto__ = p1__6725_SHARP_.call(null, x);
                if (cljs.core.truth_(or__3639__auto__)) {
                  return or__3639__auto__;
                } else {
                  var or__3639__auto____$1 = p1__6725_SHARP_.call(null, y);
                  if (cljs.core.truth_(or__3639__auto____$1)) {
                    return or__3639__auto____$1;
                  } else {
                    return p1__6725_SHARP_.call(null, z);
                  }
                }
              };
            }(ps__$1), ps__$1);
          };
          var spn__4 = function() {
            var G__6734__delegate = function(x, y, z, args) {
              var or__3639__auto__ = spn.call(null, x, y, z);
              if (cljs.core.truth_(or__3639__auto__)) {
                return or__3639__auto__;
              } else {
                return cljs.core.some.call(null, function(or__3639__auto__, ps__$1) {
                  return function(p1__6726_SHARP_) {
                    return cljs.core.some.call(null, p1__6726_SHARP_, args);
                  };
                }(or__3639__auto__, ps__$1), ps__$1);
              }
            };
            var G__6734 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__6734__delegate.call(this, x, y, z, args);
            };
            G__6734.cljs$lang$maxFixedArity = 3;
            G__6734.cljs$lang$applyTo = function(arglist__6735) {
              var x = cljs.core.first(arglist__6735);
              arglist__6735 = cljs.core.next(arglist__6735);
              var y = cljs.core.first(arglist__6735);
              arglist__6735 = cljs.core.next(arglist__6735);
              var z = cljs.core.first(arglist__6735);
              var args = cljs.core.rest(arglist__6735);
              return G__6734__delegate(x, y, z, args);
            };
            G__6734.cljs$core$IFn$_invoke$arity$variadic = G__6734__delegate;
            return G__6734;
          }();
          spn = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return spn__0.call(this);
              case 1:
                return spn__1.call(this, x);
              case 2:
                return spn__2.call(this, x, y);
              case 3:
                return spn__3.call(this, x, y, z);
              default:
                return spn__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          spn.cljs$lang$maxFixedArity = 3;
          spn.cljs$lang$applyTo = spn__4.cljs$lang$applyTo;
          spn.cljs$core$IFn$_invoke$arity$0 = spn__0;
          spn.cljs$core$IFn$_invoke$arity$1 = spn__1;
          spn.cljs$core$IFn$_invoke$arity$2 = spn__2;
          spn.cljs$core$IFn$_invoke$arity$3 = spn__3;
          spn.cljs$core$IFn$_invoke$arity$variadic = spn__4.cljs$core$IFn$_invoke$arity$variadic;
          return spn;
        }();
      }(ps__$1);
    };
    var G__6733 = function(p1, p2, p3, var_args) {
      var ps = null;
      if (arguments.length > 3) {
        ps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__6733__delegate.call(this, p1, p2, p3, ps);
    };
    G__6733.cljs$lang$maxFixedArity = 3;
    G__6733.cljs$lang$applyTo = function(arglist__6736) {
      var p1 = cljs.core.first(arglist__6736);
      arglist__6736 = cljs.core.next(arglist__6736);
      var p2 = cljs.core.first(arglist__6736);
      arglist__6736 = cljs.core.next(arglist__6736);
      var p3 = cljs.core.first(arglist__6736);
      var ps = cljs.core.rest(arglist__6736);
      return G__6733__delegate(p1, p2, p3, ps);
    };
    G__6733.cljs$core$IFn$_invoke$arity$variadic = G__6733__delegate;
    return G__6733;
  }();
  some_fn = function(p1, p2, p3, var_args) {
    var ps = var_args;
    switch(arguments.length) {
      case 1:
        return some_fn__1.call(this, p1);
      case 2:
        return some_fn__2.call(this, p1, p2);
      case 3:
        return some_fn__3.call(this, p1, p2, p3);
      default:
        return some_fn__4.cljs$core$IFn$_invoke$arity$variadic(p1, p2, p3, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  some_fn.cljs$lang$maxFixedArity = 3;
  some_fn.cljs$lang$applyTo = some_fn__4.cljs$lang$applyTo;
  some_fn.cljs$core$IFn$_invoke$arity$1 = some_fn__1;
  some_fn.cljs$core$IFn$_invoke$arity$2 = some_fn__2;
  some_fn.cljs$core$IFn$_invoke$arity$3 = some_fn__3;
  some_fn.cljs$core$IFn$_invoke$arity$variadic = some_fn__4.cljs$core$IFn$_invoke$arity$variadic;
  return some_fn;
}();
cljs.core.map = function() {
  var map = null;
  var map__1 = function(f) {
    return function(f1) {
      return function() {
        var G__6738 = null;
        var G__6738__0 = function() {
          return f1.call(null);
        };
        var G__6738__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6738__2 = function(result, input) {
          return f1.call(null, result, f.call(null, input));
        };
        var G__6738__3 = function() {
          var G__6739__delegate = function(result, input, inputs) {
            return f1.call(null, result, cljs.core.apply.call(null, f, input, inputs));
          };
          var G__6739 = function(result, input, var_args) {
            var inputs = null;
            if (arguments.length > 2) {
              inputs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
            }
            return G__6739__delegate.call(this, result, input, inputs);
          };
          G__6739.cljs$lang$maxFixedArity = 2;
          G__6739.cljs$lang$applyTo = function(arglist__6740) {
            var result = cljs.core.first(arglist__6740);
            arglist__6740 = cljs.core.next(arglist__6740);
            var input = cljs.core.first(arglist__6740);
            var inputs = cljs.core.rest(arglist__6740);
            return G__6739__delegate(result, input, inputs);
          };
          G__6739.cljs$core$IFn$_invoke$arity$variadic = G__6739__delegate;
          return G__6739;
        }();
        G__6738 = function(result, input, var_args) {
          var inputs = var_args;
          switch(arguments.length) {
            case 0:
              return G__6738__0.call(this);
            case 1:
              return G__6738__1.call(this, result);
            case 2:
              return G__6738__2.call(this, result, input);
            default:
              return G__6738__3.cljs$core$IFn$_invoke$arity$variadic(result, input, cljs.core.array_seq(arguments, 2));
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6738.cljs$lang$maxFixedArity = 2;
        G__6738.cljs$lang$applyTo = G__6738__3.cljs$lang$applyTo;
        G__6738.cljs$core$IFn$_invoke$arity$0 = G__6738__0;
        G__6738.cljs$core$IFn$_invoke$arity$1 = G__6738__1;
        G__6738.cljs$core$IFn$_invoke$arity$2 = G__6738__2;
        G__6738.cljs$core$IFn$_invoke$arity$variadic = G__6738__3.cljs$core$IFn$_invoke$arity$variadic;
        return G__6738;
      }();
    };
  };
  var map__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4508__auto___6741 = size;
          var i_6742 = 0;
          while (true) {
            if (i_6742 < n__4508__auto___6741) {
              cljs.core.chunk_append.call(null, b, f.call(null, cljs.core._nth.call(null, c, i_6742)));
              var G__6743 = i_6742 + 1;
              i_6742 = G__6743;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), map.call(null, f, cljs.core.chunk_rest.call(null, s)));
        } else {
          return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s)), map.call(null, f, cljs.core.rest.call(null, s)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var map__3 = function(f, c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__4 = function(f, c1, c2, c3) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      var s3 = cljs.core.seq.call(null, c3);
      if (s1 && s2 && s3) {
        return cljs.core.cons.call(null, f.call(null, cljs.core.first.call(null, s1), cljs.core.first.call(null, s2), cljs.core.first.call(null, s3)), map.call(null, f, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2), cljs.core.rest.call(null, s3)));
      } else {
        return null;
      }
    }, null, null);
  };
  var map__5 = function() {
    var G__6744__delegate = function(f, c1, c2, c3, colls) {
      var step = function step(cs) {
        return new cljs.core.LazySeq(null, function() {
          var ss = map.call(null, cljs.core.seq, cs);
          if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
            return cljs.core.cons.call(null, map.call(null, cljs.core.first, ss), step.call(null, map.call(null, cljs.core.rest, ss)));
          } else {
            return null;
          }
        }, null, null);
      };
      return map.call(null, function(step) {
        return function(p1__6737_SHARP_) {
          return cljs.core.apply.call(null, f, p1__6737_SHARP_);
        };
      }(step), step.call(null, cljs.core.conj.call(null, colls, c3, c2, c1)));
    };
    var G__6744 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6744__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__6744.cljs$lang$maxFixedArity = 4;
    G__6744.cljs$lang$applyTo = function(arglist__6745) {
      var f = cljs.core.first(arglist__6745);
      arglist__6745 = cljs.core.next(arglist__6745);
      var c1 = cljs.core.first(arglist__6745);
      arglist__6745 = cljs.core.next(arglist__6745);
      var c2 = cljs.core.first(arglist__6745);
      arglist__6745 = cljs.core.next(arglist__6745);
      var c3 = cljs.core.first(arglist__6745);
      var colls = cljs.core.rest(arglist__6745);
      return G__6744__delegate(f, c1, c2, c3, colls);
    };
    G__6744.cljs$core$IFn$_invoke$arity$variadic = G__6744__delegate;
    return G__6744;
  }();
  map = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return map__1.call(this, f);
      case 2:
        return map__2.call(this, f, c1);
      case 3:
        return map__3.call(this, f, c1, c2);
      case 4:
        return map__4.call(this, f, c1, c2, c3);
      default:
        return map__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  map.cljs$lang$maxFixedArity = 4;
  map.cljs$lang$applyTo = map__5.cljs$lang$applyTo;
  map.cljs$core$IFn$_invoke$arity$1 = map__1;
  map.cljs$core$IFn$_invoke$arity$2 = map__2;
  map.cljs$core$IFn$_invoke$arity$3 = map__3;
  map.cljs$core$IFn$_invoke$arity$4 = map__4;
  map.cljs$core$IFn$_invoke$arity$variadic = map__5.cljs$core$IFn$_invoke$arity$variadic;
  return map;
}();
cljs.core.take = function() {
  var take = null;
  var take__1 = function(n) {
    return function(f1) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__6746 = null;
          var G__6746__0 = function() {
            return f1.call(null);
          };
          var G__6746__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6746__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            var nn = cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            var result__$1 = n__$1 > 0 ? f1.call(null, result, input) : result;
            if (!(nn > 0)) {
              return cljs.core.reduced.call(null, result__$1);
            } else {
              return result__$1;
            }
          };
          G__6746 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6746__0.call(this);
              case 1:
                return G__6746__1.call(this, result);
              case 2:
                return G__6746__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6746.cljs$core$IFn$_invoke$arity$0 = G__6746__0;
          G__6746.cljs$core$IFn$_invoke$arity$1 = G__6746__1;
          G__6746.cljs$core$IFn$_invoke$arity$2 = G__6746__2;
          return G__6746;
        }();
      }(na);
    };
  };
  var take__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      if (n > 0) {
        var temp__4126__auto__ = cljs.core.seq.call(null, coll);
        if (temp__4126__auto__) {
          var s = temp__4126__auto__;
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take.call(null, n - 1, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take__1.call(this, n);
      case 2:
        return take__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take.cljs$core$IFn$_invoke$arity$1 = take__1;
  take.cljs$core$IFn$_invoke$arity$2 = take__2;
  return take;
}();
cljs.core.drop = function() {
  var drop = null;
  var drop__1 = function(n) {
    return function(f1) {
      var na = cljs.core.atom.call(null, n);
      return function(na) {
        return function() {
          var G__6747 = null;
          var G__6747__0 = function() {
            return f1.call(null);
          };
          var G__6747__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6747__2 = function(result, input) {
            var n__$1 = cljs.core.deref.call(null, na);
            cljs.core.swap_BANG_.call(null, na, cljs.core.dec);
            if (n__$1 > 0) {
              return result;
            } else {
              return f1.call(null, result, input);
            }
          };
          G__6747 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6747__0.call(this);
              case 1:
                return G__6747__1.call(this, result);
              case 2:
                return G__6747__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6747.cljs$core$IFn$_invoke$arity$0 = G__6747__0;
          G__6747.cljs$core$IFn$_invoke$arity$1 = G__6747__1;
          G__6747.cljs$core$IFn$_invoke$arity$2 = G__6747__2;
          return G__6747;
        }();
      }(na);
    };
  };
  var drop__2 = function(n, coll) {
    var step = function(n__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (n__$1 > 0 && s) {
          var G__6748 = n__$1 - 1;
          var G__6749 = cljs.core.rest.call(null, s);
          n__$1 = G__6748;
          coll__$1 = G__6749;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, n, coll);
      };
    }(step), null, null);
  };
  drop = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return drop__1.call(this, n);
      case 2:
        return drop__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop.cljs$core$IFn$_invoke$arity$1 = drop__1;
  drop.cljs$core$IFn$_invoke$arity$2 = drop__2;
  return drop;
}();
cljs.core.drop_last = function() {
  var drop_last = null;
  var drop_last__1 = function(s) {
    return drop_last.call(null, 1, s);
  };
  var drop_last__2 = function(n, s) {
    return cljs.core.map.call(null, function(x, _) {
      return x;
    }, s, cljs.core.drop.call(null, n, s));
  };
  drop_last = function(n, s) {
    switch(arguments.length) {
      case 1:
        return drop_last__1.call(this, n);
      case 2:
        return drop_last__2.call(this, n, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_last.cljs$core$IFn$_invoke$arity$1 = drop_last__1;
  drop_last.cljs$core$IFn$_invoke$arity$2 = drop_last__2;
  return drop_last;
}();
cljs.core.take_last = function take_last(n, coll) {
  var s = cljs.core.seq.call(null, coll);
  var lead = cljs.core.seq.call(null, cljs.core.drop.call(null, n, coll));
  while (true) {
    if (lead) {
      var G__6750 = cljs.core.next.call(null, s);
      var G__6751 = cljs.core.next.call(null, lead);
      s = G__6750;
      lead = G__6751;
      continue;
    } else {
      return s;
    }
    break;
  }
};
cljs.core.drop_while = function() {
  var drop_while = null;
  var drop_while__1 = function(pred) {
    return function(f1) {
      var da = cljs.core.atom.call(null, true);
      return function(da) {
        return function() {
          var G__6752 = null;
          var G__6752__0 = function() {
            return f1.call(null);
          };
          var G__6752__1 = function(result) {
            return f1.call(null, result);
          };
          var G__6752__2 = function(result, input) {
            var drop_QMARK_ = cljs.core.deref.call(null, da);
            if (cljs.core.truth_(function() {
              var and__3627__auto__ = drop_QMARK_;
              if (cljs.core.truth_(and__3627__auto__)) {
                return pred.call(null, input);
              } else {
                return and__3627__auto__;
              }
            }())) {
              return result;
            } else {
              cljs.core.reset_BANG_.call(null, da, null);
              return f1.call(null, result, input);
            }
          };
          G__6752 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__6752__0.call(this);
              case 1:
                return G__6752__1.call(this, result);
              case 2:
                return G__6752__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__6752.cljs$core$IFn$_invoke$arity$0 = G__6752__0;
          G__6752.cljs$core$IFn$_invoke$arity$1 = G__6752__1;
          G__6752.cljs$core$IFn$_invoke$arity$2 = G__6752__2;
          return G__6752;
        }();
      }(da);
    };
  };
  var drop_while__2 = function(pred, coll) {
    var step = function(pred__$1, coll__$1) {
      while (true) {
        var s = cljs.core.seq.call(null, coll__$1);
        if (cljs.core.truth_(function() {
          var and__3627__auto__ = s;
          if (and__3627__auto__) {
            return pred__$1.call(null, cljs.core.first.call(null, s));
          } else {
            return and__3627__auto__;
          }
        }())) {
          var G__6753 = pred__$1;
          var G__6754 = cljs.core.rest.call(null, s);
          pred__$1 = G__6753;
          coll__$1 = G__6754;
          continue;
        } else {
          return s;
        }
        break;
      }
    };
    return new cljs.core.LazySeq(null, function(step) {
      return function() {
        return step.call(null, pred, coll);
      };
    }(step), null, null);
  };
  drop_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return drop_while__1.call(this, pred);
      case 2:
        return drop_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  drop_while.cljs$core$IFn$_invoke$arity$1 = drop_while__1;
  drop_while.cljs$core$IFn$_invoke$arity$2 = drop_while__2;
  return drop_while;
}();
cljs.core.cycle = function cycle(coll) {
  return new cljs.core.LazySeq(null, function() {
    var temp__4126__auto__ = cljs.core.seq.call(null, coll);
    if (temp__4126__auto__) {
      var s = temp__4126__auto__;
      return cljs.core.concat.call(null, s, cycle.call(null, s));
    } else {
      return null;
    }
  }, null, null);
};
cljs.core.split_at = function split_at(n, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.call(null, n, coll), cljs.core.drop.call(null, n, coll)], null);
};
cljs.core.repeat = function() {
  var repeat = null;
  var repeat__1 = function(x) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, x, repeat.call(null, x));
    }, null, null);
  };
  var repeat__2 = function(n, x) {
    return cljs.core.take.call(null, n, repeat.call(null, x));
  };
  repeat = function(n, x) {
    switch(arguments.length) {
      case 1:
        return repeat__1.call(this, n);
      case 2:
        return repeat__2.call(this, n, x);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeat.cljs$core$IFn$_invoke$arity$1 = repeat__1;
  repeat.cljs$core$IFn$_invoke$arity$2 = repeat__2;
  return repeat;
}();
cljs.core.replicate = function replicate(n, x) {
  return cljs.core.take.call(null, n, cljs.core.repeat.call(null, x));
};
cljs.core.repeatedly = function() {
  var repeatedly = null;
  var repeatedly__1 = function(f) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, f.call(null), repeatedly.call(null, f));
    }, null, null);
  };
  var repeatedly__2 = function(n, f) {
    return cljs.core.take.call(null, n, repeatedly.call(null, f));
  };
  repeatedly = function(n, f) {
    switch(arguments.length) {
      case 1:
        return repeatedly__1.call(this, n);
      case 2:
        return repeatedly__2.call(this, n, f);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  repeatedly.cljs$core$IFn$_invoke$arity$1 = repeatedly__1;
  repeatedly.cljs$core$IFn$_invoke$arity$2 = repeatedly__2;
  return repeatedly;
}();
cljs.core.iterate = function iterate(f, x) {
  return cljs.core.cons.call(null, x, new cljs.core.LazySeq(null, function() {
    return iterate.call(null, f, f.call(null, x));
  }, null, null));
};
cljs.core.interleave = function() {
  var interleave = null;
  var interleave__2 = function(c1, c2) {
    return new cljs.core.LazySeq(null, function() {
      var s1 = cljs.core.seq.call(null, c1);
      var s2 = cljs.core.seq.call(null, c2);
      if (s1 && s2) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, s1), cljs.core.cons.call(null, cljs.core.first.call(null, s2), interleave.call(null, cljs.core.rest.call(null, s1), cljs.core.rest.call(null, s2))));
      } else {
        return null;
      }
    }, null, null);
  };
  var interleave__3 = function() {
    var G__6755__delegate = function(c1, c2, colls) {
      return new cljs.core.LazySeq(null, function() {
        var ss = cljs.core.map.call(null, cljs.core.seq, cljs.core.conj.call(null, colls, c2, c1));
        if (cljs.core.every_QMARK_.call(null, cljs.core.identity, ss)) {
          return cljs.core.concat.call(null, cljs.core.map.call(null, cljs.core.first, ss), cljs.core.apply.call(null, interleave, cljs.core.map.call(null, cljs.core.rest, ss)));
        } else {
          return null;
        }
      }, null, null);
    };
    var G__6755 = function(c1, c2, var_args) {
      var colls = null;
      if (arguments.length > 2) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
      }
      return G__6755__delegate.call(this, c1, c2, colls);
    };
    G__6755.cljs$lang$maxFixedArity = 2;
    G__6755.cljs$lang$applyTo = function(arglist__6756) {
      var c1 = cljs.core.first(arglist__6756);
      arglist__6756 = cljs.core.next(arglist__6756);
      var c2 = cljs.core.first(arglist__6756);
      var colls = cljs.core.rest(arglist__6756);
      return G__6755__delegate(c1, c2, colls);
    };
    G__6755.cljs$core$IFn$_invoke$arity$variadic = G__6755__delegate;
    return G__6755;
  }();
  interleave = function(c1, c2, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return interleave__2.call(this, c1, c2);
      default:
        return interleave__3.cljs$core$IFn$_invoke$arity$variadic(c1, c2, cljs.core.array_seq(arguments, 2));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  interleave.cljs$lang$maxFixedArity = 2;
  interleave.cljs$lang$applyTo = interleave__3.cljs$lang$applyTo;
  interleave.cljs$core$IFn$_invoke$arity$2 = interleave__2;
  interleave.cljs$core$IFn$_invoke$arity$variadic = interleave__3.cljs$core$IFn$_invoke$arity$variadic;
  return interleave;
}();
cljs.core.interpose = function interpose(sep, coll) {
  return cljs.core.drop.call(null, 1, cljs.core.interleave.call(null, cljs.core.repeat.call(null, sep), coll));
};
cljs.core.flatten1 = function flatten1(colls) {
  var cat = function cat(coll, colls__$1) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var coll__$1 = temp__4124__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, coll__$1), cat.call(null, cljs.core.rest.call(null, coll__$1), colls__$1));
      } else {
        if (cljs.core.seq.call(null, colls__$1)) {
          return cat.call(null, cljs.core.first.call(null, colls__$1), cljs.core.rest.call(null, colls__$1));
        } else {
          return null;
        }
      }
    }, null, null);
  };
  return cat.call(null, null, colls);
};
cljs.core.mapcat = function() {
  var mapcat = null;
  var mapcat__1 = function(f) {
    return cljs.core.comp.call(null, cljs.core.map.call(null, f), cljs.core.cat);
  };
  var mapcat__2 = function() {
    var G__6757__delegate = function(f, colls) {
      return cljs.core.apply.call(null, cljs.core.concat, cljs.core.apply.call(null, cljs.core.map, f, colls));
    };
    var G__6757 = function(f, var_args) {
      var colls = null;
      if (arguments.length > 1) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__6757__delegate.call(this, f, colls);
    };
    G__6757.cljs$lang$maxFixedArity = 1;
    G__6757.cljs$lang$applyTo = function(arglist__6758) {
      var f = cljs.core.first(arglist__6758);
      var colls = cljs.core.rest(arglist__6758);
      return G__6757__delegate(f, colls);
    };
    G__6757.cljs$core$IFn$_invoke$arity$variadic = G__6757__delegate;
    return G__6757;
  }();
  mapcat = function(f, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 1:
        return mapcat__1.call(this, f);
      default:
        return mapcat__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapcat.cljs$lang$maxFixedArity = 1;
  mapcat.cljs$lang$applyTo = mapcat__2.cljs$lang$applyTo;
  mapcat.cljs$core$IFn$_invoke$arity$1 = mapcat__1;
  mapcat.cljs$core$IFn$_invoke$arity$variadic = mapcat__2.cljs$core$IFn$_invoke$arity$variadic;
  return mapcat;
}();
cljs.core.filter = function() {
  var filter = null;
  var filter__1 = function(pred) {
    return function(f1) {
      return function() {
        var G__6759 = null;
        var G__6759__0 = function() {
          return f1.call(null);
        };
        var G__6759__1 = function(result) {
          return f1.call(null, result);
        };
        var G__6759__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return f1.call(null, result, input);
          } else {
            return result;
          }
        };
        G__6759 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__6759__0.call(this);
            case 1:
              return G__6759__1.call(this, result);
            case 2:
              return G__6759__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__6759.cljs$core$IFn$_invoke$arity$0 = G__6759__0;
        G__6759.cljs$core$IFn$_invoke$arity$1 = G__6759__1;
        G__6759.cljs$core$IFn$_invoke$arity$2 = G__6759__2;
        return G__6759;
      }();
    };
  };
  var filter__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, s)) {
          var c = cljs.core.chunk_first.call(null, s);
          var size = cljs.core.count.call(null, c);
          var b = cljs.core.chunk_buffer.call(null, size);
          var n__4508__auto___6760 = size;
          var i_6761 = 0;
          while (true) {
            if (i_6761 < n__4508__auto___6760) {
              if (cljs.core.truth_(pred.call(null, cljs.core._nth.call(null, c, i_6761)))) {
                cljs.core.chunk_append.call(null, b, cljs.core._nth.call(null, c, i_6761));
              } else {
              }
              var G__6762 = i_6761 + 1;
              i_6761 = G__6762;
              continue;
            } else {
            }
            break;
          }
          return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b), filter.call(null, pred, cljs.core.chunk_rest.call(null, s)));
        } else {
          var f = cljs.core.first.call(null, s);
          var r = cljs.core.rest.call(null, s);
          if (cljs.core.truth_(pred.call(null, f))) {
            return cljs.core.cons.call(null, f, filter.call(null, pred, r));
          } else {
            return filter.call(null, pred, r);
          }
        }
      } else {
        return null;
      }
    }, null, null);
  };
  filter = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return filter__1.call(this, pred);
      case 2:
        return filter__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  filter.cljs$core$IFn$_invoke$arity$1 = filter__1;
  filter.cljs$core$IFn$_invoke$arity$2 = filter__2;
  return filter;
}();
cljs.core.remove = function() {
  var remove = null;
  var remove__1 = function(pred) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred));
  };
  var remove__2 = function(pred, coll) {
    return cljs.core.filter.call(null, cljs.core.complement.call(null, pred), coll);
  };
  remove = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return remove__1.call(this, pred);
      case 2:
        return remove__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  remove.cljs$core$IFn$_invoke$arity$1 = remove__1;
  remove.cljs$core$IFn$_invoke$arity$2 = remove__2;
  return remove;
}();
cljs.core.tree_seq = function tree_seq(branch_QMARK_, children, root) {
  var walk = function walk(node) {
    return new cljs.core.LazySeq(null, function() {
      return cljs.core.cons.call(null, node, cljs.core.truth_(branch_QMARK_.call(null, node)) ? cljs.core.mapcat.call(null, walk, children.call(null, node)) : null);
    }, null, null);
  };
  return walk.call(null, root);
};
cljs.core.flatten = function flatten(x) {
  return cljs.core.filter.call(null, function(p1__6763_SHARP_) {
    return!cljs.core.sequential_QMARK_.call(null, p1__6763_SHARP_);
  }, cljs.core.rest.call(null, cljs.core.tree_seq.call(null, cljs.core.sequential_QMARK_, cljs.core.seq, x)));
};
cljs.core.into = function() {
  var into = null;
  var into__2 = function(to, from) {
    if (!(to == null)) {
      if (function() {
        var G__6766 = to;
        if (G__6766) {
          var bit__4295__auto__ = G__6766.cljs$lang$protocol_mask$partition1$ & 4;
          if (bit__4295__auto__ || G__6766.cljs$core$IEditableCollection$) {
            return true;
          } else {
            return false;
          }
        } else {
          return false;
        }
      }()) {
        return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
      } else {
        return cljs.core.reduce.call(null, cljs.core._conj, to, from);
      }
    } else {
      return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, from);
    }
  };
  var into__3 = function(to, xform, from) {
    if (function() {
      var G__6767 = to;
      if (G__6767) {
        var bit__4295__auto__ = G__6767.cljs$lang$protocol_mask$partition1$ & 4;
        if (bit__4295__auto__ || G__6767.cljs$core$IEditableCollection$) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }()) {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.transduce.call(null, xform, cljs.core.conj_BANG_, cljs.core.transient$.call(null, to), from)), cljs.core.meta.call(null, to));
    } else {
      return cljs.core.transduce.call(null, xform, cljs.core.conj, to, from);
    }
  };
  into = function(to, xform, from) {
    switch(arguments.length) {
      case 2:
        return into__2.call(this, to, xform);
      case 3:
        return into__3.call(this, to, xform, from);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  into.cljs$core$IFn$_invoke$arity$2 = into__2;
  into.cljs$core$IFn$_invoke$arity$3 = into__3;
  return into;
}();
cljs.core.mapv = function() {
  var mapv = null;
  var mapv__2 = function(f, coll) {
    return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
      return cljs.core.conj_BANG_.call(null, v, f.call(null, o));
    }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
  };
  var mapv__3 = function(f, c1, c2) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2));
  };
  var mapv__4 = function(f, c1, c2, c3) {
    return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.map.call(null, f, c1, c2, c3));
  };
  var mapv__5 = function() {
    var G__6768__delegate = function(f, c1, c2, c3, colls) {
      return cljs.core.into.call(null, cljs.core.PersistentVector.EMPTY, cljs.core.apply.call(null, cljs.core.map, f, c1, c2, c3, colls));
    };
    var G__6768 = function(f, c1, c2, c3, var_args) {
      var colls = null;
      if (arguments.length > 4) {
        colls = cljs.core.array_seq(Array.prototype.slice.call(arguments, 4), 0);
      }
      return G__6768__delegate.call(this, f, c1, c2, c3, colls);
    };
    G__6768.cljs$lang$maxFixedArity = 4;
    G__6768.cljs$lang$applyTo = function(arglist__6769) {
      var f = cljs.core.first(arglist__6769);
      arglist__6769 = cljs.core.next(arglist__6769);
      var c1 = cljs.core.first(arglist__6769);
      arglist__6769 = cljs.core.next(arglist__6769);
      var c2 = cljs.core.first(arglist__6769);
      arglist__6769 = cljs.core.next(arglist__6769);
      var c3 = cljs.core.first(arglist__6769);
      var colls = cljs.core.rest(arglist__6769);
      return G__6768__delegate(f, c1, c2, c3, colls);
    };
    G__6768.cljs$core$IFn$_invoke$arity$variadic = G__6768__delegate;
    return G__6768;
  }();
  mapv = function(f, c1, c2, c3, var_args) {
    var colls = var_args;
    switch(arguments.length) {
      case 2:
        return mapv__2.call(this, f, c1);
      case 3:
        return mapv__3.call(this, f, c1, c2);
      case 4:
        return mapv__4.call(this, f, c1, c2, c3);
      default:
        return mapv__5.cljs$core$IFn$_invoke$arity$variadic(f, c1, c2, c3, cljs.core.array_seq(arguments, 4));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  mapv.cljs$lang$maxFixedArity = 4;
  mapv.cljs$lang$applyTo = mapv__5.cljs$lang$applyTo;
  mapv.cljs$core$IFn$_invoke$arity$2 = mapv__2;
  mapv.cljs$core$IFn$_invoke$arity$3 = mapv__3;
  mapv.cljs$core$IFn$_invoke$arity$4 = mapv__4;
  mapv.cljs$core$IFn$_invoke$arity$variadic = mapv__5.cljs$core$IFn$_invoke$arity$variadic;
  return mapv;
}();
cljs.core.filterv = function filterv(pred, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(v, o) {
    if (cljs.core.truth_(pred.call(null, o))) {
      return cljs.core.conj_BANG_.call(null, v, o);
    } else {
      return v;
    }
  }, cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.partition = function() {
  var partition = null;
  var partition__2 = function(n, coll) {
    return partition.call(null, n, n, coll);
  };
  var partition__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, cljs.core.drop.call(null, step, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  var partition__4 = function(n, step, pad, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var p = cljs.core.take.call(null, n, s);
        if (n === cljs.core.count.call(null, p)) {
          return cljs.core.cons.call(null, p, partition.call(null, n, step, pad, cljs.core.drop.call(null, step, s)));
        } else {
          return cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.core.take.call(null, n, cljs.core.concat.call(null, p, pad)));
        }
      } else {
        return null;
      }
    }, null, null);
  };
  partition = function(n, step, pad, coll) {
    switch(arguments.length) {
      case 2:
        return partition__2.call(this, n, step);
      case 3:
        return partition__3.call(this, n, step, pad);
      case 4:
        return partition__4.call(this, n, step, pad, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition.cljs$core$IFn$_invoke$arity$2 = partition__2;
  partition.cljs$core$IFn$_invoke$arity$3 = partition__3;
  partition.cljs$core$IFn$_invoke$arity$4 = partition__4;
  return partition;
}();
cljs.core.get_in = function() {
  var get_in = null;
  var get_in__2 = function(m, ks) {
    return get_in.call(null, m, ks, null);
  };
  var get_in__3 = function(m, ks, not_found) {
    var sentinel = cljs.core.lookup_sentinel;
    var m__$1 = m;
    var ks__$1 = cljs.core.seq.call(null, ks);
    while (true) {
      if (ks__$1) {
        if (!function() {
          var G__6771 = m__$1;
          if (G__6771) {
            var bit__4302__auto__ = G__6771.cljs$lang$protocol_mask$partition0$ & 256;
            if (bit__4302__auto__ || G__6771.cljs$core$ILookup$) {
              return true;
            } else {
              if (!G__6771.cljs$lang$protocol_mask$partition0$) {
                return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__6771);
              } else {
                return false;
              }
            }
          } else {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.ILookup, G__6771);
          }
        }()) {
          return not_found;
        } else {
          var m__$2 = cljs.core.get.call(null, m__$1, cljs.core.first.call(null, ks__$1), sentinel);
          if (sentinel === m__$2) {
            return not_found;
          } else {
            var G__6772 = sentinel;
            var G__6773 = m__$2;
            var G__6774 = cljs.core.next.call(null, ks__$1);
            sentinel = G__6772;
            m__$1 = G__6773;
            ks__$1 = G__6774;
            continue;
          }
        }
      } else {
        return m__$1;
      }
      break;
    }
  };
  get_in = function(m, ks, not_found) {
    switch(arguments.length) {
      case 2:
        return get_in__2.call(this, m, ks);
      case 3:
        return get_in__3.call(this, m, ks, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  get_in.cljs$core$IFn$_invoke$arity$2 = get_in__2;
  get_in.cljs$core$IFn$_invoke$arity$3 = get_in__3;
  return get_in;
}();
cljs.core.assoc_in = function assoc_in(m, p__6775, v) {
  var vec__6777 = p__6775;
  var k = cljs.core.nth.call(null, vec__6777, 0, null);
  var ks = cljs.core.nthnext.call(null, vec__6777, 1);
  if (ks) {
    return cljs.core.assoc.call(null, m, k, assoc_in.call(null, cljs.core.get.call(null, m, k), ks, v));
  } else {
    return cljs.core.assoc.call(null, m, k, v);
  }
};
cljs.core.update_in = function() {
  var update_in = null;
  var update_in__3 = function(m, p__6778, f) {
    var vec__6788 = p__6778;
    var k = cljs.core.nth.call(null, vec__6788, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6788, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k)));
    }
  };
  var update_in__4 = function(m, p__6779, f, a) {
    var vec__6789 = p__6779;
    var k = cljs.core.nth.call(null, vec__6789, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6789, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a));
    }
  };
  var update_in__5 = function(m, p__6780, f, a, b) {
    var vec__6790 = p__6780;
    var k = cljs.core.nth.call(null, vec__6790, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6790, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b));
    }
  };
  var update_in__6 = function(m, p__6781, f, a, b, c) {
    var vec__6791 = p__6781;
    var k = cljs.core.nth.call(null, vec__6791, 0, null);
    var ks = cljs.core.nthnext.call(null, vec__6791, 1);
    if (ks) {
      return cljs.core.assoc.call(null, m, k, update_in.call(null, cljs.core.get.call(null, m, k), ks, f, a, b, c));
    } else {
      return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), a, b, c));
    }
  };
  var update_in__7 = function() {
    var G__6793__delegate = function(m, p__6782, f, a, b, c, args) {
      var vec__6792 = p__6782;
      var k = cljs.core.nth.call(null, vec__6792, 0, null);
      var ks = cljs.core.nthnext.call(null, vec__6792, 1);
      if (ks) {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, update_in, cljs.core.get.call(null, m, k), ks, f, a, b, c, args));
      } else {
        return cljs.core.assoc.call(null, m, k, cljs.core.apply.call(null, f, cljs.core.get.call(null, m, k), a, b, c, args));
      }
    };
    var G__6793 = function(m, p__6782, f, a, b, c, var_args) {
      var args = null;
      if (arguments.length > 6) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 6), 0);
      }
      return G__6793__delegate.call(this, m, p__6782, f, a, b, c, args);
    };
    G__6793.cljs$lang$maxFixedArity = 6;
    G__6793.cljs$lang$applyTo = function(arglist__6794) {
      var m = cljs.core.first(arglist__6794);
      arglist__6794 = cljs.core.next(arglist__6794);
      var p__6782 = cljs.core.first(arglist__6794);
      arglist__6794 = cljs.core.next(arglist__6794);
      var f = cljs.core.first(arglist__6794);
      arglist__6794 = cljs.core.next(arglist__6794);
      var a = cljs.core.first(arglist__6794);
      arglist__6794 = cljs.core.next(arglist__6794);
      var b = cljs.core.first(arglist__6794);
      arglist__6794 = cljs.core.next(arglist__6794);
      var c = cljs.core.first(arglist__6794);
      var args = cljs.core.rest(arglist__6794);
      return G__6793__delegate(m, p__6782, f, a, b, c, args);
    };
    G__6793.cljs$core$IFn$_invoke$arity$variadic = G__6793__delegate;
    return G__6793;
  }();
  update_in = function(m, p__6782, f, a, b, c, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 3:
        return update_in__3.call(this, m, p__6782, f);
      case 4:
        return update_in__4.call(this, m, p__6782, f, a);
      case 5:
        return update_in__5.call(this, m, p__6782, f, a, b);
      case 6:
        return update_in__6.call(this, m, p__6782, f, a, b, c);
      default:
        return update_in__7.cljs$core$IFn$_invoke$arity$variadic(m, p__6782, f, a, b, c, cljs.core.array_seq(arguments, 6));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  update_in.cljs$lang$maxFixedArity = 6;
  update_in.cljs$lang$applyTo = update_in__7.cljs$lang$applyTo;
  update_in.cljs$core$IFn$_invoke$arity$3 = update_in__3;
  update_in.cljs$core$IFn$_invoke$arity$4 = update_in__4;
  update_in.cljs$core$IFn$_invoke$arity$5 = update_in__5;
  update_in.cljs$core$IFn$_invoke$arity$6 = update_in__6;
  update_in.cljs$core$IFn$_invoke$arity$variadic = update_in__7.cljs$core$IFn$_invoke$arity$variadic;
  return update_in;
}();
cljs.core.VectorNode = function(edit, arr) {
  this.edit = edit;
  this.arr = arr;
};
cljs.core.VectorNode.cljs$lang$type = true;
cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";
cljs.core.VectorNode.cljs$lang$ctorPrWriter = function(this__4218__auto__, writer__4219__auto__, opts__4220__auto__) {
  return cljs.core._write.call(null, writer__4219__auto__, "cljs.core/VectorNode");
};
cljs.core.__GT_VectorNode = function __GT_VectorNode(edit, arr) {
  return new cljs.core.VectorNode(edit, arr);
};
cljs.core.pv_fresh_node = function pv_fresh_node(edit) {
  return new cljs.core.VectorNode(edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
};
cljs.core.pv_aget = function pv_aget(node, idx) {
  return node.arr[idx];
};
cljs.core.pv_aset = function pv_aset(node, idx, val) {
  return node.arr[idx] = val;
};
cljs.core.pv_clone_node = function pv_clone_node(node) {
  return new cljs.core.VectorNode(node.edit, cljs.core.aclone.call(null, node.arr));
};
cljs.core.tail_off = function tail_off(pv) {
  var cnt = pv.cnt;
  if (cnt < 32) {
    return 0;
  } else {
    return cnt - 1 >>> 5 << 5;
  }
};
cljs.core.new_path = function new_path(edit, level, node) {
  var ll = level;
  var ret = node;
  while (true) {
    if (ll === 0) {
      return ret;
    } else {
      var embed = ret;
      var r = cljs.core.pv_fresh_node.call(null, edit);
      var _ = cljs.core.pv_aset.call(null, r, 0, embed);
      var G__6795 = ll - 5;
      var G__6796 = r;
      ll = G__6795;
      ret = G__6796;
      continue;
    }
    break;
  }
};
cljs.core.push_tail = function push_tail(pv, level, parent, tailnode) {
  var ret = cljs.core.pv_clone_node.call(null, parent);
  var subidx = pv.cnt - 1 >>> level & 31;
  if (5 === level) {
    cljs.core.pv_aset.call(null, ret, subidx, tailnode);
    return ret;
  } else {
    var child = cljs.core.pv_aget.call(null, parent, subidx);
    if (!(child == null)) {
      var node_to_insert = push_tail.call(null, pv, level - 5, child, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    } else {
      var node_to_insert = cljs.core.new_path.call(null, null, level - 5, tailnode);
      cljs.core.pv_aset.call(null, ret, subidx, node_to_insert);
      return ret;
    }
  }
};
cljs.core.vector_index_out_of_bounds = function vector_index_out_of_bounds(i, cnt) {
  throw new Error("No item " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(i) + " in vector of length " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt));
};
cljs.core.first_array_for_longvec = function first_array_for_longvec(pv) {
  var node = pv.root;
  var level = pv.shift;
  while (true) {
    if (level > 0) {
      var G__6797 = cljs.core.pv_aget.call(null, node, 0);
      var G__6798 = level - 5;
      node = G__6797;
      level = G__6798;
      continue;
    } else {
      return node.arr;
    }
    break;
  }
};
cljs.core.unchecked_array_for = function unchecked_array_for(pv, i) {
  if (i >= cljs.core.tail_off.call(null, pv)) {
    return pv.tail;
  } else {
    var node = pv.root;
    var level = pv.shift;
    while (true) {
      if (level > 0) {
        var G__6799 = cljs.core.pv_aget.call(null, node, i >>> level & 31);
        var G__6800 = level - 5;
        node = G__6799;
        level = G__6800;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.array_for = function array_for(pv, i) {
  if (0 <= i && i < pv.cnt) {
    return cljs.core.unchecked_array_for.call(null, pv, i);
  } else {
    return cljs.core.vector_index_out_of_bounds.call(null, i, pv.cnt);
  }
};
cljs.core.do_assoc = function do_assoc(pv, level, node, i, val) {
  var ret = cljs.core.pv_clone_node.call(null, node);
  if (level === 0) {
    cljs.core.pv_aset.call(null, ret, i & 31, val);
    return ret;
  } else {
    var subidx = i >>> level & 31;
    cljs.core.pv_aset.call(null, ret, subidx, do_assoc.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx), i, val));
    return ret;
  }
};
cljs.core.pop_tail = function pop_tail(pv, level, node) {
  var subidx = pv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = pop_tail.call(null, pv, level - 5, cljs.core.pv_aget.call(null, node, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, new_child);
      return ret;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      var ret = cljs.core.pv_clone_node.call(null, node);
      cljs.core.pv_aset.call(null, ret, subidx, null);
      return ret;
    }
  }
};
cljs.core.PersistentVector = function(meta, cnt, shift, root, tail, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 167668511;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentVector.cljs$lang$type = true;
cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";
cljs.core.PersistentVector.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentVector");
};
cljs.core.PersistentVector.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentVector.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, j + i, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__6802 = j + 1;
              var G__6803 = init__$3;
              j = G__6802;
              init__$2 = G__6803;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6804 = i + len;
        var G__6805 = init__$2;
        i = G__6804;
        init__$1 = G__6805;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
};
cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core.unchecked_array_for.call(null, coll__$1, n)[n & 31];
  } else {
    return not_found;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    if (cljs.core.tail_off.call(null, coll__$1) <= n) {
      var new_tail = cljs.core.aclone.call(null, self__.tail);
      new_tail[n & 31] = val;
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, new_tail, null);
    } else {
      return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, cljs.core.do_assoc.call(null, coll__$1, self__.shift, self__.root, n, val), self__.tail, null);
    }
  } else {
    if (n === self__.cnt) {
      return cljs.core._conj.call(null, coll__$1, val);
    } else {
      throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds  [0," + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt) + "]");
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentVector(self__.meta, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 0);
};
cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, coll__$1, 1);
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core._nth.call(null, coll__$1, self__.cnt - 1);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    throw new Error("Can't pop empty vector");
  } else {
    if (1 === self__.cnt) {
      return cljs.core._with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
    } else {
      if (1 < self__.cnt - cljs.core.tail_off.call(null, coll__$1)) {
        return new cljs.core.PersistentVector(self__.meta, self__.cnt - 1, self__.shift, self__.root, self__.tail.slice(0, -1), null);
      } else {
        var new_tail = cljs.core.unchecked_array_for.call(null, coll__$1, self__.cnt - 2);
        var nr = cljs.core.pop_tail.call(null, coll__$1, self__.shift, self__.root);
        var new_root = nr == null ? cljs.core.PersistentVector.EMPTY_NODE : nr;
        var cnt_1 = self__.cnt - 1;
        if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift - 5, cljs.core.pv_aget.call(null, new_root, 0), new_tail, null);
        } else {
          return new cljs.core.PersistentVector(self__.meta, cnt_1, self__.shift, new_root, new_tail, null);
        }
      }
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return new cljs.core.RSeq(coll__$1, self__.cnt - 1, null);
  } else {
    return null;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientVector(self__.cnt, self__.shift, cljs.core.tv_editable_root.call(null, self__.root), cljs.core.tv_editable_tail.call(null, self__.tail));
};
cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = function(v, f) {
  var self__ = this;
  var v__$1 = this;
  return cljs.core.ci_reduce.call(null, v__$1, f);
};
cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = function(v, f, init) {
  var self__ = this;
  var v__$1 = this;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < self__.cnt) {
      var arr = cljs.core.unchecked_array_for.call(null, v__$1, i);
      var len = arr.length;
      var init__$2 = function() {
        var j = 0;
        var init__$2 = init__$1;
        while (true) {
          if (j < len) {
            var init__$3 = f.call(null, init__$2, arr[j]);
            if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
              return init__$3;
            } else {
              var G__6806 = j + 1;
              var G__6807 = init__$3;
              j = G__6806;
              init__$2 = G__6807;
              continue;
            }
          } else {
            return init__$2;
          }
          break;
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6808 = i + len;
        var G__6809 = init__$2;
        i = G__6808;
        init__$1 = G__6809;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, k, v);
  } else {
    throw new Error("Vector's key for assoc must be a number.");
  }
};
cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt === 0) {
    return null;
  } else {
    if (self__.cnt <= 32) {
      return new cljs.core.IndexedSeq(self__.tail, 0);
    } else {
      return cljs.core.chunked_seq.call(null, coll__$1, cljs.core.first_array_for_longvec.call(null, coll__$1), 0, 0);
    }
  }
};
cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(meta__$1, self__.cnt, self__.shift, self__.root, self__.tail, self__.__hash);
};
cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt - cljs.core.tail_off.call(null, coll__$1) < 32) {
    var len = self__.tail.length;
    var new_tail = new Array(len + 1);
    var n__4508__auto___6810 = len;
    var i_6811 = 0;
    while (true) {
      if (i_6811 < n__4508__auto___6810) {
        new_tail[i_6811] = self__.tail[i_6811];
        var G__6812 = i_6811 + 1;
        i_6811 = G__6812;
        continue;
      } else {
      }
      break;
    }
    new_tail[len] = o;
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, self__.shift, self__.root, new_tail, null);
  } else {
    var root_overflow_QMARK_ = self__.cnt >>> 5 > 1 << self__.shift;
    var new_shift = root_overflow_QMARK_ ? self__.shift + 5 : self__.shift;
    var new_root = root_overflow_QMARK_ ? function() {
      var n_r = cljs.core.pv_fresh_node.call(null, null);
      cljs.core.pv_aset.call(null, n_r, 0, self__.root);
      cljs.core.pv_aset.call(null, n_r, 1, cljs.core.new_path.call(null, null, self__.shift, new cljs.core.VectorNode(null, self__.tail)));
      return n_r;
    }() : cljs.core.push_tail.call(null, coll__$1, self__.shift, self__.root, new cljs.core.VectorNode(null, self__.tail));
    return new cljs.core.PersistentVector(self__.meta, self__.cnt + 1, new_shift, new_root, [o], null);
  }
};
cljs.core.PersistentVector.prototype.call = function() {
  var G__6813 = null;
  var G__6813__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__6813__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__6813 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6813__2.call(this, self__, k);
      case 3:
        return G__6813__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6813.cljs$core$IFn$_invoke$arity$2 = G__6813__2;
  G__6813.cljs$core$IFn$_invoke$arity$3 = G__6813__3;
  return G__6813;
}();
cljs.core.PersistentVector.prototype.apply = function(self__, args6801) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6801)));
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentVector = function __GT_PersistentVector(meta, cnt, shift, root, tail, __hash) {
  return new cljs.core.PersistentVector(meta, cnt, shift, root, tail, __hash);
};
cljs.core.PersistentVector.EMPTY_NODE = new cljs.core.VectorNode(null, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
cljs.core.PersistentVector.EMPTY = new cljs.core.PersistentVector(null, 0, 5, cljs.core.PersistentVector.EMPTY_NODE, [], 0);
cljs.core.PersistentVector.fromArray = function(xs, no_clone) {
  var l = xs.length;
  var xs__$1 = no_clone ? xs : cljs.core.aclone.call(null, xs);
  if (l < 32) {
    return new cljs.core.PersistentVector(null, l, 5, cljs.core.PersistentVector.EMPTY_NODE, xs__$1, null);
  } else {
    var node = xs__$1.slice(0, 32);
    var v = new cljs.core.PersistentVector(null, 32, 5, cljs.core.PersistentVector.EMPTY_NODE, node, null);
    var i = 32;
    var out = cljs.core._as_transient.call(null, v);
    while (true) {
      if (i < l) {
        var G__6814 = i + 1;
        var G__6815 = cljs.core.conj_BANG_.call(null, out, xs__$1[i]);
        i = G__6814;
        out = G__6815;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.vec = function vec(coll) {
  return cljs.core._persistent_BANG_.call(null, cljs.core.reduce.call(null, cljs.core._conj_BANG_, cljs.core._as_transient.call(null, cljs.core.PersistentVector.EMPTY), coll));
};
cljs.core.vector = function() {
  var vector__delegate = function(args) {
    if (args instanceof cljs.core.IndexedSeq && args.i === 0) {
      return cljs.core.PersistentVector.fromArray(args.arr, true);
    } else {
      return cljs.core.vec.call(null, args);
    }
  };
  var vector = function(var_args) {
    var args = null;
    if (arguments.length > 0) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return vector__delegate.call(this, args);
  };
  vector.cljs$lang$maxFixedArity = 0;
  vector.cljs$lang$applyTo = function(arglist__6816) {
    var args = cljs.core.seq(arglist__6816);
    return vector__delegate(args);
  };
  vector.cljs$core$IFn$_invoke$arity$variadic = vector__delegate;
  return vector;
}();
cljs.core.ChunkedSeq = function(vec, node, i, off, meta, __hash) {
  this.vec = vec;
  this.node = node;
  this.i = i;
  this.off = off;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375020;
  this.cljs$lang$protocol_mask$partition1$ = 1536;
};
cljs.core.ChunkedSeq.cljs$lang$type = true;
cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";
cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ChunkedSeq");
};
cljs.core.ChunkedSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ChunkedSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return null;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_next.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, cljs.core.subvec.call(null, self__.vec, self__.i + self__.off, cljs.core.count.call(null, self__.vec)), f, start);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.node[self__.off];
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.off + 1 < self__.node.length) {
    var s = cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off + 1);
    if (s == null) {
      return cljs.core.List.EMPTY;
    } else {
      return s;
    }
  } else {
    return cljs.core._chunked_rest.call(null, coll__$1);
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.array_chunk.call(null, self__.node, self__.off);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, m) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.chunked_seq.call(null, self__.vec, self__.node, self__.i, self__.off, m);
};
cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var end = self__.i + self__.node.length;
  if (end < cljs.core._count.call(null, self__.vec)) {
    return cljs.core.chunked_seq.call(null, self__.vec, cljs.core.unchecked_array_for.call(null, self__.vec, end), end, 0);
  } else {
    return null;
  }
};
cljs.core.__GT_ChunkedSeq = function __GT_ChunkedSeq(vec, node, i, off, meta, __hash) {
  return new cljs.core.ChunkedSeq(vec, node, i, off, meta, __hash);
};
cljs.core.chunked_seq = function() {
  var chunked_seq = null;
  var chunked_seq__3 = function(vec, i, off) {
    return new cljs.core.ChunkedSeq(vec, cljs.core.array_for.call(null, vec, i), i, off, null, null);
  };
  var chunked_seq__4 = function(vec, node, i, off) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, null, null);
  };
  var chunked_seq__5 = function(vec, node, i, off, meta) {
    return new cljs.core.ChunkedSeq(vec, node, i, off, meta, null);
  };
  chunked_seq = function(vec, node, i, off, meta) {
    switch(arguments.length) {
      case 3:
        return chunked_seq__3.call(this, vec, node, i);
      case 4:
        return chunked_seq__4.call(this, vec, node, i, off);
      case 5:
        return chunked_seq__5.call(this, vec, node, i, off, meta);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  chunked_seq.cljs$core$IFn$_invoke$arity$3 = chunked_seq__3;
  chunked_seq.cljs$core$IFn$_invoke$arity$4 = chunked_seq__4;
  chunked_seq.cljs$core$IFn$_invoke$arity$5 = chunked_seq__5;
  return chunked_seq;
}();
cljs.core.Subvec = function(meta, v, start, end, __hash) {
  this.meta = meta;
  this.v = v;
  this.start = start;
  this.end = end;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 166617887;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Subvec.cljs$lang$type = true;
cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";
cljs.core.Subvec.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Subvec");
};
cljs.core.Subvec.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Subvec.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return cljs.core.vector_index_out_of_bounds.call(null, n, self__.end - self__.start);
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n);
  }
};
cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (n < 0 || self__.end <= self__.start + n) {
    return not_found;
  } else {
    return cljs.core._nth.call(null, self__.v, self__.start + n, not_found);
  }
};
cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(coll, n, val) {
  var self__ = this;
  var coll__$1 = this;
  var v_pos = self__.start + n;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core.assoc.call(null, self__.v, v_pos, val), self__.start, function() {
    var x__3946__auto__ = self__.end;
    var y__3947__auto__ = v_pos + 1;
    return x__3946__auto__ > y__3947__auto__ ? x__3946__auto__ : y__3947__auto__;
  }(), null);
};
cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Subvec(self__.meta, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.end - self__.start;
};
cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._nth.call(null, self__.v, self__.end - 1);
};
cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.start === self__.end) {
    throw new Error("Can't pop empty vector");
  } else {
    return cljs.core.build_subvec.call(null, self__.meta, self__.v, self__.start, self__.end - 1, null);
  }
};
cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.start === self__.end)) {
    return new cljs.core.RSeq(coll__$1, self__.end - self__.start - 1, null);
  } else {
    return null;
  }
};
cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentVector.EMPTY, self__.meta);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f);
};
cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.ci_reduce.call(null, coll__$1, f, start__$1);
};
cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, key, val) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n.call(null, coll__$1, key, val);
  } else {
    throw new Error("Subvec's key for assoc must be a number.");
  }
};
cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var subvec_seq = function(coll__$1) {
    return function subvec_seq(i) {
      if (i === self__.end) {
        return null;
      } else {
        return cljs.core.cons.call(null, cljs.core._nth.call(null, self__.v, i), new cljs.core.LazySeq(null, function(coll__$1) {
          return function() {
            return subvec_seq.call(null, i + 1);
          };
        }(coll__$1), null, null));
      }
    };
  }(coll__$1);
  return subvec_seq.call(null, self__.start);
};
cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, meta__$1, self__.v, self__.start, self__.end, self__.__hash);
};
cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.build_subvec.call(null, self__.meta, cljs.core._assoc_n.call(null, self__.v, self__.end, o), self__.start, self__.end + 1, null);
};
cljs.core.Subvec.prototype.call = function() {
  var G__6818 = null;
  var G__6818__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
  };
  var G__6818__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
  };
  G__6818 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6818__2.call(this, self__, k);
      case 3:
        return G__6818__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6818.cljs$core$IFn$_invoke$arity$2 = G__6818__2;
  G__6818.cljs$core$IFn$_invoke$arity$3 = G__6818__3;
  return G__6818;
}();
cljs.core.Subvec.prototype.apply = function(self__, args6817) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6817)));
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$2(null, k);
};
cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$IIndexed$_nth$arity$3(null, k, not_found);
};
cljs.core.__GT_Subvec = function __GT_Subvec(meta, v, start, end, __hash) {
  return new cljs.core.Subvec(meta, v, start, end, __hash);
};
cljs.core.build_subvec = function build_subvec(meta, v, start, end, __hash) {
  while (true) {
    if (v instanceof cljs.core.Subvec) {
      var G__6819 = meta;
      var G__6820 = v.v;
      var G__6821 = v.start + start;
      var G__6822 = v.start + end;
      var G__6823 = __hash;
      meta = G__6819;
      v = G__6820;
      start = G__6821;
      end = G__6822;
      __hash = G__6823;
      continue;
    } else {
      var c = cljs.core.count.call(null, v);
      if (start < 0 || end < 0 || start > c || end > c) {
        throw new Error("Index out of bounds");
      } else {
      }
      return new cljs.core.Subvec(meta, v, start, end, __hash);
    }
    break;
  }
};
cljs.core.subvec = function() {
  var subvec = null;
  var subvec__2 = function(v, start) {
    return subvec.call(null, v, start, cljs.core.count.call(null, v));
  };
  var subvec__3 = function(v, start, end) {
    return cljs.core.build_subvec.call(null, null, v, start, end, null);
  };
  subvec = function(v, start, end) {
    switch(arguments.length) {
      case 2:
        return subvec__2.call(this, v, start);
      case 3:
        return subvec__3.call(this, v, start, end);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subvec.cljs$core$IFn$_invoke$arity$2 = subvec__2;
  subvec.cljs$core$IFn$_invoke$arity$3 = subvec__3;
  return subvec;
}();
cljs.core.tv_ensure_editable = function tv_ensure_editable(edit, node) {
  if (edit === node.edit) {
    return node;
  } else {
    return new cljs.core.VectorNode(edit, cljs.core.aclone.call(null, node.arr));
  }
};
cljs.core.tv_editable_root = function tv_editable_root(node) {
  return new cljs.core.VectorNode(function() {
    var obj6827 = {};
    return obj6827;
  }(), cljs.core.aclone.call(null, node.arr));
};
cljs.core.tv_editable_tail = function tv_editable_tail(tl) {
  var ret = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
  cljs.core.array_copy.call(null, tl, 0, ret, 0, tl.length);
  return ret;
};
cljs.core.tv_push_tail = function tv_push_tail(tv, level, parent, tail_node) {
  var ret = cljs.core.tv_ensure_editable.call(null, tv.root.edit, parent);
  var subidx = tv.cnt - 1 >>> level & 31;
  cljs.core.pv_aset.call(null, ret, subidx, level === 5 ? tail_node : function() {
    var child = cljs.core.pv_aget.call(null, ret, subidx);
    if (!(child == null)) {
      return tv_push_tail.call(null, tv, level - 5, child, tail_node);
    } else {
      return cljs.core.new_path.call(null, tv.root.edit, level - 5, tail_node);
    }
  }());
  return ret;
};
cljs.core.tv_pop_tail = function tv_pop_tail(tv, level, node) {
  var node__$1 = cljs.core.tv_ensure_editable.call(null, tv.root.edit, node);
  var subidx = tv.cnt - 2 >>> level & 31;
  if (level > 5) {
    var new_child = tv_pop_tail.call(null, tv, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx));
    if (new_child == null && subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, new_child);
      return node__$1;
    }
  } else {
    if (subidx === 0) {
      return null;
    } else {
      cljs.core.pv_aset.call(null, node__$1, subidx, null);
      return node__$1;
    }
  }
};
cljs.core.unchecked_editable_array_for = function unchecked_editable_array_for(tv, i) {
  if (i >= cljs.core.tail_off.call(null, tv)) {
    return tv.tail;
  } else {
    var root = tv.root;
    var node = root;
    var level = tv.shift;
    while (true) {
      if (level > 0) {
        var G__6828 = cljs.core.tv_ensure_editable.call(null, root.edit, cljs.core.pv_aget.call(null, node, i >>> level & 31));
        var G__6829 = level - 5;
        node = G__6828;
        level = G__6829;
        continue;
      } else {
        return node.arr;
      }
      break;
    }
  }
};
cljs.core.TransientVector = function(cnt, shift, root, tail) {
  this.cnt = cnt;
  this.shift = shift;
  this.root = root;
  this.tail = tail;
  this.cljs$lang$protocol_mask$partition0$ = 275;
  this.cljs$lang$protocol_mask$partition1$ = 88;
};
cljs.core.TransientVector.cljs$lang$type = true;
cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";
cljs.core.TransientVector.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/TransientVector");
};
cljs.core.TransientVector.prototype.call = function() {
  var G__6831 = null;
  var G__6831__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6831__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6831 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6831__2.call(this, self__, k);
      case 3:
        return G__6831__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6831.cljs$core$IFn$_invoke$arity$2 = G__6831__2;
  G__6831.cljs$core$IFn$_invoke$arity$3 = G__6831__3;
  return G__6831;
}();
cljs.core.TransientVector.prototype.apply = function(self__, args6830) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6830)));
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (typeof k === "number") {
    return cljs.core._nth.call(null, coll__$1, k, not_found);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = function(coll, n) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return cljs.core.array_for.call(null, coll__$1, n)[n & 31];
  } else {
    throw new Error("nth after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = function(coll, n, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (0 <= n && n < self__.cnt) {
    return cljs.core._nth.call(null, coll__$1, n);
  } else {
    return not_found;
  }
};
cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.root.edit) {
    return self__.cnt;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = function(tcoll, n, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (0 <= n && n < self__.cnt) {
      if (cljs.core.tail_off.call(null, tcoll__$1) <= n) {
        self__.tail[n & 31] = val;
        return tcoll__$1;
      } else {
        var new_root = function(tcoll__$1) {
          return function go(level, node) {
            var node__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, node);
            if (level === 0) {
              cljs.core.pv_aset.call(null, node__$1, n & 31, val);
              return node__$1;
            } else {
              var subidx = n >>> level & 31;
              cljs.core.pv_aset.call(null, node__$1, subidx, go.call(null, level - 5, cljs.core.pv_aget.call(null, node__$1, subidx)));
              return node__$1;
            }
          };
        }(tcoll__$1).call(null, self__.shift, self__.root);
        self__.root = new_root;
        return tcoll__$1;
      }
    } else {
      if (n === self__.cnt) {
        return cljs.core._conj_BANG_.call(null, tcoll__$1, val);
      } else {
        throw new Error("Index " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + " out of bounds for TransientVector of length" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt));
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt === 0) {
      throw new Error("Can't pop empty vector");
    } else {
      if (1 === self__.cnt) {
        self__.cnt = 0;
        return tcoll__$1;
      } else {
        if ((self__.cnt - 1 & 31) > 0) {
          self__.cnt = self__.cnt - 1;
          return tcoll__$1;
        } else {
          var new_tail = cljs.core.unchecked_editable_array_for.call(null, tcoll__$1, self__.cnt - 2);
          var new_root = function() {
            var nr = cljs.core.tv_pop_tail.call(null, tcoll__$1, self__.shift, self__.root);
            if (!(nr == null)) {
              return nr;
            } else {
              return new cljs.core.VectorNode(self__.root.edit, [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null]);
            }
          }();
          if (5 < self__.shift && cljs.core.pv_aget.call(null, new_root, 1) == null) {
            var new_root__$1 = cljs.core.tv_ensure_editable.call(null, self__.root.edit, cljs.core.pv_aget.call(null, new_root, 0));
            self__.root = new_root__$1;
            self__.shift = self__.shift - 5;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          } else {
            self__.root = new_root;
            self__.cnt = self__.cnt - 1;
            self__.tail = new_tail;
            return tcoll__$1;
          }
        }
      }
    }
  } else {
    throw new Error("pop! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (typeof key === "number") {
    return cljs.core._assoc_n_BANG_.call(null, tcoll__$1, key, val);
  } else {
    throw new Error("TransientVector's key for assoc! must be a number.");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    if (self__.cnt - cljs.core.tail_off.call(null, tcoll__$1) < 32) {
      self__.tail[self__.cnt & 31] = o;
      self__.cnt = self__.cnt + 1;
      return tcoll__$1;
    } else {
      var tail_node = new cljs.core.VectorNode(self__.root.edit, self__.tail);
      var new_tail = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      new_tail[0] = o;
      self__.tail = new_tail;
      if (self__.cnt >>> 5 > 1 << self__.shift) {
        var new_root_array = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var new_shift = self__.shift + 5;
        new_root_array[0] = self__.root;
        new_root_array[1] = cljs.core.new_path.call(null, self__.root.edit, self__.shift, tail_node);
        self__.root = new cljs.core.VectorNode(self__.root.edit, new_root_array);
        self__.shift = new_shift;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      } else {
        var new_root = cljs.core.tv_push_tail.call(null, tcoll__$1, self__.shift, self__.root, tail_node);
        self__.root = new_root;
        self__.cnt = self__.cnt + 1;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (self__.root.edit) {
    self__.root.edit = null;
    var len = self__.cnt - cljs.core.tail_off.call(null, tcoll__$1);
    var trimmed_tail = new Array(len);
    cljs.core.array_copy.call(null, self__.tail, 0, trimmed_tail, 0, len);
    return new cljs.core.PersistentVector(null, self__.cnt, self__.shift, self__.root, trimmed_tail, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientVector = function __GT_TransientVector(cnt, shift, root, tail) {
  return new cljs.core.TransientVector(cnt, shift, root, tail);
};
cljs.core.PersistentQueueSeq = function(meta, front, rear, __hash) {
  this.meta = meta;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 31850572;
};
cljs.core.PersistentQueueSeq.cljs$lang$type = true;
cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";
cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentQueueSeq");
};
cljs.core.PersistentQueueSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueueSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
  if (temp__4124__auto__) {
    var f1 = temp__4124__auto__;
    return new cljs.core.PersistentQueueSeq(self__.meta, f1, self__.rear, null);
  } else {
    if (self__.rear == null) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      return new cljs.core.PersistentQueueSeq(self__.meta, self__.rear, null, null);
    }
  }
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueueSeq(meta__$1, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentQueueSeq = function __GT_PersistentQueueSeq(meta, front, rear, __hash) {
  return new cljs.core.PersistentQueueSeq(meta, front, rear, __hash);
};
cljs.core.PersistentQueue = function(meta, count, front, rear, __hash) {
  this.meta = meta;
  this.count = count;
  this.front = front;
  this.rear = rear;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 31858766;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentQueue.cljs$lang$type = true;
cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";
cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentQueue");
};
cljs.core.PersistentQueue.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentQueue.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(self__.meta, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.count;
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    var temp__4124__auto__ = cljs.core.next.call(null, self__.front);
    if (temp__4124__auto__) {
      var f1 = temp__4124__auto__;
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, f1, self__.rear, null);
    } else {
      return new cljs.core.PersistentQueue(self__.meta, self__.count - 1, cljs.core.seq.call(null, self__.rear), cljs.core.PersistentVector.EMPTY, null);
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.PersistentQueue.EMPTY;
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.front);
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.rest.call(null, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var rear__$1 = cljs.core.seq.call(null, self__.rear);
  if (cljs.core.truth_(function() {
    var or__3639__auto__ = self__.front;
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return rear__$1;
    }
  }())) {
    return new cljs.core.PersistentQueueSeq(null, self__.front, cljs.core.seq.call(null, rear__$1), null);
  } else {
    return null;
  }
};
cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentQueue(meta__$1, self__.count, self__.front, self__.rear, self__.__hash);
};
cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.truth_(self__.front)) {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, self__.front, cljs.core.conj.call(null, function() {
      var or__3639__auto__ = self__.rear;
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return cljs.core.PersistentVector.EMPTY;
      }
    }(), o), null);
  } else {
    return new cljs.core.PersistentQueue(self__.meta, self__.count + 1, cljs.core.conj.call(null, self__.front, o), cljs.core.PersistentVector.EMPTY, null);
  }
};
cljs.core.__GT_PersistentQueue = function __GT_PersistentQueue(meta, count, front, rear, __hash) {
  return new cljs.core.PersistentQueue(meta, count, front, rear, __hash);
};
cljs.core.PersistentQueue.EMPTY = new cljs.core.PersistentQueue(null, 0, null, cljs.core.PersistentVector.EMPTY, 0);
cljs.core.NeverEquiv = function() {
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2097152;
};
cljs.core.NeverEquiv.cljs$lang$type = true;
cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";
cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/NeverEquiv");
};
cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(o, other) {
  var self__ = this;
  var o__$1 = this;
  return false;
};
cljs.core.NeverEquiv.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_NeverEquiv = function __GT_NeverEquiv() {
  return new cljs.core.NeverEquiv;
};
cljs.core.never_equiv = new cljs.core.NeverEquiv;
cljs.core.equiv_map = function equiv_map(x, y) {
  return cljs.core.boolean$.call(null, cljs.core.map_QMARK_.call(null, y) ? cljs.core.count.call(null, x) === cljs.core.count.call(null, y) ? cljs.core.every_QMARK_.call(null, cljs.core.identity, cljs.core.map.call(null, function(xkv) {
    return cljs.core._EQ_.call(null, cljs.core.get.call(null, y, cljs.core.first.call(null, xkv), cljs.core.never_equiv), cljs.core.second.call(null, xkv));
  }, x)) : null : null);
};
cljs.core.scan_array = function scan_array(incr, k, array) {
  var len = array.length;
  var i = 0;
  while (true) {
    if (i < len) {
      if (k === array[i]) {
        return i;
      } else {
        var G__6832 = i + incr;
        i = G__6832;
        continue;
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.obj_map_compare_keys = function obj_map_compare_keys(a, b) {
  var a__$1 = cljs.core.hash.call(null, a);
  var b__$1 = cljs.core.hash.call(null, b);
  if (a__$1 < b__$1) {
    return-1;
  } else {
    if (a__$1 > b__$1) {
      return 1;
    } else {
      return 0;
    }
  }
};
cljs.core.obj_map__GT_hash_map = function obj_map__GT_hash_map(m, k, v) {
  var ks = m.keys;
  var len = ks.length;
  var so = m.strobj;
  var mm = cljs.core.meta.call(null, m);
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var k__$1 = ks[i];
      var G__6833 = i + 1;
      var G__6834 = cljs.core.assoc_BANG_.call(null, out, k__$1, so[k__$1]);
      i = G__6833;
      out = G__6834;
      continue;
    } else {
      return cljs.core.with_meta.call(null, cljs.core.persistent_BANG_.call(null, cljs.core.assoc_BANG_.call(null, out, k, v)), mm);
    }
    break;
  }
};
cljs.core.obj_clone = function obj_clone(obj, ks) {
  var new_obj = function() {
    var obj6838 = {};
    return obj6838;
  }();
  var l = ks.length;
  var i_6839 = 0;
  while (true) {
    if (i_6839 < l) {
      var k_6840 = ks[i_6839];
      new_obj[k_6840] = obj[k_6840];
      var G__6841 = i_6839 + 1;
      i_6839 = G__6841;
      continue;
    } else {
    }
    break;
  }
  return new_obj;
};
cljs.core.ObjMap = function(meta, keys, strobj, update_count, __hash) {
  this.meta = meta;
  this.keys = keys;
  this.strobj = strobj;
  this.update_count = update_count;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 4;
};
cljs.core.ObjMap.cljs$lang$type = true;
cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";
cljs.core.ObjMap.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ObjMap");
};
cljs.core.ObjMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ObjMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return self__.strobj[k];
  } else {
    return not_found;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.keys.length;
  var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
  var init__$1 = init;
  while (true) {
    if (cljs.core.seq.call(null, keys__$1)) {
      var k = cljs.core.first.call(null, keys__$1);
      var init__$2 = f.call(null, init__$1, k, self__.strobj[k]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6844 = cljs.core.rest.call(null, keys__$1);
        var G__6845 = init__$2;
        keys__$1 = G__6844;
        init__$1 = G__6845;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.keys.length;
};
cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.transient$.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1));
};
cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.ObjMap.EMPTY, self__.meta);
};
cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    var new_keys = cljs.core.aclone.call(null, self__.keys);
    var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
    new_keys.splice(cljs.core.scan_array.call(null, 1, k, new_keys), 1);
    delete new_strobj[k];
    return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
  } else {
    return coll__$1;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k)) {
    if (self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD || self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD) {
      return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
    } else {
      if (!(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        new_strobj[k] = v;
        return new cljs.core.ObjMap(self__.meta, self__.keys, new_strobj, self__.update_count + 1, null);
      } else {
        var new_strobj = cljs.core.obj_clone.call(null, self__.strobj, self__.keys);
        var new_keys = cljs.core.aclone.call(null, self__.keys);
        new_strobj[k] = v;
        new_keys.push(k);
        return new cljs.core.ObjMap(self__.meta, new_keys, new_strobj, self__.update_count + 1, null);
      }
    }
  } else {
    return cljs.core.obj_map__GT_hash_map.call(null, coll__$1, k, v);
  }
};
cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (goog.isString(k) && !(cljs.core.scan_array.call(null, 1, k, self__.keys) == null)) {
    return true;
  } else {
    return false;
  }
};
cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.keys.length > 0) {
    return cljs.core.map.call(null, function(coll__$1) {
      return function(p1__6842_SHARP_) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [p1__6842_SHARP_, self__.strobj[p1__6842_SHARP_]], null);
      };
    }(coll__$1), self__.keys.sort(cljs.core.obj_map_compare_keys));
  } else {
    return null;
  }
};
cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ObjMap(meta__$1, self__.keys, self__.strobj, self__.update_count, self__.__hash);
};
cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    return cljs.core.reduce.call(null, cljs.core._conj, coll__$1, entry);
  }
};
cljs.core.ObjMap.prototype.call = function() {
  var G__6846 = null;
  var G__6846__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6846__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6846 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6846__2.call(this, self__, k);
      case 3:
        return G__6846__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6846.cljs$core$IFn$_invoke$arity$2 = G__6846__2;
  G__6846.cljs$core$IFn$_invoke$arity$3 = G__6846__3;
  return G__6846;
}();
cljs.core.ObjMap.prototype.apply = function(self__, args6843) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6843)));
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_ObjMap = function __GT_ObjMap(meta, keys, strobj, update_count, __hash) {
  return new cljs.core.ObjMap(meta, keys, strobj, update_count, __hash);
};
cljs.core.ObjMap.EMPTY = new cljs.core.ObjMap(null, [], function() {
  var obj6848 = {};
  return obj6848;
}(), 0, 0);
cljs.core.ObjMap.HASHMAP_THRESHOLD = 8;
cljs.core.ObjMap.fromObject = function(ks, obj) {
  return new cljs.core.ObjMap(null, ks, obj, 0, null);
};
cljs.core.Iterator = function(s) {
  this.s = s;
};
cljs.core.Iterator.cljs$lang$type = true;
cljs.core.Iterator.cljs$lang$ctorStr = "cljs.core/Iterator";
cljs.core.Iterator.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Iterator");
};
cljs.core.Iterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":x};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_Iterator = function __GT_Iterator(s) {
  return new cljs.core.Iterator(s);
};
cljs.core.iterator = function iterator(coll) {
  return new cljs.core.Iterator(cljs.core.seq.call(null, coll));
};
cljs.core.EntriesIterator = function(s) {
  this.s = s;
};
cljs.core.EntriesIterator.cljs$lang$type = true;
cljs.core.EntriesIterator.cljs$lang$ctorStr = "cljs.core/EntriesIterator";
cljs.core.EntriesIterator.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/EntriesIterator");
};
cljs.core.EntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var vec__6849 = cljs.core.first.call(null, self__.s);
    var k = cljs.core.nth.call(null, vec__6849, 0, null);
    var v = cljs.core.nth.call(null, vec__6849, 1, null);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[k, v]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_EntriesIterator = function __GT_EntriesIterator(s) {
  return new cljs.core.EntriesIterator(s);
};
cljs.core.entries_iterator = function entries_iterator(coll) {
  return new cljs.core.EntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.SetEntriesIterator = function(s) {
  this.s = s;
};
cljs.core.SetEntriesIterator.cljs$lang$type = true;
cljs.core.SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/SetEntriesIterator";
cljs.core.SetEntriesIterator.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/SetEntriesIterator");
};
cljs.core.SetEntriesIterator.prototype.next = function() {
  var self__ = this;
  var _ = this;
  if (!(self__.s == null)) {
    var x = cljs.core.first.call(null, self__.s);
    self__.s = cljs.core.next.call(null, self__.s);
    return{"done":false, "value":[x, x]};
  } else {
    return{"done":true, "value":null};
  }
};
cljs.core.__GT_SetEntriesIterator = function __GT_SetEntriesIterator(s) {
  return new cljs.core.SetEntriesIterator(s);
};
cljs.core.set_entries_iterator = function set_entries_iterator(coll) {
  return new cljs.core.SetEntriesIterator(cljs.core.seq.call(null, coll));
};
cljs.core.array_map_index_of_nil_QMARK_ = function array_map_index_of_nil_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (arr[i] == null) {
        return i;
      } else {
        var G__6850 = i + 2;
        i = G__6850;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_keyword_QMARK_ = function array_map_index_of_keyword_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.fqn;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Keyword && kstr === k_SINGLEQUOTE_.fqn;
      }()) {
        return i;
      } else {
        var G__6851 = i + 2;
        i = G__6851;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_symbol_QMARK_ = function array_map_index_of_symbol_QMARK_(arr, m, k) {
  var len = arr.length;
  var kstr = k.str;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (function() {
        var k_SINGLEQUOTE_ = arr[i];
        return k_SINGLEQUOTE_ instanceof cljs.core.Symbol && kstr === k_SINGLEQUOTE_.str;
      }()) {
        return i;
      } else {
        var G__6852 = i + 2;
        i = G__6852;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_identical_QMARK_ = function array_map_index_of_identical_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (k === arr[i]) {
        return i;
      } else {
        var G__6853 = i + 2;
        i = G__6853;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of_equiv_QMARK_ = function array_map_index_of_equiv_QMARK_(arr, m, k) {
  var len = arr.length;
  var i = 0;
  while (true) {
    if (len <= i) {
      return-1;
    } else {
      if (cljs.core._EQ_.call(null, k, arr[i])) {
        return i;
      } else {
        var G__6854 = i + 2;
        i = G__6854;
        continue;
      }
    }
    break;
  }
};
cljs.core.array_map_index_of = function array_map_index_of(m, k) {
  var arr = m.arr;
  if (k instanceof cljs.core.Keyword) {
    return cljs.core.array_map_index_of_keyword_QMARK_.call(null, arr, m, k);
  } else {
    if (goog.isString(k) || typeof k === "number") {
      return cljs.core.array_map_index_of_identical_QMARK_.call(null, arr, m, k);
    } else {
      if (k instanceof cljs.core.Symbol) {
        return cljs.core.array_map_index_of_symbol_QMARK_.call(null, arr, m, k);
      } else {
        if (k == null) {
          return cljs.core.array_map_index_of_nil_QMARK_.call(null, arr, m, k);
        } else {
          return cljs.core.array_map_index_of_equiv_QMARK_.call(null, arr, m, k);
        }
      }
    }
  }
};
cljs.core.array_map_extend_kv = function array_map_extend_kv(m, k, v) {
  var arr = m.arr;
  var l = arr.length;
  var narr = new Array(l + 2);
  var i_6855 = 0;
  while (true) {
    if (i_6855 < l) {
      narr[i_6855] = arr[i_6855];
      var G__6856 = i_6855 + 1;
      i_6855 = G__6856;
      continue;
    } else {
    }
    break;
  }
  narr[l] = k;
  narr[l + 1] = v;
  return narr;
};
cljs.core.PersistentArrayMapSeq = function(arr, i, _meta) {
  this.arr = arr;
  this.i = i;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374990;
};
cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";
cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentArrayMapSeq");
};
cljs.core.PersistentArrayMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return(self__.arr.length - self__.i) / 2;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[self__.i], self__.arr[self__.i + 1]], null);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.i < self__.arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i + 2, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMapSeq(self__.arr, self__.i, new_meta);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentArrayMapSeq = function __GT_PersistentArrayMapSeq(arr, i, _meta) {
  return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
};
cljs.core.persistent_array_map_seq = function persistent_array_map_seq(arr, i, _meta) {
  if (i <= arr.length - 2) {
    return new cljs.core.PersistentArrayMapSeq(arr, i, _meta);
  } else {
    return null;
  }
};
cljs.core.PersistentArrayMap = function(meta, cnt, arr, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.arr = arr;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16647951;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentArrayMap.cljs$lang$type = true;
cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";
cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentArrayMap");
};
cljs.core.PersistentArrayMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentArrayMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentArrayMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentArrayMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentArrayMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6858 = cljs.core.seq.call(null, coll);
  var chunk__6859 = null;
  var count__6860 = 0;
  var i__6861 = 0;
  while (true) {
    if (i__6861 < count__6860) {
      var vec__6862 = cljs.core._nth.call(null, chunk__6859, i__6861);
      var k = cljs.core.nth.call(null, vec__6862, 0, null);
      var v = cljs.core.nth.call(null, vec__6862, 1, null);
      f.call(null, v, k);
      var G__6867 = seq__6858;
      var G__6868 = chunk__6859;
      var G__6869 = count__6860;
      var G__6870 = i__6861 + 1;
      seq__6858 = G__6867;
      chunk__6859 = G__6868;
      count__6860 = G__6869;
      i__6861 = G__6870;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6858);
      if (temp__4126__auto__) {
        var seq__6858__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6858__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__6858__$1);
          var G__6871 = cljs.core.chunk_rest.call(null, seq__6858__$1);
          var G__6872 = c__4408__auto__;
          var G__6873 = cljs.core.count.call(null, c__4408__auto__);
          var G__6874 = 0;
          seq__6858 = G__6871;
          chunk__6859 = G__6872;
          count__6860 = G__6873;
          i__6861 = G__6874;
          continue;
        } else {
          var vec__6863 = cljs.core.first.call(null, seq__6858__$1);
          var k = cljs.core.nth.call(null, vec__6863, 0, null);
          var v = cljs.core.nth.call(null, vec__6863, 1, null);
          f.call(null, v, k);
          var G__6875 = cljs.core.next.call(null, seq__6858__$1);
          var G__6876 = null;
          var G__6877 = 0;
          var G__6878 = 0;
          seq__6858 = G__6875;
          chunk__6859 = G__6876;
          count__6860 = G__6877;
          i__6861 = G__6878;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    return not_found;
  } else {
    return self__.arr[idx + 1];
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = f.call(null, init__$1, self__.arr[i], self__.arr[i + 1]);
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6879 = i + 2;
        var G__6880 = init__$2;
        i = G__6879;
        init__$1 = G__6880;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientArrayMap(function() {
    var obj6865 = {};
    return obj6865;
  }(), self__.arr.length, cljs.core.aclone.call(null, self__.arr));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentArrayMap.EMPTY, self__.meta);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx >= 0) {
    var len = self__.arr.length;
    var new_len = len - 2;
    if (new_len === 0) {
      return cljs.core._empty.call(null, coll__$1);
    } else {
      var new_arr = new Array(new_len);
      var s = 0;
      var d = 0;
      while (true) {
        if (s >= len) {
          return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt - 1, new_arr, null);
        } else {
          if (cljs.core._EQ_.call(null, k, self__.arr[s])) {
            var G__6881 = s + 2;
            var G__6882 = d;
            s = G__6881;
            d = G__6882;
            continue;
          } else {
            new_arr[d] = self__.arr[s];
            new_arr[d + 1] = self__.arr[s + 1];
            var G__6883 = s + 2;
            var G__6884 = d + 2;
            s = G__6883;
            d = G__6884;
            continue;
          }
        }
        break;
      }
    }
  } else {
    return coll__$1;
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var idx = cljs.core.array_map_index_of.call(null, coll__$1, k);
  if (idx === -1) {
    if (self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
      var arr__$1 = cljs.core.array_map_extend_kv.call(null, coll__$1, k, v);
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt + 1, arr__$1, null);
    } else {
      return cljs.core._with_meta.call(null, cljs.core._assoc.call(null, cljs.core.into.call(null, cljs.core.PersistentHashMap.EMPTY, coll__$1), k, v), self__.meta);
    }
  } else {
    if (v === self__.arr[idx + 1]) {
      return coll__$1;
    } else {
      var arr__$1 = function() {
        var G__6866 = cljs.core.aclone.call(null, self__.arr);
        G__6866[idx + 1] = v;
        return G__6866;
      }();
      return new cljs.core.PersistentArrayMap(self__.meta, self__.cnt, arr__$1, null);
    }
  }
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(cljs.core.array_map_index_of.call(null, coll__$1, k) === -1);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.persistent_array_map_seq.call(null, self__.arr, 0, null);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentArrayMap(meta__$1, self__.cnt, self__.arr, self__.__hash);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__6885 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__6886 = cljs.core.next.call(null, es);
          ret = G__6885;
          es = G__6886;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentArrayMap.prototype.call = function() {
  var G__6887 = null;
  var G__6887__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6887__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6887 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6887__2.call(this, self__, k);
      case 3:
        return G__6887__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6887.cljs$core$IFn$_invoke$arity$2 = G__6887__2;
  G__6887.cljs$core$IFn$_invoke$arity$3 = G__6887__3;
  return G__6887;
}();
cljs.core.PersistentArrayMap.prototype.apply = function(self__, args6857) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6857)));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentArrayMap = function __GT_PersistentArrayMap(meta, cnt, arr, __hash) {
  return new cljs.core.PersistentArrayMap(meta, cnt, arr, __hash);
};
cljs.core.PersistentArrayMap.EMPTY = new cljs.core.PersistentArrayMap(null, 0, [], null);
cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = 8;
cljs.core.PersistentArrayMap.fromArray = function(arr, no_clone, no_check) {
  var arr__$1 = no_clone ? arr : cljs.core.aclone.call(null, arr);
  if (no_check) {
    var cnt = arr__$1.length / 2;
    return new cljs.core.PersistentArrayMap(null, cnt, arr__$1, null);
  } else {
    var len = arr__$1.length;
    var i = 0;
    var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__6888 = i + 2;
        var G__6889 = cljs.core._assoc_BANG_.call(null, ret, arr__$1[i], arr__$1[i + 1]);
        i = G__6888;
        ret = G__6889;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, ret);
      }
      break;
    }
  }
};
cljs.core.TransientArrayMap = function(editable_QMARK_, len, arr) {
  this.editable_QMARK_ = editable_QMARK_;
  this.len = len;
  this.arr = arr;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientArrayMap.cljs$lang$type = true;
cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";
cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/TransientArrayMap");
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx >= 0) {
      self__.arr[idx] = self__.arr[self__.len - 2];
      self__.arr[idx + 1] = self__.arr[self__.len - 1];
      var G__6890_6892 = self__.arr;
      G__6890_6892.pop();
      G__6890_6892.pop();
      self__.len = self__.len - 2;
    } else {
    }
    return tcoll__$1;
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, key);
    if (idx === -1) {
      if (self__.len + 2 <= 2 * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
        self__.len = self__.len + 2;
        self__.arr.push(key);
        self__.arr.push(val);
        return tcoll__$1;
      } else {
        return cljs.core.assoc_BANG_.call(null, cljs.core.array__GT_transient_hash_map.call(null, self__.len, self__.arr), key, val);
      }
    } else {
      if (val === self__.arr[idx + 1]) {
        return tcoll__$1;
      } else {
        self__.arr[idx + 1] = val;
        return tcoll__$1;
      }
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    if (function() {
      var G__6891 = o;
      if (G__6891) {
        var bit__4302__auto__ = G__6891.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4302__auto__ || G__6891.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__6891.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6891);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6891);
      }
    }()) {
      return cljs.core._assoc_BANG_.call(null, tcoll__$1, cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$2 = tcoll__$1;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__6893 = cljs.core.next.call(null, es);
          var G__6894 = cljs.core._assoc_BANG_.call(null, tcoll__$2, cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__6893;
          tcoll__$2 = G__6894;
          continue;
        } else {
          return tcoll__$2;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    self__.editable_QMARK_ = false;
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, self__.len, 2), self__.arr, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, k, null);
};
cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    var idx = cljs.core.array_map_index_of.call(null, tcoll__$1, k);
    if (idx === -1) {
      return not_found;
    } else {
      return self__.arr[idx + 1];
    }
  } else {
    throw new Error("lookup after persistent!");
  }
};
cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core.truth_(self__.editable_QMARK_)) {
    return cljs.core.quot.call(null, self__.len, 2);
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.__GT_TransientArrayMap = function __GT_TransientArrayMap(editable_QMARK_, len, arr) {
  return new cljs.core.TransientArrayMap(editable_QMARK_, len, arr);
};
cljs.core.array__GT_transient_hash_map = function array__GT_transient_hash_map(len, arr) {
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  var i = 0;
  while (true) {
    if (i < len) {
      var G__6895 = cljs.core.assoc_BANG_.call(null, out, arr[i], arr[i + 1]);
      var G__6896 = i + 2;
      out = G__6895;
      i = G__6896;
      continue;
    } else {
      return out;
    }
    break;
  }
};
cljs.core.Box = function(val) {
  this.val = val;
};
cljs.core.Box.cljs$lang$type = true;
cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";
cljs.core.Box.cljs$lang$ctorPrWriter = function(this__4218__auto__, writer__4219__auto__, opts__4220__auto__) {
  return cljs.core._write.call(null, writer__4219__auto__, "cljs.core/Box");
};
cljs.core.__GT_Box = function __GT_Box(val) {
  return new cljs.core.Box(val);
};
cljs.core.key_test = function key_test(key, other) {
  if (key === other) {
    return true;
  } else {
    if (cljs.core.keyword_identical_QMARK_.call(null, key, other)) {
      return true;
    } else {
      return cljs.core._EQ_.call(null, key, other);
    }
  }
};
cljs.core.mask = function mask(hash, shift) {
  return hash >>> shift & 31;
};
cljs.core.clone_and_set = function() {
  var clone_and_set = null;
  var clone_and_set__3 = function(arr, i, a) {
    var G__6899 = cljs.core.aclone.call(null, arr);
    G__6899[i] = a;
    return G__6899;
  };
  var clone_and_set__5 = function(arr, i, a, j, b) {
    var G__6900 = cljs.core.aclone.call(null, arr);
    G__6900[i] = a;
    G__6900[j] = b;
    return G__6900;
  };
  clone_and_set = function(arr, i, a, j, b) {
    switch(arguments.length) {
      case 3:
        return clone_and_set__3.call(this, arr, i, a);
      case 5:
        return clone_and_set__5.call(this, arr, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  clone_and_set.cljs$core$IFn$_invoke$arity$3 = clone_and_set__3;
  clone_and_set.cljs$core$IFn$_invoke$arity$5 = clone_and_set__5;
  return clone_and_set;
}();
cljs.core.remove_pair = function remove_pair(arr, i) {
  var new_arr = new Array(arr.length - 2);
  cljs.core.array_copy.call(null, arr, 0, new_arr, 0, 2 * i);
  cljs.core.array_copy.call(null, arr, 2 * (i + 1), new_arr, 2 * i, new_arr.length - 2 * i);
  return new_arr;
};
cljs.core.bitmap_indexed_node_index = function bitmap_indexed_node_index(bitmap, bit) {
  return cljs.core.bit_count.call(null, bitmap & bit - 1);
};
cljs.core.bitpos = function bitpos(hash, shift) {
  return 1 << (hash >>> shift & 31);
};
cljs.core.edit_and_set = function() {
  var edit_and_set = null;
  var edit_and_set__4 = function(inode, edit, i, a) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    return editable;
  };
  var edit_and_set__6 = function(inode, edit, i, a, j, b) {
    var editable = inode.ensure_editable(edit);
    editable.arr[i] = a;
    editable.arr[j] = b;
    return editable;
  };
  edit_and_set = function(inode, edit, i, a, j, b) {
    switch(arguments.length) {
      case 4:
        return edit_and_set__4.call(this, inode, edit, i, a);
      case 6:
        return edit_and_set__6.call(this, inode, edit, i, a, j, b);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edit_and_set.cljs$core$IFn$_invoke$arity$4 = edit_and_set__4;
  edit_and_set.cljs$core$IFn$_invoke$arity$6 = edit_and_set__6;
  return edit_and_set;
}();
cljs.core.inode_kv_reduce = function inode_kv_reduce(arr, f, init) {
  var len = arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var init__$2 = function() {
        var k = arr[i];
        if (!(k == null)) {
          return f.call(null, init__$1, k, arr[i + 1]);
        } else {
          var node = arr[i + 1];
          if (!(node == null)) {
            return node.kv_reduce(f, init__$1);
          } else {
            return init__$1;
          }
        }
      }();
      if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
        return cljs.core.deref.call(null, init__$2);
      } else {
        var G__6901 = i + 2;
        var G__6902 = init__$2;
        i = G__6901;
        init__$1 = G__6902;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.BitmapIndexedNode = function(edit, bitmap, arr) {
  this.edit = edit;
  this.bitmap = bitmap;
  this.arr = arr;
};
cljs.core.BitmapIndexedNode.cljs$lang$type = true;
cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";
cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/BitmapIndexedNode");
};
cljs.core.BitmapIndexedNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    var new_arr = new Array(n < 0 ? 4 : 2 * (n + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * n);
    return new cljs.core.BitmapIndexedNode(e, self__.bitmap, new_arr);
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return inode.edit_and_remove_pair(edit__$1, bit, idx);
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        removed_leaf_QMARK_[0] = true;
        return inode.edit_and_remove_pair(edit__$1, bit, idx);
      } else {
        return inode;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = function(e, bit, i) {
  var self__ = this;
  var inode = this;
  if (self__.bitmap === bit) {
    return null;
  } else {
    var editable = inode.ensure_editable(e);
    var earr = editable.arr;
    var len = earr.length;
    editable.bitmap = bit ^ editable.bitmap;
    cljs.core.array_copy.call(null, earr, 2 * (i + 1), earr, 2 * i, len - 2 * (i + 1));
    earr[len - 2] = null;
    earr[len - 1] = null;
    return editable;
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.BitmapIndexedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.BitmapIndexedNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_lookup(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return val_or_node;
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (2 * n < self__.arr.length) {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      added_leaf_QMARK_.val = true;
      cljs.core.array_copy_downward.call(null, earr, 2 * idx, earr, 2 * (idx + 1), 2 * (n - idx));
      earr[2 * idx] = key;
      earr[2 * idx + 1] = val;
      editable.bitmap = editable.bitmap | bit;
      return editable;
    } else {
      if (n >= 16) {
        var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
        var jdx = hash >>> shift & 31;
        nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
        var i_6903 = 0;
        var j_6904 = 0;
        while (true) {
          if (i_6903 < 32) {
            if ((self__.bitmap >>> i_6903 & 1) === 0) {
              var G__6905 = i_6903 + 1;
              var G__6906 = j_6904;
              i_6903 = G__6905;
              j_6904 = G__6906;
              continue;
            } else {
              nodes[i_6903] = !(self__.arr[j_6904] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, cljs.core.hash.call(null, self__.arr[j_6904]), self__.arr[j_6904], self__.arr[j_6904 + 1], added_leaf_QMARK_) : self__.arr[j_6904 + 1];
              var G__6907 = i_6903 + 1;
              var G__6908 = j_6904 + 2;
              i_6903 = G__6907;
              j_6904 = G__6908;
              continue;
            }
          } else {
          }
          break;
        }
        return new cljs.core.ArrayNode(edit__$1, n + 1, nodes);
      } else {
        var new_arr = new Array(2 * (n + 4));
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
        new_arr[2 * idx] = key;
        new_arr[2 * idx + 1] = val;
        cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
        added_leaf_QMARK_.val = true;
        var editable = inode.ensure_editable(edit__$1);
        editable.arr = new_arr;
        editable.bitmap = editable.bitmap | bit;
        return editable;
      }
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, n);
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx + 1, val);
        }
      } else {
        added_leaf_QMARK_.val = true;
        return cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, edit__$1, shift + 5, key_or_nil, val_or_node, hash, key, val));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
  if ((self__.bitmap & bit) === 0) {
    var n = cljs.core.bit_count.call(null, self__.bitmap);
    if (n >= 16) {
      var nodes = [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null];
      var jdx = hash >>> shift & 31;
      nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      var i_6909 = 0;
      var j_6910 = 0;
      while (true) {
        if (i_6909 < 32) {
          if ((self__.bitmap >>> i_6909 & 1) === 0) {
            var G__6911 = i_6909 + 1;
            var G__6912 = j_6910;
            i_6909 = G__6911;
            j_6910 = G__6912;
            continue;
          } else {
            nodes[i_6909] = !(self__.arr[j_6910] == null) ? cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, cljs.core.hash.call(null, self__.arr[j_6910]), self__.arr[j_6910], self__.arr[j_6910 + 1], added_leaf_QMARK_) : self__.arr[j_6910 + 1];
            var G__6913 = i_6909 + 1;
            var G__6914 = j_6910 + 2;
            i_6909 = G__6913;
            j_6910 = G__6914;
            continue;
          }
        } else {
        }
        break;
      }
      return new cljs.core.ArrayNode(null, n + 1, nodes);
    } else {
      var new_arr = new Array(2 * (n + 1));
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * idx);
      new_arr[2 * idx] = key;
      new_arr[2 * idx + 1] = val;
      cljs.core.array_copy.call(null, self__.arr, 2 * idx, new_arr, 2 * (idx + 1), 2 * (n - idx));
      added_leaf_QMARK_.val = true;
      return new cljs.core.BitmapIndexedNode(null, self__.bitmap | bit, new_arr);
    }
  } else {
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
      if (n === val_or_node) {
        return inode;
      } else {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        if (val === val_or_node) {
          return inode;
        } else {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, val));
        }
      } else {
        added_leaf_QMARK_.val = true;
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx, null, 2 * idx + 1, cljs.core.create_node.call(null, shift + 5, key_or_nil, val_or_node, hash, key, val)));
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return not_found;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      return val_or_node.inode_find(shift + 5, hash, key, not_found);
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil, val_or_node], null);
      } else {
        return not_found;
      }
    }
  }
};
cljs.core.BitmapIndexedNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var bit = 1 << (hash >>> shift & 31);
  if ((self__.bitmap & bit) === 0) {
    return inode;
  } else {
    var idx = cljs.core.bitmap_indexed_node_index.call(null, self__.bitmap, bit);
    var key_or_nil = self__.arr[2 * idx];
    var val_or_node = self__.arr[2 * idx + 1];
    if (key_or_nil == null) {
      var n = val_or_node.inode_without(shift + 5, hash, key);
      if (n === val_or_node) {
        return inode;
      } else {
        if (!(n == null)) {
          return new cljs.core.BitmapIndexedNode(null, self__.bitmap, cljs.core.clone_and_set.call(null, self__.arr, 2 * idx + 1, n));
        } else {
          if (self__.bitmap === bit) {
            return null;
          } else {
            return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
          }
        }
      }
    } else {
      if (cljs.core.key_test.call(null, key, key_or_nil)) {
        return new cljs.core.BitmapIndexedNode(null, self__.bitmap ^ bit, cljs.core.remove_pair.call(null, self__.arr, idx));
      } else {
        return inode;
      }
    }
  }
};
cljs.core.__GT_BitmapIndexedNode = function __GT_BitmapIndexedNode(edit, bitmap, arr) {
  return new cljs.core.BitmapIndexedNode(edit, bitmap, arr);
};
cljs.core.BitmapIndexedNode.EMPTY = new cljs.core.BitmapIndexedNode(null, 0, []);
cljs.core.pack_array_node = function pack_array_node(array_node, edit, idx) {
  var arr = array_node.arr;
  var len = arr.length;
  var new_arr = new Array(2 * (array_node.cnt - 1));
  var i = 0;
  var j = 1;
  var bitmap = 0;
  while (true) {
    if (i < len) {
      if (!(i === idx) && !(arr[i] == null)) {
        new_arr[j] = arr[i];
        var G__6915 = i + 1;
        var G__6916 = j + 2;
        var G__6917 = bitmap | 1 << i;
        i = G__6915;
        j = G__6916;
        bitmap = G__6917;
        continue;
      } else {
        var G__6918 = i + 1;
        var G__6919 = j;
        var G__6920 = bitmap;
        i = G__6918;
        j = G__6919;
        bitmap = G__6920;
        continue;
      }
    } else {
      return new cljs.core.BitmapIndexedNode(edit, bitmap, new_arr);
    }
    break;
  }
};
cljs.core.ArrayNode = function(edit, cnt, arr) {
  this.edit = edit;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.ArrayNode.cljs$lang$type = true;
cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";
cljs.core.ArrayNode.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ArrayNode");
};
cljs.core.ArrayNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    return new cljs.core.ArrayNode(e, self__.cnt, cljs.core.aclone.call(null, self__.arr));
  }
};
cljs.core.ArrayNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return inode;
  } else {
    var n = node.inode_without_BANG_(edit__$1, shift + 5, hash, key, removed_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, edit__$1, idx);
        } else {
          var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
          editable.cnt = editable.cnt - 1;
          return editable;
        }
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
      }
    }
  }
};
cljs.core.ArrayNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_array_node_seq.call(null, self__.arr);
};
cljs.core.ArrayNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  var len = self__.arr.length;
  var i = 0;
  var init__$1 = init;
  while (true) {
    if (i < len) {
      var node = self__.arr[i];
      if (!(node == null)) {
        var init__$2 = node.kv_reduce(f, init__$1);
        if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
          return cljs.core.deref.call(null, init__$2);
        } else {
          var G__6921 = i + 1;
          var G__6922 = init__$2;
          i = G__6921;
          init__$1 = G__6922;
          continue;
        }
      } else {
        var G__6923 = i + 1;
        var G__6924 = init__$1;
        i = G__6923;
        init__$1 = G__6924;
        continue;
      }
    } else {
      return init__$1;
    }
    break;
  }
};
cljs.core.ArrayNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_lookup(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_));
    editable.cnt = editable.cnt + 1;
    return editable;
  } else {
    var n = node.inode_assoc_BANG_(edit__$1, shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return cljs.core.edit_and_set.call(null, inode, edit__$1, idx, n);
    }
  }
};
cljs.core.ArrayNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (node == null) {
    return new cljs.core.ArrayNode(null, self__.cnt + 1, cljs.core.clone_and_set.call(null, self__.arr, idx, cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_)));
  } else {
    var n = node.inode_assoc(shift + 5, hash, key, val, added_leaf_QMARK_);
    if (n === node) {
      return inode;
    } else {
      return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
    }
  }
};
cljs.core.ArrayNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    return node.inode_find(shift + 5, hash, key, not_found);
  } else {
    return not_found;
  }
};
cljs.core.ArrayNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = hash >>> shift & 31;
  var node = self__.arr[idx];
  if (!(node == null)) {
    var n = node.inode_without(shift + 5, hash, key);
    if (n === node) {
      return inode;
    } else {
      if (n == null) {
        if (self__.cnt <= 8) {
          return cljs.core.pack_array_node.call(null, inode, null, idx);
        } else {
          return new cljs.core.ArrayNode(null, self__.cnt - 1, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
        }
      } else {
        return new cljs.core.ArrayNode(null, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx, n));
      }
    }
  } else {
    return inode;
  }
};
cljs.core.__GT_ArrayNode = function __GT_ArrayNode(edit, cnt, arr) {
  return new cljs.core.ArrayNode(edit, cnt, arr);
};
cljs.core.hash_collision_node_find_index = function hash_collision_node_find_index(arr, cnt, key) {
  var lim = 2 * cnt;
  var i = 0;
  while (true) {
    if (i < lim) {
      if (cljs.core.key_test.call(null, key, arr[i])) {
        return i;
      } else {
        var G__6925 = i + 2;
        i = G__6925;
        continue;
      }
    } else {
      return-1;
    }
    break;
  }
};
cljs.core.HashCollisionNode = function(edit, collision_hash, cnt, arr) {
  this.edit = edit;
  this.collision_hash = collision_hash;
  this.cnt = cnt;
  this.arr = arr;
};
cljs.core.HashCollisionNode.cljs$lang$type = true;
cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";
cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/HashCollisionNode");
};
cljs.core.HashCollisionNode.prototype.ensure_editable = function(e) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    return inode;
  } else {
    var new_arr = new Array(2 * (self__.cnt + 1));
    cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, 2 * self__.cnt);
    return new cljs.core.HashCollisionNode(e, self__.collision_hash, self__.cnt, new_arr);
  }
};
cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = function(edit__$1, shift, hash, key, removed_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    removed_leaf_QMARK_[0] = true;
    if (self__.cnt === 1) {
      return null;
    } else {
      var editable = inode.ensure_editable(edit__$1);
      var earr = editable.arr;
      earr[idx] = earr[2 * self__.cnt - 2];
      earr[idx + 1] = earr[2 * self__.cnt - 1];
      earr[2 * self__.cnt - 1] = null;
      earr[2 * self__.cnt - 2] = null;
      editable.cnt = editable.cnt - 1;
      return editable;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_seq = function() {
  var self__ = this;
  var inode = this;
  return cljs.core.create_inode_seq.call(null, self__.arr);
};
cljs.core.HashCollisionNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var inode = this;
  return cljs.core.inode_kv_reduce.call(null, self__.arr, f, init);
};
cljs.core.HashCollisionNode.prototype.inode_lookup = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return self__.arr[idx + 1];
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = function(edit__$1, shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      if (self__.arr.length > 2 * self__.cnt) {
        var editable = cljs.core.edit_and_set.call(null, inode, edit__$1, 2 * self__.cnt, key, 2 * self__.cnt + 1, val);
        added_leaf_QMARK_.val = true;
        editable.cnt = editable.cnt + 1;
        return editable;
      } else {
        var len = self__.arr.length;
        var new_arr = new Array(len + 2);
        cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
        new_arr[len] = key;
        new_arr[len + 1] = val;
        added_leaf_QMARK_.val = true;
        return inode.ensure_editable_array(edit__$1, self__.cnt + 1, new_arr);
      }
    } else {
      if (self__.arr[idx + 1] === val) {
        return inode;
      } else {
        return cljs.core.edit_and_set.call(null, inode, edit__$1, idx + 1, val);
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(edit__$1, 1 << (self__.collision_hash >>> shift & 31), [null, inode, null, null])).inode_assoc_BANG_(edit__$1, shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.inode_assoc = function(shift, hash, key, val, added_leaf_QMARK_) {
  var self__ = this;
  var inode = this;
  if (hash === self__.collision_hash) {
    var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
    if (idx === -1) {
      var len = 2 * self__.cnt;
      var new_arr = new Array(len + 2);
      cljs.core.array_copy.call(null, self__.arr, 0, new_arr, 0, len);
      new_arr[len] = key;
      new_arr[len + 1] = val;
      added_leaf_QMARK_.val = true;
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt + 1, new_arr);
    } else {
      if (cljs.core._EQ_.call(null, self__.arr[idx], val)) {
        return inode;
      } else {
        return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt, cljs.core.clone_and_set.call(null, self__.arr, idx + 1, val));
      }
    }
  } else {
    return(new cljs.core.BitmapIndexedNode(null, 1 << (self__.collision_hash >>> shift & 31), [null, inode])).inode_assoc(shift, hash, key, val, added_leaf_QMARK_);
  }
};
cljs.core.HashCollisionNode.prototype.ensure_editable_array = function(e, count, array) {
  var self__ = this;
  var inode = this;
  if (e === self__.edit) {
    self__.arr = array;
    self__.cnt = count;
    return inode;
  } else {
    return new cljs.core.HashCollisionNode(self__.edit, self__.collision_hash, count, array);
  }
};
cljs.core.HashCollisionNode.prototype.inode_find = function(shift, hash, key, not_found) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx < 0) {
    return not_found;
  } else {
    if (cljs.core.key_test.call(null, key, self__.arr[idx])) {
      return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.arr[idx], self__.arr[idx + 1]], null);
    } else {
      return not_found;
    }
  }
};
cljs.core.HashCollisionNode.prototype.inode_without = function(shift, hash, key) {
  var self__ = this;
  var inode = this;
  var idx = cljs.core.hash_collision_node_find_index.call(null, self__.arr, self__.cnt, key);
  if (idx === -1) {
    return inode;
  } else {
    if (self__.cnt === 1) {
      return null;
    } else {
      return new cljs.core.HashCollisionNode(null, self__.collision_hash, self__.cnt - 1, cljs.core.remove_pair.call(null, self__.arr, cljs.core.quot.call(null, idx, 2)));
    }
  }
};
cljs.core.__GT_HashCollisionNode = function __GT_HashCollisionNode(edit, collision_hash, cnt, arr) {
  return new cljs.core.HashCollisionNode(edit, collision_hash, cnt, arr);
};
cljs.core.create_node = function() {
  var create_node = null;
  var create_node__6 = function(shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc(shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  var create_node__7 = function(edit, shift, key1, val1, key2hash, key2, val2) {
    var key1hash = cljs.core.hash.call(null, key1);
    if (key1hash === key2hash) {
      return new cljs.core.HashCollisionNode(null, key1hash, 2, [key1, val1, key2, val2]);
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit, shift, key1hash, key1, val1, added_leaf_QMARK_).inode_assoc_BANG_(edit, shift, key2hash, key2, val2, added_leaf_QMARK_);
    }
  };
  create_node = function(edit, shift, key1, val1, key2hash, key2, val2) {
    switch(arguments.length) {
      case 6:
        return create_node__6.call(this, edit, shift, key1, val1, key2hash, key2);
      case 7:
        return create_node__7.call(this, edit, shift, key1, val1, key2hash, key2, val2);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_node.cljs$core$IFn$_invoke$arity$6 = create_node__6;
  create_node.cljs$core$IFn$_invoke$arity$7 = create_node__7;
  return create_node;
}();
cljs.core.NodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.NodeSeq.cljs$lang$type = true;
cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";
cljs.core.NodeSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/NodeSeq");
};
cljs.core.NodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.NodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.nodes[self__.i], self__.nodes[self__.i + 1]], null);
  } else {
    return cljs.core.first.call(null, self__.s);
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.s == null) {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i + 2, null);
  } else {
    return cljs.core.create_inode_seq.call(null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
  }
};
cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.NodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_NodeSeq = function __GT_NodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.NodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_inode_seq = function() {
  var create_inode_seq = null;
  var create_inode_seq__1 = function(nodes) {
    return create_inode_seq.call(null, nodes, 0, null);
  };
  var create_inode_seq__3 = function(nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          if (!(nodes[j] == null)) {
            return new cljs.core.NodeSeq(null, nodes, j, null, null);
          } else {
            var temp__4124__auto__ = nodes[j + 1];
            if (cljs.core.truth_(temp__4124__auto__)) {
              var node = temp__4124__auto__;
              var temp__4124__auto____$1 = node.inode_seq();
              if (cljs.core.truth_(temp__4124__auto____$1)) {
                var node_seq = temp__4124__auto____$1;
                return new cljs.core.NodeSeq(null, nodes, j + 2, node_seq, null);
              } else {
                var G__6926 = j + 2;
                j = G__6926;
                continue;
              }
            } else {
              var G__6927 = j + 2;
              j = G__6927;
              continue;
            }
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.NodeSeq(null, nodes, i, s, null);
    }
  };
  create_inode_seq = function(nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_inode_seq__1.call(this, nodes);
      case 3:
        return create_inode_seq__3.call(this, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_inode_seq.cljs$core$IFn$_invoke$arity$1 = create_inode_seq__1;
  create_inode_seq.cljs$core$IFn$_invoke$arity$3 = create_inode_seq__3;
  return create_inode_seq;
}();
cljs.core.ArrayNodeSeq = function(meta, nodes, i, s, __hash) {
  this.meta = meta;
  this.nodes = nodes;
  this.i = i;
  this.s = s;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374860;
};
cljs.core.ArrayNodeSeq.cljs$lang$type = true;
cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";
cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ArrayNodeSeq");
};
cljs.core.ArrayNodeSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ArrayNodeSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.first.call(null, self__.s);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.create_array_node_seq.call(null, null, self__.nodes, self__.i, cljs.core.next.call(null, self__.s));
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ArrayNodeSeq(meta__$1, self__.nodes, self__.i, self__.s, self__.__hash);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ArrayNodeSeq = function __GT_ArrayNodeSeq(meta, nodes, i, s, __hash) {
  return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, __hash);
};
cljs.core.create_array_node_seq = function() {
  var create_array_node_seq = null;
  var create_array_node_seq__1 = function(nodes) {
    return create_array_node_seq.call(null, null, nodes, 0, null);
  };
  var create_array_node_seq__4 = function(meta, nodes, i, s) {
    if (s == null) {
      var len = nodes.length;
      var j = i;
      while (true) {
        if (j < len) {
          var temp__4124__auto__ = nodes[j];
          if (cljs.core.truth_(temp__4124__auto__)) {
            var nj = temp__4124__auto__;
            var temp__4124__auto____$1 = nj.inode_seq();
            if (cljs.core.truth_(temp__4124__auto____$1)) {
              var ns = temp__4124__auto____$1;
              return new cljs.core.ArrayNodeSeq(meta, nodes, j + 1, ns, null);
            } else {
              var G__6928 = j + 1;
              j = G__6928;
              continue;
            }
          } else {
            var G__6929 = j + 1;
            j = G__6929;
            continue;
          }
        } else {
          return null;
        }
        break;
      }
    } else {
      return new cljs.core.ArrayNodeSeq(meta, nodes, i, s, null);
    }
  };
  create_array_node_seq = function(meta, nodes, i, s) {
    switch(arguments.length) {
      case 1:
        return create_array_node_seq__1.call(this, meta);
      case 4:
        return create_array_node_seq__4.call(this, meta, nodes, i, s);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = create_array_node_seq__1;
  create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = create_array_node_seq__4;
  return create_array_node_seq;
}();
cljs.core.PersistentHashMap = function(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  this.meta = meta;
  this.cnt = cnt;
  this.root = root;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 16123663;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashMap.cljs$lang$type = true;
cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";
cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentHashMap");
};
cljs.core.PersistentHashMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentHashMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6931 = cljs.core.seq.call(null, coll);
  var chunk__6932 = null;
  var count__6933 = 0;
  var i__6934 = 0;
  while (true) {
    if (i__6934 < count__6933) {
      var vec__6935 = cljs.core._nth.call(null, chunk__6932, i__6934);
      var k = cljs.core.nth.call(null, vec__6935, 0, null);
      var v = cljs.core.nth.call(null, vec__6935, 1, null);
      f.call(null, v, k);
      var G__6939 = seq__6931;
      var G__6940 = chunk__6932;
      var G__6941 = count__6933;
      var G__6942 = i__6934 + 1;
      seq__6931 = G__6939;
      chunk__6932 = G__6940;
      count__6933 = G__6941;
      i__6934 = G__6942;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6931);
      if (temp__4126__auto__) {
        var seq__6931__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6931__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__6931__$1);
          var G__6943 = cljs.core.chunk_rest.call(null, seq__6931__$1);
          var G__6944 = c__4408__auto__;
          var G__6945 = cljs.core.count.call(null, c__4408__auto__);
          var G__6946 = 0;
          seq__6931 = G__6943;
          chunk__6932 = G__6944;
          count__6933 = G__6945;
          i__6934 = G__6946;
          continue;
        } else {
          var vec__6936 = cljs.core.first.call(null, seq__6931__$1);
          var k = cljs.core.nth.call(null, vec__6936, 0, null);
          var v = cljs.core.nth.call(null, vec__6936, 1, null);
          f.call(null, v, k);
          var G__6947 = cljs.core.next.call(null, seq__6931__$1);
          var G__6948 = null;
          var G__6949 = 0;
          var G__6950 = 0;
          seq__6931 = G__6947;
          chunk__6932 = G__6948;
          count__6933 = G__6949;
          i__6934 = G__6950;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  var init__$1 = self__.has_nil_QMARK_ ? f.call(null, init, null, self__.nil_val) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    if (!(self__.root == null)) {
      return self__.root.kv_reduce(f, init__$1);
    } else {
      return init__$1;
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashMap(self__.meta, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashMap(function() {
    var obj6938 = {};
    return obj6938;
  }(), self__.root, self__.cnt, self__.has_nil_QMARK_, self__.nil_val);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._with_meta.call(null, cljs.core.PersistentHashMap.EMPTY, self__.meta);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, self__.root, false, null, null);
    } else {
      return coll__$1;
    }
  } else {
    if (self__.root == null) {
      return coll__$1;
    } else {
      var new_root = self__.root.inode_without(0, cljs.core.hash.call(null, k), k);
      if (new_root === self__.root) {
        return coll__$1;
      } else {
        return new cljs.core.PersistentHashMap(self__.meta, self__.cnt - 1, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
      }
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_ && v === self__.nil_val) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, self__.has_nil_QMARK_ ? self__.cnt : self__.cnt + 1, self__.root, true, v, null);
    }
  } else {
    var added_leaf_QMARK_ = new cljs.core.Box(false);
    var new_root = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc(0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
    if (new_root === self__.root) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentHashMap(self__.meta, added_leaf_QMARK_.val ? self__.cnt + 1 : self__.cnt, new_root, self__.has_nil_QMARK_, self__.nil_val, null);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  if (k == null) {
    return self__.has_nil_QMARK_;
  } else {
    if (self__.root == null) {
      return false;
    } else {
      return!(self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel);
    }
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var s = !(self__.root == null) ? self__.root.inode_seq() : null;
    if (self__.has_nil_QMARK_) {
      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, self__.nil_val], null), s);
    } else {
      return s;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashMap(meta__$1, self__.cnt, self__.root, self__.has_nil_QMARK_, self__.nil_val, self__.__hash);
};
cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__6951 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__6952 = cljs.core.next.call(null, es);
          ret = G__6951;
          es = G__6952;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentHashMap.prototype.call = function() {
  var G__6953 = null;
  var G__6953__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6953__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6953 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6953__2.call(this, self__, k);
      case 3:
        return G__6953__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6953.cljs$core$IFn$_invoke$arity$2 = G__6953__2;
  G__6953.cljs$core$IFn$_invoke$arity$3 = G__6953__3;
  return G__6953;
}();
cljs.core.PersistentHashMap.prototype.apply = function(self__, args6930) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6930)));
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashMap = function __GT_PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash) {
  return new cljs.core.PersistentHashMap(meta, cnt, root, has_nil_QMARK_, nil_val, __hash);
};
cljs.core.PersistentHashMap.EMPTY = new cljs.core.PersistentHashMap(null, 0, null, false, null, 0);
cljs.core.PersistentHashMap.fromArrays = function(ks, vs) {
  var len = ks.length;
  var i = 0;
  var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
  while (true) {
    if (i < len) {
      var G__6954 = i + 1;
      var G__6955 = cljs.core._assoc_BANG_.call(null, out, ks[i], vs[i]);
      i = G__6954;
      out = G__6955;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, out);
    }
    break;
  }
};
cljs.core.TransientHashMap = function(edit, root, count, has_nil_QMARK_, nil_val) {
  this.edit = edit;
  this.root = root;
  this.count = count;
  this.has_nil_QMARK_ = has_nil_QMARK_;
  this.nil_val = nil_val;
  this.cljs$lang$protocol_mask$partition1$ = 56;
  this.cljs$lang$protocol_mask$partition0$ = 258;
};
cljs.core.TransientHashMap.cljs$lang$type = true;
cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";
cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/TransientHashMap");
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = function(tcoll, key) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.without_BANG_(key);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = function(tcoll, key, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.assoc_BANG_(key, val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, val) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.conj_BANG_(val);
};
cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return tcoll__$1.persistent_BANG_();
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, k) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return null;
    }
  } else {
    if (self__.root == null) {
      return null;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, k, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (k == null) {
    if (self__.has_nil_QMARK_) {
      return self__.nil_val;
    } else {
      return not_found;
    }
  } else {
    if (self__.root == null) {
      return not_found;
    } else {
      return self__.root.inode_lookup(0, cljs.core.hash.call(null, k), k, not_found);
    }
  }
};
cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.edit) {
    return self__.count;
  } else {
    throw new Error("count after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.conj_BANG_ = function(o) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (function() {
      var G__6956 = o;
      if (G__6956) {
        var bit__4302__auto__ = G__6956.cljs$lang$protocol_mask$partition0$ & 2048;
        if (bit__4302__auto__ || G__6956.cljs$core$IMapEntry$) {
          return true;
        } else {
          if (!G__6956.cljs$lang$protocol_mask$partition0$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6956);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMapEntry, G__6956);
      }
    }()) {
      return tcoll.assoc_BANG_(cljs.core.key.call(null, o), cljs.core.val.call(null, o));
    } else {
      var es = cljs.core.seq.call(null, o);
      var tcoll__$1 = tcoll;
      while (true) {
        var temp__4124__auto__ = cljs.core.first.call(null, es);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          var G__6957 = cljs.core.next.call(null, es);
          var G__6958 = tcoll__$1.assoc_BANG_(cljs.core.key.call(null, e), cljs.core.val.call(null, e));
          es = G__6957;
          tcoll__$1 = G__6958;
          continue;
        } else {
          return tcoll__$1;
        }
        break;
      }
    }
  } else {
    throw new Error("conj! after persistent");
  }
};
cljs.core.TransientHashMap.prototype.assoc_BANG_ = function(k, v) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.nil_val === v) {
      } else {
        self__.nil_val = v;
      }
      if (self__.has_nil_QMARK_) {
      } else {
        self__.count = self__.count + 1;
        self__.has_nil_QMARK_ = true;
      }
      return tcoll;
    } else {
      var added_leaf_QMARK_ = new cljs.core.Box(false);
      var node = (self__.root == null ? cljs.core.BitmapIndexedNode.EMPTY : self__.root).inode_assoc_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, v, added_leaf_QMARK_);
      if (node === self__.root) {
      } else {
        self__.root = node;
      }
      if (added_leaf_QMARK_.val) {
        self__.count = self__.count + 1;
      } else {
      }
      return tcoll;
    }
  } else {
    throw new Error("assoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.without_BANG_ = function(k) {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    if (k == null) {
      if (self__.has_nil_QMARK_) {
        self__.has_nil_QMARK_ = false;
        self__.nil_val = null;
        self__.count = self__.count - 1;
        return tcoll;
      } else {
        return tcoll;
      }
    } else {
      if (self__.root == null) {
        return tcoll;
      } else {
        var removed_leaf_QMARK_ = new cljs.core.Box(false);
        var node = self__.root.inode_without_BANG_(self__.edit, 0, cljs.core.hash.call(null, k), k, removed_leaf_QMARK_);
        if (node === self__.root) {
        } else {
          self__.root = node;
        }
        if (cljs.core.truth_(removed_leaf_QMARK_[0])) {
          self__.count = self__.count - 1;
        } else {
        }
        return tcoll;
      }
    }
  } else {
    throw new Error("dissoc! after persistent!");
  }
};
cljs.core.TransientHashMap.prototype.persistent_BANG_ = function() {
  var self__ = this;
  var tcoll = this;
  if (self__.edit) {
    self__.edit = null;
    return new cljs.core.PersistentHashMap(null, self__.count, self__.root, self__.has_nil_QMARK_, self__.nil_val, null);
  } else {
    throw new Error("persistent! called twice");
  }
};
cljs.core.__GT_TransientHashMap = function __GT_TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val) {
  return new cljs.core.TransientHashMap(edit, root, count, has_nil_QMARK_, nil_val);
};
cljs.core.tree_map_seq_push = function tree_map_seq_push(node, stack, ascending_QMARK_) {
  var t = node;
  var stack__$1 = stack;
  while (true) {
    if (!(t == null)) {
      var G__6959 = ascending_QMARK_ ? t.left : t.right;
      var G__6960 = cljs.core.conj.call(null, stack__$1, t);
      t = G__6959;
      stack__$1 = G__6960;
      continue;
    } else {
      return stack__$1;
    }
    break;
  }
};
cljs.core.PersistentTreeMapSeq = function(meta, stack, ascending_QMARK_, cnt, __hash) {
  this.meta = meta;
  this.stack = stack;
  this.ascending_QMARK_ = ascending_QMARK_;
  this.cnt = cnt;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374862;
};
cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";
cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentTreeMapSeq");
};
cljs.core.PersistentTreeMapSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMapSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt < 0) {
    return cljs.core.count.call(null, cljs.core.next.call(null, coll__$1)) + 1;
  } else {
    return self__.cnt;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return cljs.core.peek.call(null, self__.stack);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  var t = cljs.core.first.call(null, self__.stack);
  var next_stack = cljs.core.tree_map_seq_push.call(null, self__.ascending_QMARK_ ? t.right : t.left, cljs.core.next.call(null, self__.stack), self__.ascending_QMARK_);
  if (!(next_stack == null)) {
    return new cljs.core.PersistentTreeMapSeq(null, next_stack, self__.ascending_QMARK_, self__.cnt - 1, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return this$__$1;
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMapSeq(meta__$1, self__.stack, self__.ascending_QMARK_, self__.cnt, self__.__hash);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_PersistentTreeMapSeq = function __GT_PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash) {
  return new cljs.core.PersistentTreeMapSeq(meta, stack, ascending_QMARK_, cnt, __hash);
};
cljs.core.create_tree_map_seq = function create_tree_map_seq(tree, ascending_QMARK_, cnt) {
  return new cljs.core.PersistentTreeMapSeq(null, cljs.core.tree_map_seq_push.call(null, tree, null, ascending_QMARK_), ascending_QMARK_, cnt, null);
};
cljs.core.balance_left = function balance_left(key, val, ins, right) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, ins.left.blacken(), new cljs.core.BlackNode(key, val, ins.right, right, null), null);
    } else {
      if (ins.right instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.right.key, ins.right.val, new cljs.core.BlackNode(ins.key, ins.val, ins.left, ins.right.left, null), new cljs.core.BlackNode(key, val, ins.right.right, right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, ins, right, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, ins, right, null);
  }
};
cljs.core.balance_right = function balance_right(key, val, left, ins) {
  if (ins instanceof cljs.core.RedNode) {
    if (ins.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(ins.key, ins.val, new cljs.core.BlackNode(key, val, left, ins.left, null), ins.right.blacken(), null);
    } else {
      if (ins.left instanceof cljs.core.RedNode) {
        return new cljs.core.RedNode(ins.left.key, ins.left.val, new cljs.core.BlackNode(key, val, left, ins.left.left, null), new cljs.core.BlackNode(ins.key, ins.val, ins.left.right, ins.right, null), null);
      } else {
        return new cljs.core.BlackNode(key, val, left, ins, null);
      }
    }
  } else {
    return new cljs.core.BlackNode(key, val, left, ins, null);
  }
};
cljs.core.balance_left_del = function balance_left_del(key, val, del, right) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, del.blacken(), right, null);
  } else {
    if (right instanceof cljs.core.BlackNode) {
      return cljs.core.balance_right.call(null, key, val, del, right.redden());
    } else {
      if (right instanceof cljs.core.RedNode && right.left instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(right.left.key, right.left.val, new cljs.core.BlackNode(key, val, del, right.left.left, null), cljs.core.balance_right.call(null, right.key, right.val, right.left.right, right.right.redden()), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.balance_right_del = function balance_right_del(key, val, left, del) {
  if (del instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(key, val, left, del.blacken(), null);
  } else {
    if (left instanceof cljs.core.BlackNode) {
      return cljs.core.balance_left.call(null, key, val, left.redden(), del);
    } else {
      if (left instanceof cljs.core.RedNode && left.right instanceof cljs.core.BlackNode) {
        return new cljs.core.RedNode(left.right.key, left.right.val, cljs.core.balance_left.call(null, left.key, left.val, left.left.redden(), left.right.left), new cljs.core.BlackNode(key, val, left.right.right, del, null), null);
      } else {
        throw new Error("red-black tree invariant violation");
      }
    }
  }
};
cljs.core.tree_map_kv_reduce = function tree_map_kv_reduce(node, f, init) {
  var init__$1 = !(node.left == null) ? tree_map_kv_reduce.call(null, node.left, f, init) : init;
  if (cljs.core.reduced_QMARK_.call(null, init__$1)) {
    return cljs.core.deref.call(null, init__$1);
  } else {
    var init__$2 = f.call(null, init__$1, node.key, node.val);
    if (cljs.core.reduced_QMARK_.call(null, init__$2)) {
      return cljs.core.deref.call(null, init__$2);
    } else {
      var init__$3 = !(node.right == null) ? tree_map_kv_reduce.call(null, node.right, f, init__$2) : init__$2;
      if (cljs.core.reduced_QMARK_.call(null, init__$3)) {
        return cljs.core.deref.call(null, init__$3);
      } else {
        return init__$3;
      }
    }
  }
};
cljs.core.BlackNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.BlackNode.cljs$lang$type = true;
cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";
cljs.core.BlackNode.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/BlackNode");
};
cljs.core.BlackNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_right(node);
};
cljs.core.BlackNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.BlackNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return node;
};
cljs.core.BlackNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return ins.balance_left(node);
};
cljs.core.BlackNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.BlackNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
};
cljs.core.BlackNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
};
cljs.core.BlackNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_left_del.call(null, self__.key, self__.val, del, self__.right);
};
cljs.core.BlackNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.BlackNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return cljs.core.balance_right_del.call(null, self__.key, self__.val, self__.left, del);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.BlackNode.prototype.call = function() {
  var G__6962 = null;
  var G__6962__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6962__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6962 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6962__2.call(this, self__, k);
      case 3:
        return G__6962__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6962.cljs$core$IFn$_invoke$arity$2 = G__6962__2;
  G__6962.cljs$core$IFn$_invoke$arity$3 = G__6962__3;
  return G__6962;
}();
cljs.core.BlackNode.prototype.apply = function(self__, args6961) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6961)));
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_BlackNode = function __GT_BlackNode(key, val, left, right, __hash) {
  return new cljs.core.BlackNode(key, val, left, right, __hash);
};
cljs.core.RedNode = function(key, val, left, right, __hash) {
  this.key = key;
  this.val = val;
  this.left = left;
  this.right = right;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32402207;
};
cljs.core.RedNode.cljs$lang$type = true;
cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";
cljs.core.RedNode.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/RedNode");
};
cljs.core.RedNode.prototype.add_right = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, ins, null);
};
cljs.core.RedNode.prototype.redden = function() {
  var self__ = this;
  var node = this;
  throw new Error("red-black tree invariant violation");
};
cljs.core.RedNode.prototype.blacken = function() {
  var self__ = this;
  var node = this;
  return new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right, null);
};
cljs.core.RedNode.prototype.add_left = function(ins) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, ins, self__.right, null);
};
cljs.core.RedNode.prototype.replace = function(key__$1, val__$1, left__$1, right__$1) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(key__$1, val__$1, left__$1, right__$1, null);
};
cljs.core.RedNode.prototype.balance_left = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.left instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, self__.left.blacken(), new cljs.core.BlackNode(parent.key, parent.val, self__.right, parent.right, null), null);
  } else {
    if (self__.right instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.right.key, self__.right.val, new cljs.core.BlackNode(self__.key, self__.val, self__.left, self__.right.left, null), new cljs.core.BlackNode(parent.key, parent.val, self__.right.right, parent.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, node, parent.right, null);
    }
  }
};
cljs.core.RedNode.prototype.balance_right = function(parent) {
  var self__ = this;
  var node = this;
  if (self__.right instanceof cljs.core.RedNode) {
    return new cljs.core.RedNode(self__.key, self__.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left, null), self__.right.blacken(), null);
  } else {
    if (self__.left instanceof cljs.core.RedNode) {
      return new cljs.core.RedNode(self__.left.key, self__.left.val, new cljs.core.BlackNode(parent.key, parent.val, parent.left, self__.left.left, null), new cljs.core.BlackNode(self__.key, self__.val, self__.left.right, self__.right, null), null);
    } else {
      return new cljs.core.BlackNode(parent.key, parent.val, parent.left, node, null);
    }
  }
};
cljs.core.RedNode.prototype.remove_left = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, del, self__.right, null);
};
cljs.core.RedNode.prototype.kv_reduce = function(f, init) {
  var self__ = this;
  var node = this;
  return cljs.core.tree_map_kv_reduce.call(null, node, f, init);
};
cljs.core.RedNode.prototype.remove_right = function(del) {
  var self__ = this;
  var node = this;
  return new cljs.core.RedNode(self__.key, self__.val, self__.left, del, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = function(node, k) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, null);
};
cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = function(node, k, not_found) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._nth.call(null, node__$1, k, not_found);
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = function(node, n) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return null;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = function(node, n, not_found) {
  var self__ = this;
  var node__$1 = this;
  if (n === 0) {
    return self__.key;
  } else {
    if (n === 1) {
      return self__.val;
    } else {
      return not_found;
    }
  }
};
cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = function(node, n, v) {
  var self__ = this;
  var node__$1 = this;
  return(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null)).cljs$core$IVector$_assoc_n$arity$3(null, n, v);
};
cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return null;
};
cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return 2;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.key;
};
cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return self__.val;
};
cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
};
cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.PersistentVector.EMPTY;
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = function(node, f) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f);
};
cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = function(node, f, start) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.ci_reduce.call(null, node__$1, f, start);
};
cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(node, k, v) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.assoc.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), k, v);
};
cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = function(node) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, self__.val), self__.key);
};
cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(node, meta) {
  var self__ = this;
  var node__$1 = this;
  return cljs.core.with_meta.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val], null), meta);
};
cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = function(node, o) {
  var self__ = this;
  var node__$1 = this;
  return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key, self__.val, o], null);
};
cljs.core.RedNode.prototype.call = function() {
  var G__6964 = null;
  var G__6964__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6964__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var node = self____$1;
    return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6964 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6964__2.call(this, self__, k);
      case 3:
        return G__6964__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6964.cljs$core$IFn$_invoke$arity$2 = G__6964__2;
  G__6964.cljs$core$IFn$_invoke$arity$3 = G__6964__3;
  return G__6964;
}();
cljs.core.RedNode.prototype.apply = function(self__, args6963) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6963)));
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var node = this;
  return node.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_RedNode = function __GT_RedNode(key, val, left, right, __hash) {
  return new cljs.core.RedNode(key, val, left, right, __hash);
};
cljs.core.tree_map_add = function tree_map_add(comp, tree, k, v, found) {
  if (tree == null) {
    return new cljs.core.RedNode(k, v, null, null, null);
  } else {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return null;
    } else {
      if (c < 0) {
        var ins = tree_map_add.call(null, comp, tree.left, k, v, found);
        if (!(ins == null)) {
          return tree.add_left(ins);
        } else {
          return null;
        }
      } else {
        var ins = tree_map_add.call(null, comp, tree.right, k, v, found);
        if (!(ins == null)) {
          return tree.add_right(ins);
        } else {
          return null;
        }
      }
    }
  }
};
cljs.core.tree_map_append = function tree_map_append(left, right) {
  if (left == null) {
    return right;
  } else {
    if (right == null) {
      return left;
    } else {
      if (left instanceof cljs.core.RedNode) {
        if (right instanceof cljs.core.RedNode) {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.RedNode(left.key, left.val, left.left, app.left, null), new cljs.core.RedNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return new cljs.core.RedNode(left.key, left.val, left.left, new cljs.core.RedNode(right.key, right.val, app, right.right, null), null);
          }
        } else {
          return new cljs.core.RedNode(left.key, left.val, left.left, tree_map_append.call(null, left.right, right), null);
        }
      } else {
        if (right instanceof cljs.core.RedNode) {
          return new cljs.core.RedNode(right.key, right.val, tree_map_append.call(null, left, right.left), right.right, null);
        } else {
          var app = tree_map_append.call(null, left.right, right.left);
          if (app instanceof cljs.core.RedNode) {
            return new cljs.core.RedNode(app.key, app.val, new cljs.core.BlackNode(left.key, left.val, left.left, app.left, null), new cljs.core.BlackNode(right.key, right.val, app.right, right.right, null), null);
          } else {
            return cljs.core.balance_left_del.call(null, left.key, left.val, left.left, new cljs.core.BlackNode(right.key, right.val, app, right.right, null));
          }
        }
      }
    }
  }
};
cljs.core.tree_map_remove = function tree_map_remove(comp, tree, k, found) {
  if (!(tree == null)) {
    var c = comp.call(null, k, tree.key);
    if (c === 0) {
      found[0] = tree;
      return cljs.core.tree_map_append.call(null, tree.left, tree.right);
    } else {
      if (c < 0) {
        var del = tree_map_remove.call(null, comp, tree.left, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.left instanceof cljs.core.BlackNode) {
            return cljs.core.balance_left_del.call(null, tree.key, tree.val, del, tree.right);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, del, tree.right, null);
          }
        } else {
          return null;
        }
      } else {
        var del = tree_map_remove.call(null, comp, tree.right, k, found);
        if (!(del == null) || !(found[0] == null)) {
          if (tree.right instanceof cljs.core.BlackNode) {
            return cljs.core.balance_right_del.call(null, tree.key, tree.val, tree.left, del);
          } else {
            return new cljs.core.RedNode(tree.key, tree.val, tree.left, del, null);
          }
        } else {
          return null;
        }
      }
    }
  } else {
    return null;
  }
};
cljs.core.tree_map_replace = function tree_map_replace(comp, tree, k, v) {
  var tk = tree.key;
  var c = comp.call(null, k, tk);
  if (c === 0) {
    return tree.replace(tk, v, tree.left, tree.right);
  } else {
    if (c < 0) {
      return tree.replace(tk, tree.val, tree_map_replace.call(null, comp, tree.left, k, v), tree.right);
    } else {
      return tree.replace(tk, tree.val, tree.left, tree_map_replace.call(null, comp, tree.right, k, v));
    }
  }
};
cljs.core.PersistentTreeMap = function(comp, tree, cnt, meta, __hash) {
  this.comp = comp;
  this.tree = tree;
  this.cnt = cnt;
  this.meta = meta;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 418776847;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeMap.cljs$lang$type = true;
cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";
cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentTreeMap");
};
cljs.core.PersistentTreeMap.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__6966 = cljs.core.seq.call(null, coll);
  var chunk__6967 = null;
  var count__6968 = 0;
  var i__6969 = 0;
  while (true) {
    if (i__6969 < count__6968) {
      var vec__6970 = cljs.core._nth.call(null, chunk__6967, i__6969);
      var k = cljs.core.nth.call(null, vec__6970, 0, null);
      var v = cljs.core.nth.call(null, vec__6970, 1, null);
      f.call(null, v, k);
      var G__6972 = seq__6966;
      var G__6973 = chunk__6967;
      var G__6974 = count__6968;
      var G__6975 = i__6969 + 1;
      seq__6966 = G__6972;
      chunk__6967 = G__6973;
      count__6968 = G__6974;
      i__6969 = G__6975;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__6966);
      if (temp__4126__auto__) {
        var seq__6966__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__6966__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__6966__$1);
          var G__6976 = cljs.core.chunk_rest.call(null, seq__6966__$1);
          var G__6977 = c__4408__auto__;
          var G__6978 = cljs.core.count.call(null, c__4408__auto__);
          var G__6979 = 0;
          seq__6966 = G__6976;
          chunk__6967 = G__6977;
          count__6968 = G__6978;
          i__6969 = G__6979;
          continue;
        } else {
          var vec__6971 = cljs.core.first.call(null, seq__6966__$1);
          var k = cljs.core.nth.call(null, vec__6971, 0, null);
          var v = cljs.core.nth.call(null, vec__6971, 1, null);
          f.call(null, v, k);
          var G__6980 = cljs.core.next.call(null, seq__6966__$1);
          var G__6981 = null;
          var G__6982 = 0;
          var G__6983 = 0;
          seq__6966 = G__6980;
          chunk__6967 = G__6981;
          count__6968 = G__6982;
          i__6969 = G__6983;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.get = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeMap.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.keys.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.vals.call(null, coll));
};
cljs.core.PersistentTreeMap.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeMap.prototype.entry_at = function(k) {
  var self__ = this;
  var coll = this;
  var t = self__.tree;
  while (true) {
    if (!(t == null)) {
      var c = self__.comp.call(null, k, t.key);
      if (c === 0) {
        return t;
      } else {
        if (c < 0) {
          var G__6984 = t.left;
          t = G__6984;
          continue;
        } else {
          var G__6985 = t.right;
          t = G__6985;
          continue;
        }
      }
    } else {
      return null;
    }
    break;
  }
};
cljs.core.PersistentTreeMap.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, k, null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, k, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = coll__$1.entry_at(k);
  if (!(n == null)) {
    return n.val;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = function(coll, f, init) {
  var self__ = this;
  var coll__$1 = this;
  if (!(self__.tree == null)) {
    return cljs.core.tree_map_kv_reduce.call(null, self__.tree, f, init);
  } else {
    return init;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, self__.meta, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.cnt;
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, false, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_map.call(null, coll__$1, other);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeMap.EMPTY, self__.meta);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_remove.call(null, self__.comp, self__.tree, k, found);
  if (t == null) {
    if (cljs.core.nth.call(null, found, 0) == null) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, null, 0, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt - 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = function(coll, k, v) {
  var self__ = this;
  var coll__$1 = this;
  var found = [null];
  var t = cljs.core.tree_map_add.call(null, self__.comp, self__.tree, k, v, found);
  if (t == null) {
    var found_node = cljs.core.nth.call(null, found, 0);
    if (cljs.core._EQ_.call(null, v, found_node.val)) {
      return coll__$1;
    } else {
      return new cljs.core.PersistentTreeMap(self__.comp, cljs.core.tree_map_replace.call(null, self__.comp, self__.tree, k, v), self__.cnt, self__.meta, null);
    }
  } else {
    return new cljs.core.PersistentTreeMap(self__.comp, t.blacken(), self__.cnt + 1, self__.meta, null);
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = function(coll, k) {
  var self__ = this;
  var coll__$1 = this;
  return!(coll__$1.entry_at(k) == null);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, true, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeMap(self__.comp, self__.tree, self__.cnt, meta__$1, self__.__hash);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.vector_QMARK_.call(null, entry)) {
    return cljs.core._assoc.call(null, coll__$1, cljs.core._nth.call(null, entry, 0), cljs.core._nth.call(null, entry, 1));
  } else {
    var ret = coll__$1;
    var es = cljs.core.seq.call(null, entry);
    while (true) {
      if (es == null) {
        return ret;
      } else {
        var e = cljs.core.first.call(null, es);
        if (cljs.core.vector_QMARK_.call(null, e)) {
          var G__6986 = cljs.core._assoc.call(null, ret, cljs.core._nth.call(null, e, 0), cljs.core._nth.call(null, e, 1));
          var G__6987 = cljs.core.next.call(null, es);
          ret = G__6986;
          es = G__6987;
          continue;
        } else {
          throw new Error("conj on a map takes map entries or seqables of map entries");
        }
      }
      break;
    }
  }
};
cljs.core.PersistentTreeMap.prototype.call = function() {
  var G__6988 = null;
  var G__6988__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__6988__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__6988 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__6988__2.call(this, self__, k);
      case 3:
        return G__6988__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__6988.cljs$core$IFn$_invoke$arity$2 = G__6988__2;
  G__6988.cljs$core$IFn$_invoke$arity$3 = G__6988__3;
  return G__6988;
}();
cljs.core.PersistentTreeMap.prototype.apply = function(self__, args6965) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args6965)));
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    return cljs.core.create_tree_map_seq.call(null, self__.tree, ascending_QMARK_, self__.cnt);
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  if (self__.cnt > 0) {
    var stack = null;
    var t = self__.tree;
    while (true) {
      if (!(t == null)) {
        var c = self__.comp.call(null, k, t.key);
        if (c === 0) {
          return new cljs.core.PersistentTreeMapSeq(null, cljs.core.conj.call(null, stack, t), ascending_QMARK_, -1, null);
        } else {
          if (cljs.core.truth_(ascending_QMARK_)) {
            if (c < 0) {
              var G__6989 = cljs.core.conj.call(null, stack, t);
              var G__6990 = t.left;
              stack = G__6989;
              t = G__6990;
              continue;
            } else {
              var G__6991 = stack;
              var G__6992 = t.right;
              stack = G__6991;
              t = G__6992;
              continue;
            }
          } else {
            if (c > 0) {
              var G__6993 = cljs.core.conj.call(null, stack, t);
              var G__6994 = t.right;
              stack = G__6993;
              t = G__6994;
              continue;
            } else {
              var G__6995 = stack;
              var G__6996 = t.left;
              stack = G__6995;
              t = G__6996;
              continue;
            }
          }
        }
      } else {
        if (stack == null) {
          return null;
        } else {
          return new cljs.core.PersistentTreeMapSeq(null, stack, ascending_QMARK_, -1, null);
        }
      }
      break;
    }
  } else {
    return null;
  }
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.key.call(null, entry);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.comp;
};
cljs.core.__GT_PersistentTreeMap = function __GT_PersistentTreeMap(comp, tree, cnt, meta, __hash) {
  return new cljs.core.PersistentTreeMap(comp, tree, cnt, meta, __hash);
};
cljs.core.PersistentTreeMap.EMPTY = new cljs.core.PersistentTreeMap(cljs.core.compare, null, 0, null, 0);
cljs.core.hash_map = function() {
  var hash_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashMap.EMPTY);
    while (true) {
      if (in$) {
        var G__6997 = cljs.core.nnext.call(null, in$);
        var G__6998 = cljs.core.assoc_BANG_.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__6997;
        out = G__6998;
        continue;
      } else {
        return cljs.core.persistent_BANG_.call(null, out);
      }
      break;
    }
  };
  var hash_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hash_map__delegate.call(this, keyvals);
  };
  hash_map.cljs$lang$maxFixedArity = 0;
  hash_map.cljs$lang$applyTo = function(arglist__6999) {
    var keyvals = cljs.core.seq(arglist__6999);
    return hash_map__delegate(keyvals);
  };
  hash_map.cljs$core$IFn$_invoke$arity$variadic = hash_map__delegate;
  return hash_map;
}();
cljs.core.array_map = function() {
  var array_map__delegate = function(keyvals) {
    return new cljs.core.PersistentArrayMap(null, cljs.core.quot.call(null, cljs.core.count.call(null, keyvals), 2), cljs.core.apply.call(null, cljs.core.array, keyvals), null);
  };
  var array_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return array_map__delegate.call(this, keyvals);
  };
  array_map.cljs$lang$maxFixedArity = 0;
  array_map.cljs$lang$applyTo = function(arglist__7000) {
    var keyvals = cljs.core.seq(arglist__7000);
    return array_map__delegate(keyvals);
  };
  array_map.cljs$core$IFn$_invoke$arity$variadic = array_map__delegate;
  return array_map;
}();
cljs.core.obj_map = function() {
  var obj_map__delegate = function(keyvals) {
    var ks = [];
    var obj = function() {
      var obj7004 = {};
      return obj7004;
    }();
    var kvs = cljs.core.seq.call(null, keyvals);
    while (true) {
      if (kvs) {
        ks.push(cljs.core.first.call(null, kvs));
        obj[cljs.core.first.call(null, kvs)] = cljs.core.second.call(null, kvs);
        var G__7005 = cljs.core.nnext.call(null, kvs);
        kvs = G__7005;
        continue;
      } else {
        return cljs.core.ObjMap.fromObject(ks, obj);
      }
      break;
    }
  };
  var obj_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return obj_map__delegate.call(this, keyvals);
  };
  obj_map.cljs$lang$maxFixedArity = 0;
  obj_map.cljs$lang$applyTo = function(arglist__7006) {
    var keyvals = cljs.core.seq(arglist__7006);
    return obj_map__delegate(keyvals);
  };
  obj_map.cljs$core$IFn$_invoke$arity$variadic = obj_map__delegate;
  return obj_map;
}();
cljs.core.sorted_map = function() {
  var sorted_map__delegate = function(keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = cljs.core.PersistentTreeMap.EMPTY;
    while (true) {
      if (in$) {
        var G__7007 = cljs.core.nnext.call(null, in$);
        var G__7008 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7007;
        out = G__7008;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map = function(var_args) {
    var keyvals = null;
    if (arguments.length > 0) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_map__delegate.call(this, keyvals);
  };
  sorted_map.cljs$lang$maxFixedArity = 0;
  sorted_map.cljs$lang$applyTo = function(arglist__7009) {
    var keyvals = cljs.core.seq(arglist__7009);
    return sorted_map__delegate(keyvals);
  };
  sorted_map.cljs$core$IFn$_invoke$arity$variadic = sorted_map__delegate;
  return sorted_map;
}();
cljs.core.sorted_map_by = function() {
  var sorted_map_by__delegate = function(comparator, keyvals) {
    var in$ = cljs.core.seq.call(null, keyvals);
    var out = new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator.call(null, comparator), null, 0, null, 0);
    while (true) {
      if (in$) {
        var G__7010 = cljs.core.nnext.call(null, in$);
        var G__7011 = cljs.core.assoc.call(null, out, cljs.core.first.call(null, in$), cljs.core.second.call(null, in$));
        in$ = G__7010;
        out = G__7011;
        continue;
      } else {
        return out;
      }
      break;
    }
  };
  var sorted_map_by = function(comparator, var_args) {
    var keyvals = null;
    if (arguments.length > 1) {
      keyvals = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_map_by__delegate.call(this, comparator, keyvals);
  };
  sorted_map_by.cljs$lang$maxFixedArity = 1;
  sorted_map_by.cljs$lang$applyTo = function(arglist__7012) {
    var comparator = cljs.core.first(arglist__7012);
    var keyvals = cljs.core.rest(arglist__7012);
    return sorted_map_by__delegate(comparator, keyvals);
  };
  sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = sorted_map_by__delegate;
  return sorted_map_by;
}();
cljs.core.KeySeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.KeySeq.cljs$lang$type = true;
cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";
cljs.core.KeySeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/KeySeq");
};
cljs.core.KeySeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.KeySeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7013 = self__.mseq;
    if (G__7013) {
      var bit__4302__auto__ = G__7013.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4302__auto__ || G__7013.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7013.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7013);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7013);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.KeySeq(nseq, self__._meta);
  }
};
cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._key.call(null, me);
};
cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7014 = self__.mseq;
    if (G__7014) {
      var bit__4302__auto__ = G__7014.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4302__auto__ || G__7014.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7014.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7014);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7014);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.KeySeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.KeySeq(self__.mseq, new_meta);
};
cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_KeySeq = function __GT_KeySeq(mseq, _meta) {
  return new cljs.core.KeySeq(mseq, _meta);
};
cljs.core.keys = function keys(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.KeySeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.key = function key(map_entry) {
  return cljs.core._key.call(null, map_entry);
};
cljs.core.ValSeq = function(mseq, _meta) {
  this.mseq = mseq;
  this._meta = _meta;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 32374988;
};
cljs.core.ValSeq.cljs$lang$type = true;
cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";
cljs.core.ValSeq.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ValSeq");
};
cljs.core.ValSeq.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.ValSeq.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__._meta;
};
cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7015 = self__.mseq;
    if (G__7015) {
      var bit__4302__auto__ = G__7015.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4302__auto__ || G__7015.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7015.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7015);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7015);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (nseq == null) {
    return null;
  } else {
    return new cljs.core.ValSeq(nseq, self__._meta);
  }
};
cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.hash_ordered_coll.call(null, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.equiv_sequential.call(null, coll__$1, other);
};
cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__._meta);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = function(coll, f) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = function(coll, f, start) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.seq_reduce.call(null, f, start, coll__$1);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var me = cljs.core._first.call(null, self__.mseq);
  return cljs.core._val.call(null, me);
};
cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var nseq = function() {
    var G__7016 = self__.mseq;
    if (G__7016) {
      var bit__4302__auto__ = G__7016.cljs$lang$protocol_mask$partition0$ & 128;
      if (bit__4302__auto__ || G__7016.cljs$core$INext$) {
        return true;
      } else {
        if (!G__7016.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7016);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.INext, G__7016);
    }
  }() ? cljs.core._next.call(null, self__.mseq) : cljs.core.next.call(null, self__.mseq);
  if (!(nseq == null)) {
    return new cljs.core.ValSeq(nseq, self__._meta);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return coll__$1;
};
cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, new_meta) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.ValSeq(self__.mseq, new_meta);
};
cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.cons.call(null, o, coll__$1);
};
cljs.core.__GT_ValSeq = function __GT_ValSeq(mseq, _meta) {
  return new cljs.core.ValSeq(mseq, _meta);
};
cljs.core.vals = function vals(hash_map) {
  var temp__4126__auto__ = cljs.core.seq.call(null, hash_map);
  if (temp__4126__auto__) {
    var mseq = temp__4126__auto__;
    return new cljs.core.ValSeq(mseq, null);
  } else {
    return null;
  }
};
cljs.core.val = function val(map_entry) {
  return cljs.core._val.call(null, map_entry);
};
cljs.core.merge = function() {
  var merge__delegate = function(maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      return cljs.core.reduce.call(null, function(p1__7017_SHARP_, p2__7018_SHARP_) {
        return cljs.core.conj.call(null, function() {
          var or__3639__auto__ = p1__7017_SHARP_;
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return cljs.core.PersistentArrayMap.EMPTY;
          }
        }(), p2__7018_SHARP_);
      }, maps);
    } else {
      return null;
    }
  };
  var merge = function(var_args) {
    var maps = null;
    if (arguments.length > 0) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return merge__delegate.call(this, maps);
  };
  merge.cljs$lang$maxFixedArity = 0;
  merge.cljs$lang$applyTo = function(arglist__7019) {
    var maps = cljs.core.seq(arglist__7019);
    return merge__delegate(maps);
  };
  merge.cljs$core$IFn$_invoke$arity$variadic = merge__delegate;
  return merge;
}();
cljs.core.merge_with = function() {
  var merge_with__delegate = function(f, maps) {
    if (cljs.core.truth_(cljs.core.some.call(null, cljs.core.identity, maps))) {
      var merge_entry = function(m, e) {
        var k = cljs.core.first.call(null, e);
        var v = cljs.core.second.call(null, e);
        if (cljs.core.contains_QMARK_.call(null, m, k)) {
          return cljs.core.assoc.call(null, m, k, f.call(null, cljs.core.get.call(null, m, k), v));
        } else {
          return cljs.core.assoc.call(null, m, k, v);
        }
      };
      var merge2 = function(merge_entry) {
        return function(m1, m2) {
          return cljs.core.reduce.call(null, merge_entry, function() {
            var or__3639__auto__ = m1;
            if (cljs.core.truth_(or__3639__auto__)) {
              return or__3639__auto__;
            } else {
              return cljs.core.PersistentArrayMap.EMPTY;
            }
          }(), cljs.core.seq.call(null, m2));
        };
      }(merge_entry);
      return cljs.core.reduce.call(null, merge2, maps);
    } else {
      return null;
    }
  };
  var merge_with = function(f, var_args) {
    var maps = null;
    if (arguments.length > 1) {
      maps = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return merge_with__delegate.call(this, f, maps);
  };
  merge_with.cljs$lang$maxFixedArity = 1;
  merge_with.cljs$lang$applyTo = function(arglist__7020) {
    var f = cljs.core.first(arglist__7020);
    var maps = cljs.core.rest(arglist__7020);
    return merge_with__delegate(f, maps);
  };
  merge_with.cljs$core$IFn$_invoke$arity$variadic = merge_with__delegate;
  return merge_with;
}();
cljs.core.select_keys = function select_keys(map, keyseq) {
  var ret = cljs.core.PersistentArrayMap.EMPTY;
  var keys = cljs.core.seq.call(null, keyseq);
  while (true) {
    if (keys) {
      var key = cljs.core.first.call(null, keys);
      var entry = cljs.core.get.call(null, map, key, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185));
      var G__7021 = cljs.core.not_EQ_.call(null, entry, new cljs.core.Keyword("cljs.core", "not-found", "cljs.core/not-found", -1572889185)) ? cljs.core.assoc.call(null, ret, key, entry) : ret;
      var G__7022 = cljs.core.next.call(null, keys);
      ret = G__7021;
      keys = G__7022;
      continue;
    } else {
      return ret;
    }
    break;
  }
};
cljs.core.PersistentHashSet = function(meta, hash_map, __hash) {
  this.meta = meta;
  this.hash_map = hash_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 15077647;
  this.cljs$lang$protocol_mask$partition1$ = 8196;
};
cljs.core.PersistentHashSet.cljs$lang$type = true;
cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";
cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentHashSet");
};
cljs.core.PersistentHashSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentHashSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentHashSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentHashSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentHashSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__7025 = cljs.core.seq.call(null, coll);
  var chunk__7026 = null;
  var count__7027 = 0;
  var i__7028 = 0;
  while (true) {
    if (i__7028 < count__7027) {
      var vec__7029 = cljs.core._nth.call(null, chunk__7026, i__7028);
      var k = cljs.core.nth.call(null, vec__7029, 0, null);
      var v = cljs.core.nth.call(null, vec__7029, 1, null);
      f.call(null, v, k);
      var G__7031 = seq__7025;
      var G__7032 = chunk__7026;
      var G__7033 = count__7027;
      var G__7034 = i__7028 + 1;
      seq__7025 = G__7031;
      chunk__7026 = G__7032;
      count__7027 = G__7033;
      i__7028 = G__7034;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__7025);
      if (temp__4126__auto__) {
        var seq__7025__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7025__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__7025__$1);
          var G__7035 = cljs.core.chunk_rest.call(null, seq__7025__$1);
          var G__7036 = c__4408__auto__;
          var G__7037 = cljs.core.count.call(null, c__4408__auto__);
          var G__7038 = 0;
          seq__7025 = G__7035;
          chunk__7026 = G__7036;
          count__7027 = G__7037;
          i__7028 = G__7038;
          continue;
        } else {
          var vec__7030 = cljs.core.first.call(null, seq__7025__$1);
          var k = cljs.core.nth.call(null, vec__7030, 0, null);
          var v = cljs.core.nth.call(null, vec__7030, 1, null);
          f.call(null, v, k);
          var G__7039 = cljs.core.next.call(null, seq__7025__$1);
          var G__7040 = null;
          var G__7041 = 0;
          var G__7042 = 0;
          seq__7025 = G__7039;
          chunk__7026 = G__7040;
          count__7027 = G__7041;
          i__7028 = G__7042;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core._contains_key_QMARK_.call(null, self__.hash_map, v)) {
    return v;
  } else {
    return not_found;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._count.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__7023_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__7023_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.TransientHashSet(cljs.core._as_transient.call(null, self__.hash_map));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentHashSet.EMPTY, self__.meta);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core._dissoc.call(null, self__.hash_map, v), null);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.hash_map);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(meta__$1, self__.hash_map, self__.__hash);
};
cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentHashSet(self__.meta, cljs.core.assoc.call(null, self__.hash_map, o, null), null);
};
cljs.core.PersistentHashSet.prototype.call = function() {
  var G__7043 = null;
  var G__7043__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7043__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7043 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7043__2.call(this, self__, k);
      case 3:
        return G__7043__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7043.cljs$core$IFn$_invoke$arity$2 = G__7043__2;
  G__7043.cljs$core$IFn$_invoke$arity$3 = G__7043__3;
  return G__7043;
}();
cljs.core.PersistentHashSet.prototype.apply = function(self__, args7024) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7024)));
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.__GT_PersistentHashSet = function __GT_PersistentHashSet(meta, hash_map, __hash) {
  return new cljs.core.PersistentHashSet(meta, hash_map, __hash);
};
cljs.core.PersistentHashSet.EMPTY = new cljs.core.PersistentHashSet(null, cljs.core.PersistentArrayMap.EMPTY, 0);
cljs.core.PersistentHashSet.fromArray = function(items, no_clone) {
  var len = items.length;
  if (len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD) {
    var arr = no_clone ? items : cljs.core.aclone.call(null, items);
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
    while (true) {
      if (i < len) {
        var G__7044 = i + 1;
        var G__7045 = cljs.core._assoc_BANG_.call(null, out, items[i], null);
        i = G__7044;
        out = G__7045;
        continue;
      } else {
        return new cljs.core.PersistentHashSet(null, cljs.core._persistent_BANG_.call(null, out), null);
      }
      break;
    }
  } else {
    var i = 0;
    var out = cljs.core.transient$.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < len) {
        var G__7046 = i + 1;
        var G__7047 = cljs.core._conj_BANG_.call(null, out, items[i]);
        i = G__7046;
        out = G__7047;
        continue;
      } else {
        return cljs.core._persistent_BANG_.call(null, out);
      }
      break;
    }
  }
};
cljs.core.TransientHashSet = function(transient_map) {
  this.transient_map = transient_map;
  this.cljs$lang$protocol_mask$partition0$ = 259;
  this.cljs$lang$protocol_mask$partition1$ = 136;
};
cljs.core.TransientHashSet.cljs$lang$type = true;
cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";
cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/TransientHashSet");
};
cljs.core.TransientHashSet.prototype.call = function() {
  var G__7049 = null;
  var G__7049__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return null;
    } else {
      return k;
    }
  };
  var G__7049__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var tcoll = self____$1;
    if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
      return not_found;
    } else {
      return k;
    }
  };
  G__7049 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7049__2.call(this, self__, k);
      case 3:
        return G__7049__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7049.cljs$core$IFn$_invoke$arity$2 = G__7049__2;
  G__7049.cljs$core$IFn$_invoke$arity$3 = G__7049__3;
  return G__7049;
}();
cljs.core.TransientHashSet.prototype.apply = function(self__, args7048) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7048)));
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return null;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var tcoll = this;
  if (cljs.core._lookup.call(null, self__.transient_map, k, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return k;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core._lookup.call(null, tcoll__$1, v, null);
};
cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(tcoll, v, not_found) {
  var self__ = this;
  var tcoll__$1 = this;
  if (cljs.core._lookup.call(null, self__.transient_map, v, cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel) {
    return not_found;
  } else {
    return v;
  }
};
cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return cljs.core.count.call(null, self__.transient_map);
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = function(tcoll, v) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.dissoc_BANG_.call(null, self__.transient_map, v);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = function(tcoll, o) {
  var self__ = this;
  var tcoll__$1 = this;
  self__.transient_map = cljs.core.assoc_BANG_.call(null, self__.transient_map, o, null);
  return tcoll__$1;
};
cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = function(tcoll) {
  var self__ = this;
  var tcoll__$1 = this;
  return new cljs.core.PersistentHashSet(null, cljs.core.persistent_BANG_.call(null, self__.transient_map), null);
};
cljs.core.__GT_TransientHashSet = function __GT_TransientHashSet(transient_map) {
  return new cljs.core.TransientHashSet(transient_map);
};
cljs.core.PersistentTreeSet = function(meta, tree_map, __hash) {
  this.meta = meta;
  this.tree_map = tree_map;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 417730831;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.PersistentTreeSet.cljs$lang$type = true;
cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";
cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/PersistentTreeSet");
};
cljs.core.PersistentTreeSet.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.PersistentTreeSet.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.PersistentTreeSet.prototype.keys = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.entries = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.set_entries_iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.values = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.iterator.call(null, cljs.core.seq.call(null, coll));
};
cljs.core.PersistentTreeSet.prototype.has = function(k) {
  var self__ = this;
  var coll = this;
  return cljs.core.contains_QMARK_.call(null, coll, k);
};
cljs.core.PersistentTreeSet.prototype.forEach = function(f) {
  var self__ = this;
  var coll = this;
  var seq__7052 = cljs.core.seq.call(null, coll);
  var chunk__7053 = null;
  var count__7054 = 0;
  var i__7055 = 0;
  while (true) {
    if (i__7055 < count__7054) {
      var vec__7056 = cljs.core._nth.call(null, chunk__7053, i__7055);
      var k = cljs.core.nth.call(null, vec__7056, 0, null);
      var v = cljs.core.nth.call(null, vec__7056, 1, null);
      f.call(null, v, k);
      var G__7058 = seq__7052;
      var G__7059 = chunk__7053;
      var G__7060 = count__7054;
      var G__7061 = i__7055 + 1;
      seq__7052 = G__7058;
      chunk__7053 = G__7059;
      count__7054 = G__7060;
      i__7055 = G__7061;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__7052);
      if (temp__4126__auto__) {
        var seq__7052__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7052__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__7052__$1);
          var G__7062 = cljs.core.chunk_rest.call(null, seq__7052__$1);
          var G__7063 = c__4408__auto__;
          var G__7064 = cljs.core.count.call(null, c__4408__auto__);
          var G__7065 = 0;
          seq__7052 = G__7062;
          chunk__7053 = G__7063;
          count__7054 = G__7064;
          i__7055 = G__7065;
          continue;
        } else {
          var vec__7057 = cljs.core.first.call(null, seq__7052__$1);
          var k = cljs.core.nth.call(null, vec__7057, 0, null);
          var v = cljs.core.nth.call(null, vec__7057, 1, null);
          f.call(null, v, k);
          var G__7066 = cljs.core.next.call(null, seq__7052__$1);
          var G__7067 = null;
          var G__7068 = 0;
          var G__7069 = 0;
          seq__7052 = G__7066;
          chunk__7053 = G__7067;
          count__7054 = G__7068;
          i__7055 = G__7069;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._lookup.call(null, coll__$1, v, null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = function(coll, v, not_found) {
  var self__ = this;
  var coll__$1 = this;
  var n = self__.tree_map.entry_at(v);
  if (!(n == null)) {
    return n.key;
  } else {
    return not_found;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return self__.meta;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.count.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  if (cljs.core.count.call(null, self__.tree_map) > 0) {
    return cljs.core.map.call(null, cljs.core.key, cljs.core.rseq.call(null, self__.tree_map));
  } else {
    return null;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_unordered_coll.call(null, coll__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(coll, other) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.set_QMARK_.call(null, other) && cljs.core.count.call(null, coll__$1) === cljs.core.count.call(null, other) && cljs.core.every_QMARK_.call(null, function(coll__$1) {
    return function(p1__7050_SHARP_) {
      return cljs.core.contains_QMARK_.call(null, coll__$1, p1__7050_SHARP_);
    };
  }(coll__$1), other);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.PersistentTreeSet.EMPTY, self__.meta);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = function(coll, v) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.dissoc.call(null, self__.tree_map, v), null);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.keys.call(null, self__.tree_map);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(coll, meta__$1) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(meta__$1, self__.tree_map, self__.__hash);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = function(coll, o) {
  var self__ = this;
  var coll__$1 = this;
  return new cljs.core.PersistentTreeSet(self__.meta, cljs.core.assoc.call(null, self__.tree_map, o, null), null);
};
cljs.core.PersistentTreeSet.prototype.call = function() {
  var G__7070 = null;
  var G__7070__2 = function(self__, k) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
  };
  var G__7070__3 = function(self__, k, not_found) {
    var self__ = this;
    var self____$1 = this;
    var coll = self____$1;
    return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
  };
  G__7070 = function(self__, k, not_found) {
    switch(arguments.length) {
      case 2:
        return G__7070__2.call(this, self__, k);
      case 3:
        return G__7070__3.call(this, self__, k, not_found);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7070.cljs$core$IFn$_invoke$arity$2 = G__7070__2;
  G__7070.cljs$core$IFn$_invoke$arity$3 = G__7070__3;
  return G__7070;
}();
cljs.core.PersistentTreeSet.prototype.apply = function(self__, args7051) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7051)));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = function(k) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$2(null, k);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = function(k, not_found) {
  var self__ = this;
  var coll = this;
  return coll.cljs$core$ILookup$_lookup$arity$3(null, k, not_found);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = function(coll, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq.call(null, self__.tree_map, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = function(coll, k, ascending_QMARK_) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core.map.call(null, cljs.core.key, cljs.core._sorted_seq_from.call(null, self__.tree_map, k, ascending_QMARK_));
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = function(coll, entry) {
  var self__ = this;
  var coll__$1 = this;
  return entry;
};
cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = function(coll) {
  var self__ = this;
  var coll__$1 = this;
  return cljs.core._comparator.call(null, self__.tree_map);
};
cljs.core.__GT_PersistentTreeSet = function __GT_PersistentTreeSet(meta, tree_map, __hash) {
  return new cljs.core.PersistentTreeSet(meta, tree_map, __hash);
};
cljs.core.PersistentTreeSet.EMPTY = new cljs.core.PersistentTreeSet(null, cljs.core.PersistentTreeMap.EMPTY, 0);
cljs.core.set_from_indexed_seq = function set_from_indexed_seq(iseq) {
  var arr = iseq.arr;
  var ret = function() {
    var a__4502__auto__ = arr;
    var i = 0;
    var res = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
    while (true) {
      if (i < a__4502__auto__.length) {
        var G__7071 = i + 1;
        var G__7072 = cljs.core._conj_BANG_.call(null, res, arr[i]);
        i = G__7071;
        res = G__7072;
        continue;
      } else {
        return res;
      }
      break;
    }
  }();
  return cljs.core._persistent_BANG_.call(null, ret);
};
cljs.core.set = function set(coll) {
  var in$ = cljs.core.seq.call(null, coll);
  if (in$ == null) {
    return cljs.core.PersistentHashSet.EMPTY;
  } else {
    if (in$ instanceof cljs.core.IndexedSeq && in$.i === 0) {
      return cljs.core.set_from_indexed_seq.call(null, in$);
    } else {
      var in$__$1 = in$;
      var out = cljs.core._as_transient.call(null, cljs.core.PersistentHashSet.EMPTY);
      while (true) {
        if (!(in$__$1 == null)) {
          var G__7073 = cljs.core._next.call(null, in$__$1);
          var G__7074 = cljs.core._conj_BANG_.call(null, out, cljs.core._first.call(null, in$__$1));
          in$__$1 = G__7073;
          out = G__7074;
          continue;
        } else {
          return cljs.core._persistent_BANG_.call(null, out);
        }
        break;
      }
    }
  }
};
cljs.core.hash_set = function() {
  var hash_set = null;
  var hash_set__0 = function() {
    return cljs.core.PersistentHashSet.EMPTY;
  };
  var hash_set__1 = function() {
    var G__7075__delegate = function(keys) {
      return cljs.core.set.call(null, keys);
    };
    var G__7075 = function(var_args) {
      var keys = null;
      if (arguments.length > 0) {
        keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
      }
      return G__7075__delegate.call(this, keys);
    };
    G__7075.cljs$lang$maxFixedArity = 0;
    G__7075.cljs$lang$applyTo = function(arglist__7076) {
      var keys = cljs.core.seq(arglist__7076);
      return G__7075__delegate(keys);
    };
    G__7075.cljs$core$IFn$_invoke$arity$variadic = G__7075__delegate;
    return G__7075;
  }();
  hash_set = function(var_args) {
    var keys = var_args;
    switch(arguments.length) {
      case 0:
        return hash_set__0.call(this);
      default:
        return hash_set__1.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq(arguments, 0));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  hash_set.cljs$lang$maxFixedArity = 0;
  hash_set.cljs$lang$applyTo = hash_set__1.cljs$lang$applyTo;
  hash_set.cljs$core$IFn$_invoke$arity$0 = hash_set__0;
  hash_set.cljs$core$IFn$_invoke$arity$variadic = hash_set__1.cljs$core$IFn$_invoke$arity$variadic;
  return hash_set;
}();
cljs.core.sorted_set = function() {
  var sorted_set__delegate = function(keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, cljs.core.PersistentTreeSet.EMPTY, keys);
  };
  var sorted_set = function(var_args) {
    var keys = null;
    if (arguments.length > 0) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sorted_set__delegate.call(this, keys);
  };
  sorted_set.cljs$lang$maxFixedArity = 0;
  sorted_set.cljs$lang$applyTo = function(arglist__7077) {
    var keys = cljs.core.seq(arglist__7077);
    return sorted_set__delegate(keys);
  };
  sorted_set.cljs$core$IFn$_invoke$arity$variadic = sorted_set__delegate;
  return sorted_set;
}();
cljs.core.sorted_set_by = function() {
  var sorted_set_by__delegate = function(comparator, keys) {
    return cljs.core.reduce.call(null, cljs.core._conj, new cljs.core.PersistentTreeSet(null, cljs.core.sorted_map_by.call(null, comparator), 0), keys);
  };
  var sorted_set_by = function(comparator, var_args) {
    var keys = null;
    if (arguments.length > 1) {
      keys = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return sorted_set_by__delegate.call(this, comparator, keys);
  };
  sorted_set_by.cljs$lang$maxFixedArity = 1;
  sorted_set_by.cljs$lang$applyTo = function(arglist__7078) {
    var comparator = cljs.core.first(arglist__7078);
    var keys = cljs.core.rest(arglist__7078);
    return sorted_set_by__delegate(comparator, keys);
  };
  sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = sorted_set_by__delegate;
  return sorted_set_by;
}();
cljs.core.replace = function() {
  var replace = null;
  var replace__1 = function(smap) {
    return cljs.core.map.call(null, function(p1__7079_SHARP_) {
      var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__7079_SHARP_);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var e = temp__4124__auto__;
        return cljs.core.val.call(null, e);
      } else {
        return p1__7079_SHARP_;
      }
    });
  };
  var replace__2 = function(smap, coll) {
    if (cljs.core.vector_QMARK_.call(null, coll)) {
      var n = cljs.core.count.call(null, coll);
      return cljs.core.reduce.call(null, function(n) {
        return function(v, i) {
          var temp__4124__auto__ = cljs.core.find.call(null, smap, cljs.core.nth.call(null, v, i));
          if (cljs.core.truth_(temp__4124__auto__)) {
            var e = temp__4124__auto__;
            return cljs.core.assoc.call(null, v, i, cljs.core.second.call(null, e));
          } else {
            return v;
          }
        };
      }(n), coll, cljs.core.take.call(null, n, cljs.core.iterate.call(null, cljs.core.inc, 0)));
    } else {
      return cljs.core.map.call(null, function(p1__7080_SHARP_) {
        var temp__4124__auto__ = cljs.core.find.call(null, smap, p1__7080_SHARP_);
        if (cljs.core.truth_(temp__4124__auto__)) {
          var e = temp__4124__auto__;
          return cljs.core.second.call(null, e);
        } else {
          return p1__7080_SHARP_;
        }
      }, coll);
    }
  };
  replace = function(smap, coll) {
    switch(arguments.length) {
      case 1:
        return replace__1.call(this, smap);
      case 2:
        return replace__2.call(this, smap, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  replace.cljs$core$IFn$_invoke$arity$1 = replace__1;
  replace.cljs$core$IFn$_invoke$arity$2 = replace__2;
  return replace;
}();
cljs.core.distinct = function distinct(coll) {
  var step = function step(xs, seen) {
    return new cljs.core.LazySeq(null, function() {
      return function(p__7087, seen__$1) {
        while (true) {
          var vec__7088 = p__7087;
          var f = cljs.core.nth.call(null, vec__7088, 0, null);
          var xs__$1 = vec__7088;
          var temp__4126__auto__ = cljs.core.seq.call(null, xs__$1);
          if (temp__4126__auto__) {
            var s = temp__4126__auto__;
            if (cljs.core.contains_QMARK_.call(null, seen__$1, f)) {
              var G__7089 = cljs.core.rest.call(null, s);
              var G__7090 = seen__$1;
              p__7087 = G__7089;
              seen__$1 = G__7090;
              continue;
            } else {
              return cljs.core.cons.call(null, f, step.call(null, cljs.core.rest.call(null, s), cljs.core.conj.call(null, seen__$1, f)));
            }
          } else {
            return null;
          }
          break;
        }
      }.call(null, xs, seen);
    }, null, null);
  };
  return step.call(null, coll, cljs.core.PersistentHashSet.EMPTY);
};
cljs.core.butlast = function butlast(s) {
  var ret = cljs.core.PersistentVector.EMPTY;
  var s__$1 = s;
  while (true) {
    if (cljs.core.next.call(null, s__$1)) {
      var G__7091 = cljs.core.conj.call(null, ret, cljs.core.first.call(null, s__$1));
      var G__7092 = cljs.core.next.call(null, s__$1);
      ret = G__7091;
      s__$1 = G__7092;
      continue;
    } else {
      return cljs.core.seq.call(null, ret);
    }
    break;
  }
};
cljs.core.name = function name(x) {
  if (function() {
    var G__7094 = x;
    if (G__7094) {
      var bit__4295__auto__ = G__7094.cljs$lang$protocol_mask$partition1$ & 4096;
      if (bit__4295__auto__ || G__7094.cljs$core$INamed$) {
        return true;
      } else {
        return false;
      }
    } else {
      return false;
    }
  }()) {
    return cljs.core._name.call(null, x);
  } else {
    if (typeof x === "string") {
      return x;
    } else {
      throw new Error("Doesn't support name: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x));
    }
  }
};
cljs.core.zipmap = function zipmap(keys, vals) {
  var map = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
  var ks = cljs.core.seq.call(null, keys);
  var vs = cljs.core.seq.call(null, vals);
  while (true) {
    if (ks && vs) {
      var G__7095 = cljs.core.assoc_BANG_.call(null, map, cljs.core.first.call(null, ks), cljs.core.first.call(null, vs));
      var G__7096 = cljs.core.next.call(null, ks);
      var G__7097 = cljs.core.next.call(null, vs);
      map = G__7095;
      ks = G__7096;
      vs = G__7097;
      continue;
    } else {
      return cljs.core.persistent_BANG_.call(null, map);
    }
    break;
  }
};
cljs.core.max_key = function() {
  var max_key = null;
  var max_key__2 = function(k, x) {
    return x;
  };
  var max_key__3 = function(k, x, y) {
    if (k.call(null, x) > k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var max_key__4 = function() {
    var G__7100__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__7098_SHARP_, p2__7099_SHARP_) {
        return max_key.call(null, k, p1__7098_SHARP_, p2__7099_SHARP_);
      }, max_key.call(null, k, x, y), more);
    };
    var G__7100 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7100__delegate.call(this, k, x, y, more);
    };
    G__7100.cljs$lang$maxFixedArity = 3;
    G__7100.cljs$lang$applyTo = function(arglist__7101) {
      var k = cljs.core.first(arglist__7101);
      arglist__7101 = cljs.core.next(arglist__7101);
      var x = cljs.core.first(arglist__7101);
      arglist__7101 = cljs.core.next(arglist__7101);
      var y = cljs.core.first(arglist__7101);
      var more = cljs.core.rest(arglist__7101);
      return G__7100__delegate(k, x, y, more);
    };
    G__7100.cljs$core$IFn$_invoke$arity$variadic = G__7100__delegate;
    return G__7100;
  }();
  max_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return max_key__2.call(this, k, x);
      case 3:
        return max_key__3.call(this, k, x, y);
      default:
        return max_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  max_key.cljs$lang$maxFixedArity = 3;
  max_key.cljs$lang$applyTo = max_key__4.cljs$lang$applyTo;
  max_key.cljs$core$IFn$_invoke$arity$2 = max_key__2;
  max_key.cljs$core$IFn$_invoke$arity$3 = max_key__3;
  max_key.cljs$core$IFn$_invoke$arity$variadic = max_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return max_key;
}();
cljs.core.min_key = function() {
  var min_key = null;
  var min_key__2 = function(k, x) {
    return x;
  };
  var min_key__3 = function(k, x, y) {
    if (k.call(null, x) < k.call(null, y)) {
      return x;
    } else {
      return y;
    }
  };
  var min_key__4 = function() {
    var G__7104__delegate = function(k, x, y, more) {
      return cljs.core.reduce.call(null, function(p1__7102_SHARP_, p2__7103_SHARP_) {
        return min_key.call(null, k, p1__7102_SHARP_, p2__7103_SHARP_);
      }, min_key.call(null, k, x, y), more);
    };
    var G__7104 = function(k, x, y, var_args) {
      var more = null;
      if (arguments.length > 3) {
        more = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7104__delegate.call(this, k, x, y, more);
    };
    G__7104.cljs$lang$maxFixedArity = 3;
    G__7104.cljs$lang$applyTo = function(arglist__7105) {
      var k = cljs.core.first(arglist__7105);
      arglist__7105 = cljs.core.next(arglist__7105);
      var x = cljs.core.first(arglist__7105);
      arglist__7105 = cljs.core.next(arglist__7105);
      var y = cljs.core.first(arglist__7105);
      var more = cljs.core.rest(arglist__7105);
      return G__7104__delegate(k, x, y, more);
    };
    G__7104.cljs$core$IFn$_invoke$arity$variadic = G__7104__delegate;
    return G__7104;
  }();
  min_key = function(k, x, y, var_args) {
    var more = var_args;
    switch(arguments.length) {
      case 2:
        return min_key__2.call(this, k, x);
      case 3:
        return min_key__3.call(this, k, x, y);
      default:
        return min_key__4.cljs$core$IFn$_invoke$arity$variadic(k, x, y, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  min_key.cljs$lang$maxFixedArity = 3;
  min_key.cljs$lang$applyTo = min_key__4.cljs$lang$applyTo;
  min_key.cljs$core$IFn$_invoke$arity$2 = min_key__2;
  min_key.cljs$core$IFn$_invoke$arity$3 = min_key__3;
  min_key.cljs$core$IFn$_invoke$arity$variadic = min_key__4.cljs$core$IFn$_invoke$arity$variadic;
  return min_key;
}();
cljs.core.ArrayList = function(arr) {
  this.arr = arr;
};
cljs.core.ArrayList.cljs$lang$type = true;
cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";
cljs.core.ArrayList.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/ArrayList");
};
cljs.core.ArrayList.prototype.add = function(x) {
  var self__ = this;
  var _ = this;
  return self__.arr.push(x);
};
cljs.core.ArrayList.prototype.size = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length;
};
cljs.core.ArrayList.prototype.clear = function() {
  var self__ = this;
  var _ = this;
  return self__.arr = [];
};
cljs.core.ArrayList.prototype.isEmpty = function() {
  var self__ = this;
  var _ = this;
  return self__.arr.length === 0;
};
cljs.core.ArrayList.prototype.toArray = function() {
  var self__ = this;
  var _ = this;
  return self__.arr;
};
cljs.core.__GT_ArrayList = function __GT_ArrayList(arr) {
  return new cljs.core.ArrayList(arr);
};
cljs.core.array_list = function array_list() {
  return new cljs.core.ArrayList([]);
};
cljs.core.partition_all = function() {
  var partition_all = null;
  var partition_all__1 = function(n) {
    return function(f1) {
      var a = cljs.core.array_list.call(null);
      return function(a) {
        return function() {
          var G__7106 = null;
          var G__7106__0 = function() {
            return f1.call(null);
          };
          var G__7106__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return f1.call(null, result, v);
            }();
            return f1.call(null, result__$1);
          };
          var G__7106__2 = function(result, input) {
            a.add(input);
            if (n === a.size()) {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return f1.call(null, result, v);
            } else {
              return result;
            }
          };
          G__7106 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__7106__0.call(this);
              case 1:
                return G__7106__1.call(this, result);
              case 2:
                return G__7106__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__7106.cljs$core$IFn$_invoke$arity$0 = G__7106__0;
          G__7106.cljs$core$IFn$_invoke$arity$1 = G__7106__1;
          G__7106.cljs$core$IFn$_invoke$arity$2 = G__7106__2;
          return G__7106;
        }();
      }(a);
    };
  };
  var partition_all__2 = function(n, coll) {
    return partition_all.call(null, n, n, coll);
  };
  var partition_all__3 = function(n, step, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.take.call(null, n, s), partition_all.call(null, n, step, cljs.core.drop.call(null, step, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_all = function(n, step, coll) {
    switch(arguments.length) {
      case 1:
        return partition_all__1.call(this, n);
      case 2:
        return partition_all__2.call(this, n, step);
      case 3:
        return partition_all__3.call(this, n, step, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_all.cljs$core$IFn$_invoke$arity$1 = partition_all__1;
  partition_all.cljs$core$IFn$_invoke$arity$2 = partition_all__2;
  partition_all.cljs$core$IFn$_invoke$arity$3 = partition_all__3;
  return partition_all;
}();
cljs.core.take_while = function() {
  var take_while = null;
  var take_while__1 = function(pred) {
    return function(f1) {
      return function() {
        var G__7107 = null;
        var G__7107__0 = function() {
          return f1.call(null);
        };
        var G__7107__1 = function(result) {
          return f1.call(null, result);
        };
        var G__7107__2 = function(result, input) {
          if (cljs.core.truth_(pred.call(null, input))) {
            return f1.call(null, result, input);
          } else {
            return cljs.core.reduced.call(null, result);
          }
        };
        G__7107 = function(result, input) {
          switch(arguments.length) {
            case 0:
              return G__7107__0.call(this);
            case 1:
              return G__7107__1.call(this, result);
            case 2:
              return G__7107__2.call(this, result, input);
          }
          throw new Error("Invalid arity: " + arguments.length);
        };
        G__7107.cljs$core$IFn$_invoke$arity$0 = G__7107__0;
        G__7107.cljs$core$IFn$_invoke$arity$1 = G__7107__1;
        G__7107.cljs$core$IFn$_invoke$arity$2 = G__7107__2;
        return G__7107;
      }();
    };
  };
  var take_while__2 = function(pred, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        if (cljs.core.truth_(pred.call(null, cljs.core.first.call(null, s)))) {
          return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_while.call(null, pred, cljs.core.rest.call(null, s)));
        } else {
          return null;
        }
      } else {
        return null;
      }
    }, null, null);
  };
  take_while = function(pred, coll) {
    switch(arguments.length) {
      case 1:
        return take_while__1.call(this, pred);
      case 2:
        return take_while__2.call(this, pred, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_while.cljs$core$IFn$_invoke$arity$1 = take_while__1;
  take_while.cljs$core$IFn$_invoke$arity$2 = take_while__2;
  return take_while;
}();
cljs.core.mk_bound_fn = function mk_bound_fn(sc, test, key) {
  return function(e) {
    var comp = cljs.core._comparator.call(null, sc);
    return test.call(null, comp.call(null, cljs.core._entry_key.call(null, sc, e), key), 0);
  };
};
cljs.core.subseq = function() {
  var subseq = null;
  var subseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._GT_, cljs.core._GT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, true);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__7110 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__7110, 0, null);
        var s = vec__7110;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, true));
    }
  };
  var subseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, start_key, true);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__7111 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__7111, 0, null);
      var s = vec__7111;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, end_test, end_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, start_test, start_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  subseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return subseq__3.call(this, sc, start_test, start_key);
      case 5:
        return subseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  subseq.cljs$core$IFn$_invoke$arity$3 = subseq__3;
  subseq.cljs$core$IFn$_invoke$arity$5 = subseq__5;
  return subseq;
}();
cljs.core.rsubseq = function() {
  var rsubseq = null;
  var rsubseq__3 = function(sc, test, key) {
    var include = cljs.core.mk_bound_fn.call(null, sc, test, key);
    if (cljs.core.truth_(cljs.core.PersistentHashSet.fromArray([cljs.core._LT_, cljs.core._LT__EQ_], true).call(null, test))) {
      var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, key, false);
      if (cljs.core.truth_(temp__4126__auto__)) {
        var vec__7114 = temp__4126__auto__;
        var e = cljs.core.nth.call(null, vec__7114, 0, null);
        var s = vec__7114;
        if (cljs.core.truth_(include.call(null, e))) {
          return s;
        } else {
          return cljs.core.next.call(null, s);
        }
      } else {
        return null;
      }
    } else {
      return cljs.core.take_while.call(null, include, cljs.core._sorted_seq.call(null, sc, false));
    }
  };
  var rsubseq__5 = function(sc, start_test, start_key, end_test, end_key) {
    var temp__4126__auto__ = cljs.core._sorted_seq_from.call(null, sc, end_key, false);
    if (cljs.core.truth_(temp__4126__auto__)) {
      var vec__7115 = temp__4126__auto__;
      var e = cljs.core.nth.call(null, vec__7115, 0, null);
      var s = vec__7115;
      return cljs.core.take_while.call(null, cljs.core.mk_bound_fn.call(null, sc, start_test, start_key), cljs.core.truth_(cljs.core.mk_bound_fn.call(null, sc, end_test, end_key).call(null, e)) ? s : cljs.core.next.call(null, s));
    } else {
      return null;
    }
  };
  rsubseq = function(sc, start_test, start_key, end_test, end_key) {
    switch(arguments.length) {
      case 3:
        return rsubseq__3.call(this, sc, start_test, start_key);
      case 5:
        return rsubseq__5.call(this, sc, start_test, start_key, end_test, end_key);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rsubseq.cljs$core$IFn$_invoke$arity$3 = rsubseq__3;
  rsubseq.cljs$core$IFn$_invoke$arity$5 = rsubseq__5;
  return rsubseq;
}();
cljs.core.Range = function(meta, start, end, step, __hash) {
  this.meta = meta;
  this.start = start;
  this.end = end;
  this.step = step;
  this.__hash = __hash;
  this.cljs$lang$protocol_mask$partition0$ = 32375006;
  this.cljs$lang$protocol_mask$partition1$ = 8192;
};
cljs.core.Range.cljs$lang$type = true;
cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";
cljs.core.Range.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Range");
};
cljs.core.Range.prototype.toString = function() {
  var self__ = this;
  var coll = this;
  return cljs.core.pr_str_STAR_.call(null, coll);
};
cljs.core.Range.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = function(rng, n) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      throw new Error("Index out of bounds");
    }
  }
};
cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = function(rng, n, not_found) {
  var self__ = this;
  var rng__$1 = this;
  if (n < cljs.core._count.call(null, rng__$1)) {
    return self__.start + n * self__.step;
  } else {
    if (self__.start > self__.end && self__.step === 0) {
      return self__.start;
    } else {
      return not_found;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return self__.meta;
};
cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return new cljs.core.Range(self__.meta, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start + self__.step < self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  } else {
    if (self__.start + self__.step > self__.end) {
      return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core.not.call(null, cljs.core._seq.call(null, rng__$1))) {
    return 0;
  } else {
    return Math.ceil.call(null, (self__.end - self__.start) / self__.step);
  }
};
cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  var h__4050__auto__ = self__.__hash;
  if (!(h__4050__auto__ == null)) {
    return h__4050__auto__;
  } else {
    var h__4050__auto____$1 = cljs.core.hash_ordered_coll.call(null, rng__$1);
    self__.__hash = h__4050__auto____$1;
    return h__4050__auto____$1;
  }
};
cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(rng, other) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.equiv_sequential.call(null, rng__$1, other);
};
cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.with_meta.call(null, cljs.core.List.EMPTY, self__.meta);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = function(rng, f) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f);
};
cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = function(rng, f, s) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.ci_reduce.call(null, rng__$1, f, s);
};
cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (cljs.core._seq.call(null, rng__$1) == null) {
    return null;
  } else {
    return self__.start;
  }
};
cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (!(cljs.core._seq.call(null, rng__$1) == null)) {
    return new cljs.core.Range(self__.meta, self__.start + self__.step, self__.end, self__.step, null);
  } else {
    return cljs.core.List.EMPTY;
  }
};
cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = function(rng) {
  var self__ = this;
  var rng__$1 = this;
  if (self__.step > 0) {
    if (self__.start < self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  } else {
    if (self__.start > self__.end) {
      return rng__$1;
    } else {
      return null;
    }
  }
};
cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(rng, meta__$1) {
  var self__ = this;
  var rng__$1 = this;
  return new cljs.core.Range(meta__$1, self__.start, self__.end, self__.step, self__.__hash);
};
cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = function(rng, o) {
  var self__ = this;
  var rng__$1 = this;
  return cljs.core.cons.call(null, o, rng__$1);
};
cljs.core.__GT_Range = function __GT_Range(meta, start, end, step, __hash) {
  return new cljs.core.Range(meta, start, end, step, __hash);
};
cljs.core.range = function() {
  var range = null;
  var range__0 = function() {
    return range.call(null, 0, Number.MAX_VALUE, 1);
  };
  var range__1 = function(end) {
    return range.call(null, 0, end, 1);
  };
  var range__2 = function(start, end) {
    return range.call(null, start, end, 1);
  };
  var range__3 = function(start, end, step) {
    return new cljs.core.Range(null, start, end, step, null);
  };
  range = function(start, end, step) {
    switch(arguments.length) {
      case 0:
        return range__0.call(this);
      case 1:
        return range__1.call(this, start);
      case 2:
        return range__2.call(this, start, end);
      case 3:
        return range__3.call(this, start, end, step);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  range.cljs$core$IFn$_invoke$arity$0 = range__0;
  range.cljs$core$IFn$_invoke$arity$1 = range__1;
  range.cljs$core$IFn$_invoke$arity$2 = range__2;
  range.cljs$core$IFn$_invoke$arity$3 = range__3;
  return range;
}();
cljs.core.take_nth = function() {
  var take_nth = null;
  var take_nth__1 = function(n) {
    return function(f1) {
      var ia = cljs.core.atom.call(null, -1);
      return function(ia) {
        return function() {
          var G__7116 = null;
          var G__7116__0 = function() {
            return f1.call(null);
          };
          var G__7116__1 = function(result) {
            return f1.call(null, result);
          };
          var G__7116__2 = function(result, input) {
            var i = cljs.core.swap_BANG_.call(null, ia, cljs.core.inc);
            if (cljs.core.rem.call(null, i, n) === 0) {
              return f1.call(null, result, input);
            } else {
              return result;
            }
          };
          G__7116 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__7116__0.call(this);
              case 1:
                return G__7116__1.call(this, result);
              case 2:
                return G__7116__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__7116.cljs$core$IFn$_invoke$arity$0 = G__7116__0;
          G__7116.cljs$core$IFn$_invoke$arity$1 = G__7116__1;
          G__7116.cljs$core$IFn$_invoke$arity$2 = G__7116__2;
          return G__7116;
        }();
      }(ia);
    };
  };
  var take_nth__2 = function(n, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return cljs.core.cons.call(null, cljs.core.first.call(null, s), take_nth.call(null, n, cljs.core.drop.call(null, n, s)));
      } else {
        return null;
      }
    }, null, null);
  };
  take_nth = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return take_nth__1.call(this, n);
      case 2:
        return take_nth__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  take_nth.cljs$core$IFn$_invoke$arity$1 = take_nth__1;
  take_nth.cljs$core$IFn$_invoke$arity$2 = take_nth__2;
  return take_nth;
}();
cljs.core.split_with = function split_with(pred, coll) {
  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.call(null, pred, coll), cljs.core.drop_while.call(null, pred, coll)], null);
};
cljs.core.partition_by = function() {
  var partition_by = null;
  var partition_by__1 = function(f) {
    return function(f1) {
      var a = cljs.core.array_list.call(null);
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(a, pa) {
        return function() {
          var G__7118 = null;
          var G__7118__0 = function() {
            return f1.call(null);
          };
          var G__7118__1 = function(result) {
            var result__$1 = cljs.core.truth_(a.isEmpty()) ? result : function() {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              return f1.call(null, result, v);
            }();
            return f1.call(null, result__$1);
          };
          var G__7118__2 = function(result, input) {
            var pval = cljs.core.deref.call(null, pa);
            var val = f.call(null, input);
            cljs.core.reset_BANG_.call(null, pa, val);
            if (cljs.core.keyword_identical_QMARK_.call(null, pval, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439)) || cljs.core._EQ_.call(null, val, pval)) {
              a.add(input);
              return result;
            } else {
              var v = cljs.core.vec.call(null, a.toArray());
              a.clear();
              var ret = f1.call(null, result, v);
              if (cljs.core.reduced_QMARK_.call(null, ret)) {
              } else {
                a.add(input);
              }
              return ret;
            }
          };
          G__7118 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__7118__0.call(this);
              case 1:
                return G__7118__1.call(this, result);
              case 2:
                return G__7118__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__7118.cljs$core$IFn$_invoke$arity$0 = G__7118__0;
          G__7118.cljs$core$IFn$_invoke$arity$1 = G__7118__1;
          G__7118.cljs$core$IFn$_invoke$arity$2 = G__7118__2;
          return G__7118;
        }();
      }(a, pa);
    };
  };
  var partition_by__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        var fst = cljs.core.first.call(null, s);
        var fv = f.call(null, fst);
        var run = cljs.core.cons.call(null, fst, cljs.core.take_while.call(null, function(fst, fv, s, temp__4126__auto__) {
          return function(p1__7117_SHARP_) {
            return cljs.core._EQ_.call(null, fv, f.call(null, p1__7117_SHARP_));
          };
        }(fst, fv, s, temp__4126__auto__), cljs.core.next.call(null, s)));
        return cljs.core.cons.call(null, run, partition_by.call(null, f, cljs.core.seq.call(null, cljs.core.drop.call(null, cljs.core.count.call(null, run), s))));
      } else {
        return null;
      }
    }, null, null);
  };
  partition_by = function(f, coll) {
    switch(arguments.length) {
      case 1:
        return partition_by__1.call(this, f);
      case 2:
        return partition_by__2.call(this, f, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  partition_by.cljs$core$IFn$_invoke$arity$1 = partition_by__1;
  partition_by.cljs$core$IFn$_invoke$arity$2 = partition_by__2;
  return partition_by;
}();
cljs.core.frequencies = function frequencies(coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(counts, x) {
    return cljs.core.assoc_BANG_.call(null, counts, x, cljs.core.get.call(null, counts, x, 0) + 1);
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.reductions = function() {
  var reductions = null;
  var reductions__2 = function(f, coll) {
    return new cljs.core.LazySeq(null, function() {
      var temp__4124__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4124__auto__) {
        var s = temp__4124__auto__;
        return reductions.call(null, f, cljs.core.first.call(null, s), cljs.core.rest.call(null, s));
      } else {
        return cljs.core._conj.call(null, cljs.core.List.EMPTY, f.call(null));
      }
    }, null, null);
  };
  var reductions__3 = function(f, init, coll) {
    return cljs.core.cons.call(null, init, new cljs.core.LazySeq(null, function() {
      var temp__4126__auto__ = cljs.core.seq.call(null, coll);
      if (temp__4126__auto__) {
        var s = temp__4126__auto__;
        return reductions.call(null, f, f.call(null, init, cljs.core.first.call(null, s)), cljs.core.rest.call(null, s));
      } else {
        return null;
      }
    }, null, null));
  };
  reductions = function(f, init, coll) {
    switch(arguments.length) {
      case 2:
        return reductions__2.call(this, f, init);
      case 3:
        return reductions__3.call(this, f, init, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reductions.cljs$core$IFn$_invoke$arity$2 = reductions__2;
  reductions.cljs$core$IFn$_invoke$arity$3 = reductions__3;
  return reductions;
}();
cljs.core.juxt = function() {
  var juxt = null;
  var juxt__1 = function(f) {
    return function() {
      var G__7129 = null;
      var G__7129__0 = function() {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null)], null);
      };
      var G__7129__1 = function(x) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x)], null);
      };
      var G__7129__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y)], null);
      };
      var G__7129__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z)], null);
      };
      var G__7129__4 = function() {
        var G__7130__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args)], null);
        };
        var G__7130 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7130__delegate.call(this, x, y, z, args);
        };
        G__7130.cljs$lang$maxFixedArity = 3;
        G__7130.cljs$lang$applyTo = function(arglist__7131) {
          var x = cljs.core.first(arglist__7131);
          arglist__7131 = cljs.core.next(arglist__7131);
          var y = cljs.core.first(arglist__7131);
          arglist__7131 = cljs.core.next(arglist__7131);
          var z = cljs.core.first(arglist__7131);
          var args = cljs.core.rest(arglist__7131);
          return G__7130__delegate(x, y, z, args);
        };
        G__7130.cljs$core$IFn$_invoke$arity$variadic = G__7130__delegate;
        return G__7130;
      }();
      G__7129 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7129__0.call(this);
          case 1:
            return G__7129__1.call(this, x);
          case 2:
            return G__7129__2.call(this, x, y);
          case 3:
            return G__7129__3.call(this, x, y, z);
          default:
            return G__7129__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7129.cljs$lang$maxFixedArity = 3;
      G__7129.cljs$lang$applyTo = G__7129__4.cljs$lang$applyTo;
      G__7129.cljs$core$IFn$_invoke$arity$0 = G__7129__0;
      G__7129.cljs$core$IFn$_invoke$arity$1 = G__7129__1;
      G__7129.cljs$core$IFn$_invoke$arity$2 = G__7129__2;
      G__7129.cljs$core$IFn$_invoke$arity$3 = G__7129__3;
      G__7129.cljs$core$IFn$_invoke$arity$variadic = G__7129__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7129;
    }();
  };
  var juxt__2 = function(f, g) {
    return function() {
      var G__7132 = null;
      var G__7132__0 = function() {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null)], null);
      };
      var G__7132__1 = function(x) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x)], null);
      };
      var G__7132__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y)], null);
      };
      var G__7132__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z)], null);
      };
      var G__7132__4 = function() {
        var G__7133__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args)], null);
        };
        var G__7133 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7133__delegate.call(this, x, y, z, args);
        };
        G__7133.cljs$lang$maxFixedArity = 3;
        G__7133.cljs$lang$applyTo = function(arglist__7134) {
          var x = cljs.core.first(arglist__7134);
          arglist__7134 = cljs.core.next(arglist__7134);
          var y = cljs.core.first(arglist__7134);
          arglist__7134 = cljs.core.next(arglist__7134);
          var z = cljs.core.first(arglist__7134);
          var args = cljs.core.rest(arglist__7134);
          return G__7133__delegate(x, y, z, args);
        };
        G__7133.cljs$core$IFn$_invoke$arity$variadic = G__7133__delegate;
        return G__7133;
      }();
      G__7132 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7132__0.call(this);
          case 1:
            return G__7132__1.call(this, x);
          case 2:
            return G__7132__2.call(this, x, y);
          case 3:
            return G__7132__3.call(this, x, y, z);
          default:
            return G__7132__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7132.cljs$lang$maxFixedArity = 3;
      G__7132.cljs$lang$applyTo = G__7132__4.cljs$lang$applyTo;
      G__7132.cljs$core$IFn$_invoke$arity$0 = G__7132__0;
      G__7132.cljs$core$IFn$_invoke$arity$1 = G__7132__1;
      G__7132.cljs$core$IFn$_invoke$arity$2 = G__7132__2;
      G__7132.cljs$core$IFn$_invoke$arity$3 = G__7132__3;
      G__7132.cljs$core$IFn$_invoke$arity$variadic = G__7132__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7132;
    }();
  };
  var juxt__3 = function(f, g, h) {
    return function() {
      var G__7135 = null;
      var G__7135__0 = function() {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null), g.call(null), h.call(null)], null);
      };
      var G__7135__1 = function(x) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x), g.call(null, x), h.call(null, x)], null);
      };
      var G__7135__2 = function(x, y) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y), g.call(null, x, y), h.call(null, x, y)], null);
      };
      var G__7135__3 = function(x, y, z) {
        return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [f.call(null, x, y, z), g.call(null, x, y, z), h.call(null, x, y, z)], null);
      };
      var G__7135__4 = function() {
        var G__7136__delegate = function(x, y, z, args) {
          return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.apply.call(null, f, x, y, z, args), cljs.core.apply.call(null, g, x, y, z, args), cljs.core.apply.call(null, h, x, y, z, args)], null);
        };
        var G__7136 = function(x, y, z, var_args) {
          var args = null;
          if (arguments.length > 3) {
            args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
          }
          return G__7136__delegate.call(this, x, y, z, args);
        };
        G__7136.cljs$lang$maxFixedArity = 3;
        G__7136.cljs$lang$applyTo = function(arglist__7137) {
          var x = cljs.core.first(arglist__7137);
          arglist__7137 = cljs.core.next(arglist__7137);
          var y = cljs.core.first(arglist__7137);
          arglist__7137 = cljs.core.next(arglist__7137);
          var z = cljs.core.first(arglist__7137);
          var args = cljs.core.rest(arglist__7137);
          return G__7136__delegate(x, y, z, args);
        };
        G__7136.cljs$core$IFn$_invoke$arity$variadic = G__7136__delegate;
        return G__7136;
      }();
      G__7135 = function(x, y, z, var_args) {
        var args = var_args;
        switch(arguments.length) {
          case 0:
            return G__7135__0.call(this);
          case 1:
            return G__7135__1.call(this, x);
          case 2:
            return G__7135__2.call(this, x, y);
          case 3:
            return G__7135__3.call(this, x, y, z);
          default:
            return G__7135__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7135.cljs$lang$maxFixedArity = 3;
      G__7135.cljs$lang$applyTo = G__7135__4.cljs$lang$applyTo;
      G__7135.cljs$core$IFn$_invoke$arity$0 = G__7135__0;
      G__7135.cljs$core$IFn$_invoke$arity$1 = G__7135__1;
      G__7135.cljs$core$IFn$_invoke$arity$2 = G__7135__2;
      G__7135.cljs$core$IFn$_invoke$arity$3 = G__7135__3;
      G__7135.cljs$core$IFn$_invoke$arity$variadic = G__7135__4.cljs$core$IFn$_invoke$arity$variadic;
      return G__7135;
    }();
  };
  var juxt__4 = function() {
    var G__7138__delegate = function(f, g, h, fs) {
      var fs__$1 = cljs.core.list_STAR_.call(null, f, g, h, fs);
      return function(fs__$1) {
        return function() {
          var G__7139 = null;
          var G__7139__0 = function() {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7119_SHARP_, p2__7120_SHARP_) {
                return cljs.core.conj.call(null, p1__7119_SHARP_, p2__7120_SHARP_.call(null));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7139__1 = function(x) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7121_SHARP_, p2__7122_SHARP_) {
                return cljs.core.conj.call(null, p1__7121_SHARP_, p2__7122_SHARP_.call(null, x));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7139__2 = function(x, y) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7123_SHARP_, p2__7124_SHARP_) {
                return cljs.core.conj.call(null, p1__7123_SHARP_, p2__7124_SHARP_.call(null, x, y));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7139__3 = function(x, y, z) {
            return cljs.core.reduce.call(null, function(fs__$1) {
              return function(p1__7125_SHARP_, p2__7126_SHARP_) {
                return cljs.core.conj.call(null, p1__7125_SHARP_, p2__7126_SHARP_.call(null, x, y, z));
              };
            }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
          };
          var G__7139__4 = function() {
            var G__7140__delegate = function(x, y, z, args) {
              return cljs.core.reduce.call(null, function(fs__$1) {
                return function(p1__7127_SHARP_, p2__7128_SHARP_) {
                  return cljs.core.conj.call(null, p1__7127_SHARP_, cljs.core.apply.call(null, p2__7128_SHARP_, x, y, z, args));
                };
              }(fs__$1), cljs.core.PersistentVector.EMPTY, fs__$1);
            };
            var G__7140 = function(x, y, z, var_args) {
              var args = null;
              if (arguments.length > 3) {
                args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
              }
              return G__7140__delegate.call(this, x, y, z, args);
            };
            G__7140.cljs$lang$maxFixedArity = 3;
            G__7140.cljs$lang$applyTo = function(arglist__7141) {
              var x = cljs.core.first(arglist__7141);
              arglist__7141 = cljs.core.next(arglist__7141);
              var y = cljs.core.first(arglist__7141);
              arglist__7141 = cljs.core.next(arglist__7141);
              var z = cljs.core.first(arglist__7141);
              var args = cljs.core.rest(arglist__7141);
              return G__7140__delegate(x, y, z, args);
            };
            G__7140.cljs$core$IFn$_invoke$arity$variadic = G__7140__delegate;
            return G__7140;
          }();
          G__7139 = function(x, y, z, var_args) {
            var args = var_args;
            switch(arguments.length) {
              case 0:
                return G__7139__0.call(this);
              case 1:
                return G__7139__1.call(this, x);
              case 2:
                return G__7139__2.call(this, x, y);
              case 3:
                return G__7139__3.call(this, x, y, z);
              default:
                return G__7139__4.cljs$core$IFn$_invoke$arity$variadic(x, y, z, cljs.core.array_seq(arguments, 3));
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__7139.cljs$lang$maxFixedArity = 3;
          G__7139.cljs$lang$applyTo = G__7139__4.cljs$lang$applyTo;
          G__7139.cljs$core$IFn$_invoke$arity$0 = G__7139__0;
          G__7139.cljs$core$IFn$_invoke$arity$1 = G__7139__1;
          G__7139.cljs$core$IFn$_invoke$arity$2 = G__7139__2;
          G__7139.cljs$core$IFn$_invoke$arity$3 = G__7139__3;
          G__7139.cljs$core$IFn$_invoke$arity$variadic = G__7139__4.cljs$core$IFn$_invoke$arity$variadic;
          return G__7139;
        }();
      }(fs__$1);
    };
    var G__7138 = function(f, g, h, var_args) {
      var fs = null;
      if (arguments.length > 3) {
        fs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
      }
      return G__7138__delegate.call(this, f, g, h, fs);
    };
    G__7138.cljs$lang$maxFixedArity = 3;
    G__7138.cljs$lang$applyTo = function(arglist__7142) {
      var f = cljs.core.first(arglist__7142);
      arglist__7142 = cljs.core.next(arglist__7142);
      var g = cljs.core.first(arglist__7142);
      arglist__7142 = cljs.core.next(arglist__7142);
      var h = cljs.core.first(arglist__7142);
      var fs = cljs.core.rest(arglist__7142);
      return G__7138__delegate(f, g, h, fs);
    };
    G__7138.cljs$core$IFn$_invoke$arity$variadic = G__7138__delegate;
    return G__7138;
  }();
  juxt = function(f, g, h, var_args) {
    var fs = var_args;
    switch(arguments.length) {
      case 1:
        return juxt__1.call(this, f);
      case 2:
        return juxt__2.call(this, f, g);
      case 3:
        return juxt__3.call(this, f, g, h);
      default:
        return juxt__4.cljs$core$IFn$_invoke$arity$variadic(f, g, h, cljs.core.array_seq(arguments, 3));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  juxt.cljs$lang$maxFixedArity = 3;
  juxt.cljs$lang$applyTo = juxt__4.cljs$lang$applyTo;
  juxt.cljs$core$IFn$_invoke$arity$1 = juxt__1;
  juxt.cljs$core$IFn$_invoke$arity$2 = juxt__2;
  juxt.cljs$core$IFn$_invoke$arity$3 = juxt__3;
  juxt.cljs$core$IFn$_invoke$arity$variadic = juxt__4.cljs$core$IFn$_invoke$arity$variadic;
  return juxt;
}();
cljs.core.dorun = function() {
  var dorun = null;
  var dorun__1 = function(coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll)) {
        var G__7143 = cljs.core.next.call(null, coll);
        coll = G__7143;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  var dorun__2 = function(n, coll) {
    while (true) {
      if (cljs.core.seq.call(null, coll) && n > 0) {
        var G__7144 = n - 1;
        var G__7145 = cljs.core.next.call(null, coll);
        n = G__7144;
        coll = G__7145;
        continue;
      } else {
        return null;
      }
      break;
    }
  };
  dorun = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return dorun__1.call(this, n);
      case 2:
        return dorun__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dorun.cljs$core$IFn$_invoke$arity$1 = dorun__1;
  dorun.cljs$core$IFn$_invoke$arity$2 = dorun__2;
  return dorun;
}();
cljs.core.doall = function() {
  var doall = null;
  var doall__1 = function(coll) {
    cljs.core.dorun.call(null, coll);
    return coll;
  };
  var doall__2 = function(n, coll) {
    cljs.core.dorun.call(null, n, coll);
    return coll;
  };
  doall = function(n, coll) {
    switch(arguments.length) {
      case 1:
        return doall__1.call(this, n);
      case 2:
        return doall__2.call(this, n, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  doall.cljs$core$IFn$_invoke$arity$1 = doall__1;
  doall.cljs$core$IFn$_invoke$arity$2 = doall__2;
  return doall;
}();
cljs.core.regexp_QMARK_ = function regexp_QMARK_(o) {
  return o instanceof RegExp;
};
cljs.core.re_matches = function re_matches(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (cljs.core._EQ_.call(null, cljs.core.first.call(null, matches), s)) {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    } else {
      return null;
    }
  } else {
    throw new TypeError("re-matches must match against a string.");
  }
};
cljs.core.re_find = function re_find(re, s) {
  if (typeof s === "string") {
    var matches = re.exec(s);
    if (matches == null) {
      return null;
    } else {
      if (cljs.core.count.call(null, matches) === 1) {
        return cljs.core.first.call(null, matches);
      } else {
        return cljs.core.vec.call(null, matches);
      }
    }
  } else {
    throw new TypeError("re-find must match against a string.");
  }
};
cljs.core.re_seq = function re_seq(re, s) {
  var match_data = cljs.core.re_find.call(null, re, s);
  var match_idx = s.search(re);
  var match_str = cljs.core.coll_QMARK_.call(null, match_data) ? cljs.core.first.call(null, match_data) : match_data;
  var post_match = cljs.core.subs.call(null, s, match_idx + cljs.core.count.call(null, match_str));
  if (cljs.core.truth_(match_data)) {
    return new cljs.core.LazySeq(null, function(match_data, match_idx, match_str, post_match) {
      return function() {
        return cljs.core.cons.call(null, match_data, cljs.core.seq.call(null, post_match) ? re_seq.call(null, re, post_match) : null);
      };
    }(match_data, match_idx, match_str, post_match), null, null);
  } else {
    return null;
  }
};
cljs.core.re_pattern = function re_pattern(s) {
  var vec__7147 = cljs.core.re_find.call(null, /^(?:\(\?([idmsux]*)\))?(.*)/, s);
  var _ = cljs.core.nth.call(null, vec__7147, 0, null);
  var flags = cljs.core.nth.call(null, vec__7147, 1, null);
  var pattern = cljs.core.nth.call(null, vec__7147, 2, null);
  return new RegExp(pattern, flags);
};
cljs.core.pr_sequential_writer = function pr_sequential_writer(writer, print_one, begin, sep, end, opts, coll) {
  var _STAR_print_level_STAR_7149 = cljs.core._STAR_print_level_STAR_;
  try {
    cljs.core._STAR_print_level_STAR_ = cljs.core._STAR_print_level_STAR_ == null ? null : cljs.core._STAR_print_level_STAR_ - 1;
    if (!(cljs.core._STAR_print_level_STAR_ == null) && cljs.core._STAR_print_level_STAR_ < 0) {
      return cljs.core._write.call(null, writer, "#");
    } else {
      cljs.core._write.call(null, writer, begin);
      if (cljs.core.seq.call(null, coll)) {
        print_one.call(null, cljs.core.first.call(null, coll), writer, opts);
      } else {
      }
      var coll_7150__$1 = cljs.core.next.call(null, coll);
      var n_7151 = (new cljs.core.Keyword(null, "print-length", "print-length", 1931866356)).cljs$core$IFn$_invoke$arity$1(opts) - 1;
      while (true) {
        if (coll_7150__$1 && (n_7151 == null || !(n_7151 === 0))) {
          cljs.core._write.call(null, writer, sep);
          print_one.call(null, cljs.core.first.call(null, coll_7150__$1), writer, opts);
          var G__7152 = cljs.core.next.call(null, coll_7150__$1);
          var G__7153 = n_7151 - 1;
          coll_7150__$1 = G__7152;
          n_7151 = G__7153;
          continue;
        } else {
          if (cljs.core.seq.call(null, coll_7150__$1) && n_7151 === 0) {
            cljs.core._write.call(null, writer, sep);
            cljs.core._write.call(null, writer, "...");
          } else {
          }
        }
        break;
      }
      return cljs.core._write.call(null, writer, end);
    }
  } finally {
    cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_7149;
  }
};
cljs.core.write_all = function() {
  var write_all__delegate = function(writer, ss) {
    var seq__7158 = cljs.core.seq.call(null, ss);
    var chunk__7159 = null;
    var count__7160 = 0;
    var i__7161 = 0;
    while (true) {
      if (i__7161 < count__7160) {
        var s = cljs.core._nth.call(null, chunk__7159, i__7161);
        cljs.core._write.call(null, writer, s);
        var G__7162 = seq__7158;
        var G__7163 = chunk__7159;
        var G__7164 = count__7160;
        var G__7165 = i__7161 + 1;
        seq__7158 = G__7162;
        chunk__7159 = G__7163;
        count__7160 = G__7164;
        i__7161 = G__7165;
        continue;
      } else {
        var temp__4126__auto__ = cljs.core.seq.call(null, seq__7158);
        if (temp__4126__auto__) {
          var seq__7158__$1 = temp__4126__auto__;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7158__$1)) {
            var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__7158__$1);
            var G__7166 = cljs.core.chunk_rest.call(null, seq__7158__$1);
            var G__7167 = c__4408__auto__;
            var G__7168 = cljs.core.count.call(null, c__4408__auto__);
            var G__7169 = 0;
            seq__7158 = G__7166;
            chunk__7159 = G__7167;
            count__7160 = G__7168;
            i__7161 = G__7169;
            continue;
          } else {
            var s = cljs.core.first.call(null, seq__7158__$1);
            cljs.core._write.call(null, writer, s);
            var G__7170 = cljs.core.next.call(null, seq__7158__$1);
            var G__7171 = null;
            var G__7172 = 0;
            var G__7173 = 0;
            seq__7158 = G__7170;
            chunk__7159 = G__7171;
            count__7160 = G__7172;
            i__7161 = G__7173;
            continue;
          }
        } else {
          return null;
        }
      }
      break;
    }
  };
  var write_all = function(writer, var_args) {
    var ss = null;
    if (arguments.length > 1) {
      ss = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return write_all__delegate.call(this, writer, ss);
  };
  write_all.cljs$lang$maxFixedArity = 1;
  write_all.cljs$lang$applyTo = function(arglist__7174) {
    var writer = cljs.core.first(arglist__7174);
    var ss = cljs.core.rest(arglist__7174);
    return write_all__delegate(writer, ss);
  };
  write_all.cljs$core$IFn$_invoke$arity$variadic = write_all__delegate;
  return write_all;
}();
cljs.core.string_print = function string_print(x) {
  cljs.core._STAR_print_fn_STAR_.call(null, x);
  return null;
};
cljs.core.flush = function flush() {
  return null;
};
cljs.core.char_escapes = function() {
  var obj7176 = {'"':'\\"', "\\":"\\\\", "\b":"\\b", "\f":"\\f", "\n":"\\n", "\r":"\\r", "\t":"\\t"};
  return obj7176;
}();
cljs.core.quote_string = function quote_string(s) {
  return'"' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp('[\\\\"\b\f\n\r\t]', "g"), function(match) {
    return cljs.core.char_escapes[match];
  })) + '"';
};
cljs.core.pr_writer = function pr_writer(obj, writer, opts) {
  if (obj == null) {
    return cljs.core._write.call(null, writer, "nil");
  } else {
    if (void 0 === obj) {
      return cljs.core._write.call(null, writer, "#\x3cundefined\x3e");
    } else {
      if (cljs.core.truth_(function() {
        var and__3627__auto__ = cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "meta", "meta", 1499536964));
        if (cljs.core.truth_(and__3627__auto__)) {
          var and__3627__auto____$1 = function() {
            var G__7182 = obj;
            if (G__7182) {
              var bit__4302__auto__ = G__7182.cljs$lang$protocol_mask$partition0$ & 131072;
              if (bit__4302__auto__ || G__7182.cljs$core$IMeta$) {
                return true;
              } else {
                if (!G__7182.cljs$lang$protocol_mask$partition0$) {
                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7182);
                } else {
                  return false;
                }
              }
            } else {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IMeta, G__7182);
            }
          }();
          if (and__3627__auto____$1) {
            return cljs.core.meta.call(null, obj);
          } else {
            return and__3627__auto____$1;
          }
        } else {
          return and__3627__auto__;
        }
      }())) {
        cljs.core._write.call(null, writer, "^");
        pr_writer.call(null, cljs.core.meta.call(null, obj), writer, opts);
        cljs.core._write.call(null, writer, " ");
      } else {
      }
      if (obj == null) {
        return cljs.core._write.call(null, writer, "nil");
      } else {
        if (obj.cljs$lang$type) {
          return obj.cljs$lang$ctorPrWriter(obj, writer, opts);
        } else {
          if (function() {
            var G__7183 = obj;
            if (G__7183) {
              var bit__4295__auto__ = G__7183.cljs$lang$protocol_mask$partition0$ & 2147483648;
              if (bit__4295__auto__ || G__7183.cljs$core$IPrintWithWriter$) {
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          }()) {
            return cljs.core._pr_writer.call(null, obj, writer, opts);
          } else {
            if (cljs.core.type.call(null, obj) === Boolean || typeof obj === "number") {
              return cljs.core._write.call(null, writer, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj));
            } else {
              if (cljs.core.object_QMARK_.call(null, obj)) {
                cljs.core._write.call(null, writer, "#js ");
                return cljs.core.print_map.call(null, cljs.core.map.call(null, function(k) {
                  return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.call(null, k), obj[k]], null);
                }, cljs.core.js_keys.call(null, obj)), pr_writer, writer, opts);
              } else {
                if (obj instanceof Array) {
                  return cljs.core.pr_sequential_writer.call(null, writer, pr_writer, "#js [", " ", "]", opts, obj);
                } else {
                  if (goog.isString(obj)) {
                    if (cljs.core.truth_((new cljs.core.Keyword(null, "readably", "readably", 1129599760)).cljs$core$IFn$_invoke$arity$1(opts))) {
                      return cljs.core._write.call(null, writer, cljs.core.quote_string.call(null, obj));
                    } else {
                      return cljs.core._write.call(null, writer, obj);
                    }
                  } else {
                    if (cljs.core.fn_QMARK_.call(null, obj)) {
                      return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                    } else {
                      if (obj instanceof Date) {
                        var normalize = function(n, len) {
                          var ns = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n);
                          while (true) {
                            if (cljs.core.count.call(null, ns) < len) {
                              var G__7185 = "0" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns);
                              ns = G__7185;
                              continue;
                            } else {
                              return ns;
                            }
                            break;
                          }
                        };
                        return cljs.core.write_all.call(null, writer, '#inst "', "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear()), "-", normalize.call(null, obj.getUTCMonth() + 1, 2), "-", normalize.call(null, obj.getUTCDate(), 2), "T", normalize.call(null, obj.getUTCHours(), 2), ":", normalize.call(null, obj.getUTCMinutes(), 2), ":", normalize.call(null, obj.getUTCSeconds(), 2), ".", normalize.call(null, obj.getUTCMilliseconds(), 3), "-", '00:00"');
                      } else {
                        if (cljs.core.regexp_QMARK_.call(null, obj)) {
                          return cljs.core.write_all.call(null, writer, '#"', obj.source, '"');
                        } else {
                          if (function() {
                            var G__7184 = obj;
                            if (G__7184) {
                              var bit__4302__auto__ = G__7184.cljs$lang$protocol_mask$partition0$ & 2147483648;
                              if (bit__4302__auto__ || G__7184.cljs$core$IPrintWithWriter$) {
                                return true;
                              } else {
                                if (!G__7184.cljs$lang$protocol_mask$partition0$) {
                                  return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__7184);
                                } else {
                                  return false;
                                }
                              }
                            } else {
                              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IPrintWithWriter, G__7184);
                            }
                          }()) {
                            return cljs.core._pr_writer.call(null, obj, writer, opts);
                          } else {
                            return cljs.core.write_all.call(null, writer, "#\x3c", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj), "\x3e");
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.core.pr_seq_writer = function pr_seq_writer(objs, writer, opts) {
  cljs.core.pr_writer.call(null, cljs.core.first.call(null, objs), writer, opts);
  var seq__7190 = cljs.core.seq.call(null, cljs.core.next.call(null, objs));
  var chunk__7191 = null;
  var count__7192 = 0;
  var i__7193 = 0;
  while (true) {
    if (i__7193 < count__7192) {
      var obj = cljs.core._nth.call(null, chunk__7191, i__7193);
      cljs.core._write.call(null, writer, " ");
      cljs.core.pr_writer.call(null, obj, writer, opts);
      var G__7194 = seq__7190;
      var G__7195 = chunk__7191;
      var G__7196 = count__7192;
      var G__7197 = i__7193 + 1;
      seq__7190 = G__7194;
      chunk__7191 = G__7195;
      count__7192 = G__7196;
      i__7193 = G__7197;
      continue;
    } else {
      var temp__4126__auto__ = cljs.core.seq.call(null, seq__7190);
      if (temp__4126__auto__) {
        var seq__7190__$1 = temp__4126__auto__;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7190__$1)) {
          var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__7190__$1);
          var G__7198 = cljs.core.chunk_rest.call(null, seq__7190__$1);
          var G__7199 = c__4408__auto__;
          var G__7200 = cljs.core.count.call(null, c__4408__auto__);
          var G__7201 = 0;
          seq__7190 = G__7198;
          chunk__7191 = G__7199;
          count__7192 = G__7200;
          i__7193 = G__7201;
          continue;
        } else {
          var obj = cljs.core.first.call(null, seq__7190__$1);
          cljs.core._write.call(null, writer, " ");
          cljs.core.pr_writer.call(null, obj, writer, opts);
          var G__7202 = cljs.core.next.call(null, seq__7190__$1);
          var G__7203 = null;
          var G__7204 = 0;
          var G__7205 = 0;
          seq__7190 = G__7202;
          chunk__7191 = G__7203;
          count__7192 = G__7204;
          i__7193 = G__7205;
          continue;
        }
      } else {
        return null;
      }
    }
    break;
  }
};
cljs.core.pr_sb_with_opts = function pr_sb_with_opts(objs, opts) {
  var sb = new goog.string.StringBuffer;
  var writer = new cljs.core.StringBufferWriter(sb);
  cljs.core.pr_seq_writer.call(null, objs, writer, opts);
  cljs.core._flush.call(null, writer);
  return sb;
};
cljs.core.pr_str_with_opts = function pr_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "";
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts.call(null, objs, opts));
  }
};
cljs.core.prn_str_with_opts = function prn_str_with_opts(objs, opts) {
  if (cljs.core.empty_QMARK_.call(null, objs)) {
    return "\n";
  } else {
    var sb = cljs.core.pr_sb_with_opts.call(null, objs, opts);
    sb.append("\n");
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb);
  }
};
cljs.core.pr_with_opts = function pr_with_opts(objs, opts) {
  return cljs.core.string_print.call(null, cljs.core.pr_str_with_opts.call(null, objs, opts));
};
cljs.core.newline = function newline(opts) {
  cljs.core.string_print.call(null, "\n");
  if (cljs.core.truth_(cljs.core.get.call(null, opts, new cljs.core.Keyword(null, "flush-on-newline", "flush-on-newline", -151457939)))) {
    return cljs.core.flush.call(null);
  } else {
    return null;
  }
};
cljs.core.pr_str = function() {
  var pr_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr_str__delegate.call(this, objs);
  };
  pr_str.cljs$lang$maxFixedArity = 0;
  pr_str.cljs$lang$applyTo = function(arglist__7206) {
    var objs = cljs.core.seq(arglist__7206);
    return pr_str__delegate(objs);
  };
  pr_str.cljs$core$IFn$_invoke$arity$variadic = pr_str__delegate;
  return pr_str;
}();
cljs.core.prn_str = function() {
  var prn_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var prn_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn_str__delegate.call(this, objs);
  };
  prn_str.cljs$lang$maxFixedArity = 0;
  prn_str.cljs$lang$applyTo = function(arglist__7207) {
    var objs = cljs.core.seq(arglist__7207);
    return prn_str__delegate(objs);
  };
  prn_str.cljs$core$IFn$_invoke$arity$variadic = prn_str__delegate;
  return prn_str;
}();
cljs.core.pr = function() {
  var pr__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
  };
  var pr = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pr__delegate.call(this, objs);
  };
  pr.cljs$lang$maxFixedArity = 0;
  pr.cljs$lang$applyTo = function(arglist__7208) {
    var objs = cljs.core.seq(arglist__7208);
    return pr__delegate(objs);
  };
  pr.cljs$core$IFn$_invoke$arity$variadic = pr__delegate;
  return pr;
}();
cljs.core.print = function() {
  var cljs_core_print__delegate = function(objs) {
    return cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var cljs_core_print = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cljs_core_print__delegate.call(this, objs);
  };
  cljs_core_print.cljs$lang$maxFixedArity = 0;
  cljs_core_print.cljs$lang$applyTo = function(arglist__7209) {
    var objs = cljs.core.seq(arglist__7209);
    return cljs_core_print__delegate(objs);
  };
  cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs_core_print__delegate;
  return cljs_core_print;
}();
cljs.core.print_str = function() {
  var print_str__delegate = function(objs) {
    return cljs.core.pr_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var print_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return print_str__delegate.call(this, objs);
  };
  print_str.cljs$lang$maxFixedArity = 0;
  print_str.cljs$lang$applyTo = function(arglist__7210) {
    var objs = cljs.core.seq(arglist__7210);
    return print_str__delegate(objs);
  };
  print_str.cljs$core$IFn$_invoke$arity$variadic = print_str__delegate;
  return print_str;
}();
cljs.core.println = function() {
  var println__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var println = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println__delegate.call(this, objs);
  };
  println.cljs$lang$maxFixedArity = 0;
  println.cljs$lang$applyTo = function(arglist__7211) {
    var objs = cljs.core.seq(arglist__7211);
    return println__delegate(objs);
  };
  println.cljs$core$IFn$_invoke$arity$variadic = println__delegate;
  return println;
}();
cljs.core.println_str = function() {
  var println_str__delegate = function(objs) {
    return cljs.core.prn_str_with_opts.call(null, objs, cljs.core.assoc.call(null, cljs.core.pr_opts.call(null), new cljs.core.Keyword(null, "readably", "readably", 1129599760), false));
  };
  var println_str = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return println_str__delegate.call(this, objs);
  };
  println_str.cljs$lang$maxFixedArity = 0;
  println_str.cljs$lang$applyTo = function(arglist__7212) {
    var objs = cljs.core.seq(arglist__7212);
    return println_str__delegate(objs);
  };
  println_str.cljs$core$IFn$_invoke$arity$variadic = println_str__delegate;
  return println_str;
}();
cljs.core.prn = function() {
  var prn__delegate = function(objs) {
    cljs.core.pr_with_opts.call(null, objs, cljs.core.pr_opts.call(null));
    if (cljs.core.truth_(cljs.core._STAR_print_newline_STAR_)) {
      return cljs.core.newline.call(null, cljs.core.pr_opts.call(null));
    } else {
      return null;
    }
  };
  var prn = function(var_args) {
    var objs = null;
    if (arguments.length > 0) {
      objs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return prn__delegate.call(this, objs);
  };
  prn.cljs$lang$maxFixedArity = 0;
  prn.cljs$lang$applyTo = function(arglist__7213) {
    var objs = cljs.core.seq(arglist__7213);
    return prn__delegate(objs);
  };
  prn.cljs$core$IFn$_invoke$arity$variadic = prn__delegate;
  return prn;
}();
cljs.core.print_map = function print_map(m, print_one, writer, opts) {
  return cljs.core.pr_sequential_writer.call(null, writer, function(e, w, opts__$1) {
    print_one.call(null, cljs.core.key.call(null, e), w, opts__$1);
    cljs.core._write.call(null, w, " ");
    return print_one.call(null, cljs.core.val.call(null, e), w, opts__$1);
  }, "{", ", ", "}", opts, cljs.core.seq.call(null, m));
};
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#{", " ", "}", opts, coll__$1);
};
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(a, writer, opts) {
  var a__$1 = this;
  cljs.core._write.call(null, writer, "#\x3cAtom: ");
  cljs.core.pr_writer.call(null, a__$1.state, writer, opts);
  return cljs.core._write.call(null, writer, "\x3e");
};
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "[", " ", "]", opts, coll__$1);
};
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core._write.call(null, writer, "()");
};
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "#queue [", " ", "]", opts, cljs.core.seq.call(null, coll__$1));
};
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.print_map.call(null, coll__$1, cljs.core.pr_writer, writer, opts);
};
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = true;
cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll, writer, opts) {
  var coll__$1 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$1);
};
cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = true;
cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Subvec.prototype.cljs$core$IComparable$ = true;
cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_indexed.call(null, x__$1, y);
};
cljs.core.Keyword.prototype.cljs$core$IComparable$ = true;
cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.Symbol.prototype.cljs$core$IComparable$ = true;
cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = function(x, y) {
  var x__$1 = this;
  return cljs.core.compare_symbols.call(null, x__$1, y);
};
cljs.core.alter_meta_BANG_ = function() {
  var alter_meta_BANG___delegate = function(iref, f, args) {
    return iref.meta = cljs.core.apply.call(null, f, iref.meta, args);
  };
  var alter_meta_BANG_ = function(iref, f, var_args) {
    var args = null;
    if (arguments.length > 2) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 2), 0);
    }
    return alter_meta_BANG___delegate.call(this, iref, f, args);
  };
  alter_meta_BANG_.cljs$lang$maxFixedArity = 2;
  alter_meta_BANG_.cljs$lang$applyTo = function(arglist__7214) {
    var iref = cljs.core.first(arglist__7214);
    arglist__7214 = cljs.core.next(arglist__7214);
    var f = cljs.core.first(arglist__7214);
    var args = cljs.core.rest(arglist__7214);
    return alter_meta_BANG___delegate(iref, f, args);
  };
  alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = alter_meta_BANG___delegate;
  return alter_meta_BANG_;
}();
cljs.core.reset_meta_BANG_ = function reset_meta_BANG_(iref, m) {
  return iref.meta = m;
};
cljs.core.add_watch = function add_watch(iref, key, f) {
  return cljs.core._add_watch.call(null, iref, key, f);
};
cljs.core.remove_watch = function remove_watch(iref, key) {
  return cljs.core._remove_watch.call(null, iref, key);
};
cljs.core.gensym_counter = null;
cljs.core.gensym = function() {
  var gensym = null;
  var gensym__0 = function() {
    return gensym.call(null, "G__");
  };
  var gensym__1 = function(prefix_string) {
    if (cljs.core.gensym_counter == null) {
      cljs.core.gensym_counter = cljs.core.atom.call(null, 0);
    } else {
    }
    return cljs.core.symbol.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.call(null, cljs.core.gensym_counter, cljs.core.inc)));
  };
  gensym = function(prefix_string) {
    switch(arguments.length) {
      case 0:
        return gensym__0.call(this);
      case 1:
        return gensym__1.call(this, prefix_string);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  gensym.cljs$core$IFn$_invoke$arity$0 = gensym__0;
  gensym.cljs$core$IFn$_invoke$arity$1 = gensym__1;
  return gensym;
}();
cljs.core.fixture1 = 1;
cljs.core.fixture2 = 2;
cljs.core.Delay = function(f, value) {
  this.f = f;
  this.value = value;
  this.cljs$lang$protocol_mask$partition1$ = 1;
  this.cljs$lang$protocol_mask$partition0$ = 32768;
};
cljs.core.Delay.cljs$lang$type = true;
cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";
cljs.core.Delay.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Delay");
};
cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = function(d) {
  var self__ = this;
  var d__$1 = this;
  return cljs.core.not.call(null, self__.f);
};
cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  if (cljs.core.truth_(self__.f)) {
    self__.value = self__.f.call(null);
    self__.f = null;
  } else {
  }
  return self__.value;
};
cljs.core.__GT_Delay = function __GT_Delay(f, value) {
  return new cljs.core.Delay(f, value);
};
cljs.core.delay_QMARK_ = function delay_QMARK_(x) {
  return x instanceof cljs.core.Delay;
};
cljs.core.force = function force(x) {
  if (cljs.core.delay_QMARK_.call(null, x)) {
    return cljs.core.deref.call(null, x);
  } else {
    return x;
  }
};
cljs.core.realized_QMARK_ = function realized_QMARK_(d) {
  return cljs.core._realized_QMARK_.call(null, d);
};
cljs.core.preserving_reduced = function preserving_reduced(f1) {
  return function(p1__7215_SHARP_, p2__7216_SHARP_) {
    var ret = f1.call(null, p1__7215_SHARP_, p2__7216_SHARP_);
    if (cljs.core.reduced_QMARK_.call(null, ret)) {
      return cljs.core.reduced.call(null, ret);
    } else {
      return ret;
    }
  };
};
cljs.core.cat = function cat(f1) {
  var rf1 = cljs.core.preserving_reduced.call(null, f1);
  return function(rf1) {
    return function() {
      var G__7217 = null;
      var G__7217__0 = function() {
        return f1.call(null);
      };
      var G__7217__1 = function(result) {
        return f1.call(null, result);
      };
      var G__7217__2 = function(result, input) {
        return cljs.core.reduce.call(null, rf1, result, input);
      };
      G__7217 = function(result, input) {
        switch(arguments.length) {
          case 0:
            return G__7217__0.call(this);
          case 1:
            return G__7217__1.call(this, result);
          case 2:
            return G__7217__2.call(this, result, input);
        }
        throw new Error("Invalid arity: " + arguments.length);
      };
      G__7217.cljs$core$IFn$_invoke$arity$0 = G__7217__0;
      G__7217.cljs$core$IFn$_invoke$arity$1 = G__7217__1;
      G__7217.cljs$core$IFn$_invoke$arity$2 = G__7217__2;
      return G__7217;
    }();
  }(rf1);
};
cljs.core.dedupe = function() {
  var dedupe = null;
  var dedupe__0 = function() {
    return function(f1) {
      var pa = cljs.core.atom.call(null, new cljs.core.Keyword("cljs.core", "none", "cljs.core/none", 926646439));
      return function(pa) {
        return function() {
          var G__7218 = null;
          var G__7218__0 = function() {
            return f1.call(null);
          };
          var G__7218__1 = function(result) {
            return f1.call(null, result);
          };
          var G__7218__2 = function(result, input) {
            var prior = cljs.core.deref.call(null, pa);
            cljs.core.reset_BANG_.call(null, pa, input);
            if (cljs.core._EQ_.call(null, prior, input)) {
              return result;
            } else {
              return f1.call(null, result, input);
            }
          };
          G__7218 = function(result, input) {
            switch(arguments.length) {
              case 0:
                return G__7218__0.call(this);
              case 1:
                return G__7218__1.call(this, result);
              case 2:
                return G__7218__2.call(this, result, input);
            }
            throw new Error("Invalid arity: " + arguments.length);
          };
          G__7218.cljs$core$IFn$_invoke$arity$0 = G__7218__0;
          G__7218.cljs$core$IFn$_invoke$arity$1 = G__7218__1;
          G__7218.cljs$core$IFn$_invoke$arity$2 = G__7218__2;
          return G__7218;
        }();
      }(pa);
    };
  };
  var dedupe__1 = function(coll) {
    return cljs.core.sequence.call(null, dedupe.call(null), coll);
  };
  dedupe = function(coll) {
    switch(arguments.length) {
      case 0:
        return dedupe__0.call(this);
      case 1:
        return dedupe__1.call(this, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  dedupe.cljs$core$IFn$_invoke$arity$0 = dedupe__0;
  dedupe.cljs$core$IFn$_invoke$arity$1 = dedupe__1;
  return dedupe;
}();
cljs.core.random_sample = function() {
  var random_sample = null;
  var random_sample__1 = function(prob) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    });
  };
  var random_sample__2 = function(prob, coll) {
    return cljs.core.filter.call(null, function(_) {
      return cljs.core.rand.call(null) < prob;
    }, coll);
  };
  random_sample = function(prob, coll) {
    switch(arguments.length) {
      case 1:
        return random_sample__1.call(this, prob);
      case 2:
        return random_sample__2.call(this, prob, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  random_sample.cljs$core$IFn$_invoke$arity$1 = random_sample__1;
  random_sample.cljs$core$IFn$_invoke$arity$2 = random_sample__2;
  return random_sample;
}();
cljs.core.Iteration = function(xform, coll) {
  this.xform = xform;
  this.coll = coll;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2173173760;
};
cljs.core.Iteration.cljs$lang$type = true;
cljs.core.Iteration.cljs$lang$ctorStr = "cljs.core/Iteration";
cljs.core.Iteration.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/Iteration");
};
cljs.core.Iteration.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(coll__$1, writer, opts) {
  var self__ = this;
  var coll__$2 = this;
  return cljs.core.pr_sequential_writer.call(null, writer, cljs.core.pr_writer, "(", " ", ")", opts, coll__$2);
};
cljs.core.Iteration.prototype.cljs$core$IReduce$_reduce$arity$3 = function(_, f, init) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.transduce.call(null, self__.xform, f, init, self__.coll);
};
cljs.core.Iteration.prototype.cljs$core$ISeqable$_seq$arity$1 = function(_) {
  var self__ = this;
  var ___$1 = this;
  return cljs.core.seq.call(null, cljs.core.sequence.call(null, self__.xform, self__.coll));
};
cljs.core.__GT_Iteration = function __GT_Iteration(xform, coll) {
  return new cljs.core.Iteration(xform, coll);
};
cljs.core.iteration = function iteration(xform, coll) {
  return new cljs.core.Iteration(xform, coll);
};
cljs.core.run_BANG_ = function run_BANG_(proc, coll) {
  return cljs.core.reduce.call(null, function(p1__7220_SHARP_, p2__7219_SHARP_) {
    return proc.call(null, p2__7219_SHARP_);
  }, null, coll);
};
cljs.core.IEncodeJS = function() {
  var obj7222 = {};
  return obj7222;
}();
cljs.core._clj__GT_js = function _clj__GT_js(x) {
  if (function() {
    var and__3627__auto__ = x;
    if (and__3627__auto__) {
      return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
  } else {
    var x__4275__auto__ = x == null ? null : x;
    return function() {
      var or__3639__auto__ = cljs.core._clj__GT_js[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._clj__GT_js["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-clj-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core._key__GT_js = function _key__GT_js(x) {
  if (function() {
    var and__3627__auto__ = x;
    if (and__3627__auto__) {
      return x.cljs$core$IEncodeJS$_key__GT_js$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
  } else {
    var x__4275__auto__ = x == null ? null : x;
    return function() {
      var or__3639__auto__ = cljs.core._key__GT_js[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._key__GT_js["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeJS.-key-\x3ejs", x);
        }
      }
    }().call(null, x);
  }
};
cljs.core.key__GT_js = function key__GT_js(k) {
  if (function() {
    var G__7224 = k;
    if (G__7224) {
      var bit__4302__auto__ = null;
      if (cljs.core.truth_(function() {
        var or__3639__auto__ = bit__4302__auto__;
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          return G__7224.cljs$core$IEncodeJS$;
        }
      }())) {
        return true;
      } else {
        if (!G__7224.cljs$lang$protocol_mask$partition$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7224);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7224);
    }
  }()) {
    return cljs.core._clj__GT_js.call(null, k);
  } else {
    if (typeof k === "string" || typeof k === "number" || k instanceof cljs.core.Keyword || k instanceof cljs.core.Symbol) {
      return cljs.core.clj__GT_js.call(null, k);
    } else {
      return cljs.core.pr_str.call(null, k);
    }
  }
};
cljs.core.clj__GT_js = function clj__GT_js(x) {
  if (x == null) {
    return null;
  } else {
    if (function() {
      var G__7238 = x;
      if (G__7238) {
        var bit__4302__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3639__auto__ = bit__4302__auto__;
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return G__7238.cljs$core$IEncodeJS$;
          }
        }())) {
          return true;
        } else {
          if (!G__7238.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7238);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeJS, G__7238);
      }
    }()) {
      return cljs.core._clj__GT_js.call(null, x);
    } else {
      if (x instanceof cljs.core.Keyword) {
        return cljs.core.name.call(null, x);
      } else {
        if (x instanceof cljs.core.Symbol) {
          return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(x);
        } else {
          if (cljs.core.map_QMARK_.call(null, x)) {
            var m = function() {
              var obj7240 = {};
              return obj7240;
            }();
            var seq__7241_7251 = cljs.core.seq.call(null, x);
            var chunk__7242_7252 = null;
            var count__7243_7253 = 0;
            var i__7244_7254 = 0;
            while (true) {
              if (i__7244_7254 < count__7243_7253) {
                var vec__7245_7255 = cljs.core._nth.call(null, chunk__7242_7252, i__7244_7254);
                var k_7256 = cljs.core.nth.call(null, vec__7245_7255, 0, null);
                var v_7257 = cljs.core.nth.call(null, vec__7245_7255, 1, null);
                m[cljs.core.key__GT_js.call(null, k_7256)] = clj__GT_js.call(null, v_7257);
                var G__7258 = seq__7241_7251;
                var G__7259 = chunk__7242_7252;
                var G__7260 = count__7243_7253;
                var G__7261 = i__7244_7254 + 1;
                seq__7241_7251 = G__7258;
                chunk__7242_7252 = G__7259;
                count__7243_7253 = G__7260;
                i__7244_7254 = G__7261;
                continue;
              } else {
                var temp__4126__auto___7262 = cljs.core.seq.call(null, seq__7241_7251);
                if (temp__4126__auto___7262) {
                  var seq__7241_7263__$1 = temp__4126__auto___7262;
                  if (cljs.core.chunked_seq_QMARK_.call(null, seq__7241_7263__$1)) {
                    var c__4408__auto___7264 = cljs.core.chunk_first.call(null, seq__7241_7263__$1);
                    var G__7265 = cljs.core.chunk_rest.call(null, seq__7241_7263__$1);
                    var G__7266 = c__4408__auto___7264;
                    var G__7267 = cljs.core.count.call(null, c__4408__auto___7264);
                    var G__7268 = 0;
                    seq__7241_7251 = G__7265;
                    chunk__7242_7252 = G__7266;
                    count__7243_7253 = G__7267;
                    i__7244_7254 = G__7268;
                    continue;
                  } else {
                    var vec__7246_7269 = cljs.core.first.call(null, seq__7241_7263__$1);
                    var k_7270 = cljs.core.nth.call(null, vec__7246_7269, 0, null);
                    var v_7271 = cljs.core.nth.call(null, vec__7246_7269, 1, null);
                    m[cljs.core.key__GT_js.call(null, k_7270)] = clj__GT_js.call(null, v_7271);
                    var G__7272 = cljs.core.next.call(null, seq__7241_7263__$1);
                    var G__7273 = null;
                    var G__7274 = 0;
                    var G__7275 = 0;
                    seq__7241_7251 = G__7272;
                    chunk__7242_7252 = G__7273;
                    count__7243_7253 = G__7274;
                    i__7244_7254 = G__7275;
                    continue;
                  }
                } else {
                }
              }
              break;
            }
            return m;
          } else {
            if (cljs.core.coll_QMARK_.call(null, x)) {
              var arr = [];
              var seq__7247_7276 = cljs.core.seq.call(null, cljs.core.map.call(null, clj__GT_js, x));
              var chunk__7248_7277 = null;
              var count__7249_7278 = 0;
              var i__7250_7279 = 0;
              while (true) {
                if (i__7250_7279 < count__7249_7278) {
                  var x_7280__$1 = cljs.core._nth.call(null, chunk__7248_7277, i__7250_7279);
                  arr.push(x_7280__$1);
                  var G__7281 = seq__7247_7276;
                  var G__7282 = chunk__7248_7277;
                  var G__7283 = count__7249_7278;
                  var G__7284 = i__7250_7279 + 1;
                  seq__7247_7276 = G__7281;
                  chunk__7248_7277 = G__7282;
                  count__7249_7278 = G__7283;
                  i__7250_7279 = G__7284;
                  continue;
                } else {
                  var temp__4126__auto___7285 = cljs.core.seq.call(null, seq__7247_7276);
                  if (temp__4126__auto___7285) {
                    var seq__7247_7286__$1 = temp__4126__auto___7285;
                    if (cljs.core.chunked_seq_QMARK_.call(null, seq__7247_7286__$1)) {
                      var c__4408__auto___7287 = cljs.core.chunk_first.call(null, seq__7247_7286__$1);
                      var G__7288 = cljs.core.chunk_rest.call(null, seq__7247_7286__$1);
                      var G__7289 = c__4408__auto___7287;
                      var G__7290 = cljs.core.count.call(null, c__4408__auto___7287);
                      var G__7291 = 0;
                      seq__7247_7276 = G__7288;
                      chunk__7248_7277 = G__7289;
                      count__7249_7278 = G__7290;
                      i__7250_7279 = G__7291;
                      continue;
                    } else {
                      var x_7292__$1 = cljs.core.first.call(null, seq__7247_7286__$1);
                      arr.push(x_7292__$1);
                      var G__7293 = cljs.core.next.call(null, seq__7247_7286__$1);
                      var G__7294 = null;
                      var G__7295 = 0;
                      var G__7296 = 0;
                      seq__7247_7276 = G__7293;
                      chunk__7248_7277 = G__7294;
                      count__7249_7278 = G__7295;
                      i__7250_7279 = G__7296;
                      continue;
                    }
                  } else {
                  }
                }
                break;
              }
              return arr;
            } else {
              return x;
            }
          }
        }
      }
    }
  }
};
cljs.core.IEncodeClojure = function() {
  var obj7298 = {};
  return obj7298;
}();
cljs.core._js__GT_clj = function _js__GT_clj(x, options) {
  if (function() {
    var and__3627__auto__ = x;
    if (and__3627__auto__) {
      return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x, options);
  } else {
    var x__4275__auto__ = x == null ? null : x;
    return function() {
      var or__3639__auto__ = cljs.core._js__GT_clj[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._js__GT_clj["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IEncodeClojure.-js-\x3eclj", x);
        }
      }
    }().call(null, x, options);
  }
};
cljs.core.js__GT_clj = function() {
  var js__GT_clj = null;
  var js__GT_clj__1 = function(x) {
    return js__GT_clj.call(null, x, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), false], null));
  };
  var js__GT_clj__2 = function() {
    var G__7319__delegate = function(x, opts) {
      if (function() {
        var G__7309 = x;
        if (G__7309) {
          var bit__4302__auto__ = null;
          if (cljs.core.truth_(function() {
            var or__3639__auto__ = bit__4302__auto__;
            if (cljs.core.truth_(or__3639__auto__)) {
              return or__3639__auto__;
            } else {
              return G__7309.cljs$core$IEncodeClojure$;
            }
          }())) {
            return true;
          } else {
            if (!G__7309.cljs$lang$protocol_mask$partition$) {
              return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7309);
            } else {
              return false;
            }
          }
        } else {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IEncodeClojure, G__7309);
        }
      }()) {
        return cljs.core._js__GT_clj.call(null, x, cljs.core.apply.call(null, cljs.core.array_map, opts));
      } else {
        if (cljs.core.seq.call(null, opts)) {
          var map__7310 = opts;
          var map__7310__$1 = cljs.core.seq_QMARK_.call(null, map__7310) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7310) : map__7310;
          var keywordize_keys = cljs.core.get.call(null, map__7310__$1, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252));
          var keyfn = cljs.core.truth_(keywordize_keys) ? cljs.core.keyword : cljs.core.str;
          var f = function(map__7310, map__7310__$1, keywordize_keys, keyfn) {
            return function thisfn(x__$1) {
              if (cljs.core.seq_QMARK_.call(null, x__$1)) {
                return cljs.core.doall.call(null, cljs.core.map.call(null, thisfn, x__$1));
              } else {
                if (cljs.core.coll_QMARK_.call(null, x__$1)) {
                  return cljs.core.into.call(null, cljs.core.empty.call(null, x__$1), cljs.core.map.call(null, thisfn, x__$1));
                } else {
                  if (x__$1 instanceof Array) {
                    return cljs.core.vec.call(null, cljs.core.map.call(null, thisfn, x__$1));
                  } else {
                    if (cljs.core.type.call(null, x__$1) === Object) {
                      return cljs.core.into.call(null, cljs.core.PersistentArrayMap.EMPTY, function() {
                        var iter__4377__auto__ = function(map__7310, map__7310__$1, keywordize_keys, keyfn) {
                          return function iter__7315(s__7316) {
                            return new cljs.core.LazySeq(null, function(map__7310, map__7310__$1, keywordize_keys, keyfn) {
                              return function() {
                                var s__7316__$1 = s__7316;
                                while (true) {
                                  var temp__4126__auto__ = cljs.core.seq.call(null, s__7316__$1);
                                  if (temp__4126__auto__) {
                                    var s__7316__$2 = temp__4126__auto__;
                                    if (cljs.core.chunked_seq_QMARK_.call(null, s__7316__$2)) {
                                      var c__4375__auto__ = cljs.core.chunk_first.call(null, s__7316__$2);
                                      var size__4376__auto__ = cljs.core.count.call(null, c__4375__auto__);
                                      var b__7318 = cljs.core.chunk_buffer.call(null, size__4376__auto__);
                                      if (function() {
                                        var i__7317 = 0;
                                        while (true) {
                                          if (i__7317 < size__4376__auto__) {
                                            var k = cljs.core._nth.call(null, c__4375__auto__, i__7317);
                                            cljs.core.chunk_append.call(null, b__7318, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null));
                                            var G__7320 = i__7317 + 1;
                                            i__7317 = G__7320;
                                            continue;
                                          } else {
                                            return true;
                                          }
                                          break;
                                        }
                                      }()) {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7318), iter__7315.call(null, cljs.core.chunk_rest.call(null, s__7316__$2)));
                                      } else {
                                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__7318), null);
                                      }
                                    } else {
                                      var k = cljs.core.first.call(null, s__7316__$2);
                                      return cljs.core.cons.call(null, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [keyfn.call(null, k), thisfn.call(null, x__$1[k])], null), iter__7315.call(null, cljs.core.rest.call(null, s__7316__$2)));
                                    }
                                  } else {
                                    return null;
                                  }
                                  break;
                                }
                              };
                            }(map__7310, map__7310__$1, keywordize_keys, keyfn), null, null);
                          };
                        }(map__7310, map__7310__$1, keywordize_keys, keyfn);
                        return iter__4377__auto__.call(null, cljs.core.js_keys.call(null, x__$1));
                      }());
                    } else {
                      return x__$1;
                    }
                  }
                }
              }
            };
          }(map__7310, map__7310__$1, keywordize_keys, keyfn);
          return f.call(null, x);
        } else {
          return null;
        }
      }
    };
    var G__7319 = function(x, var_args) {
      var opts = null;
      if (arguments.length > 1) {
        opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7319__delegate.call(this, x, opts);
    };
    G__7319.cljs$lang$maxFixedArity = 1;
    G__7319.cljs$lang$applyTo = function(arglist__7321) {
      var x = cljs.core.first(arglist__7321);
      var opts = cljs.core.rest(arglist__7321);
      return G__7319__delegate(x, opts);
    };
    G__7319.cljs$core$IFn$_invoke$arity$variadic = G__7319__delegate;
    return G__7319;
  }();
  js__GT_clj = function(x, var_args) {
    var opts = var_args;
    switch(arguments.length) {
      case 1:
        return js__GT_clj__1.call(this, x);
      default:
        return js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic(x, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js__GT_clj.cljs$lang$maxFixedArity = 1;
  js__GT_clj.cljs$lang$applyTo = js__GT_clj__2.cljs$lang$applyTo;
  js__GT_clj.cljs$core$IFn$_invoke$arity$1 = js__GT_clj__1;
  js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = js__GT_clj__2.cljs$core$IFn$_invoke$arity$variadic;
  return js__GT_clj;
}();
cljs.core.memoize = function memoize(f) {
  var mem = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
  return function(mem) {
    return function() {
      var G__7322__delegate = function(args) {
        var v = cljs.core.get.call(null, cljs.core.deref.call(null, mem), args, cljs.core.lookup_sentinel);
        if (v === cljs.core.lookup_sentinel) {
          var ret = cljs.core.apply.call(null, f, args);
          cljs.core.swap_BANG_.call(null, mem, cljs.core.assoc, args, ret);
          return ret;
        } else {
          return v;
        }
      };
      var G__7322 = function(var_args) {
        var args = null;
        if (arguments.length > 0) {
          args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
        }
        return G__7322__delegate.call(this, args);
      };
      G__7322.cljs$lang$maxFixedArity = 0;
      G__7322.cljs$lang$applyTo = function(arglist__7323) {
        var args = cljs.core.seq(arglist__7323);
        return G__7322__delegate(args);
      };
      G__7322.cljs$core$IFn$_invoke$arity$variadic = G__7322__delegate;
      return G__7322;
    }();
  }(mem);
};
cljs.core.trampoline = function() {
  var trampoline = null;
  var trampoline__1 = function(f) {
    while (true) {
      var ret = f.call(null);
      if (cljs.core.fn_QMARK_.call(null, ret)) {
        var G__7324 = ret;
        f = G__7324;
        continue;
      } else {
        return ret;
      }
      break;
    }
  };
  var trampoline__2 = function() {
    var G__7325__delegate = function(f, args) {
      return trampoline.call(null, function() {
        return cljs.core.apply.call(null, f, args);
      });
    };
    var G__7325 = function(f, var_args) {
      var args = null;
      if (arguments.length > 1) {
        args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
      }
      return G__7325__delegate.call(this, f, args);
    };
    G__7325.cljs$lang$maxFixedArity = 1;
    G__7325.cljs$lang$applyTo = function(arglist__7326) {
      var f = cljs.core.first(arglist__7326);
      var args = cljs.core.rest(arglist__7326);
      return G__7325__delegate(f, args);
    };
    G__7325.cljs$core$IFn$_invoke$arity$variadic = G__7325__delegate;
    return G__7325;
  }();
  trampoline = function(f, var_args) {
    var args = var_args;
    switch(arguments.length) {
      case 1:
        return trampoline__1.call(this, f);
      default:
        return trampoline__2.cljs$core$IFn$_invoke$arity$variadic(f, cljs.core.array_seq(arguments, 1));
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  trampoline.cljs$lang$maxFixedArity = 1;
  trampoline.cljs$lang$applyTo = trampoline__2.cljs$lang$applyTo;
  trampoline.cljs$core$IFn$_invoke$arity$1 = trampoline__1;
  trampoline.cljs$core$IFn$_invoke$arity$variadic = trampoline__2.cljs$core$IFn$_invoke$arity$variadic;
  return trampoline;
}();
cljs.core.rand = function() {
  var rand = null;
  var rand__0 = function() {
    return rand.call(null, 1);
  };
  var rand__1 = function(n) {
    return Math.random.call(null) * n;
  };
  rand = function(n) {
    switch(arguments.length) {
      case 0:
        return rand__0.call(this);
      case 1:
        return rand__1.call(this, n);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  rand.cljs$core$IFn$_invoke$arity$0 = rand__0;
  rand.cljs$core$IFn$_invoke$arity$1 = rand__1;
  return rand;
}();
cljs.core.rand_int = function rand_int(n) {
  return Math.floor.call(null, Math.random.call(null) * n);
};
cljs.core.rand_nth = function rand_nth(coll) {
  return cljs.core.nth.call(null, coll, cljs.core.rand_int.call(null, cljs.core.count.call(null, coll)));
};
cljs.core.group_by = function group_by(f, coll) {
  return cljs.core.persistent_BANG_.call(null, cljs.core.reduce.call(null, function(ret, x) {
    var k = f.call(null, x);
    return cljs.core.assoc_BANG_.call(null, ret, k, cljs.core.conj.call(null, cljs.core.get.call(null, ret, k, cljs.core.PersistentVector.EMPTY), x));
  }, cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY), coll));
};
cljs.core.make_hierarchy = function make_hierarchy() {
  return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), cljs.core.PersistentArrayMap.EMPTY, new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), cljs.core.PersistentArrayMap.EMPTY], null);
};
cljs.core._global_hierarchy = null;
cljs.core.get_global_hierarchy = function get_global_hierarchy() {
  if (cljs.core._global_hierarchy == null) {
    cljs.core._global_hierarchy = cljs.core.atom.call(null, cljs.core.make_hierarchy.call(null));
  } else {
  }
  return cljs.core._global_hierarchy;
};
cljs.core.swap_global_hierarchy_BANG_ = function() {
  var swap_global_hierarchy_BANG___delegate = function(f, args) {
    return cljs.core.apply.call(null, cljs.core.swap_BANG_, cljs.core.get_global_hierarchy.call(null), f, args);
  };
  var swap_global_hierarchy_BANG_ = function(f, var_args) {
    var args = null;
    if (arguments.length > 1) {
      args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return swap_global_hierarchy_BANG___delegate.call(this, f, args);
  };
  swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = 1;
  swap_global_hierarchy_BANG_.cljs$lang$applyTo = function(arglist__7327) {
    var f = cljs.core.first(arglist__7327);
    var args = cljs.core.rest(arglist__7327);
    return swap_global_hierarchy_BANG___delegate(f, args);
  };
  swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = swap_global_hierarchy_BANG___delegate;
  return swap_global_hierarchy_BANG_;
}();
cljs.core.isa_QMARK_ = function() {
  var isa_QMARK_ = null;
  var isa_QMARK___2 = function(child, parent) {
    return isa_QMARK_.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), child, parent);
  };
  var isa_QMARK___3 = function(h, child, parent) {
    var or__3639__auto__ = cljs.core._EQ_.call(null, child, parent);
    if (or__3639__auto__) {
      return or__3639__auto__;
    } else {
      var or__3639__auto____$1 = cljs.core.contains_QMARK_.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h).call(null, child), parent);
      if (or__3639__auto____$1) {
        return or__3639__auto____$1;
      } else {
        var and__3627__auto__ = cljs.core.vector_QMARK_.call(null, parent);
        if (and__3627__auto__) {
          var and__3627__auto____$1 = cljs.core.vector_QMARK_.call(null, child);
          if (and__3627__auto____$1) {
            var and__3627__auto____$2 = cljs.core.count.call(null, parent) === cljs.core.count.call(null, child);
            if (and__3627__auto____$2) {
              var ret = true;
              var i = 0;
              while (true) {
                if (!ret || i === cljs.core.count.call(null, parent)) {
                  return ret;
                } else {
                  var G__7328 = isa_QMARK_.call(null, h, child.call(null, i), parent.call(null, i));
                  var G__7329 = i + 1;
                  ret = G__7328;
                  i = G__7329;
                  continue;
                }
                break;
              }
            } else {
              return and__3627__auto____$2;
            }
          } else {
            return and__3627__auto____$1;
          }
        } else {
          return and__3627__auto__;
        }
      }
    }
  };
  isa_QMARK_ = function(h, child, parent) {
    switch(arguments.length) {
      case 2:
        return isa_QMARK___2.call(this, h, child);
      case 3:
        return isa_QMARK___3.call(this, h, child, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = isa_QMARK___2;
  isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = isa_QMARK___3;
  return isa_QMARK_;
}();
cljs.core.parents = function() {
  var parents = null;
  var parents__1 = function(tag) {
    return parents.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var parents__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  parents = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return parents__1.call(this, h);
      case 2:
        return parents__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  parents.cljs$core$IFn$_invoke$arity$1 = parents__1;
  parents.cljs$core$IFn$_invoke$arity$2 = parents__2;
  return parents;
}();
cljs.core.ancestors = function() {
  var ancestors = null;
  var ancestors__1 = function(tag) {
    return ancestors.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var ancestors__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  ancestors = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return ancestors__1.call(this, h);
      case 2:
        return ancestors__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ancestors.cljs$core$IFn$_invoke$arity$1 = ancestors__1;
  ancestors.cljs$core$IFn$_invoke$arity$2 = ancestors__2;
  return ancestors;
}();
cljs.core.descendants = function() {
  var descendants = null;
  var descendants__1 = function(tag) {
    return descendants.call(null, cljs.core.deref.call(null, cljs.core.get_global_hierarchy.call(null)), tag);
  };
  var descendants__2 = function(h, tag) {
    return cljs.core.not_empty.call(null, cljs.core.get.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), tag));
  };
  descendants = function(h, tag) {
    switch(arguments.length) {
      case 1:
        return descendants__1.call(this, h);
      case 2:
        return descendants__2.call(this, h, tag);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  descendants.cljs$core$IFn$_invoke$arity$1 = descendants__1;
  descendants.cljs$core$IFn$_invoke$arity$2 = descendants__2;
  return descendants;
}();
cljs.core.derive = function() {
  var derive = null;
  var derive__2 = function(tag, parent) {
    if (cljs.core.truth_(cljs.core.namespace.call(null, parent))) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "namespace", "namespace", 1263021155, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    cljs.core.swap_global_hierarchy_BANG_.call(null, derive, tag, parent);
    return null;
  };
  var derive__3 = function(h, tag, parent) {
    if (cljs.core.not_EQ_.call(null, tag, parent)) {
    } else {
      throw new Error("Assert failed: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_str.call(null, cljs.core.list(new cljs.core.Symbol(null, "not\x3d", "not\x3d", 1466536204, null), new cljs.core.Symbol(null, "tag", "tag", 350170304, null), new cljs.core.Symbol(null, "parent", "parent", 761652748, null)))));
    }
    var tp = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var td = (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h);
    var ta = (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h);
    var tf = function(tp, td, ta) {
      return function(m, source, sources, target, targets) {
        return cljs.core.reduce.call(null, function(tp, td, ta) {
          return function(ret, k) {
            return cljs.core.assoc.call(null, ret, k, cljs.core.reduce.call(null, cljs.core.conj, cljs.core.get.call(null, targets, k, cljs.core.PersistentHashSet.EMPTY), cljs.core.cons.call(null, target, targets.call(null, target))));
          };
        }(tp, td, ta), m, cljs.core.cons.call(null, source, sources.call(null, source)));
      };
    }(tp, td, ta);
    var or__3639__auto__ = cljs.core.contains_QMARK_.call(null, tp.call(null, tag), parent) ? null : function() {
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, tag), parent)) {
        throw new Error("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "already has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "as ancestor");
      } else {
      }
      if (cljs.core.contains_QMARK_.call(null, ta.call(null, parent), tag)) {
        throw new Error("Cyclic derivation:" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent) + "has" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag) + "as ancestor");
      } else {
      }
      return new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "parents", "parents", -2027538891), cljs.core.assoc.call(null, (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h), tag, cljs.core.conj.call(null, cljs.core.get.call(null, tp, tag, cljs.core.PersistentHashSet.EMPTY), parent)), new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424), tf.call(null, (new cljs.core.Keyword(null, "ancestors", "ancestors", -776045424)).cljs$core$IFn$_invoke$arity$1(h), 
      tag, td, parent, ta), new cljs.core.Keyword(null, "descendants", "descendants", 1824886031), tf.call(null, (new cljs.core.Keyword(null, "descendants", "descendants", 1824886031)).cljs$core$IFn$_invoke$arity$1(h), parent, ta, tag, td)], null);
    }();
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return h;
    }
  };
  derive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return derive__2.call(this, h, tag);
      case 3:
        return derive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  derive.cljs$core$IFn$_invoke$arity$2 = derive__2;
  derive.cljs$core$IFn$_invoke$arity$3 = derive__3;
  return derive;
}();
cljs.core.underive = function() {
  var underive = null;
  var underive__2 = function(tag, parent) {
    cljs.core.swap_global_hierarchy_BANG_.call(null, underive, tag, parent);
    return null;
  };
  var underive__3 = function(h, tag, parent) {
    var parentMap = (new cljs.core.Keyword(null, "parents", "parents", -2027538891)).cljs$core$IFn$_invoke$arity$1(h);
    var childsParents = cljs.core.truth_(parentMap.call(null, tag)) ? cljs.core.disj.call(null, parentMap.call(null, tag), parent) : cljs.core.PersistentHashSet.EMPTY;
    var newParents = cljs.core.truth_(cljs.core.not_empty.call(null, childsParents)) ? cljs.core.assoc.call(null, parentMap, tag, childsParents) : cljs.core.dissoc.call(null, parentMap, tag);
    var deriv_seq = cljs.core.flatten.call(null, cljs.core.map.call(null, function(parentMap, childsParents, newParents) {
      return function(p1__7330_SHARP_) {
        return cljs.core.cons.call(null, cljs.core.first.call(null, p1__7330_SHARP_), cljs.core.interpose.call(null, cljs.core.first.call(null, p1__7330_SHARP_), cljs.core.second.call(null, p1__7330_SHARP_)));
      };
    }(parentMap, childsParents, newParents), cljs.core.seq.call(null, newParents)));
    if (cljs.core.contains_QMARK_.call(null, parentMap.call(null, tag), parent)) {
      return cljs.core.reduce.call(null, function(parentMap, childsParents, newParents, deriv_seq) {
        return function(p1__7331_SHARP_, p2__7332_SHARP_) {
          return cljs.core.apply.call(null, cljs.core.derive, p1__7331_SHARP_, p2__7332_SHARP_);
        };
      }(parentMap, childsParents, newParents, deriv_seq), cljs.core.make_hierarchy.call(null), cljs.core.partition.call(null, 2, deriv_seq));
    } else {
      return h;
    }
  };
  underive = function(h, tag, parent) {
    switch(arguments.length) {
      case 2:
        return underive__2.call(this, h, tag);
      case 3:
        return underive__3.call(this, h, tag, parent);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  underive.cljs$core$IFn$_invoke$arity$2 = underive__2;
  underive.cljs$core$IFn$_invoke$arity$3 = underive__3;
  return underive;
}();
cljs.core.reset_cache = function reset_cache(method_cache, method_table, cached_hierarchy, hierarchy) {
  cljs.core.swap_BANG_.call(null, method_cache, function(_) {
    return cljs.core.deref.call(null, method_table);
  });
  return cljs.core.swap_BANG_.call(null, cached_hierarchy, function(_) {
    return cljs.core.deref.call(null, hierarchy);
  });
};
cljs.core.prefers_STAR_ = function prefers_STAR_(x, y, prefer_table) {
  var xprefs = cljs.core.deref.call(null, prefer_table).call(null, x);
  var or__3639__auto__ = cljs.core.truth_(function() {
    var and__3627__auto__ = xprefs;
    if (cljs.core.truth_(and__3627__auto__)) {
      return xprefs.call(null, y);
    } else {
      return and__3627__auto__;
    }
  }()) ? true : null;
  if (cljs.core.truth_(or__3639__auto__)) {
    return or__3639__auto__;
  } else {
    var or__3639__auto____$1 = function() {
      var ps = cljs.core.parents.call(null, y);
      while (true) {
        if (cljs.core.count.call(null, ps) > 0) {
          if (cljs.core.truth_(prefers_STAR_.call(null, x, cljs.core.first.call(null, ps), prefer_table))) {
          } else {
          }
          var G__7333 = cljs.core.rest.call(null, ps);
          ps = G__7333;
          continue;
        } else {
          return null;
        }
        break;
      }
    }();
    if (cljs.core.truth_(or__3639__auto____$1)) {
      return or__3639__auto____$1;
    } else {
      var or__3639__auto____$2 = function() {
        var ps = cljs.core.parents.call(null, x);
        while (true) {
          if (cljs.core.count.call(null, ps) > 0) {
            if (cljs.core.truth_(prefers_STAR_.call(null, cljs.core.first.call(null, ps), y, prefer_table))) {
            } else {
            }
            var G__7334 = cljs.core.rest.call(null, ps);
            ps = G__7334;
            continue;
          } else {
            return null;
          }
          break;
        }
      }();
      if (cljs.core.truth_(or__3639__auto____$2)) {
        return or__3639__auto____$2;
      } else {
        return false;
      }
    }
  }
};
cljs.core.dominates = function dominates(x, y, prefer_table) {
  var or__3639__auto__ = cljs.core.prefers_STAR_.call(null, x, y, prefer_table);
  if (cljs.core.truth_(or__3639__auto__)) {
    return or__3639__auto__;
  } else {
    return cljs.core.isa_QMARK_.call(null, x, y);
  }
};
cljs.core.find_and_cache_best_method = function find_and_cache_best_method(name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  var best_entry = cljs.core.reduce.call(null, function(be, p__7337) {
    var vec__7338 = p__7337;
    var k = cljs.core.nth.call(null, vec__7338, 0, null);
    var _ = cljs.core.nth.call(null, vec__7338, 1, null);
    var e = vec__7338;
    if (cljs.core.isa_QMARK_.call(null, cljs.core.deref.call(null, hierarchy), dispatch_val, k)) {
      var be2 = cljs.core.truth_(function() {
        var or__3639__auto__ = be == null;
        if (or__3639__auto__) {
          return or__3639__auto__;
        } else {
          return cljs.core.dominates.call(null, k, cljs.core.first.call(null, be), prefer_table);
        }
      }()) ? e : be;
      if (cljs.core.truth_(cljs.core.dominates.call(null, cljs.core.first.call(null, be2), k, prefer_table))) {
      } else {
        throw new Error("Multiple methods in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' match dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val) + " -\x3e " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(k) + " and " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first.call(null, be2)) + ", and neither is preferred");
      }
      return be2;
    } else {
      return be;
    }
  }, null, cljs.core.deref.call(null, method_table));
  if (cljs.core.truth_(best_entry)) {
    if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, cached_hierarchy), cljs.core.deref.call(null, hierarchy))) {
      cljs.core.swap_BANG_.call(null, method_cache, cljs.core.assoc, dispatch_val, cljs.core.second.call(null, best_entry));
      return cljs.core.second.call(null, best_entry);
    } else {
      cljs.core.reset_cache.call(null, method_cache, method_table, cached_hierarchy, hierarchy);
      return find_and_cache_best_method.call(null, name, dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
    }
  } else {
    return null;
  }
};
cljs.core.IMultiFn = function() {
  var obj7340 = {};
  return obj7340;
}();
cljs.core._reset = function _reset(mf) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_reset$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._reset[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._reset["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-reset", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._add_method = function _add_method(mf, dispatch_val, method) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_add_method$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_add_method$arity$3(mf, dispatch_val, method);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._add_method[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._add_method["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-add-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, method);
  }
};
cljs.core._remove_method = function _remove_method(mf, dispatch_val) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_remove_method$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf, dispatch_val);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._remove_method[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._remove_method["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-remove-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._prefer_method = function _prefer_method(mf, dispatch_val, dispatch_val_y) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_prefer_method$arity$3;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf, dispatch_val, dispatch_val_y);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._prefer_method[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._prefer_method["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefer-method", mf);
        }
      }
    }().call(null, mf, dispatch_val, dispatch_val_y);
  }
};
cljs.core._get_method = function _get_method(mf, dispatch_val) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_get_method$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_get_method$arity$2(mf, dispatch_val);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._get_method[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._get_method["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-get-method", mf);
        }
      }
    }().call(null, mf, dispatch_val);
  }
};
cljs.core._methods = function _methods(mf) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_methods$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._methods[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._methods["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-methods", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core._prefers = function _prefers(mf) {
  if (function() {
    var and__3627__auto__ = mf;
    if (and__3627__auto__) {
      return mf.cljs$core$IMultiFn$_prefers$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
  } else {
    var x__4275__auto__ = mf == null ? null : mf;
    return function() {
      var or__3639__auto__ = cljs.core._prefers[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.core._prefers["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "IMultiFn.-prefers", mf);
        }
      }
    }().call(null, mf);
  }
};
cljs.core.throw_no_method_error = function throw_no_method_error(name, dispatch_val) {
  throw new Error("No method in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(name) + "' for dispatch value: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val));
};
cljs.core.MultiFn = function(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  this.name = name;
  this.dispatch_fn = dispatch_fn;
  this.default_dispatch_val = default_dispatch_val;
  this.hierarchy = hierarchy;
  this.method_table = method_table;
  this.prefer_table = prefer_table;
  this.method_cache = method_cache;
  this.cached_hierarchy = cached_hierarchy;
  this.cljs$lang$protocol_mask$partition0$ = 4194305;
  this.cljs$lang$protocol_mask$partition1$ = 256;
};
cljs.core.MultiFn.cljs$lang$type = true;
cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";
cljs.core.MultiFn.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/MultiFn");
};
cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.getUid(this$__$1);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.method_cache, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(mf__$2) {
      return cljs.core.PersistentArrayMap.EMPTY;
    };
  }(mf__$1));
  cljs.core.swap_BANG_.call(null, self__.cached_hierarchy, function(mf__$1) {
    return function(mf__$2) {
      return null;
    };
  }(mf__$1));
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = function(mf, dispatch_val, method) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.assoc, dispatch_val, method);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  cljs.core.swap_BANG_.call(null, self__.method_table, cljs.core.dissoc, dispatch_val);
  cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  return mf__$1;
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = function(mf, dispatch_val) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core._EQ_.call(null, cljs.core.deref.call(null, self__.cached_hierarchy), cljs.core.deref.call(null, self__.hierarchy))) {
  } else {
    cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
  }
  var temp__4124__auto__ = cljs.core.deref.call(null, self__.method_cache).call(null, dispatch_val);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var target_fn = temp__4124__auto__;
    return target_fn;
  } else {
    var temp__4124__auto____$1 = cljs.core.find_and_cache_best_method.call(null, self__.name, dispatch_val, self__.hierarchy, self__.method_table, self__.prefer_table, self__.method_cache, self__.cached_hierarchy);
    if (cljs.core.truth_(temp__4124__auto____$1)) {
      var target_fn = temp__4124__auto____$1;
      return target_fn;
    } else {
      return cljs.core.deref.call(null, self__.method_table).call(null, self__.default_dispatch_val);
    }
  }
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = function(mf, dispatch_val_x, dispatch_val_y) {
  var self__ = this;
  var mf__$1 = this;
  if (cljs.core.truth_(cljs.core.prefers_STAR_.call(null, dispatch_val_x, dispatch_val_y, self__.prefer_table))) {
    throw new Error("Preference conflict in multimethod '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name) + "': " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y) + " is already preferred to " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x));
  } else {
  }
  cljs.core.swap_BANG_.call(null, self__.prefer_table, function(mf__$1) {
    return function(old) {
      return cljs.core.assoc.call(null, old, dispatch_val_x, cljs.core.conj.call(null, cljs.core.get.call(null, old, dispatch_val_x, cljs.core.PersistentHashSet.EMPTY), dispatch_val_y));
    };
  }(mf__$1));
  return cljs.core.reset_cache.call(null, self__.method_cache, self__.method_table, self__.cached_hierarchy, self__.hierarchy);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.method_table);
};
cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = function(mf) {
  var self__ = this;
  var mf__$1 = this;
  return cljs.core.deref.call(null, self__.prefer_table);
};
cljs.core.MultiFn.prototype.call = function() {
  var G__7342 = null;
  var G__7342__2 = function(self__, a) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a);
  };
  var G__7342__3 = function(self__, a, b) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b);
  };
  var G__7342__4 = function(self__, a, b, c) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c);
  };
  var G__7342__5 = function(self__, a, b, c, d) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d);
  };
  var G__7342__6 = function(self__, a, b, c, d, e) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e);
  };
  var G__7342__7 = function(self__, a, b, c, d, e, f) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f);
  };
  var G__7342__8 = function(self__, a, b, c, d, e, f, g) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g);
  };
  var G__7342__9 = function(self__, a, b, c, d, e, f, g, h) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h);
  };
  var G__7342__10 = function(self__, a, b, c, d, e, f, g, h, i) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i);
  };
  var G__7342__11 = function(self__, a, b, c, d, e, f, g, h, i, j) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  };
  var G__7342__12 = function(self__, a, b, c, d, e, f, g, h, i, j, k) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  };
  var G__7342__13 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  };
  var G__7342__14 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  };
  var G__7342__15 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  };
  var G__7342__16 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  };
  var G__7342__17 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  };
  var G__7342__18 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  };
  var G__7342__19 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  };
  var G__7342__20 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  };
  var G__7342__21 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  };
  var G__7342__22 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    var self__ = this;
    var self____$1 = this;
    var mf = self____$1;
    var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
    if (cljs.core.truth_(target_fn)) {
    } else {
      cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
    }
    return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  };
  G__7342 = function(self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
    switch(arguments.length) {
      case 2:
        return G__7342__2.call(this, self__, a);
      case 3:
        return G__7342__3.call(this, self__, a, b);
      case 4:
        return G__7342__4.call(this, self__, a, b, c);
      case 5:
        return G__7342__5.call(this, self__, a, b, c, d);
      case 6:
        return G__7342__6.call(this, self__, a, b, c, d, e);
      case 7:
        return G__7342__7.call(this, self__, a, b, c, d, e, f);
      case 8:
        return G__7342__8.call(this, self__, a, b, c, d, e, f, g);
      case 9:
        return G__7342__9.call(this, self__, a, b, c, d, e, f, g, h);
      case 10:
        return G__7342__10.call(this, self__, a, b, c, d, e, f, g, h, i);
      case 11:
        return G__7342__11.call(this, self__, a, b, c, d, e, f, g, h, i, j);
      case 12:
        return G__7342__12.call(this, self__, a, b, c, d, e, f, g, h, i, j, k);
      case 13:
        return G__7342__13.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l);
      case 14:
        return G__7342__14.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m);
      case 15:
        return G__7342__15.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
      case 16:
        return G__7342__16.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
      case 17:
        return G__7342__17.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
      case 18:
        return G__7342__18.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
      case 19:
        return G__7342__19.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
      case 20:
        return G__7342__20.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
      case 21:
        return G__7342__21.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
      case 22:
        return G__7342__22.call(this, self__, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  G__7342.cljs$core$IFn$_invoke$arity$2 = G__7342__2;
  G__7342.cljs$core$IFn$_invoke$arity$3 = G__7342__3;
  G__7342.cljs$core$IFn$_invoke$arity$4 = G__7342__4;
  G__7342.cljs$core$IFn$_invoke$arity$5 = G__7342__5;
  G__7342.cljs$core$IFn$_invoke$arity$6 = G__7342__6;
  G__7342.cljs$core$IFn$_invoke$arity$7 = G__7342__7;
  G__7342.cljs$core$IFn$_invoke$arity$8 = G__7342__8;
  G__7342.cljs$core$IFn$_invoke$arity$9 = G__7342__9;
  G__7342.cljs$core$IFn$_invoke$arity$10 = G__7342__10;
  G__7342.cljs$core$IFn$_invoke$arity$11 = G__7342__11;
  G__7342.cljs$core$IFn$_invoke$arity$12 = G__7342__12;
  G__7342.cljs$core$IFn$_invoke$arity$13 = G__7342__13;
  G__7342.cljs$core$IFn$_invoke$arity$14 = G__7342__14;
  G__7342.cljs$core$IFn$_invoke$arity$15 = G__7342__15;
  G__7342.cljs$core$IFn$_invoke$arity$16 = G__7342__16;
  G__7342.cljs$core$IFn$_invoke$arity$17 = G__7342__17;
  G__7342.cljs$core$IFn$_invoke$arity$18 = G__7342__18;
  G__7342.cljs$core$IFn$_invoke$arity$19 = G__7342__19;
  G__7342.cljs$core$IFn$_invoke$arity$20 = G__7342__20;
  G__7342.cljs$core$IFn$_invoke$arity$21 = G__7342__21;
  G__7342.cljs$core$IFn$_invoke$arity$22 = G__7342__22;
  return G__7342;
}();
cljs.core.MultiFn.prototype.apply = function(self__, args7341) {
  var self__ = this;
  var self____$1 = this;
  return self____$1.call.apply(self____$1, [self____$1].concat(cljs.core.aclone.call(null, args7341)));
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = function(a) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = function(a, b) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = function(a, b, c) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = function(a, b, c, d) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = function(a, b, c, d, e) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = function(a, b, c, d, e, f) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = function(a, b, c, d, e, f, g) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = function(a, b, c, d, e, f, g, h) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = function(a, b, c, d, e, f, g, h, i) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = function(a, b, c, d, e, f, g, h, i, j) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = function(a, b, c, d, e, f, g, h, i, j, k) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = function(a, b, c, d, e, f, g, h, i, j, k, l) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = function(a, b, c, d, e, f, g, h, i, j, k, l, m) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t) {
  var self__ = this;
  var mf = this;
  var dispatch_val = self__.dispatch_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return target_fn.call(null, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t);
};
cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = function(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest) {
  var self__ = this;
  var mf = this;
  var dispatch_val = cljs.core.apply.call(null, self__.dispatch_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
  var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null, dispatch_val);
  if (cljs.core.truth_(target_fn)) {
  } else {
    cljs.core.throw_no_method_error.call(null, self__.name, dispatch_val);
  }
  return cljs.core.apply.call(null, target_fn, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, rest);
};
cljs.core.__GT_MultiFn = function __GT_MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy) {
  return new cljs.core.MultiFn(name, dispatch_fn, default_dispatch_val, hierarchy, method_table, prefer_table, method_cache, cached_hierarchy);
};
cljs.core.remove_all_methods = function remove_all_methods(multifn) {
  return cljs.core._reset.call(null, multifn);
};
cljs.core.remove_method = function remove_method(multifn, dispatch_val) {
  return cljs.core._remove_method.call(null, multifn, dispatch_val);
};
cljs.core.prefer_method = function prefer_method(multifn, dispatch_val_x, dispatch_val_y) {
  return cljs.core._prefer_method.call(null, multifn, dispatch_val_x, dispatch_val_y);
};
cljs.core.methods$ = function methods$(multifn) {
  return cljs.core._methods.call(null, multifn);
};
cljs.core.get_method = function get_method(multifn, dispatch_val) {
  return cljs.core._get_method.call(null, multifn, dispatch_val);
};
cljs.core.prefers = function prefers(multifn) {
  return cljs.core._prefers.call(null, multifn);
};
cljs.core.UUID = function(uuid) {
  this.uuid = uuid;
  this.cljs$lang$protocol_mask$partition1$ = 0;
  this.cljs$lang$protocol_mask$partition0$ = 2153775104;
};
cljs.core.UUID.cljs$lang$type = true;
cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";
cljs.core.UUID.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.core/UUID");
};
cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var self__ = this;
  var this$__$1 = this;
  return goog.string.hashCode(cljs.core.pr_str.call(null, this$__$1));
};
cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = function(_, writer, ___$1) {
  var self__ = this;
  var ___$2 = this;
  return cljs.core._write.call(null, writer, '#uuid "' + cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid) + '"');
};
cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(_, other) {
  var self__ = this;
  var ___$1 = this;
  return other instanceof cljs.core.UUID && self__.uuid === other.uuid;
};
cljs.core.UUID.prototype.toString = function() {
  var self__ = this;
  var _ = this;
  return self__.uuid;
};
cljs.core.UUID.prototype.equiv = function(other) {
  var self__ = this;
  var this$ = this;
  return this$.cljs$core$IEquiv$_equiv$arity$2(null, other);
};
cljs.core.__GT_UUID = function __GT_UUID(uuid) {
  return new cljs.core.UUID(uuid);
};
cljs.core.ExceptionInfo = function(message, data, cause) {
  this.message = message;
  this.data = data;
  this.cause = cause;
};
cljs.core.ExceptionInfo.cljs$lang$type = true;
cljs.core.ExceptionInfo.cljs$lang$ctorStr = "cljs.core/ExceptionInfo";
cljs.core.ExceptionInfo.cljs$lang$ctorPrWriter = function(this__4218__auto__, writer__4219__auto__, opts__4220__auto__) {
  return cljs.core._write.call(null, writer__4219__auto__, "cljs.core/ExceptionInfo");
};
cljs.core.__GT_ExceptionInfo = function __GT_ExceptionInfo(message, data, cause) {
  return new cljs.core.ExceptionInfo(message, data, cause);
};
cljs.core.ExceptionInfo.prototype = new Error;
cljs.core.ExceptionInfo.prototype.constructor = cljs.core.ExceptionInfo;
cljs.core.ex_info = function() {
  var ex_info = null;
  var ex_info__2 = function(msg, map) {
    return new cljs.core.ExceptionInfo(msg, map, null);
  };
  var ex_info__3 = function(msg, map, cause) {
    return new cljs.core.ExceptionInfo(msg, map, cause);
  };
  ex_info = function(msg, map, cause) {
    switch(arguments.length) {
      case 2:
        return ex_info__2.call(this, msg, map);
      case 3:
        return ex_info__3.call(this, msg, map, cause);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  ex_info.cljs$core$IFn$_invoke$arity$2 = ex_info__2;
  ex_info.cljs$core$IFn$_invoke$arity$3 = ex_info__3;
  return ex_info;
}();
cljs.core.ex_data = function ex_data(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.data;
  } else {
    return null;
  }
};
cljs.core.ex_message = function ex_message(ex) {
  if (ex instanceof Error) {
    return ex.message;
  } else {
    return null;
  }
};
cljs.core.ex_cause = function ex_cause(ex) {
  if (ex instanceof cljs.core.ExceptionInfo) {
    return ex.cause;
  } else {
    return null;
  }
};
cljs.core.comparator = function comparator(pred) {
  return function(x, y) {
    if (cljs.core.truth_(pred.call(null, x, y))) {
      return-1;
    } else {
      if (cljs.core.truth_(pred.call(null, y, x))) {
        return 1;
      } else {
        return 0;
      }
    }
  };
};
cljs.core.special_symbol_QMARK_ = function special_symbol_QMARK_(x) {
  return cljs.core.contains_QMARK_.call(null, new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 19, [new cljs.core.Symbol(null, "\x26", "\x26", -2144855648, null), null, new cljs.core.Symbol(null, "defrecord*", "defrecord*", -1936366207, null), null, new cljs.core.Symbol(null, "try", "try", -1273693247, null), null, new cljs.core.Symbol(null, "loop*", "loop*", 615029416, null), null, new cljs.core.Symbol(null, "do", "do", 1686842252, null), null, new cljs.core.Symbol(null, 
  "letfn*", "letfn*", -110097810, null), null, new cljs.core.Symbol(null, "if", "if", 1181717262, null), null, new cljs.core.Symbol(null, "new", "new", -444906321, null), null, new cljs.core.Symbol(null, "ns", "ns", 2082130287, null), null, new cljs.core.Symbol(null, "deftype*", "deftype*", 962659890, null), null, new cljs.core.Symbol(null, "let*", "let*", 1920721458, null), null, new cljs.core.Symbol(null, "js*", "js*", -1134233646, null), null, new cljs.core.Symbol(null, "fn*", "fn*", -752876845, 
  null), null, new cljs.core.Symbol(null, "recur", "recur", 1202958259, null), null, new cljs.core.Symbol(null, "set!", "set!", 250714521, null), null, new cljs.core.Symbol(null, ".", ".", 1975675962, null), null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null), null, new cljs.core.Symbol(null, "throw", "throw", 595905694, null), null, new cljs.core.Symbol(null, "def", "def", 597100991, null), null], null), null), x);
};
goog.provide("com.cognitect.transit.util");
goog.require("goog.object");
goog.scope(function() {
  var util = com.cognitect.transit.util, gobject = goog.object;
  if (typeof Object.keys != "undefined") {
    util.objectKeys = function(obj) {
      return Object.keys(obj);
    };
  } else {
    util.objectKeys = function(obj) {
      return gobject.getKeys(obj);
    };
  }
  if (typeof Array.isArray != "undefined") {
    util.isArray = function(obj) {
      return Array.isArray(obj);
    };
  } else {
    util.isArray = function(obj) {
      return goog.typeOf(obj) === "array";
    };
  }
  util.randInt = function(ub) {
    return Math.round(Math.random() * ub);
  };
  util.randHex = function() {
    return util.randInt(15).toString(16);
  };
  util.randomUUID = function() {
    var rhex = (8 | 3 & util.randInt(14)).toString(16), ret = util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + "-" + "4" + util.randHex() + util.randHex() + util.randHex() + "-" + rhex + util.randHex() + util.randHex() + util.randHex() + "-" + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + 
    util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex() + util.randHex();
    return ret;
  };
});
goog.provide("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.util");
goog.scope(function() {
  var eq = com.cognitect.transit.eq, util = com.cognitect.transit.util;
  eq.equals = function(x, y) {
    if (x == null) {
      return y == null;
    } else {
      if (x === y) {
        return true;
      } else {
        if (typeof x === "object") {
          if (util.isArray(x)) {
            if (util.isArray(y)) {
              if (x.length === y.length) {
                for (var i = 0;i < x.length;i++) {
                  if (!eq.equals(x[i], y[i])) {
                    return false;
                  }
                }
                return true;
              } else {
                return false;
              }
            } else {
              return false;
            }
          } else {
            if (x.com$cognitect$transit$equals) {
              return x.com$cognitect$transit$equals(y);
            } else {
              if (y != null && typeof y === "object") {
                if (y.com$cognitect$transit$equals) {
                  return y.com$cognitect$transit$equals(x);
                } else {
                  var xklen = 0, yklen = util.objectKeys(y).length;
                  for (var p in x) {
                    if (!x.hasOwnProperty(p)) {
                      continue;
                    }
                    xklen++;
                    if (!y.hasOwnProperty(p)) {
                      return false;
                    } else {
                      if (!eq.equals(x[p], y[p])) {
                        return false;
                      }
                    }
                  }
                  return xklen === yklen;
                }
              } else {
                return false;
              }
            }
          }
        } else {
          return false;
        }
      }
    }
  };
  eq.hashCombine = function(seed, hash) {
    return seed ^ hash + 2654435769 + (seed << 6) + (seed >> 2);
  };
  eq.stringCodeCache = {};
  eq.stringCodeCacheSize = 0;
  eq.STR_CACHE_MAX = 256;
  eq.hashString = function(str) {
    var cached = eq.stringCodeCache[str];
    if (cached != null) {
      return cached;
    }
    var code = 0;
    for (var i = 0;i < str.length;++i) {
      code = 31 * code + str.charCodeAt(i);
      code %= 4294967296;
    }
    eq.stringCodeCacheSize++;
    if (eq.stringCodeCacheSize >= eq.STR_CACHE_MAX) {
      eq.stringCodeCache = {};
      eq.stringCodeCacheSize = 1;
    }
    eq.stringCodeCache[str] = code;
    return code;
  };
  eq.hashMapLike = function(m) {
    var code = 0;
    if (m.forEach != null) {
      m.forEach(function(val, key, m) {
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      });
    } else {
      var keys = util.objectKeys(m);
      for (var i = 0;i < keys.length;i++) {
        var key = keys[i];
        var val = m[key];
        code = (code + (eq.hashCode(key) ^ eq.hashCode(val))) % 4503599627370496;
      }
    }
    return code;
  };
  eq.hashArrayLike = function(arr) {
    var code = 0;
    if (util.isArray(arr)) {
      for (var i = 0;i < arr.length;i++) {
        code = eq.hashCombine(code, eq.hashCode(arr[i]));
      }
    } else {
      if (arr.forEach) {
        arr.forEach(function(x, i) {
          code = eq.hashCombine(code, eq.hashCode(x));
        });
      }
    }
    return code;
  };
  eq.hashCode = function(x) {
    if (x == null) {
      return 0;
    } else {
      var t = typeof x;
      switch(t) {
        case "number":
          return x;
          break;
        case "boolean":
          return x === true ? 1 : 0;
          break;
        case "string":
          return eq.hashString(x);
          break;
        default:
          if (x instanceof Date) {
            return x.valueOf();
          } else {
            if (util.isArray(x)) {
              return eq.hashArrayLike(x);
            }
          }
          if (x.com$cognitect$transit$hashCode) {
            return x.com$cognitect$transit$hashCode();
          } else {
            return eq.hashMapLike(x);
          }
          break;
      }
    }
  };
  eq.extendToEQ = function(obj, opts) {
    obj.com$cognitect$transit$hashCode = opts["hashCode"];
    obj.com$cognitect$transit$equals = opts["equals"];
    return obj;
  };
});
goog.provide("goog.math.Long");
goog.math.Long = function(low, high) {
  this.low_ = low | 0;
  this.high_ = high | 0;
};
goog.math.Long.IntCache_ = {};
goog.math.Long.fromInt = function(value) {
  if (-128 <= value && value < 128) {
    var cachedObj = goog.math.Long.IntCache_[value];
    if (cachedObj) {
      return cachedObj;
    }
  }
  var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
  if (-128 <= value && value < 128) {
    goog.math.Long.IntCache_[value] = obj;
  }
  return obj;
};
goog.math.Long.fromNumber = function(value) {
  if (isNaN(value) || !isFinite(value)) {
    return goog.math.Long.ZERO;
  } else {
    if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
        return goog.math.Long.MAX_VALUE;
      } else {
        if (value < 0) {
          return goog.math.Long.fromNumber(-value).negate();
        } else {
          return new goog.math.Long(value % goog.math.Long.TWO_PWR_32_DBL_ | 0, value / goog.math.Long.TWO_PWR_32_DBL_ | 0);
        }
      }
    }
  }
};
goog.math.Long.fromBits = function(lowBits, highBits) {
  return new goog.math.Long(lowBits, highBits);
};
goog.math.Long.fromString = function(str, opt_radix) {
  if (str.length == 0) {
    throw Error("number format error: empty string");
  }
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (str.charAt(0) == "-") {
    return goog.math.Long.fromString(str.substring(1), radix).negate();
  } else {
    if (str.indexOf("-") >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));
  var result = goog.math.Long.ZERO;
  for (var i = 0;i < str.length;i += 8) {
    var size = Math.min(8, str.length - i);
    var value = parseInt(str.substring(i, i + size), radix);
    if (size < 8) {
      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
    } else {
      result = result.multiply(radixToPower);
      result = result.add(goog.math.Long.fromNumber(value));
    }
  }
  return result;
};
goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;
goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;
goog.math.Long.TWO_PWR_32_DBL_ = goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_31_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ / 2;
goog.math.Long.TWO_PWR_48_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;
goog.math.Long.TWO_PWR_64_DBL_ = goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;
goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;
goog.math.Long.ZERO = goog.math.Long.fromInt(0);
goog.math.Long.ONE = goog.math.Long.fromInt(1);
goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);
goog.math.Long.MAX_VALUE = goog.math.Long.fromBits(4294967295 | 0, 2147483647 | 0);
goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 2147483648 | 0);
goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);
goog.math.Long.prototype.toInt = function() {
  return this.low_;
};
goog.math.Long.prototype.toNumber = function() {
  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ + this.getLowBitsUnsigned();
};
goog.math.Long.prototype.toString = function(opt_radix) {
  var radix = opt_radix || 10;
  if (radix < 2 || 36 < radix) {
    throw Error("radix out of range: " + radix);
  }
  if (this.isZero()) {
    return "0";
  }
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      var radixLong = goog.math.Long.fromNumber(radix);
      var div = this.div(radixLong);
      var rem = div.multiply(radixLong).subtract(this);
      return div.toString(radix) + rem.toInt().toString(radix);
    } else {
      return "-" + this.negate().toString(radix);
    }
  }
  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));
  var rem = this;
  var result = "";
  while (true) {
    var remDiv = rem.div(radixToPower);
    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
    var digits = intval.toString(radix);
    rem = remDiv;
    if (rem.isZero()) {
      return digits + result;
    } else {
      while (digits.length < 6) {
        digits = "0" + digits;
      }
      result = "" + digits + result;
    }
  }
};
goog.math.Long.prototype.getHighBits = function() {
  return this.high_;
};
goog.math.Long.prototype.getLowBits = function() {
  return this.low_;
};
goog.math.Long.prototype.getLowBitsUnsigned = function() {
  return this.low_ >= 0 ? this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
};
goog.math.Long.prototype.getNumBitsAbs = function() {
  if (this.isNegative()) {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return 64;
    } else {
      return this.negate().getNumBitsAbs();
    }
  } else {
    var val = this.high_ != 0 ? this.high_ : this.low_;
    for (var bit = 31;bit > 0;bit--) {
      if ((val & 1 << bit) != 0) {
        break;
      }
    }
    return this.high_ != 0 ? bit + 33 : bit + 1;
  }
};
goog.math.Long.prototype.isZero = function() {
  return this.high_ == 0 && this.low_ == 0;
};
goog.math.Long.prototype.isNegative = function() {
  return this.high_ < 0;
};
goog.math.Long.prototype.isOdd = function() {
  return(this.low_ & 1) == 1;
};
goog.math.Long.prototype.equals = function(other) {
  return this.high_ == other.high_ && this.low_ == other.low_;
};
goog.math.Long.prototype.notEquals = function(other) {
  return this.high_ != other.high_ || this.low_ != other.low_;
};
goog.math.Long.prototype.lessThan = function(other) {
  return this.compare(other) < 0;
};
goog.math.Long.prototype.lessThanOrEqual = function(other) {
  return this.compare(other) <= 0;
};
goog.math.Long.prototype.greaterThan = function(other) {
  return this.compare(other) > 0;
};
goog.math.Long.prototype.greaterThanOrEqual = function(other) {
  return this.compare(other) >= 0;
};
goog.math.Long.prototype.compare = function(other) {
  if (this.equals(other)) {
    return 0;
  }
  var thisNeg = this.isNegative();
  var otherNeg = other.isNegative();
  if (thisNeg && !otherNeg) {
    return-1;
  }
  if (!thisNeg && otherNeg) {
    return 1;
  }
  if (this.subtract(other).isNegative()) {
    return-1;
  } else {
    return 1;
  }
};
goog.math.Long.prototype.negate = function() {
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return goog.math.Long.MIN_VALUE;
  } else {
    return this.not().add(goog.math.Long.ONE);
  }
};
goog.math.Long.prototype.add = function(other) {
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 + b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 + b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 + b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 + b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.subtract = function(other) {
  return this.add(other.negate());
};
goog.math.Long.prototype.multiply = function(other) {
  if (this.isZero()) {
    return goog.math.Long.ZERO;
  } else {
    if (other.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().multiply(other.negate());
    } else {
      return this.negate().multiply(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }
  }
  if (this.lessThan(goog.math.Long.TWO_PWR_24_) && other.lessThan(goog.math.Long.TWO_PWR_24_)) {
    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
  }
  var a48 = this.high_ >>> 16;
  var a32 = this.high_ & 65535;
  var a16 = this.low_ >>> 16;
  var a00 = this.low_ & 65535;
  var b48 = other.high_ >>> 16;
  var b32 = other.high_ & 65535;
  var b16 = other.low_ >>> 16;
  var b00 = other.low_ & 65535;
  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
  c00 += a00 * b00;
  c16 += c00 >>> 16;
  c00 &= 65535;
  c16 += a16 * b00;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c16 += a00 * b16;
  c32 += c16 >>> 16;
  c16 &= 65535;
  c32 += a32 * b00;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a16 * b16;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c32 += a00 * b32;
  c48 += c32 >>> 16;
  c32 &= 65535;
  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
  c48 &= 65535;
  return goog.math.Long.fromBits(c16 << 16 | c00, c48 << 16 | c32);
};
goog.math.Long.prototype.div = function(other) {
  if (other.isZero()) {
    throw Error("division by zero");
  } else {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.equals(goog.math.Long.MIN_VALUE)) {
    if (other.equals(goog.math.Long.ONE) || other.equals(goog.math.Long.NEG_ONE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    }
  } else {
    if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }
  }
  if (this.isNegative()) {
    if (other.isNegative()) {
      return this.negate().div(other.negate());
    } else {
      return this.negate().div(other).negate();
    }
  } else {
    if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }
  }
  var res = goog.math.Long.ZERO;
  var rem = this;
  while (rem.greaterThanOrEqual(other)) {
    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));
    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
    var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
    var approxRes = goog.math.Long.fromNumber(approx);
    var approxRem = approxRes.multiply(other);
    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
      approx -= delta;
      approxRes = goog.math.Long.fromNumber(approx);
      approxRem = approxRes.multiply(other);
    }
    if (approxRes.isZero()) {
      approxRes = goog.math.Long.ONE;
    }
    res = res.add(approxRes);
    rem = rem.subtract(approxRem);
  }
  return res;
};
goog.math.Long.prototype.modulo = function(other) {
  return this.subtract(this.div(other).multiply(other));
};
goog.math.Long.prototype.not = function() {
  return goog.math.Long.fromBits(~this.low_, ~this.high_);
};
goog.math.Long.prototype.and = function(other) {
  return goog.math.Long.fromBits(this.low_ & other.low_, this.high_ & other.high_);
};
goog.math.Long.prototype.or = function(other) {
  return goog.math.Long.fromBits(this.low_ | other.low_, this.high_ | other.high_);
};
goog.math.Long.prototype.xor = function(other) {
  return goog.math.Long.fromBits(this.low_ ^ other.low_, this.high_ ^ other.high_);
};
goog.math.Long.prototype.shiftLeft = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var low = this.low_;
    if (numBits < 32) {
      var high = this.high_;
      return goog.math.Long.fromBits(low << numBits, high << numBits | low >>> 32 - numBits);
    } else {
      return goog.math.Long.fromBits(0, low << numBits - 32);
    }
  }
};
goog.math.Long.prototype.shiftRight = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >> numBits);
    } else {
      return goog.math.Long.fromBits(high >> numBits - 32, high >= 0 ? 0 : -1);
    }
  }
};
goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
  numBits &= 63;
  if (numBits == 0) {
    return this;
  } else {
    var high = this.high_;
    if (numBits < 32) {
      var low = this.low_;
      return goog.math.Long.fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits);
    } else {
      if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> numBits - 32, 0);
      }
    }
  }
};
goog.provide("com.cognitect.transit.types");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.eq");
goog.require("goog.math.Long");
goog.scope(function() {
  var types = com.cognitect.transit.types, util = com.cognitect.transit.util, eq = com.cognitect.transit.eq, Long = goog.math.Long;
  types.TaggedValue = function(tag, rep) {
    this.tag = tag;
    this.rep = rep;
    this.hashCode = -1;
  };
  types.TaggedValue.prototype.toString = function() {
    return "[TaggedValue: " + this.tag + ", " + this.rep + "]";
  };
  types.TaggedValue.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.TaggedValue.prototype["equiv"] = types.TaggedValue.prototype.equiv;
  types.TaggedValue.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TaggedValue) {
      return this.tag === other.tag && eq.equals(this.rep, other.rep);
    } else {
      return false;
    }
  };
  types.TaggedValue.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCombine(eq.hashCode(this.tag), eq.hashCode(this.rep));
    }
    return this.hashCode;
  };
  types.taggedValue = function(tag, rep) {
    return new types.TaggedValue(tag, rep);
  };
  types.isTaggedValue = function(x) {
    return x instanceof types.TaggedValue;
  };
  types.nullValue = function() {
    return null;
  };
  types.boolValue = function(s) {
    return s === "t";
  };
  types.MAX_INT = Long.fromString("9007199254740992");
  types.MIN_INT = Long.fromString("-9007199254740992");
  types.intValue = function(s) {
    if (typeof s === "number") {
      return s;
    } else {
      if (s instanceof Long) {
        return s;
      } else {
        var n = Long.fromString(s, 10);
        if (n.greaterThan(types.MAX_INT) || n.lessThan(types.MIN_INT)) {
          return n;
        } else {
          return n.toNumber();
        }
      }
    }
  };
  Long.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  Long.prototype["equiv"] = Long.prototype.equiv;
  Long.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof Long && this.equals(other);
  };
  Long.prototype.com$cognitect$transit$hashCode = function() {
    return this.toInt();
  };
  types.isInteger = function(x) {
    if (x instanceof Long) {
      return true;
    } else {
      return typeof x === "number" && !isNaN(x) && !(x === Infinity) && parseFloat(x) === parseInt(x);
    }
  };
  types.floatValue = function(s) {
    return parseFloat(s);
  };
  types.bigInteger = function(s) {
    return types.taggedValue("n", s);
  };
  types.isBigInteger = function(x) {
    return x instanceof types.TaggedValue && x.tag === "n";
  };
  types.bigDecimalValue = function(s) {
    return types.taggedValue("f", s);
  };
  types.isBigDecimal = function(x) {
    return x instanceof types.TaggedValue && x.tag === "f";
  };
  types.charValue = function(s) {
    return s;
  };
  types.Keyword = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Keyword.prototype.toString = function() {
    return ":" + this.name;
  };
  types.Keyword.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Keyword.prototype["equiv"] = types.Keyword.prototype.equiv;
  types.Keyword.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Keyword && this.name == other.name;
  };
  types.Keyword.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.keyword = function(s) {
    return new types.Keyword(s);
  };
  types.isKeyword = function(x) {
    return x instanceof types.Keyword;
  };
  types.Symbol = function(name) {
    this.name = name;
    this.hashCode = -1;
  };
  types.Symbol.prototype.toString = function() {
    return "[Symbol: " + this.name + "]";
  };
  types.Symbol.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.Symbol.prototype["equiv"] = types.Symbol.prototype.equiv;
  types.Symbol.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.Symbol && this.name == other.name;
  };
  types.Symbol.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.name);
    }
    return this.hashCode;
  };
  types.symbol = function(s) {
    return new types.Symbol(s);
  };
  types.isSymbol = function(x) {
    return x instanceof types.Symbol;
  };
  types.hexFor = function(aLong, sidx, eidx) {
    var ret = "", eidx = eidx || sidx + 1;
    for (var i = sidx, shift = (7 - i) * 8, mask = Long.fromInt(255).shiftLeft(shift);i < eidx;i++, shift -= 8, mask = mask.shiftRightUnsigned(8)) {
      var s = aLong.and(mask).shiftRightUnsigned(shift).toString(16);
      if (s.length == 1) {
        s = "0" + s;
      }
      ret += s;
    }
    return ret;
  };
  types.UUID = function(high, low) {
    this.high = high;
    this.low = low;
    this.hashCode = -1;
  };
  types.UUID.prototype.getLeastSignificantBits = function() {
    return this.low;
  };
  types.UUID.prototype.getMostSignificantBits = function() {
    return this.high;
  };
  types.UUID.prototype.toString = function(s) {
    var s = "", hi64 = this.high, lo64 = this.low;
    s += types.hexFor(hi64, 0, 4) + "-";
    s += types.hexFor(hi64, 4, 6) + "-";
    s += types.hexFor(hi64, 6, 8) + "-";
    s += types.hexFor(lo64, 0, 2) + "-";
    s += types.hexFor(lo64, 2, 8);
    return s;
  };
  types.UUID.prototype.equiv = function(other) {
    return eq.equals(this, other);
  };
  types.UUID.prototype["equiv"] = types.UUID.prototype.equiv;
  types.UUID.prototype.com$cognitect$transit$equals = function(other) {
    return other instanceof types.UUID && this.high.equals(other.high) && this.low.equals(other.low);
  };
  types.UUID.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashCode(this.toString());
    }
    return this.hashCode;
  };
  types.UUIDfromString = function uuidFromString(s) {
    var s = s.replace(/-/g, ""), hi64 = null, lo64 = null, hi32 = 0, lo32 = 0, off = 24, i = 0;
    for (hi32 = 0, i = 0, off = 24;i < 8;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 8, off = 24;i < 16;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    hi64 = Long.fromBits(lo32, hi32);
    for (hi32 = 0, i = 16, off = 24;i < 24;i += 2, off -= 8) {
      hi32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    for (lo32 = 0, i = 24, off = 24;i < 32;i += 2, off -= 8) {
      lo32 |= parseInt(s.substring(i, i + 2), 16) << off;
    }
    lo64 = Long.fromBits(lo32, hi32);
    return new types.UUID(hi64, lo64);
  };
  types.uuid = function(s) {
    return types.UUIDfromString(s);
  };
  types.isUUID = function(x) {
    return x instanceof types.UUID;
  };
  types.date = function(s) {
    s = typeof s === "number" ? s : parseInt(s, 10);
    return new Date(s);
  };
  types.verboseDate = function(s) {
    return new Date(s);
  };
  Date.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof Date) {
      return this.valueOf() === other.valueOf();
    } else {
      return false;
    }
  };
  Date.prototype.com$cognitect$transit$hashCode = function() {
    return this.valueOf();
  };
  types.binary = function(str) {
    return types.taggedValue("b", str);
  };
  types.isBinary = function(x) {
    return x instanceof types.TaggedValue && x.tag === "b";
  };
  types.uri = function(s) {
    return types.taggedValue("r", s);
  };
  types.isURI = function(x) {
    return x instanceof types.TaggedValue && x.tag === "r";
  };
  types.KEYS = 0;
  types.VALUES = 1;
  types.ENTRIES = 2;
  types.TransitArrayMapIterator = function(entries, type) {
    this.entries = entries;
    this.type = type || types.KEYS;
    this.idx = 0;
  };
  types.TransitArrayMapIterator.prototype.next = function(map, type) {
    if (this.idx < this.entries.length) {
      var value = null;
      if (this.type === types.KEYS) {
        value = this.entries[this.idx];
      } else {
        if (this.type === types.VALUES) {
          value = this.entries[this.idx + 1];
        } else {
          value = [this.entries[this.idx], this.entries[this.idx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitArrayMapIterator.prototype["next"] = types.TransitArrayMapIterator.prototype.next;
  types.TransitMapIterator = function(map, type) {
    this.map = map;
    this.type = type || types.KEYS;
    this.keys = this.map.getKeys();
    this.idx = 0;
    this.bucket = null;
    this.bucketIdx = 0;
  };
  types.TransitMapIterator.prototype.next = function() {
    if (this.idx < this.map.size) {
      if (this.bucket == null || !(this.bucketIdx < this.bucket.length)) {
        this.bucket = this.map.map[this.keys[this.idx]];
        this.bucketIdx = 0;
      }
      var value = null;
      if (this.type === types.KEYS) {
        value = this.bucket[this.bucketIdx];
      } else {
        if (this.type === types.VALUES) {
          value = this.bucket[this.bucketIdx + 1];
        } else {
          value = [this.bucket[this.bucketIdx], this.bucket[this.bucketIdx + 1]];
        }
      }
      var ret = {"value":value, "done":false};
      this.idx++;
      this.bucketIdx += 2;
      return ret;
    } else {
      return{"value":null, "done":true};
    }
  };
  types.TransitMapIterator.prototype["next"] = types.TransitMapIterator.prototype.next;
  types.mapEquals = function(me, you) {
    if ((you instanceof types.TransitMap || you instanceof types.TransitArrayMap) && me.size === you.size) {
      for (var code in me.map) {
        var bucket = me.map[code];
        for (var j = 0;j < bucket.length;j += 2) {
          if (!eq.equals(bucket[j + 1], you.get(bucket[j]))) {
            return false;
          }
        }
      }
      return true;
    } else {
      if (you != null && typeof you === "object") {
        var ks = util.objectKeys(you), kslen = ks.length;
        if (me.size === kslen) {
          for (var i = 0;i < kslen;i++) {
            var k = ks[i];
            if (!me.has(k) || !eq.equals(you[k], me.get(k))) {
              return false;
            }
          }
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  };
  types.SMALL_ARRAY_MAP_THRESHOLD = 8;
  types.ARRAY_MAP_THRESHOLD = 32;
  types.ARRAY_MAP_ACCESS_THRESHOLD = 32;
  types.TransitArrayMap = function(entries) {
    this._entries = entries;
    this.backingMap = null;
    this.hashCode = -1;
    this.size = entries.length / 2;
    this.accesses = 0;
  };
  types.TransitArrayMap.prototype.toString = function() {
    return "[TransitArrayMap]";
  };
  types.TransitArrayMap.prototype.convert = function() {
    if (this.backingMap) {
      throw Error("Invalid operation, already converted");
    }
    if (this.size < types.SMALL_ARRAY_MAP_THRESHOLD) {
      return false;
    }
    this.accesses++;
    if (this.accesses > types.ARRAY_MAP_ACCESS_THRESHOLD) {
      this.backingMap = types.map(this._entries, false, true);
      this._entries = [];
      return true;
    } else {
      return false;
    }
  };
  types.TransitArrayMap.prototype.clear = function() {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.clear();
      this.size = 0;
    } else {
      this._entries = [];
      this.size = 0;
    }
  };
  types.TransitArrayMap.prototype["clear"] = types.TransitArrayMap.prototype.clear;
  types.TransitArrayMap.prototype.keys = function() {
    if (this.backingMap) {
      return this.backingMap.keys();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.KEYS);
    }
  };
  types.TransitArrayMap.prototype["keys"] = types.TransitArrayMap.prototype.keys;
  types.TransitArrayMap.prototype.keySet = function() {
    if (this.backingMap) {
      return this.backingMap.keySet();
    } else {
      var ret = [];
      for (var i = 0, j = 0;j < this._entries.length;i++, j += 2) {
        ret[i] = this._entries[j];
      }
      return ret;
    }
  };
  types.TransitArrayMap.prototype["keySet"] = types.TransitArrayMap.prototype.keySet;
  types.TransitArrayMap.prototype.entries = function() {
    if (this.backingMap) {
      return this.backingMap.entries();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.ENTRIES);
    }
  };
  types.TransitArrayMap.prototype["entries"] = types.TransitArrayMap.prototype.entries;
  types.TransitArrayMap.prototype.values = function() {
    if (this.backingMap) {
      return this.backingMap.values();
    } else {
      return new types.TransitArrayMapIterator(this._entries, types.VALUES);
    }
  };
  types.TransitArrayMap.prototype["values"] = types.TransitArrayMap.prototype.values;
  types.TransitArrayMap.prototype.forEach = function(f) {
    if (this.backingMap) {
      this.backingMap.forEach(f);
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        f(this._entries[i + 1], this._entries[i]);
      }
    }
  };
  types.TransitArrayMap.prototype["forEach"] = types.TransitArrayMap.prototype.forEach;
  types.TransitArrayMap.prototype.get = function(k) {
    if (this.backingMap) {
      return this.backingMap.get(k);
    } else {
      if (this.convert()) {
        return this.get(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return this._entries[i + 1];
          }
        }
        return null;
      }
    }
  };
  types.TransitArrayMap.prototype["get"] = types.TransitArrayMap.prototype.get;
  types.TransitArrayMap.prototype.has = function(k) {
    if (this.backingMap) {
      return this.backingMap.has(k);
    } else {
      if (this.convert()) {
        return this.has(k);
      } else {
        for (var i = 0;i < this._entries.length;i += 2) {
          if (eq.equals(this._entries[i], k)) {
            return true;
          }
        }
        return false;
      }
    }
  };
  types.TransitArrayMap.prototype["has"] = types.TransitArrayMap.prototype.has;
  types.TransitArrayMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap.set(k, v);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries[i + 1] = v;
          return;
        }
      }
      this._entries.push(k);
      this._entries.push(v);
      this.size++;
      if (this.size > types.ARRAY_MAP_THRESHOLD) {
        this.backingMap = types.map(this._entries, false, true);
        this._entries = null;
      }
    }
  };
  types.TransitArrayMap.prototype["set"] = types.TransitArrayMap.prototype.set;
  types.TransitArrayMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    if (this.backingMap) {
      this.backingMap["delete"](k);
      this.size = this.backingMap.size;
    } else {
      for (var i = 0;i < this._entries.length;i += 2) {
        if (eq.equals(this._entries[i], k)) {
          this._entries.splice(i, 2);
          this.size--;
          return;
        }
      }
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.backingMap) {
      return this.backingMap.com$cognitect$transit$hashCode();
    } else {
      if (this.hashCode === -1) {
        this.hashCode = eq.hashMapLike(this);
      }
      return this.hashCode;
    }
  };
  types.TransitArrayMap.prototype.com$cognitect$transit$equals = function(other) {
    if (this.backingMap) {
      return types.mapEquals(this.backingMap, other);
    } else {
      return types.mapEquals(this, other);
    }
  };
  types.TransitMap = function(keys, map, size) {
    this.map = map || {};
    this._keys = keys || [];
    this.size = size || 0;
    this.hashCode = -1;
  };
  types.TransitMap.prototype.toString = function() {
    return "[TransitMap]";
  };
  types.TransitMap.prototype.clear = function() {
    this.hashCode = -1;
    this.map = {};
    this._keys = [];
    this.size = 0;
  };
  types.TransitMap.prototype["clear"] = types.TransitMap.prototype.clear;
  types.TransitMap.prototype.getKeys = function() {
    if (this._keys != null) {
      return this._keys;
    } else {
      return util.objectKeys(this.map);
    }
  };
  types.TransitMap.prototype["delete"] = function(k) {
    this.hashCode = -1;
    this._keys = null;
    var code = eq.hashCode(k), bucket = this.map[code];
    for (var i = 0;i < bucket.length;i += 2) {
      if (eq.equals(k, bucket[i])) {
        bucket.splice(i, 2);
        if (bucket.length === 0) {
          delete this.map[code];
        }
        this.size--;
        break;
      }
    }
  };
  types.TransitMap.prototype.entries = function() {
    return new types.TransitMapIterator(this, types.ENTRIES);
  };
  types.TransitMap.prototype["entries"] = types.TransitMap.prototype.entries;
  types.TransitMap.prototype.forEach = function(callback) {
    var ks = this.getKeys();
    for (var i = 0;i < ks.length;i++) {
      var bucket = this.map[ks[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        callback(bucket[j + 1], bucket[j], this);
      }
    }
  };
  types.TransitMap.prototype["forEach"] = types.TransitMap.prototype.forEach;
  types.TransitMap.prototype.get = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return bucket[i + 1];
        }
      }
    } else {
      return null;
    }
  };
  types.TransitMap.prototype["get"] = types.TransitMap.prototype.get;
  types.TransitMap.prototype.has = function(k) {
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket != null) {
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(k, bucket[i])) {
          return true;
        }
      }
      return false;
    } else {
      return false;
    }
  };
  types.TransitMap.prototype["has"] = types.TransitMap.prototype.has;
  types.TransitMap.prototype.keys = function() {
    return new types.TransitMapIterator(this, types.KEYS);
  };
  types.TransitMap.prototype["keys"] = types.TransitMap.prototype.keys;
  types.TransitMap.prototype.keySet = function() {
    var keys = this.getKeys(), ret = [];
    for (var i = 0;i < keys.length;i++) {
      var bucket = this.map[keys[i]];
      for (var j = 0;j < bucket.length;j += 2) {
        ret.push(bucket[j]);
      }
    }
    return ret;
  };
  types.TransitMap.prototype["keySet"] = types.TransitMap.prototype.keySet;
  types.TransitMap.prototype.set = function(k, v) {
    this.hashCode = -1;
    var code = eq.hashCode(k), bucket = this.map[code];
    if (bucket == null) {
      if (this._keys) {
        this._keys.push(code);
      }
      this.map[code] = [k, v];
      this.size++;
    } else {
      var newEntry = true;
      for (var i = 0;i < bucket.length;i += 2) {
        if (eq.equals(v, bucket[i])) {
          newEntry = false;
          bucket[i] = v;
          break;
        }
      }
      if (newEntry) {
        bucket.push(k);
        bucket.push(v);
        this.size++;
      }
    }
  };
  types.TransitMap.prototype["set"] = types.TransitMap.prototype.set;
  types.TransitMap.prototype.values = function() {
    return new types.TransitMapIterator(this, types.VALUES);
  };
  types.TransitMap.prototype["values"] = types.TransitMap.prototype.values;
  types.TransitMap.prototype.com$cognitect$transit$hashCode = function() {
    if (this.hashCode === -1) {
      this.hashCode = eq.hashMapLike(this);
    }
    return this.hashCode;
  };
  types.TransitMap.prototype.com$cognitect$transit$equals = function(other) {
    return types.mapEquals(this, other);
  };
  types.map = function(arr, checkDups, hashMap) {
    arr = arr || [];
    checkDups = checkDups === false ? checkDups : true;
    hashMap = hashMap === true ? hashMap : false;
    if (!hashMap && arr.length <= types.ARRAY_MAP_THRESHOLD * 2) {
      if (checkDups) {
        var t = arr;
        arr = [];
        for (var i = 0;i < t.length;i += 2) {
          var seen = false;
          for (var j = 0;j < arr.length;j += 2) {
            if (eq.equals(arr[j], t[i])) {
              arr[j + 1] = t[i + 1];
              seen = true;
              break;
            }
          }
          if (!seen) {
            arr.push(t[i]);
            arr.push(t[i + 1]);
          }
        }
      }
      return new types.TransitArrayMap(arr);
    } else {
      var map = {}, keys = [], size = 0;
      for (var i = 0;i < arr.length;i += 2) {
        var code = eq.hashCode(arr[i]), bucket = map[code];
        if (bucket == null) {
          keys.push(code);
          map[code] = [arr[i], arr[i + 1]];
          size++;
        } else {
          var newEntry = true;
          for (var j = 0;j < bucket.length;j += 2) {
            if (eq.equals(bucket[j], arr[i])) {
              bucket[j + 1] = arr[i + 1];
              newEntry = false;
              break;
            }
          }
          if (newEntry) {
            bucket.push(arr[i]);
            bucket.push(arr[i + 1]);
            size++;
          }
        }
      }
      return new types.TransitMap(keys, map, size);
    }
  };
  types.isArrayMap = function(x) {
    return x instanceof types.TransitArrayMap;
  };
  types.isMap = function(x) {
    return x instanceof types.TransitArrayMap || x instanceof types.TransitMap;
  };
  types.TransitSet = function(map) {
    this.map = map;
    this.size = map.size;
  };
  types.TransitSet.prototype.toString = function() {
    return "[TransitSet]";
  };
  types.TransitSet.prototype.add = function(value) {
    this.map.set(value, value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype["add"] = types.TransitSet.prototype.add;
  types.TransitSet.prototype.clear = function() {
    this.map = new types.TransitMap;
    this.size = 0;
  };
  types.TransitSet.prototype["clear"] = types.TransitSet.prototype.clear;
  types.TransitSet.prototype["delete"] = function(value) {
    this.map["delete"](value);
    this.size = this.map.size;
  };
  types.TransitSet.prototype.entries = function() {
    return this.map.entries();
  };
  types.TransitSet.prototype["entries"] = types.TransitSet.prototype.entries;
  types.TransitSet.prototype.forEach = function(iterator, thisArg) {
    var self = this;
    this.map.forEach(function(v, k, m) {
      iterator(k, self);
    });
  };
  types.TransitSet.prototype["forEach"] = types.TransitSet.prototype.forEach;
  types.TransitSet.prototype.has = function(value) {
    return this.map.has(value);
  };
  types.TransitSet.prototype["has"] = types.TransitSet.prototype.has;
  types.TransitSet.prototype.keys = function() {
    return this.map.keys();
  };
  types.TransitSet.prototype["keys"] = types.TransitSet.prototype.keys;
  types.TransitSet.prototype.keySet = function() {
    return this.map.keySet();
  };
  types.TransitSet.prototype["keySet"] = types.TransitSet.prototype.keySet;
  types.TransitSet.prototype.values = function() {
    return this.map.values();
  };
  types.TransitSet.prototype["values"] = types.TransitSet.prototype.values;
  types.TransitSet.prototype.com$cognitect$transit$equals = function(other) {
    if (other instanceof types.TransitSet) {
      if (this.size === other.size) {
        return eq.equals(this.map, other.map);
      }
    } else {
      return false;
    }
  };
  types.TransitSet.prototype.com$cognitect$transit$hashCode = function(other) {
    return eq.hashCode(this.map);
  };
  types.set = function(arr) {
    arr = arr || [];
    var map = {}, keys = [], size = 0;
    for (var i = 0;i < arr.length;i++) {
      var code = eq.hashCode(arr[i]), vals = map[code];
      if (vals == null) {
        keys.push(code);
        map[code] = [arr[i], arr[i]];
        size++;
      } else {
        var newEntry = true;
        for (var j = 0;j < vals.length;j += 2) {
          if (eq.equals(vals[j], arr[i])) {
            newEntry = false;
            break;
          }
        }
        if (newEntry) {
          vals.push(arr[i]);
          vals.push(arr[i]);
          size++;
        }
      }
    }
    return new types.TransitSet(new types.TransitMap(keys, map, size));
  };
  types.isSet = function(x) {
    return x instanceof types.TransitSet;
  };
  types.quoted = function(obj) {
    return types.taggedValue("'", obj);
  };
  types.isQuoted = function(x) {
    return x instanceof types.TaggedValue && x.tag === "'";
  };
  types.list = function(xs) {
    return types.taggedValue("list", xs);
  };
  types.isList = function(x) {
    return x instanceof types.List && x.tag === "list";
  };
  types.link = function(rep) {
    return types.taggedValue("link", rep);
  };
  types.isLink = function(x) {
    return x instanceof types.TaggedValue && x.tag === "link";
  };
});
goog.provide("com.cognitect.transit.delimiters");
goog.scope(function() {
  var delimiters = com.cognitect.transit.delimiters;
  delimiters.ESC = "~";
  delimiters.TAG = "#";
  delimiters.SUB = "^";
  delimiters.RES = "`";
  delimiters.ESC_TAG = "~#";
});
goog.provide("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.delimiters");
goog.scope(function() {
  var caching = com.cognitect.transit.caching, d = com.cognitect.transit.delimiters;
  caching.MIN_SIZE_CACHEABLE = 3;
  caching.BASE_CHAR_IDX = 48;
  caching.CACHE_CODE_DIGITS = 44;
  caching.MAX_CACHE_ENTRIES = caching.CACHE_CODE_DIGITS * caching.CACHE_CODE_DIGITS;
  caching.MAX_CACHE_SIZE = 4096;
  caching.isCacheable = function(string, asMapKey) {
    if (string.length > caching.MIN_SIZE_CACHEABLE) {
      if (asMapKey) {
        return true;
      } else {
        var c0 = string.charAt(0), c1 = string.charAt(1);
        if (c0 === d.ESC) {
          return c1 === ":" || c1 === "$" || c1 === "#";
        } else {
          return false;
        }
      }
    } else {
      return false;
    }
  };
  caching.idxToCode = function(idx) {
    var hi = Math.floor(idx / caching.CACHE_CODE_DIGITS), lo = idx % caching.CACHE_CODE_DIGITS, loc = String.fromCharCode(lo + caching.BASE_CHAR_IDX);
    if (hi === 0) {
      return d.SUB + loc;
    } else {
      return d.SUB + String.fromCharCode(hi + caching.BASE_CHAR_IDX) + loc;
    }
  };
  caching.WriteCache = function() {
    this.idx = 0;
    this.gen = 0;
    this.cacheSize = 0;
    this.cache = {};
  };
  caching.WriteCache.prototype.write = function(string, asMapKey) {
    if (caching.isCacheable(string, asMapKey)) {
      if (this.cacheSize === caching.MAX_CACHE_SIZE) {
        this.clear();
        this.gen = 0;
        this.cache = {};
      } else {
        if (this.idx === caching.MAX_CACHE_ENTRIES) {
          this.clear();
        }
      }
      var entry = this.cache[string];
      if (entry == null) {
        this.cache[string] = [caching.idxToCode(this.idx), this.gen];
        this.idx++;
        return string;
      } else {
        if (entry[1] != this.gen) {
          entry[1] = this.gen;
          entry[0] = caching.idxToCode(this.idx);
          this.idx++;
          return string;
        } else {
          return entry[0];
        }
      }
    } else {
      return string;
    }
  };
  caching.WriteCache.prototype.clear = function() {
    this.idx = 0;
    this.gen++;
  };
  caching.isCacheCode = function(string) {
    return string.charAt(0) === d.SUB && string.charAt(1) !== " ";
  };
  caching.codeToIdx = function(code) {
    if (code.length === 2) {
      return code.charCodeAt(1) - caching.BASE_CHAR_IDX;
    } else {
      var hi = (code.charCodeAt(1) - caching.BASE_CHAR_IDX) * caching.CACHE_CODE_DIGITS, lo = code.charCodeAt(2) - caching.BASE_CHAR_IDX;
      return hi + lo;
    }
  };
  caching.ReadCache = function() {
    this.idx = 0;
    this.cache = [];
  };
  caching.ReadCache.prototype.write = function(obj, asMapKey) {
    if (this.idx == caching.MAX_CACHE_ENTRIES) {
      this.idx = 0;
    }
    this.cache[this.idx] = obj;
    this.idx++;
    return obj;
  };
  caching.ReadCache.prototype.read = function(string, asMapKey) {
    return this.cache[caching.codeToIdx(string)];
  };
  caching.ReadCache.prototype.clear = function() {
    this.idx = 0;
  };
});
goog.provide("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.delimiters");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.types");
goog.scope(function() {
  var decoder = com.cognitect.transit.impl.decoder, util = com.cognitect.transit.util, d = com.cognitect.transit.delimiters, caching = com.cognitect.transit.caching, types = com.cognitect.transit.types;
  decoder.Tag = function(s) {
    this.str = s;
  };
  decoder.tag = function(s) {
    return new decoder.Tag(s);
  };
  decoder.isTag = function(x) {
    return x && x instanceof decoder.Tag;
  };
  decoder.isGroundHandler = function(handler) {
    switch(handler) {
      case "_":
      ;
      case "s":
      ;
      case "?":
      ;
      case "i":
      ;
      case "d":
      ;
      case "b":
      ;
      case "'":
      ;
      case "array":
      ;
      case "map":
        return true;
    }
    return false;
  };
  decoder.Decoder = function(options) {
    this.options = options || {};
    this.handlers = {};
    for (var h in this.defaults.handlers) {
      this.handlers[h] = this.defaults.handlers[h];
    }
    for (var h in this.options["handlers"]) {
      if (decoder.isGroundHandler(h)) {
        throw new Error('Cannot override handler for ground type "' + h + '"');
      }
      this.handlers[h] = this.options["handlers"][h];
    }
    this.preferStrings = this.options["preferStrings"] != null ? this.options["preferStrings"] : this.defaults.preferStrings;
    this.defaultHandler = this.options["defaultHandler"] || this.defaults.defaultHandler;
    this.mapBuilder = this.options["mapBuilder"];
    this.arrayBuilder = this.options["arrayBuilder"];
  };
  decoder.Decoder.prototype.defaults = {handlers:{"_":function(v) {
    return types.nullValue();
  }, "?":function(v) {
    return types.boolValue(v);
  }, "b":function(v) {
    return types.binary(v);
  }, "i":function(v) {
    return types.intValue(v);
  }, "n":function(v) {
    return types.bigInteger(v);
  }, "d":function(v) {
    return types.floatValue(v);
  }, "f":function(v) {
    return types.bigDecimalValue(v);
  }, "c":function(v) {
    return types.charValue(v);
  }, ":":function(v) {
    return types.keyword(v);
  }, "$":function(v) {
    return types.symbol(v);
  }, "r":function(v) {
    return types.uri(v);
  }, "'":function(v) {
    return v;
  }, "m":function(v) {
    return types.date(v);
  }, "t":function(v) {
    return types.verboseDate(v);
  }, "u":function(v) {
    return types.uuid(v);
  }, "set":function(v) {
    return types.set(v);
  }, "list":function(v) {
    return types.list(v);
  }, "link":function(v) {
    return types.link(v);
  }, "cmap":function(v) {
    return types.map(v, false);
  }}, defaultHandler:function(c, val) {
    return types.taggedValue(c, val);
  }, preferStrings:true};
  decoder.Decoder.prototype.decode = function(node, cache, asMapKey, tagValue) {
    if (node == null) {
      return null;
    }
    var t = typeof node;
    switch(t) {
      case "string":
        return this.decodeString(node, cache, asMapKey, tagValue);
        break;
      case "object":
        if (util.isArray(node)) {
          if (node[0] === "^ ") {
            return this.decodeArrayHash(node, cache, asMapKey, tagValue);
          } else {
            return this.decodeArray(node, cache, false, tagValue);
          }
        } else {
          return this.decodeHash(node, cache, asMapKey, tagValue);
        }
        break;
    }
    return node;
  };
  decoder.Decoder.prototype["decode"] = decoder.Decoder.prototype.decode;
  decoder.Decoder.prototype.decodeString = function(string, cache, asMapKey, tagValue) {
    if (caching.isCacheable(string, asMapKey)) {
      var val = this.parseString(string, cache, false);
      if (cache) {
        cache.write(val, asMapKey);
      }
      return val;
    } else {
      if (caching.isCacheCode(string)) {
        return cache.read(string, asMapKey);
      } else {
        return this.parseString(string, cache, asMapKey);
      }
    }
  };
  decoder.Decoder.prototype.decodeHash = function(hash, cache, asMapKey, tagValue) {
    var ks = util.objectKeys(hash), key = ks[0], tag = ks.length == 1 ? this.decode(key, cache, false, false) : null;
    if (decoder.isTag(tag)) {
      var val = hash[key], handler = this.handlers[tag.str];
      if (handler != null) {
        return handler(this.decode(val, cache, false, true));
      } else {
        return types.taggedValue(tag.str, this.decode(val, cache, false, false));
      }
    } else {
      if (this.mapBuilder) {
        if (ks.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 && this.mapBuilder.fromArray) {
          var nodep = [];
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            nodep.push(this.decode(strKey, cache, true, false));
            nodep.push(this.decode(hash[strKey], cache, false, false));
          }
          return this.mapBuilder.fromArray(nodep, hash);
        } else {
          var ret = this.mapBuilder.init(hash);
          for (var i = 0;i < ks.length;i++) {
            var strKey = ks[i];
            ret = this.mapBuilder.add(ret, this.decode(strKey, cache, true, false), this.decode(hash[strKey], cache, false, false), hash);
          }
          return this.mapBuilder.finalize(ret, hash);
        }
      } else {
        var nodep = [];
        for (var i = 0;i < ks.length;i++) {
          var strKey = ks[i];
          nodep.push(this.decode(strKey, cache, true, false));
          nodep.push(this.decode(hash[strKey], cache, false, false));
        }
        return types.map(nodep, false);
      }
    }
  };
  decoder.Decoder.prototype.decodeArrayHash = function(node, cache, asMapKey, tagValue) {
    if (this.mapBuilder) {
      if (node.length < types.SMALL_ARRAY_MAP_THRESHOLD * 2 + 1 && this.mapBuilder.fromArray) {
        var nodep = [];
        for (var i = 1;i < node.length;i += 2) {
          nodep.push(this.decode(node[i], cache, true, false));
          nodep.push(this.decode(node[i + 1], cache, false, false));
        }
        return this.mapBuilder.fromArray(nodep, node);
      } else {
        var ret = this.mapBuilder.init(node);
        for (var i = 1;i < node.length;i += 2) {
          ret = this.mapBuilder.add(ret, this.decode(node[i], cache, true, false), this.decode(node[i + 1], cache, false, false), node);
        }
        return this.mapBuilder.finalize(ret, node);
      }
    } else {
      var nodep = [];
      for (var i = 1;i < node.length;i += 2) {
        nodep.push(this.decode(node[i], cache, true, false));
        nodep.push(this.decode(node[i + 1], cache, false, false));
      }
      return types.map(nodep, false);
    }
  };
  decoder.Decoder.prototype.decodeArray = function(node, cache, asMapKey, tagValue) {
    if (tagValue) {
      var ret = [];
      for (var i = 0;i < node.length;i++) {
        ret.push(this.decode(node[i], cache, asMapKey, false));
      }
      return ret;
    } else {
      var cacheIdx = cache && cache.idx;
      if (node.length === 2 && typeof node[0] === "string") {
        var tag = this.decode(node[0], cache, false, false);
        if (decoder.isTag(tag)) {
          var val = node[1], handler = this.handlers[tag.str];
          if (handler != null) {
            var ret = handler(this.decode(val, cache, false, true));
            return ret;
          } else {
            return types.taggedValue(tag.str, this.decode(val, cache, false, false));
          }
        }
      }
      if (cache && cacheIdx != cache.idx) {
        cache.idx = cacheIdx;
      }
      if (this.arrayBuilder) {
        if (node.length <= 32 && this.arrayBuilder.fromArray) {
          var arr = [];
          for (var i = 0;i < node.length;i++) {
            arr.push(this.decode(node[i], cache, asMapKey, false));
          }
          return this.arrayBuilder.fromArray(arr, node);
        } else {
          var ret = this.arrayBuilder.init();
          for (var i = 0;i < node.length;i++) {
            ret = this.arrayBuilder.add(ret, this.decode(node[i], cache, asMapKey, false), node);
          }
          return this.arrayBuilder.finalize(ret, node);
        }
      } else {
        var ret = [];
        for (var i = 0;i < node.length;i++) {
          ret.push(this.decode(node[i], cache, asMapKey, false));
        }
        return ret;
      }
    }
  };
  decoder.Decoder.prototype.parseString = function(string, cache, asMapKey) {
    if (string.charAt(0) === d.ESC) {
      var c = string.charAt(1);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return string.substring(1);
      } else {
        if (c === d.TAG) {
          return decoder.tag(string.substring(2));
        } else {
          var handler = this.handlers[c];
          if (handler == null) {
            return this.defaultHandler(c, string.substring(2));
          } else {
            return handler(string.substring(2));
          }
        }
      }
    } else {
      return string;
    }
  };
  decoder.decoder = function(options) {
    return new decoder.Decoder(options);
  };
});
goog.provide("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.decoder");
goog.require("com.cognitect.transit.caching");
goog.scope(function() {
  var reader = com.cognitect.transit.impl.reader, decoder = com.cognitect.transit.impl.decoder, caching = com.cognitect.transit.caching;
  reader.JSONUnmarshaller = function(opts) {
    this.decoder = new decoder.Decoder(opts);
  };
  reader.JSONUnmarshaller.prototype.unmarshal = function(str, cache) {
    return this.decoder.decode(JSON.parse(str), cache);
  };
  reader.Reader = function(unmarshaller, options) {
    this.unmarshaller = unmarshaller;
    this.options = options || {};
    this.cache = this.options["cache"] ? this.options["cache"] : new caching.ReadCache;
  };
  reader.Reader.prototype.read = function(str) {
    var ret = this.unmarshaller.unmarshal(str, this.cache);
    this.cache.clear();
    return ret;
  };
  reader.Reader.prototype["read"] = reader.Reader.prototype.read;
});
goog.provide("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.types");
goog.require("goog.math.Long");
goog.scope(function() {
  var handlers = com.cognitect.transit.handlers, util = com.cognitect.transit.util, types = com.cognitect.transit.types, Long = goog.math.Long;
  handlers.ctorGuid = 0;
  handlers.ctorGuidProperty = "transit$guid$" + util.randomUUID();
  handlers.typeTag = function(ctor) {
    if (ctor == null) {
      return "null";
    } else {
      if (ctor === String) {
        return "string";
      } else {
        if (ctor === Boolean) {
          return "boolean";
        } else {
          if (ctor === Number) {
            return "number";
          } else {
            if (ctor === Array) {
              return "array";
            } else {
              if (ctor === Object) {
                return "map";
              } else {
                var tag = ctor[handlers.ctorGuidProperty];
                if (tag == null) {
                  if (typeof Object.defineProperty != "undefined") {
                    tag = ++handlers.ctorGuid;
                    Object.defineProperty(ctor, handlers.ctorGuidProperty, {value:tag, enumerable:false});
                  } else {
                    ctor[handlers.ctorGuidProperty] = tag = ++handlers.ctorGuid;
                  }
                }
                return tag;
              }
            }
          }
        }
      }
    }
  };
  handlers.constructor = function(x) {
    if (x == null) {
      return null;
    } else {
      return x.constructor;
    }
  };
  handlers.padZeros = function(n, m) {
    var s = n.toString();
    for (var i = s.length;i < m;i++) {
      s = "0" + s;
    }
    return s;
  };
  handlers.stringableKeys = function(m) {
    var stringable = false, ks = util.objectKeys(m);
    for (var i = 0;i < ks.length;i++) {
    }
    return true;
  };
  handlers.NilHandler = function() {
  };
  handlers.NilHandler.prototype.tag = function(v) {
    return "_";
  };
  handlers.NilHandler.prototype.rep = function(v) {
    return null;
  };
  handlers.NilHandler.prototype.stringRep = function(v) {
    return "null";
  };
  handlers.StringHandler = function() {
  };
  handlers.StringHandler.prototype.tag = function(v) {
    return "s";
  };
  handlers.StringHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.StringHandler.prototype.stringRep = function(v) {
    return v;
  };
  handlers.NumberHandler = function() {
  };
  handlers.NumberHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.NumberHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.NumberHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler = function() {
  };
  handlers.IntegerHandler.prototype.tag = function(v) {
    return "i";
  };
  handlers.IntegerHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.IntegerHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.BooleanHandler = function() {
  };
  handlers.BooleanHandler.prototype.tag = function(v) {
    return "?";
  };
  handlers.BooleanHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.BooleanHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.ArrayHandler = function() {
  };
  handlers.ArrayHandler.prototype.tag = function(v) {
    return "array";
  };
  handlers.ArrayHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.ArrayHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.MapHandler = function() {
  };
  handlers.MapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.MapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.MapHandler.prototype.stringRep = function(v) {
    return null;
  };
  handlers.VerboseDateHandler = function() {
  };
  handlers.VerboseDateHandler.prototype.tag = function(v) {
    return "t";
  };
  handlers.VerboseDateHandler.prototype.rep = function(v) {
    return v.getUTCFullYear() + "-" + handlers.padZeros(v.getUTCMonth() + 1, 2) + "-" + handlers.padZeros(v.getUTCDate(), 2) + "T" + handlers.padZeros(v.getUTCHours(), 2) + ":" + handlers.padZeros(v.getUTCMinutes(), 2) + ":" + handlers.padZeros(v.getUTCSeconds(), 2) + "." + handlers.padZeros(v.getUTCMilliseconds(), 3) + "Z";
  };
  handlers.VerboseDateHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.DateHandler = function() {
  };
  handlers.DateHandler.prototype.tag = function(v) {
    return "m";
  };
  handlers.DateHandler.prototype.rep = function(v) {
    return v.valueOf();
  };
  handlers.DateHandler.prototype.stringRep = function(v) {
    return v.valueOf().toString();
  };
  handlers.DateHandler.prototype.getVerboseHandler = function(v) {
    return new handlers.VerboseDateHandler;
  };
  handlers.UUIDHandler = function() {
  };
  handlers.UUIDHandler.prototype.tag = function(v) {
    return "u";
  };
  handlers.UUIDHandler.prototype.rep = function(v) {
    return v.toString();
  };
  handlers.UUIDHandler.prototype.stringRep = function(v) {
    return v.toString();
  };
  handlers.KeywordHandler = function() {
  };
  handlers.KeywordHandler.prototype.tag = function(v) {
    return ":";
  };
  handlers.KeywordHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.KeywordHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.SymbolHandler = function() {
  };
  handlers.SymbolHandler.prototype.tag = function(v) {
    return "$";
  };
  handlers.SymbolHandler.prototype.rep = function(v) {
    return v.name;
  };
  handlers.SymbolHandler.prototype.stringRep = function(v, h) {
    return h.rep(v);
  };
  handlers.TaggedHandler = function() {
  };
  handlers.TaggedHandler.prototype.tag = function(v) {
    return v.tag;
  };
  handlers.TaggedHandler.prototype.rep = function(v) {
    return v.rep;
  };
  handlers.TaggedHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitSetHandler = function() {
  };
  handlers.TransitSetHandler.prototype.tag = function(v) {
    return "set";
  };
  handlers.TransitSetHandler.prototype.rep = function(v) {
    var arr = [];
    v.forEach(function(key, set) {
      arr.push(key);
    });
    return types.taggedValue("array", arr);
  };
  handlers.TransitSetHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitArrayMapHandler = function() {
  };
  handlers.TransitArrayMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitArrayMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitArrayMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.TransitMapHandler = function() {
  };
  handlers.TransitMapHandler.prototype.tag = function(v) {
    return "map";
  };
  handlers.TransitMapHandler.prototype.rep = function(v) {
    return v;
  };
  handlers.TransitMapHandler.prototype.stringRep = function(v, h) {
    return null;
  };
  handlers.defaultHandlers = function(hs) {
    hs.set(null, new handlers.NilHandler);
    hs.set(String, new handlers.StringHandler);
    hs.set(Number, new handlers.NumberHandler);
    hs.set(Long, new handlers.IntegerHandler);
    hs.set(Boolean, new handlers.BooleanHandler);
    hs.set(Array, new handlers.ArrayHandler);
    hs.set(Object, new handlers.MapHandler);
    hs.set(Date, new handlers.DateHandler);
    hs.set(types.UUID, new handlers.UUIDHandler);
    hs.set(types.Keyword, new handlers.KeywordHandler);
    hs.set(types.Symbol, new handlers.SymbolHandler);
    hs.set(types.TaggedValue, new handlers.TaggedHandler);
    hs.set(types.TransitSet, new handlers.TransitSetHandler);
    hs.set(types.TransitArrayMap, new handlers.TransitArrayMapHandler);
    hs.set(types.TransitMap, new handlers.TransitMapHandler);
    return hs;
  };
  handlers.Handlers = function() {
    this.handlers = {};
    handlers.defaultHandlers(this);
  };
  handlers.Handlers.prototype.get = function(ctor) {
    if (typeof ctor === "string") {
      return this.handlers[ctor];
    } else {
      return this.handlers[handlers.typeTag(ctor)];
    }
  };
  handlers.validTag = function(tag) {
    switch(tag) {
      case "null":
      ;
      case "string":
      ;
      case "boolean":
      ;
      case "number":
      ;
      case "array":
      ;
      case "map":
        return false;
        break;
    }
    return true;
  };
  handlers.Handlers.prototype.set = function(ctor, handler) {
    if (typeof ctor === "string" && handlers.validTag(ctor)) {
      this.handlers[ctor] = handler;
    } else {
      this.handlers[handlers.typeTag(ctor)] = handler;
    }
  };
});
goog.provide("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.util");
goog.require("com.cognitect.transit.caching");
goog.require("com.cognitect.transit.handlers");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.delimiters");
goog.require("goog.math.Long");
goog.scope(function() {
  var writer = com.cognitect.transit.impl.writer, util = com.cognitect.transit.util, caching = com.cognitect.transit.caching, handlers = com.cognitect.transit.handlers, types = com.cognitect.transit.types, d = com.cognitect.transit.delimiters, Long = goog.math.Long;
  writer.escape = function(string) {
    if (string.length > 0) {
      var c = string.charAt(0);
      if (c === d.ESC || c === d.SUB || c === d.RES) {
        return d.ESC + string;
      } else {
        return string;
      }
    } else {
      return string;
    }
  };
  writer.JSONMarshaller = function(opts) {
    this.opts = opts || {};
    this.preferStrings = this.opts["preferStrings"] != null ? this.opts["preferStrings"] : true;
    this.objectBuilder = this.opts["objectBuilder"] || null;
    this.handlers = new handlers.Handlers;
    var optsHandlers = this.opts["handlers"];
    if (optsHandlers) {
      if (util.isArray(optsHandlers) || !optsHandlers.forEach) {
        throw new Error('transit writer "handlers" option must be a map');
      }
      var self = this;
      optsHandlers.forEach(function(v, k) {
        self.handlers.set(k, v);
      });
    }
    this.unpack = this.opts["unpack"] || function(x) {
      if (types.isArrayMap(x) && x.backingMap === null) {
        return x._entries;
      } else {
        return false;
      }
    };
    this.verbose = this.opts && this.opts["verbose"] || false;
  };
  writer.JSONMarshaller.prototype.handler = function(obj) {
    var h = this.handlers.get(handlers.constructor(obj));
    if (h != null) {
      return h;
    } else {
      var tag = obj && obj["transitTag"];
      if (tag) {
        return this.handlers.get(tag);
      } else {
        return null;
      }
    }
  };
  writer.JSONMarshaller.prototype.registerHandler = function(ctor, handler) {
    this.handlers.set(ctor, handler);
  };
  writer.JSONMarshaller.prototype.emitNil = function(asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "_", "", asMapKey, cache);
    } else {
      return null;
    }
  };
  writer.JSONMarshaller.prototype.emitString = function(prefix, tag, s, asMapKey, cache) {
    var string = prefix + tag + s;
    if (cache) {
      return cache.write(string, asMapKey);
    } else {
      return string;
    }
  };
  writer.JSONMarshaller.prototype.emitBoolean = function(b, asMapKey, cache) {
    if (asMapKey) {
      var s = b.toString();
      return this.emitString(d.ESC, "?", s[0], asMapKey, cache);
    } else {
      return b;
    }
  };
  writer.JSONMarshaller.prototype.emitInteger = function(i, asMapKey, cache) {
    if (asMapKey || typeof i === "string" || i instanceof Long) {
      return this.emitString(d.ESC, "i", i.toString(), asMapKey, cache);
    } else {
      return i;
    }
  };
  writer.JSONMarshaller.prototype.emitDouble = function(d, asMapKey, cache) {
    if (asMapKey) {
      return this.emitString(d.ESC, "d", d, asMapKey, cache);
    } else {
      return d;
    }
  };
  writer.JSONMarshaller.prototype.emitBinary = function(b, asMapKey, cache) {
    return this.emitString(d.ESC, "b", b, asMapKey, cache);
  };
  writer.JSONMarshaller.prototype.emitQuoted = function(em, obj, cache) {
    if (em.verbose) {
      var ret = {}, k = this.emitString(d.ESC_TAG, "'", "", true, cache);
      ret[k] = writer.marshal(this, obj, false, cache);
      return ret;
    } else {
      return[this.emitString(d.ESC_TAG, "'", "", true, cache), writer.marshal(this, obj, false, cache)];
    }
  };
  writer.emitObjects = function(em, iterable, cache) {
    var ret = [];
    if (util.isArray(iterable)) {
      for (var i = 0;i < iterable.length;i++) {
        ret.push(writer.marshal(em, iterable[i], false, cache));
      }
    } else {
      iterable.forEach(function(v, i) {
        ret.push(writer.marshal(em, v, false, cache));
      });
    }
    return ret;
  };
  writer.emitArray = function(em, iterable, skip, cache) {
    return writer.emitObjects(em, iterable, cache);
  };
  writer.isStringableKey = function(em, k) {
    if (typeof k !== "string") {
      var h = em.handler(k);
      return h && h.tag(k).length === 1;
    } else {
      return true;
    }
  };
  writer.stringableKeys = function(em, obj) {
    var arr = em.unpack(obj), stringableKeys = true;
    if (arr) {
      for (var i = 0;i < arr.length;i += 2) {
        stringableKeys = writer.isStringableKey(em, arr[i]);
        if (!stringableKeys) {
          break;
        }
      }
      return stringableKeys;
    } else {
      if (obj.keys) {
        var iter = obj.keys();
        if (iter.next) {
          step = iter.next();
          while (!step.done) {
            stringableKeys = writer.isStringableKey(em, step.value);
            if (!stringableKeys) {
              break;
            }
            step = iter.next();
          }
          return stringableKeys;
        }
      }
    }
    if (obj.forEach) {
      obj.forEach(function(v, k) {
        stringableKeys = stringableKeys && writer.isStringableKey(em, k);
      });
      return stringableKeys;
    } else {
      throw new Error("Cannot walk keys of object type " + handlers.constructor(obj).name);
    }
  };
  writer.emitMap = function(em, obj, skip, cache) {
    if (obj.constructor === Object || obj.forEach != null) {
      if (em.verbose) {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var ret = {};
            obj.forEach(function(v, k) {
              ret[writer.marshal(em, k, true, false)] = writer.marshal(em, v, false, cache);
            });
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, false));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, false));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            var ret = {};
            ret[tag] = rep;
            return ret;
          }
        } else {
          var ret = {}, ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret[writer.marshal(em, ks[i], true, false)] = writer.marshal(em, obj[ks[i]], false, cache);
          }
          return ret;
        }
      } else {
        if (obj.forEach != null) {
          if (writer.stringableKeys(em, obj)) {
            var arr = em.unpack(obj), ret = ["^ "];
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                ret.push(writer.marshal(em, arr[i], true, cache));
                ret.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                ret.push(writer.marshal(em, k, true, cache));
                ret.push(writer.marshal(em, v, false, cache));
              });
            }
            return ret;
          } else {
            var arr = em.unpack(obj), rep = [], tag = em.emitString(d.ESC_TAG, "cmap", "", true, cache);
            if (arr) {
              for (var i = 0;i < arr.length;i += 2) {
                rep.push(writer.marshal(em, arr[i], true, cache));
                rep.push(writer.marshal(em, arr[i + 1], false, cache));
              }
            } else {
              obj.forEach(function(v, k) {
                rep.push(writer.marshal(em, k, true, cache));
                rep.push(writer.marshal(em, v, false, cache));
              });
            }
            return[tag, rep];
          }
        } else {
          var ret = ["^ "], ks = util.objectKeys(obj);
          for (var i = 0;i < ks.length;i++) {
            ret.push(writer.marshal(em, ks[i], true, cache));
            ret.push(writer.marshal(em, obj[ks[i]], false, cache));
          }
          return ret;
        }
      }
    } else {
      if (em.objectBuilder != null) {
        return em.objectBuilder(obj, function(k) {
          return writer.marshal(em, k, true, cache);
        }, function(v) {
          return writer.marshal(em, v, false, cache);
        });
      } else {
        var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
        err.data = {obj:obj, type:name};
        throw err;
      }
    }
  };
  writer.emitTaggedMap = function(em, tag, rep, skip, cache) {
    if (em.verbose) {
      var ret = {};
      ret[em.emitString(d.ESC_TAG, tag, "", true, cache)] = writer.marshal(em, rep, false, cache);
      return ret;
    } else {
      return[em.emitString(d.ESC_TAG, tag, "", true, cache), writer.marshal(em, rep, false, cache)];
    }
  };
  writer.emitEncoded = function(em, h, tag, rep, obj, asMapKey, cache) {
    if (tag.length === 1) {
      if (typeof rep === "string") {
        return em.emitString(d.ESC, tag, rep, asMapKey, cache);
      } else {
        if (asMapKey || em.preferStrings) {
          var vh = em.verbose && h.getVerboseHandler();
          if (vh) {
            tag = vh.tag(obj);
            rep = vh.stringRep(obj, vh);
          } else {
            rep = h.stringRep(obj, h);
          }
          if (rep !== null) {
            return em.emitString(d.ESC, tag, rep, asMapKey, cache);
          } else {
            var err = new Error('Tag "' + tag + '" cannot be encoded as string');
            err.data = {tag:tag, rep:rep, obj:obj};
            throw err;
          }
        } else {
          return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
        }
      }
    } else {
      return writer.emitTaggedMap(em, tag, rep, asMapKey, cache);
    }
  };
  writer.marshal = function(em, obj, asMapKey, cache) {
    var h = em.handler(obj), tag = h ? h.tag(obj) : null, rep = h ? h.rep(obj) : null;
    if (h != null && tag != null) {
      switch(tag) {
        case "_":
          return em.emitNil(asMapKey, cache);
          break;
        case "s":
          return em.emitString("", "", writer.escape(rep), asMapKey, cache);
          break;
        case "?":
          return em.emitBoolean(rep, asMapKey, cache);
          break;
        case "i":
          return em.emitInteger(rep, asMapKey, cache);
          break;
        case "d":
          return em.emitDouble(rep, asMapKey, cache);
          break;
        case "b":
          return em.emitBinary(rep, asMapKey, cache);
          break;
        case "'":
          return em.emitQuoted(em, rep, cache);
          break;
        case "array":
          return writer.emitArray(em, rep, asMapKey, cache);
          break;
        case "map":
          return writer.emitMap(em, rep, asMapKey, cache);
          break;
        default:
          return writer.emitEncoded(em, h, tag, rep, obj, asMapKey, cache);
          break;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.maybeQuoted = function(em, obj) {
    var h = em.handler(obj);
    if (h != null) {
      if (h.tag(obj).length === 1) {
        return types.quoted(obj);
      } else {
        return obj;
      }
    } else {
      var name = handlers.constructor(obj).name, err = new Error("Cannot write " + name);
      err.data = {obj:obj, type:name};
      throw err;
    }
  };
  writer.marshalTop = function(em, obj, asMapKey, cache) {
    return JSON.stringify(writer.marshal(em, writer.maybeQuoted(em, obj), asMapKey, cache));
  };
  writer.Writer = function(marshaller, options) {
    this._marshaller = marshaller;
    this.options = options || {};
    if (this.options["cache"] === false) {
      this.cache = null;
    } else {
      this.cache = this.options["cache"] ? this.options["cache"] : new caching.WriteCache;
    }
  };
  writer.Writer.prototype.marshaller = function() {
    return this._marshaller;
  };
  writer.Writer.prototype["marshaller"] = writer.Writer.prototype.marshaller;
  writer.Writer.prototype.write = function(obj, opts) {
    var ret = null, ropts = opts || {}, asMapKey = ropts["asMapKey"] || false, cache = this._marshaller.verbose ? false : this.cache;
    if (ropts["marshalTop"] === false) {
      ret = writer.marshal(this._marshaller, obj, asMapKey, cache);
    } else {
      ret = writer.marshalTop(this._marshaller, obj, asMapKey, cache);
    }
    if (this.cache != null) {
      this.cache.clear();
    }
    return ret;
  };
  writer.Writer.prototype["write"] = writer.Writer.prototype.write;
  writer.Writer.prototype.register = function(type, handler) {
    this._marshaller.registerHandler(type, handler);
  };
  writer.Writer.prototype["register"] = writer.Writer.prototype.register;
});
goog.provide("com.cognitect.transit");
goog.require("com.cognitect.transit.impl.reader");
goog.require("com.cognitect.transit.impl.writer");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.impl.decoder");
var TRANSIT_NODE_TARGET = false;
var TRANSIT_BROWSER_TARGET = false;
var TRANSIT_BROWSER_AMD_TARGET = false;
goog.scope(function() {
  var transit = com.cognitect.transit;
  var reader = com.cognitect.transit.impl.reader, writer = com.cognitect.transit.impl.writer, decoder = com.cognitect.transit.impl.decoder, types = com.cognitect.transit.types, eq = com.cognitect.transit.eq;
  transit.reader = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      type = "json";
      var unmarshaller = new reader.JSONUnmarshaller(opts);
      return new reader.Reader(unmarshaller, opts);
    } else {
      throw new Error("Cannot create reader of type " + type);
    }
  };
  transit.writer = function(type, opts) {
    if (type === "json" || type === "json-verbose" || type == null) {
      if (type === "json-verbose") {
        if (opts == null) {
          opts = {};
        }
        opts["verbose"] = true;
      }
      type = "json";
      var marshaller = new writer.JSONMarshaller(opts);
      return new writer.Writer(marshaller, opts);
    } else {
      var err = new Error('Type must be "json"');
      err.data = {type:type};
      throw err;
    }
  };
  transit.makeWriteHandler = function(obj) {
    var Handler = function() {
    };
    Handler.prototype.tag = obj["tag"];
    Handler.prototype.rep = obj["rep"];
    Handler.prototype.stringRep = obj["stringRep"];
    Handler.prototype.getVerboseHandler = obj["getVerboseHandler"];
    return new Handler;
  };
  transit.makeBuilder = function(obj) {
    var Builder = function() {
    };
    Builder.prototype.init = obj["init"];
    Builder.prototype.add = obj["add"];
    Builder.prototype.finalize = obj["finalize"];
    Builder.prototype.fromArray = obj["fromArray"];
    return new Builder;
  };
  transit.date = types.date;
  transit.integer = types.intValue;
  transit.isInteger = types.isInteger;
  transit.uuid = types.uuid;
  transit.isUUID = types.isUUID;
  transit.bigInt = types.bigInteger;
  transit.isBigInt = types.isBigInteger;
  transit.bigDec = types.bigDecimalValue;
  transit.isBigDec = types.isBigDecimal;
  transit.keyword = types.keyword;
  transit.isKeyword = types.isKeyword;
  transit.symbol = types.symbol;
  transit.isSymbol = types.isSymbol;
  transit.binary = types.binary;
  transit.isBinary = types.isBinary;
  transit.uri = types.uri;
  transit.isURI = types.isURI;
  transit.map = types.map;
  transit.isMap = types.isMap;
  transit.set = types.set;
  transit.isSet = types.isSet;
  transit.list = types.list;
  transit.isList = types.isList;
  transit.quoted = types.quoted;
  transit.isQuoted = types.isQuoted;
  transit.tagged = types.taggedValue;
  transit.isTaggedValue = types.isTaggedValue;
  transit.link = types.link;
  transit.isLink = types.isLink;
  transit.hash = eq.hashCode;
  transit.hashMapLike = eq.hashMapLike;
  transit.hashMapLike = eq.hashArrayLike;
  transit.equals = eq.equals;
  transit.extendToEQ = eq.extendToEQ;
  transit.mapToObject = function(m) {
    var ret = {};
    m.forEach(function(v, k) {
      if (typeof k !== "string") {
        throw Error("Cannot convert map with non-string keys");
      } else {
        ret[k] = v;
      }
    });
    return ret;
  };
  transit.decoder = decoder.decoder;
  transit.UUIDfromString = types.UUIDfromString;
  transit.randomUUID = types.randomUUID;
  transit.stringableKeys = writer.stringableKeys;
  if (TRANSIT_BROWSER_TARGET) {
    goog.exportSymbol("transit.reader", transit.reader);
    goog.exportSymbol("transit.writer", transit.writer);
    goog.exportSymbol("transit.makeBuilder", transit.makeBuilder);
    goog.exportSymbol("transit.makeWriteHandler", transit.makeWriteHandler);
    goog.exportSymbol("transit.date", types.date);
    goog.exportSymbol("transit.integer", types.intValue);
    goog.exportSymbol("transit.isInteger", types.isInteger);
    goog.exportSymbol("transit.uuid", types.uuid);
    goog.exportSymbol("transit.isUUID", types.isUUID);
    goog.exportSymbol("transit.bigInt", types.bigInteger);
    goog.exportSymbol("transit.isBigInt", types.isBigInteger);
    goog.exportSymbol("transit.bigDec", types.bigDecimalValue);
    goog.exportSymbol("transit.isBigDec", types.isBigDecimal);
    goog.exportSymbol("transit.keyword", types.keyword);
    goog.exportSymbol("transit.isKeyword", types.isKeyword);
    goog.exportSymbol("transit.symbol", types.symbol);
    goog.exportSymbol("transit.isSymbol", types.isSymbol);
    goog.exportSymbol("transit.binary", types.binary);
    goog.exportSymbol("transit.isBinary", types.isBinary);
    goog.exportSymbol("transit.uri", types.uri);
    goog.exportSymbol("transit.isURI", types.isURI);
    goog.exportSymbol("transit.map", types.map);
    goog.exportSymbol("transit.isMap", types.isMap);
    goog.exportSymbol("transit.set", types.set);
    goog.exportSymbol("transit.isSet", types.isSet);
    goog.exportSymbol("transit.list", types.list);
    goog.exportSymbol("transit.isList", types.isList);
    goog.exportSymbol("transit.quoted", types.quoted);
    goog.exportSymbol("transit.isQuoted", types.isQuoted);
    goog.exportSymbol("transit.tagged", types.taggedValue);
    goog.exportSymbol("transit.isTaggedValue", types.isTaggedValue);
    goog.exportSymbol("transit.link", types.link);
    goog.exportSymbol("transit.isLink", types.isLink);
    goog.exportSymbol("transit.hash", eq.hashCode);
    goog.exportSymbol("transit.hashMapLike", eq.hashMapLike);
    goog.exportSymbol("transit.hashArrayLike", eq.hashArrayLike);
    goog.exportSymbol("transit.equals", eq.equals);
    goog.exportSymbol("transit.extendToEQ", eq.extendToEQ);
    goog.exportSymbol("transit.mapToObject", transit.mapToObject);
    goog.exportSymbol("transit.decoder", decoder.decoder);
    goog.exportSymbol("transit.UUIDfromString", types.UUIDfromString);
    goog.exportSymbol("transit.randomUUID", types.randomUUID);
    goog.exportSymbol("transit.stringableKeys", writer.stringableKeys);
  }
  if (TRANSIT_NODE_TARGET) {
    module.exports = {reader:transit.reader, writer:transit.writer, makeBuilder:transit.makeBuilder, makeWriteHandler:transit.makeWriteHandler, date:types.date, integer:types.intValue, isInteger:types.isInteger, uuid:types.uuid, isUUID:types.isUUID, bigInt:types.bigInteger, isBigInt:types.isBigInteger, bigDec:types.bigDecimalValue, isBigDec:types.isBigDecimal, keyword:types.keyword, isKeyword:types.isKeyword, symbol:types.symbol, isSymbol:types.isSymbol, binary:types.binary, isBinary:types.isBinary, 
    uri:types.uri, isURI:types.isURI, map:types.map, isMap:types.isMap, set:types.set, isSet:types.isSet, list:types.list, isList:types.isList, quoted:types.quoted, isQuoted:types.isQuoted, tagged:types.taggedValue, isTaggedValue:types.isTaggedValue, link:types.link, isLink:types.isLink, hash:eq.hashCode, hashArrayLike:eq.hashArrayLike, hashMapLike:eq.hashMapLike, equals:eq.equals, extendToEQ:eq.extendToEQ, mapToObject:transit.mapToObject, decoder:decoder.decoder, UUIDfromString:types.UUIDfromString, 
    randomUUID:types.randomUUID, stringableKeys:writer.stringableKeys};
  }
});
goog.provide("cognitect.transit");
goog.require("cljs.core");
goog.require("goog.math.Long");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.eq");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit.types");
goog.require("com.cognitect.transit");
goog.require("com.cognitect.transit");
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
goog.math.Long.prototype.cljs$core$IEquiv$ = true;
goog.math.Long.prototype.cljs$core$IEquiv$_equiv$arity$2 = function(this$, other) {
  var this$__$1 = this;
  return this$__$1.equiv(other);
};
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.TaggedValue.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$ = true;
com.cognitect.transit.types.UUID.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
goog.math.Long.prototype.cljs$core$IHash$ = true;
goog.math.Long.prototype.cljs$core$IHash$_hash$arity$1 = function(this$) {
  var this$__$1 = this;
  return com.cognitect.transit.eq.hashCode.call(null, this$__$1);
};
cognitect.transit.opts_merge = function opts_merge(a, b) {
  var seq__7203_7207 = cljs.core.seq.call(null, cljs.core.js_keys.call(null, b));
  var chunk__7204_7208 = null;
  var count__7205_7209 = 0;
  var i__7206_7210 = 0;
  while (true) {
    if (i__7206_7210 < count__7205_7209) {
      var k_7211 = cljs.core._nth.call(null, chunk__7204_7208, i__7206_7210);
      var v_7212 = b[k_7211];
      a[k_7211] = v_7212;
      var G__7213 = seq__7203_7207;
      var G__7214 = chunk__7204_7208;
      var G__7215 = count__7205_7209;
      var G__7216 = i__7206_7210 + 1;
      seq__7203_7207 = G__7213;
      chunk__7204_7208 = G__7214;
      count__7205_7209 = G__7215;
      i__7206_7210 = G__7216;
      continue;
    } else {
      var temp__4126__auto___7217 = cljs.core.seq.call(null, seq__7203_7207);
      if (temp__4126__auto___7217) {
        var seq__7203_7218__$1 = temp__4126__auto___7217;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7203_7218__$1)) {
          var c__4408__auto___7219 = cljs.core.chunk_first.call(null, seq__7203_7218__$1);
          var G__7220 = cljs.core.chunk_rest.call(null, seq__7203_7218__$1);
          var G__7221 = c__4408__auto___7219;
          var G__7222 = cljs.core.count.call(null, c__4408__auto___7219);
          var G__7223 = 0;
          seq__7203_7207 = G__7220;
          chunk__7204_7208 = G__7221;
          count__7205_7209 = G__7222;
          i__7206_7210 = G__7223;
          continue;
        } else {
          var k_7224 = cljs.core.first.call(null, seq__7203_7218__$1);
          var v_7225 = b[k_7224];
          a[k_7224] = v_7225;
          var G__7226 = cljs.core.next.call(null, seq__7203_7218__$1);
          var G__7227 = null;
          var G__7228 = 0;
          var G__7229 = 0;
          seq__7203_7207 = G__7226;
          chunk__7204_7208 = G__7227;
          count__7205_7209 = G__7228;
          i__7206_7210 = G__7229;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return a;
};
cognitect.transit.MapBuilder = function() {
};
cognitect.transit.MapBuilder.cljs$lang$type = true;
cognitect.transit.MapBuilder.cljs$lang$ctorStr = "cognitect.transit/MapBuilder";
cognitect.transit.MapBuilder.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/MapBuilder");
};
cognitect.transit.MapBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
};
cognitect.transit.MapBuilder.prototype.add = function(m, k, v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.assoc_BANG_.call(null, m, k, v);
};
cognitect.transit.MapBuilder.prototype.finalize = function(m, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, m);
};
cognitect.transit.MapBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentArrayMap.fromArray.call(null, arr, true, true);
};
cognitect.transit.__GT_MapBuilder = function __GT_MapBuilder() {
  return new cognitect.transit.MapBuilder;
};
cognitect.transit.VectorBuilder = function() {
};
cognitect.transit.VectorBuilder.cljs$lang$type = true;
cognitect.transit.VectorBuilder.cljs$lang$ctorStr = "cognitect.transit/VectorBuilder";
cognitect.transit.VectorBuilder.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/VectorBuilder");
};
cognitect.transit.VectorBuilder.prototype.init = function(node) {
  var self__ = this;
  var _ = this;
  return cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
};
cognitect.transit.VectorBuilder.prototype.add = function(v, x, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.conj_BANG_.call(null, v, x);
};
cognitect.transit.VectorBuilder.prototype.finalize = function(v, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.persistent_BANG_.call(null, v);
};
cognitect.transit.VectorBuilder.prototype.fromArray = function(arr, node) {
  var self__ = this;
  var _ = this;
  return cljs.core.PersistentVector.fromArray.call(null, arr, true);
};
cognitect.transit.__GT_VectorBuilder = function __GT_VectorBuilder() {
  return new cognitect.transit.VectorBuilder;
};
cognitect.transit.reader = function() {
  var reader = null;
  var reader__1 = function(type) {
    return reader.call(null, type, null);
  };
  var reader__2 = function(type, opts) {
    return com.cognitect.transit.reader.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"prefersStrings":false, "arrayBuilder":new cognitect.transit.VectorBuilder, "mapBuilder":new cognitect.transit.MapBuilder, "handlers":cljs.core.clj__GT_js.call(null, cljs.core.merge.call(null, new cljs.core.PersistentArrayMap(null, 5, ["$", function(v) {
      return cljs.core.symbol.call(null, v);
    }, ":", function(v) {
      return cljs.core.keyword.call(null, v);
    }, "set", function(v) {
      return cljs.core.into.call(null, cljs.core.PersistentHashSet.EMPTY, v);
    }, "list", function(v) {
      return cljs.core.into.call(null, cljs.core.List.EMPTY, v.reverse());
    }, "cmap", function(v) {
      var i = 0;
      var ret = cljs.core.transient$.call(null, cljs.core.PersistentArrayMap.EMPTY);
      while (true) {
        if (i < v.length) {
          var G__7230 = i + 2;
          var G__7231 = cljs.core.assoc_BANG_.call(null, ret, v[i], v[i + 1]);
          i = G__7230;
          ret = G__7231;
          continue;
        } else {
          return cljs.core.persistent_BANG_.call(null, ret);
        }
        break;
      }
    }], null), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts)))}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  reader = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return reader__1.call(this, type);
      case 2:
        return reader__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  reader.cljs$core$IFn$_invoke$arity$1 = reader__1;
  reader.cljs$core$IFn$_invoke$arity$2 = reader__2;
  return reader;
}();
cognitect.transit.read = function read(r, str) {
  return r.read(str);
};
cognitect.transit.KeywordHandler = function() {
};
cognitect.transit.KeywordHandler.cljs$lang$type = true;
cognitect.transit.KeywordHandler.cljs$lang$ctorStr = "cognitect.transit/KeywordHandler";
cognitect.transit.KeywordHandler.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/KeywordHandler");
};
cognitect.transit.KeywordHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return ":";
};
cognitect.transit.KeywordHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.KeywordHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.fqn;
};
cognitect.transit.__GT_KeywordHandler = function __GT_KeywordHandler() {
  return new cognitect.transit.KeywordHandler;
};
cognitect.transit.SymbolHandler = function() {
};
cognitect.transit.SymbolHandler.cljs$lang$type = true;
cognitect.transit.SymbolHandler.cljs$lang$ctorStr = "cognitect.transit/SymbolHandler";
cognitect.transit.SymbolHandler.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/SymbolHandler");
};
cognitect.transit.SymbolHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "$";
};
cognitect.transit.SymbolHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.SymbolHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return v.str;
};
cognitect.transit.__GT_SymbolHandler = function __GT_SymbolHandler() {
  return new cognitect.transit.SymbolHandler;
};
cognitect.transit.ListHandler = function() {
};
cognitect.transit.ListHandler.cljs$lang$type = true;
cognitect.transit.ListHandler.cljs$lang$ctorStr = "cognitect.transit/ListHandler";
cognitect.transit.ListHandler.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/ListHandler");
};
cognitect.transit.ListHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "list";
};
cognitect.transit.ListHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__7232_7236 = cljs.core.seq.call(null, v);
  var chunk__7233_7237 = null;
  var count__7234_7238 = 0;
  var i__7235_7239 = 0;
  while (true) {
    if (i__7235_7239 < count__7234_7238) {
      var x_7240 = cljs.core._nth.call(null, chunk__7233_7237, i__7235_7239);
      ret.push(x_7240);
      var G__7241 = seq__7232_7236;
      var G__7242 = chunk__7233_7237;
      var G__7243 = count__7234_7238;
      var G__7244 = i__7235_7239 + 1;
      seq__7232_7236 = G__7241;
      chunk__7233_7237 = G__7242;
      count__7234_7238 = G__7243;
      i__7235_7239 = G__7244;
      continue;
    } else {
      var temp__4126__auto___7245 = cljs.core.seq.call(null, seq__7232_7236);
      if (temp__4126__auto___7245) {
        var seq__7232_7246__$1 = temp__4126__auto___7245;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7232_7246__$1)) {
          var c__4408__auto___7247 = cljs.core.chunk_first.call(null, seq__7232_7246__$1);
          var G__7248 = cljs.core.chunk_rest.call(null, seq__7232_7246__$1);
          var G__7249 = c__4408__auto___7247;
          var G__7250 = cljs.core.count.call(null, c__4408__auto___7247);
          var G__7251 = 0;
          seq__7232_7236 = G__7248;
          chunk__7233_7237 = G__7249;
          count__7234_7238 = G__7250;
          i__7235_7239 = G__7251;
          continue;
        } else {
          var x_7252 = cljs.core.first.call(null, seq__7232_7246__$1);
          ret.push(x_7252);
          var G__7253 = cljs.core.next.call(null, seq__7232_7246__$1);
          var G__7254 = null;
          var G__7255 = 0;
          var G__7256 = 0;
          seq__7232_7236 = G__7253;
          chunk__7233_7237 = G__7254;
          count__7234_7238 = G__7255;
          i__7235_7239 = G__7256;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.ListHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.__GT_ListHandler = function __GT_ListHandler() {
  return new cognitect.transit.ListHandler;
};
cognitect.transit.MapHandler = function() {
};
cognitect.transit.MapHandler.cljs$lang$type = true;
cognitect.transit.MapHandler.cljs$lang$ctorStr = "cognitect.transit/MapHandler";
cognitect.transit.MapHandler.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/MapHandler");
};
cognitect.transit.MapHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "map";
};
cognitect.transit.MapHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  return v;
};
cognitect.transit.MapHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.__GT_MapHandler = function __GT_MapHandler() {
  return new cognitect.transit.MapHandler;
};
cognitect.transit.SetHandler = function() {
};
cognitect.transit.SetHandler.cljs$lang$type = true;
cognitect.transit.SetHandler.cljs$lang$ctorStr = "cognitect.transit/SetHandler";
cognitect.transit.SetHandler.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/SetHandler");
};
cognitect.transit.SetHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "set";
};
cognitect.transit.SetHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__7257_7261 = cljs.core.seq.call(null, v);
  var chunk__7258_7262 = null;
  var count__7259_7263 = 0;
  var i__7260_7264 = 0;
  while (true) {
    if (i__7260_7264 < count__7259_7263) {
      var x_7265 = cljs.core._nth.call(null, chunk__7258_7262, i__7260_7264);
      ret.push(x_7265);
      var G__7266 = seq__7257_7261;
      var G__7267 = chunk__7258_7262;
      var G__7268 = count__7259_7263;
      var G__7269 = i__7260_7264 + 1;
      seq__7257_7261 = G__7266;
      chunk__7258_7262 = G__7267;
      count__7259_7263 = G__7268;
      i__7260_7264 = G__7269;
      continue;
    } else {
      var temp__4126__auto___7270 = cljs.core.seq.call(null, seq__7257_7261);
      if (temp__4126__auto___7270) {
        var seq__7257_7271__$1 = temp__4126__auto___7270;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7257_7271__$1)) {
          var c__4408__auto___7272 = cljs.core.chunk_first.call(null, seq__7257_7271__$1);
          var G__7273 = cljs.core.chunk_rest.call(null, seq__7257_7271__$1);
          var G__7274 = c__4408__auto___7272;
          var G__7275 = cljs.core.count.call(null, c__4408__auto___7272);
          var G__7276 = 0;
          seq__7257_7261 = G__7273;
          chunk__7258_7262 = G__7274;
          count__7259_7263 = G__7275;
          i__7260_7264 = G__7276;
          continue;
        } else {
          var x_7277 = cljs.core.first.call(null, seq__7257_7271__$1);
          ret.push(x_7277);
          var G__7278 = cljs.core.next.call(null, seq__7257_7271__$1);
          var G__7279 = null;
          var G__7280 = 0;
          var G__7281 = 0;
          seq__7257_7261 = G__7278;
          chunk__7258_7262 = G__7279;
          count__7259_7263 = G__7280;
          i__7260_7264 = G__7281;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return com.cognitect.transit.tagged.call(null, "array", ret);
};
cognitect.transit.SetHandler.prototype.stringRep = function() {
  var self__ = this;
  var v = this;
  return null;
};
cognitect.transit.__GT_SetHandler = function __GT_SetHandler() {
  return new cognitect.transit.SetHandler;
};
cognitect.transit.VectorHandler = function() {
};
cognitect.transit.VectorHandler.cljs$lang$type = true;
cognitect.transit.VectorHandler.cljs$lang$ctorStr = "cognitect.transit/VectorHandler";
cognitect.transit.VectorHandler.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/VectorHandler");
};
cognitect.transit.VectorHandler.prototype.tag = function(v) {
  var self__ = this;
  var _ = this;
  return "array";
};
cognitect.transit.VectorHandler.prototype.rep = function(v) {
  var self__ = this;
  var _ = this;
  var ret = [];
  var seq__7282_7286 = cljs.core.seq.call(null, v);
  var chunk__7283_7287 = null;
  var count__7284_7288 = 0;
  var i__7285_7289 = 0;
  while (true) {
    if (i__7285_7289 < count__7284_7288) {
      var x_7290 = cljs.core._nth.call(null, chunk__7283_7287, i__7285_7289);
      ret.push(x_7290);
      var G__7291 = seq__7282_7286;
      var G__7292 = chunk__7283_7287;
      var G__7293 = count__7284_7288;
      var G__7294 = i__7285_7289 + 1;
      seq__7282_7286 = G__7291;
      chunk__7283_7287 = G__7292;
      count__7284_7288 = G__7293;
      i__7285_7289 = G__7294;
      continue;
    } else {
      var temp__4126__auto___7295 = cljs.core.seq.call(null, seq__7282_7286);
      if (temp__4126__auto___7295) {
        var seq__7282_7296__$1 = temp__4126__auto___7295;
        if (cljs.core.chunked_seq_QMARK_.call(null, seq__7282_7296__$1)) {
          var c__4408__auto___7297 = cljs.core.chunk_first.call(null, seq__7282_7296__$1);
          var G__7298 = cljs.core.chunk_rest.call(null, seq__7282_7296__$1);
          var G__7299 = c__4408__auto___7297;
          var G__7300 = cljs.core.count.call(null, c__4408__auto___7297);
          var G__7301 = 0;
          seq__7282_7286 = G__7298;
          chunk__7283_7287 = G__7299;
          count__7284_7288 = G__7300;
          i__7285_7289 = G__7301;
          continue;
        } else {
          var x_7302 = cljs.core.first.call(null, seq__7282_7296__$1);
          ret.push(x_7302);
          var G__7303 = cljs.core.next.call(null, seq__7282_7296__$1);
          var G__7304 = null;
          var G__7305 = 0;
          var G__7306 = 0;
          seq__7282_7286 = G__7303;
          chunk__7283_7287 = G__7304;
          count__7284_7288 = G__7305;
          i__7285_7289 = G__7306;
          continue;
        }
      } else {
      }
    }
    break;
  }
  return ret;
};
cognitect.transit.VectorHandler.prototype.stringRep = function(v) {
  var self__ = this;
  var _ = this;
  return null;
};
cognitect.transit.__GT_VectorHandler = function __GT_VectorHandler() {
  return new cognitect.transit.VectorHandler;
};
cognitect.transit.writer = function() {
  var writer = null;
  var writer__1 = function(type) {
    return writer.call(null, type, null);
  };
  var writer__2 = function(type, opts) {
    var keyword_handler = new cognitect.transit.KeywordHandler;
    var symbol_handler = new cognitect.transit.SymbolHandler;
    var list_handler = new cognitect.transit.ListHandler;
    var map_handler = new cognitect.transit.MapHandler;
    var set_handler = new cognitect.transit.SetHandler;
    var vector_handler = new cognitect.transit.VectorHandler;
    var handlers = cljs.core.merge.call(null, cljs.core.PersistentHashMap.fromArrays([cljs.core.PersistentHashMap, cljs.core.Cons, cljs.core.PersistentArrayMap, cljs.core.NodeSeq, cljs.core.PersistentQueue, cljs.core.IndexedSeq, cljs.core.Keyword, cljs.core.EmptyList, cljs.core.LazySeq, cljs.core.Subvec, cljs.core.PersistentQueueSeq, cljs.core.ArrayNodeSeq, cljs.core.ValSeq, cljs.core.PersistentArrayMapSeq, cljs.core.PersistentVector, cljs.core.List, cljs.core.RSeq, cljs.core.PersistentHashSet, cljs.core.PersistentTreeMap, 
    cljs.core.KeySeq, cljs.core.ChunkedSeq, cljs.core.PersistentTreeSet, cljs.core.ChunkedCons, cljs.core.Symbol, cljs.core.Range, cljs.core.PersistentTreeMapSeq], [map_handler, list_handler, map_handler, list_handler, list_handler, list_handler, keyword_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, list_handler, list_handler, vector_handler, list_handler, list_handler, set_handler, map_handler, list_handler, list_handler, set_handler, list_handler, symbol_handler, 
    list_handler, list_handler]), (new cljs.core.Keyword(null, "handlers", "handlers", 79528781)).cljs$core$IFn$_invoke$arity$1(opts));
    return com.cognitect.transit.writer.call(null, cljs.core.name.call(null, type), cognitect.transit.opts_merge.call(null, {"unpack":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers) {
      return function(x) {
        if (x instanceof cljs.core.PersistentArrayMap) {
          return x.arr;
        } else {
          return false;
        }
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers), "handlers":function() {
      var x7316 = cljs.core.clone.call(null, handlers);
      x7316.forEach = function(x7316, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers) {
        return function(f) {
          var coll = this;
          var seq__7317 = cljs.core.seq.call(null, coll);
          var chunk__7318 = null;
          var count__7319 = 0;
          var i__7320 = 0;
          while (true) {
            if (i__7320 < count__7319) {
              var vec__7321 = cljs.core._nth.call(null, chunk__7318, i__7320);
              var k = cljs.core.nth.call(null, vec__7321, 0, null);
              var v = cljs.core.nth.call(null, vec__7321, 1, null);
              f.call(null, v, k);
              var G__7323 = seq__7317;
              var G__7324 = chunk__7318;
              var G__7325 = count__7319;
              var G__7326 = i__7320 + 1;
              seq__7317 = G__7323;
              chunk__7318 = G__7324;
              count__7319 = G__7325;
              i__7320 = G__7326;
              continue;
            } else {
              var temp__4126__auto__ = cljs.core.seq.call(null, seq__7317);
              if (temp__4126__auto__) {
                var seq__7317__$1 = temp__4126__auto__;
                if (cljs.core.chunked_seq_QMARK_.call(null, seq__7317__$1)) {
                  var c__4408__auto__ = cljs.core.chunk_first.call(null, seq__7317__$1);
                  var G__7327 = cljs.core.chunk_rest.call(null, seq__7317__$1);
                  var G__7328 = c__4408__auto__;
                  var G__7329 = cljs.core.count.call(null, c__4408__auto__);
                  var G__7330 = 0;
                  seq__7317 = G__7327;
                  chunk__7318 = G__7328;
                  count__7319 = G__7329;
                  i__7320 = G__7330;
                  continue;
                } else {
                  var vec__7322 = cljs.core.first.call(null, seq__7317__$1);
                  var k = cljs.core.nth.call(null, vec__7322, 0, null);
                  var v = cljs.core.nth.call(null, vec__7322, 1, null);
                  f.call(null, v, k);
                  var G__7331 = cljs.core.next.call(null, seq__7317__$1);
                  var G__7332 = null;
                  var G__7333 = 0;
                  var G__7334 = 0;
                  seq__7317 = G__7331;
                  chunk__7318 = G__7332;
                  count__7319 = G__7333;
                  i__7320 = G__7334;
                  continue;
                }
              } else {
                return null;
              }
            }
            break;
          }
        };
      }(x7316, keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers);
      return x7316;
    }(), "objectBuilder":function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers) {
      return function(m, kfn, vfn) {
        return cljs.core.reduce_kv.call(null, function(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers) {
          return function(obj, k, v) {
            var G__7315 = obj;
            G__7315.push(kfn.call(null, k), vfn.call(null, v));
            return G__7315;
          };
        }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers), ["^ "], m);
      };
    }(keyword_handler, symbol_handler, list_handler, map_handler, set_handler, vector_handler, handlers)}, cljs.core.clj__GT_js.call(null, cljs.core.dissoc.call(null, opts, new cljs.core.Keyword(null, "handlers", "handlers", 79528781)))));
  };
  writer = function(type, opts) {
    switch(arguments.length) {
      case 1:
        return writer__1.call(this, type);
      case 2:
        return writer__2.call(this, type, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  writer.cljs$core$IFn$_invoke$arity$1 = writer__1;
  writer.cljs$core$IFn$_invoke$arity$2 = writer__2;
  return writer;
}();
cognitect.transit.write = function write(w, o) {
  return w.write(o);
};
cognitect.transit.read_handler = function read_handler(from_rep) {
  return from_rep;
};
cognitect.transit.write_handler = function() {
  var write_handler = null;
  var write_handler__2 = function(tag_fn, rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, null, null);
  };
  var write_handler__3 = function(tag_fn, rep_fn, str_rep_fn) {
    return write_handler.call(null, tag_fn, rep_fn, str_rep_fn, null);
  };
  var write_handler__4 = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    if (typeof cognitect.transit.t7338 !== "undefined") {
    } else {
      cognitect.transit.t7338 = function(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, meta7339) {
        this.verbose_handler_fn = verbose_handler_fn;
        this.str_rep_fn = str_rep_fn;
        this.rep_fn = rep_fn;
        this.tag_fn = tag_fn;
        this.write_handler = write_handler;
        this.meta7339 = meta7339;
        this.cljs$lang$protocol_mask$partition1$ = 0;
        this.cljs$lang$protocol_mask$partition0$ = 393216;
      };
      cognitect.transit.t7338.cljs$lang$type = true;
      cognitect.transit.t7338.cljs$lang$ctorStr = "cognitect.transit/t7338";
      cognitect.transit.t7338.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
        return cljs.core._write.call(null, writer__4216__auto__, "cognitect.transit/t7338");
      };
      cognitect.transit.t7338.prototype.tag = function(o) {
        var self__ = this;
        var _ = this;
        return self__.tag_fn.call(null, o);
      };
      cognitect.transit.t7338.prototype.rep = function(o) {
        var self__ = this;
        var _ = this;
        return self__.rep_fn.call(null, o);
      };
      cognitect.transit.t7338.prototype.stringRep = function(o) {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.str_rep_fn)) {
          return self__.str_rep_fn.call(null, o);
        } else {
          return null;
        }
      };
      cognitect.transit.t7338.prototype.getVerboseHandler = function() {
        var self__ = this;
        var _ = this;
        if (cljs.core.truth_(self__.verbose_handler_fn)) {
          return self__.verbose_handler_fn.call(null);
        } else {
          return null;
        }
      };
      cognitect.transit.t7338.prototype.cljs$core$IMeta$_meta$arity$1 = function(_7340) {
        var self__ = this;
        var _7340__$1 = this;
        return self__.meta7339;
      };
      cognitect.transit.t7338.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = function(_7340, meta7339__$1) {
        var self__ = this;
        var _7340__$1 = this;
        return new cognitect.transit.t7338(self__.verbose_handler_fn, self__.str_rep_fn, self__.rep_fn, self__.tag_fn, self__.write_handler, meta7339__$1);
      };
      cognitect.transit.__GT_t7338 = function __GT_t7338(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta7339) {
        return new cognitect.transit.t7338(verbose_handler_fn__$1, str_rep_fn__$1, rep_fn__$1, tag_fn__$1, write_handler__$1, meta7339);
      };
    }
    return new cognitect.transit.t7338(verbose_handler_fn, str_rep_fn, rep_fn, tag_fn, write_handler, null);
  };
  write_handler = function(tag_fn, rep_fn, str_rep_fn, verbose_handler_fn) {
    switch(arguments.length) {
      case 2:
        return write_handler__2.call(this, tag_fn, rep_fn);
      case 3:
        return write_handler__3.call(this, tag_fn, rep_fn, str_rep_fn);
      case 4:
        return write_handler__4.call(this, tag_fn, rep_fn, str_rep_fn, verbose_handler_fn);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  write_handler.cljs$core$IFn$_invoke$arity$2 = write_handler__2;
  write_handler.cljs$core$IFn$_invoke$arity$3 = write_handler__3;
  write_handler.cljs$core$IFn$_invoke$arity$4 = write_handler__4;
  return write_handler;
}();
cognitect.transit.tagged_value = function tagged_value(tag, rep) {
  return com.cognitect.transit.types.taggedValue.call(null, tag, rep);
};
cognitect.transit.tagged_value_QMARK_ = function tagged_value_QMARK_(x) {
  return com.cognitect.transit.types.isTaggedValue.call(null, x);
};
cognitect.transit.integer = function integer(s) {
  return com.cognitect.transit.types.integer.call(null, s);
};
cognitect.transit.integer_QMARK_ = function integer_QMARK_(x) {
  return com.cognitect.transit.types.isInteger.call(null, x);
};
cognitect.transit.bigint = function bigint(s) {
  return com.cognitect.transit.types.bigInteger.call(null, s);
};
cognitect.transit.bigint_QMARK_ = function bigint_QMARK_(x) {
  return com.cognitect.transit.types.isBigInteger.call(null, x);
};
cognitect.transit.bigdec = function bigdec(s) {
  return com.cognitect.transit.types.bigDecimalValue.call(null, s);
};
cognitect.transit.bigdec_QMARK_ = function bigdec_QMARK_(x) {
  return com.cognitect.transit.types.isBigDecimal.call(null, x);
};
cognitect.transit.uri = function uri(s) {
  return com.cognitect.transit.types.uri.call(null, s);
};
cognitect.transit.uri_QMARK_ = function uri_QMARK_(x) {
  return com.cognitect.transit.types.isURI.call(null, x);
};
cognitect.transit.uuid = function uuid(s) {
  return com.cognitect.transit.types.uuid.call(null, s);
};
cognitect.transit.uuid_QMARK_ = function uuid_QMARK_(x) {
  return com.cognitect.transit.types.isUUID.call(null, x);
};
cognitect.transit.binary = function binary(s) {
  return com.cognitect.transit.types.binary.call(null, s);
};
cognitect.transit.binary_QMARK_ = function binary_QMARK_(x) {
  return com.cognitect.transit.types.isBinary.call(null, x);
};
cognitect.transit.quoted = function quoted(x) {
  return com.cognitect.transit.types.quoted.call(null, x);
};
cognitect.transit.quoted_QMARK_ = function quoted_QMARK_(x) {
  return com.cognitect.transit.types.isQuoted.call(null, x);
};
cognitect.transit.link = function link(x) {
  return com.cognitect.transit.types.link.call(null, x);
};
cognitect.transit.link_QMARK_ = function link_QMARK_(x) {
  return com.cognitect.transit.types.isLink.call(null, x);
};
goog.provide("clojure.string");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
clojure.string.seq_reverse = function seq_reverse(coll) {
  return cljs.core.reduce.call(null, cljs.core.conj, cljs.core.List.EMPTY, coll);
};
clojure.string.reverse = function reverse(s) {
  return s.split("").reverse().join("");
};
clojure.string.replace = function replace(s, match, replacement) {
  if (typeof match === "string") {
    return s.replace(new RegExp(goog.string.regExpEscape(match), "g"), replacement);
  } else {
    if (cljs.core.truth_(match.hasOwnProperty("source"))) {
      return s.replace(new RegExp(match.source, "g"), replacement);
    } else {
      throw "Invalid match arg: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(match);
    }
  }
};
clojure.string.replace_first = function replace_first(s, match, replacement) {
  return s.replace(match, replacement);
};
clojure.string.join = function() {
  var join = null;
  var join__1 = function(coll) {
    return cljs.core.apply.call(null, cljs.core.str, coll);
  };
  var join__2 = function(separator, coll) {
    return cljs.core.apply.call(null, cljs.core.str, cljs.core.interpose.call(null, separator, coll));
  };
  join = function(separator, coll) {
    switch(arguments.length) {
      case 1:
        return join__1.call(this, separator);
      case 2:
        return join__2.call(this, separator, coll);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  join.cljs$core$IFn$_invoke$arity$1 = join__1;
  join.cljs$core$IFn$_invoke$arity$2 = join__2;
  return join;
}();
clojure.string.upper_case = function upper_case(s) {
  return s.toUpperCase();
};
clojure.string.lower_case = function lower_case(s) {
  return s.toLowerCase();
};
clojure.string.capitalize = function capitalize(s) {
  if (cljs.core.count.call(null, s) < 2) {
    return clojure.string.upper_case.call(null, s);
  } else {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.upper_case.call(null, cljs.core.subs.call(null, s, 0, 1))) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(clojure.string.lower_case.call(null, cljs.core.subs.call(null, s, 1)));
  }
};
clojure.string.pop_last_while_empty = function pop_last_while_empty(v) {
  var v__$1 = v;
  while (true) {
    if (cljs.core._EQ_.call(null, "", cljs.core.peek.call(null, v__$1))) {
      var G__7185 = cljs.core.pop.call(null, v__$1);
      v__$1 = G__7185;
      continue;
    } else {
      return v__$1;
    }
    break;
  }
};
clojure.string.discard_trailing_if_needed = function discard_trailing_if_needed(limit, v) {
  if (cljs.core._EQ_.call(null, 0, limit)) {
    return clojure.string.pop_last_while_empty.call(null, v);
  } else {
    return v;
  }
};
clojure.string.split_with_empty_regex = function split_with_empty_regex(s, limit) {
  if (limit <= 0 || limit >= 2 + cljs.core.count.call(null, s)) {
    return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s)))), "");
  } else {
    var pred__7189 = cljs.core._EQ_;
    var expr__7190 = limit;
    if (cljs.core.truth_(pred__7189.call(null, 1, expr__7190))) {
      return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [s], null);
    } else {
      if (cljs.core.truth_(pred__7189.call(null, 2, expr__7190))) {
        return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["", s], null);
      } else {
        var c = limit - 2;
        return cljs.core.conj.call(null, cljs.core.vec.call(null, cljs.core.cons.call(null, "", cljs.core.subvec.call(null, cljs.core.vec.call(null, cljs.core.map.call(null, cljs.core.str, cljs.core.seq.call(null, s))), 0, c))), cljs.core.subs.call(null, s, c));
      }
    }
  }
};
clojure.string.split = function() {
  var split = null;
  var split__2 = function(s, re) {
    return split.call(null, s, re, 0);
  };
  var split__3 = function(s, re, limit) {
    return clojure.string.discard_trailing_if_needed.call(null, limit, cljs.core._EQ_.call(null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(re), "/(?:)/") ? clojure.string.split_with_empty_regex.call(null, s, limit) : limit < 1 ? cljs.core.vec.call(null, ("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s)).split(re)) : function() {
      var s__$1 = s;
      var limit__$1 = limit;
      var parts = cljs.core.PersistentVector.EMPTY;
      while (true) {
        if (cljs.core._EQ_.call(null, limit__$1, 1)) {
          return cljs.core.conj.call(null, parts, s__$1);
        } else {
          var temp__4124__auto__ = cljs.core.re_find.call(null, re, s__$1);
          if (cljs.core.truth_(temp__4124__auto__)) {
            var m = temp__4124__auto__;
            var index = s__$1.indexOf(m);
            var G__7192 = s__$1.substring(index + cljs.core.count.call(null, m));
            var G__7193 = limit__$1 - 1;
            var G__7194 = cljs.core.conj.call(null, parts, s__$1.substring(0, index));
            s__$1 = G__7192;
            limit__$1 = G__7193;
            parts = G__7194;
            continue;
          } else {
            return cljs.core.conj.call(null, parts, s__$1);
          }
        }
        break;
      }
    }());
  };
  split = function(s, re, limit) {
    switch(arguments.length) {
      case 2:
        return split__2.call(this, s, re);
      case 3:
        return split__3.call(this, s, re, limit);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  split.cljs$core$IFn$_invoke$arity$2 = split__2;
  split.cljs$core$IFn$_invoke$arity$3 = split__3;
  return split;
}();
clojure.string.split_lines = function split_lines(s) {
  return clojure.string.split.call(null, s, /\n|\r\n/);
};
clojure.string.trim = function trim(s) {
  return goog.string.trim(s);
};
clojure.string.triml = function triml(s) {
  return goog.string.trimLeft(s);
};
clojure.string.trimr = function trimr(s) {
  return goog.string.trimRight(s);
};
clojure.string.trim_newline = function trim_newline(s) {
  var index = s.length;
  while (true) {
    if (index === 0) {
      return "";
    } else {
      var ch = cljs.core.get.call(null, s, index - 1);
      if (cljs.core._EQ_.call(null, ch, "\n") || cljs.core._EQ_.call(null, ch, "\r")) {
        var G__7195 = index - 1;
        index = G__7195;
        continue;
      } else {
        return s.substring(0, index);
      }
    }
    break;
  }
};
clojure.string.blank_QMARK_ = function blank_QMARK_(s) {
  return goog.string.isEmptySafe(s);
};
clojure.string.escape = function escape__$1(s, cmap) {
  var buffer = new goog.string.StringBuffer;
  var length = s.length;
  var index = 0;
  while (true) {
    if (cljs.core._EQ_.call(null, length, index)) {
      return buffer.toString();
    } else {
      var ch = s.charAt(index);
      var temp__4124__auto___7196 = cljs.core.get.call(null, cmap, ch);
      if (cljs.core.truth_(temp__4124__auto___7196)) {
        var replacement_7197 = temp__4124__auto___7196;
        buffer.append("" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(replacement_7197));
      } else {
        buffer.append(ch);
      }
      var G__7198 = index + 1;
      index = G__7198;
      continue;
    }
    break;
  }
};
goog.provide("cljs.reader");
goog.require("cljs.core");
goog.require("goog.string.StringBuffer");
goog.require("goog.string");
goog.require("goog.string");
cljs.reader.PushbackReader = function() {
  var obj7075 = {};
  return obj7075;
}();
cljs.reader.read_char = function read_char(reader) {
  if (function() {
    var and__3627__auto__ = reader;
    if (and__3627__auto__) {
      return reader.cljs$reader$PushbackReader$read_char$arity$1;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$read_char$arity$1(reader);
  } else {
    var x__4275__auto__ = reader == null ? null : reader;
    return function() {
      var or__3639__auto__ = cljs.reader.read_char[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.reader.read_char["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.read-char", reader);
        }
      }
    }().call(null, reader);
  }
};
cljs.reader.unread = function unread(reader, ch) {
  if (function() {
    var and__3627__auto__ = reader;
    if (and__3627__auto__) {
      return reader.cljs$reader$PushbackReader$unread$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return reader.cljs$reader$PushbackReader$unread$arity$2(reader, ch);
  } else {
    var x__4275__auto__ = reader == null ? null : reader;
    return function() {
      var or__3639__auto__ = cljs.reader.unread[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.reader.unread["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "PushbackReader.unread", reader);
        }
      }
    }().call(null, reader, ch);
  }
};
cljs.reader.StringPushbackReader = function(s, buffer, idx) {
  this.s = s;
  this.buffer = buffer;
  this.idx = idx;
};
cljs.reader.StringPushbackReader.cljs$lang$type = true;
cljs.reader.StringPushbackReader.cljs$lang$ctorStr = "cljs.reader/StringPushbackReader";
cljs.reader.StringPushbackReader.cljs$lang$ctorPrWriter = function(this__4215__auto__, writer__4216__auto__, opt__4217__auto__) {
  return cljs.core._write.call(null, writer__4216__auto__, "cljs.reader/StringPushbackReader");
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$ = true;
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$read_char$arity$1 = function(reader) {
  var self__ = this;
  var reader__$1 = this;
  if (self__.buffer.length === 0) {
    self__.idx = self__.idx + 1;
    return self__.s[self__.idx];
  } else {
    return self__.buffer.pop();
  }
};
cljs.reader.StringPushbackReader.prototype.cljs$reader$PushbackReader$unread$arity$2 = function(reader, ch) {
  var self__ = this;
  var reader__$1 = this;
  return self__.buffer.push(ch);
};
cljs.reader.__GT_StringPushbackReader = function __GT_StringPushbackReader(s, buffer, idx) {
  return new cljs.reader.StringPushbackReader(s, buffer, idx);
};
cljs.reader.push_back_reader = function push_back_reader(s) {
  return new cljs.reader.StringPushbackReader(s, [], -1);
};
cljs.reader.whitespace_QMARK_ = function whitespace_QMARK_(ch) {
  var or__3639__auto__ = goog.string.isBreakingWhitespace(ch);
  if (cljs.core.truth_(or__3639__auto__)) {
    return or__3639__auto__;
  } else {
    return "," === ch;
  }
};
cljs.reader.numeric_QMARK_ = function numeric_QMARK_(ch) {
  return goog.string.isNumeric(ch);
};
cljs.reader.comment_prefix_QMARK_ = function comment_prefix_QMARK_(ch) {
  return ";" === ch;
};
cljs.reader.number_literal_QMARK_ = function number_literal_QMARK_(reader, initch) {
  return cljs.reader.numeric_QMARK_.call(null, initch) || ("+" === initch || "-" === initch) && cljs.reader.numeric_QMARK_.call(null, function() {
    var next_ch = cljs.reader.read_char.call(null, reader);
    cljs.reader.unread.call(null, reader, next_ch);
    return next_ch;
  }());
};
cljs.reader.reader_error = function() {
  var reader_error__delegate = function(rdr, msg) {
    throw new Error(cljs.core.apply.call(null, cljs.core.str, msg));
  };
  var reader_error = function(rdr, var_args) {
    var msg = null;
    if (arguments.length > 1) {
      msg = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return reader_error__delegate.call(this, rdr, msg);
  };
  reader_error.cljs$lang$maxFixedArity = 1;
  reader_error.cljs$lang$applyTo = function(arglist__7076) {
    var rdr = cljs.core.first(arglist__7076);
    var msg = cljs.core.rest(arglist__7076);
    return reader_error__delegate(rdr, msg);
  };
  reader_error.cljs$core$IFn$_invoke$arity$variadic = reader_error__delegate;
  return reader_error;
}();
cljs.reader.macro_terminating_QMARK_ = function macro_terminating_QMARK_(ch) {
  var and__3627__auto__ = !(ch === "#");
  if (and__3627__auto__) {
    var and__3627__auto____$1 = !(ch === "'");
    if (and__3627__auto____$1) {
      var and__3627__auto____$2 = !(ch === ":");
      if (and__3627__auto____$2) {
        return cljs.reader.macros.call(null, ch);
      } else {
        return and__3627__auto____$2;
      }
    } else {
      return and__3627__auto____$1;
    }
  } else {
    return and__3627__auto__;
  }
};
cljs.reader.read_token = function read_token(rdr, initch) {
  var sb = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (ch == null || cljs.reader.whitespace_QMARK_.call(null, ch) || cljs.reader.macro_terminating_QMARK_.call(null, ch)) {
      cljs.reader.unread.call(null, rdr, ch);
      return sb.toString();
    } else {
      var G__7077 = function() {
        sb.append(ch);
        return sb;
      }();
      var G__7078 = cljs.reader.read_char.call(null, rdr);
      sb = G__7077;
      ch = G__7078;
      continue;
    }
    break;
  }
};
cljs.reader.skip_line = function skip_line(reader, _) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch === "\n" || ch === "\r" || ch == null) {
      return reader;
    } else {
      continue;
    }
    break;
  }
};
cljs.reader.int_pattern = cljs.core.re_pattern.call(null, "^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+))(N)?$");
cljs.reader.ratio_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+)/([0-9]+)$");
cljs.reader.float_pattern = cljs.core.re_pattern.call(null, "^([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?$");
cljs.reader.symbol_pattern = cljs.core.re_pattern.call(null, "^[:]?([^0-9/].*/)?([^0-9/][^/]*)$");
cljs.reader.re_matches_STAR_ = function re_matches_STAR_(re, s) {
  var matches = re.exec(s);
  if (!(matches == null) && matches[0] === s) {
    if (matches.length === 1) {
      return matches[0];
    } else {
      return matches;
    }
  } else {
    return null;
  }
};
cljs.reader.match_int = function match_int(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s);
  var ie8_fix = groups[2];
  var zero = cljs.core._EQ_.call(null, ie8_fix, "") ? null : ie8_fix;
  if (!(zero == null)) {
    return 0;
  } else {
    var a = cljs.core.truth_(groups[3]) ? [groups[3], 10] : cljs.core.truth_(groups[4]) ? [groups[4], 16] : cljs.core.truth_(groups[5]) ? [groups[5], 8] : cljs.core.truth_(groups[6]) ? [groups[7], parseInt(groups[6], 10)] : [null, null];
    var n = a[0];
    var radix = a[1];
    if (n == null) {
      return null;
    } else {
      var parsed = parseInt(n, radix);
      if ("-" === groups[1]) {
        return-parsed;
      } else {
        return parsed;
      }
    }
  }
};
cljs.reader.match_ratio = function match_ratio(s) {
  var groups = cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s);
  var numinator = groups[1];
  var denominator = groups[2];
  return parseInt(numinator, 10) / parseInt(denominator, 10);
};
cljs.reader.match_float = function match_float(s) {
  return parseFloat(s);
};
cljs.reader.match_number = function match_number(s) {
  if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.int_pattern, s))) {
    return cljs.reader.match_int.call(null, s);
  } else {
    if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.ratio_pattern, s))) {
      return cljs.reader.match_ratio.call(null, s);
    } else {
      if (cljs.core.truth_(cljs.reader.re_matches_STAR_.call(null, cljs.reader.float_pattern, s))) {
        return cljs.reader.match_float.call(null, s);
      } else {
        return null;
      }
    }
  }
};
cljs.reader.escape_char_map = function escape_char_map(c) {
  if (c === "t") {
    return "\t";
  } else {
    if (c === "r") {
      return "\r";
    } else {
      if (c === "n") {
        return "\n";
      } else {
        if (c === "\\") {
          return "\\";
        } else {
          if (c === '"') {
            return'"';
          } else {
            if (c === "b") {
              return "\b";
            } else {
              if (c === "f") {
                return "\f";
              } else {
                return null;
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.read_2_chars = function read_2_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.read_4_chars = function read_4_chars(reader) {
  return(new goog.string.StringBuffer(cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader), cljs.reader.read_char.call(null, reader))).toString();
};
cljs.reader.unicode_2_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{2}$");
cljs.reader.unicode_4_pattern = cljs.core.re_pattern.call(null, "^[0-9A-Fa-f]{4}$");
cljs.reader.validate_unicode_escape = function validate_unicode_escape(unicode_pattern, reader, escape_char, unicode_str) {
  if (cljs.core.truth_(cljs.core.re_matches.call(null, unicode_pattern, unicode_str))) {
    return unicode_str;
  } else {
    return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", escape_char, unicode_str);
  }
};
cljs.reader.make_unicode_char = function make_unicode_char(code_str) {
  var code = parseInt(code_str, 16);
  return String.fromCharCode(code);
};
cljs.reader.escape_char = function escape_char(buffer, reader) {
  var ch = cljs.reader.read_char.call(null, reader);
  var mapresult = cljs.reader.escape_char_map.call(null, ch);
  if (cljs.core.truth_(mapresult)) {
    return mapresult;
  } else {
    if (ch === "x") {
      return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_2_pattern, reader, ch, cljs.reader.read_2_chars.call(null, reader)));
    } else {
      if (ch === "u") {
        return cljs.reader.make_unicode_char.call(null, cljs.reader.validate_unicode_escape.call(null, cljs.reader.unicode_4_pattern, reader, ch, cljs.reader.read_4_chars.call(null, reader)));
      } else {
        if (cljs.reader.numeric_QMARK_.call(null, ch)) {
          return String.fromCharCode(ch);
        } else {
          return cljs.reader.reader_error.call(null, reader, "Unexpected unicode escape \\", ch);
        }
      }
    }
  }
};
cljs.reader.read_past = function read_past(pred, rdr) {
  var ch = cljs.reader.read_char.call(null, rdr);
  while (true) {
    if (cljs.core.truth_(pred.call(null, ch))) {
      var G__7079 = cljs.reader.read_char.call(null, rdr);
      ch = G__7079;
      continue;
    } else {
      return ch;
    }
    break;
  }
};
cljs.reader.read_delimited_list = function read_delimited_list(delim, rdr, recursive_QMARK_) {
  var a = cljs.core.transient$.call(null, cljs.core.PersistentVector.EMPTY);
  while (true) {
    var ch = cljs.reader.read_past.call(null, cljs.reader.whitespace_QMARK_, rdr);
    if (cljs.core.truth_(ch)) {
    } else {
      cljs.reader.reader_error.call(null, rdr, "EOF while reading");
    }
    if (delim === ch) {
      return cljs.core.persistent_BANG_.call(null, a);
    } else {
      var temp__4124__auto__ = cljs.reader.macros.call(null, ch);
      if (cljs.core.truth_(temp__4124__auto__)) {
        var macrofn = temp__4124__auto__;
        var mret = macrofn.call(null, rdr, ch);
        var G__7080 = mret === rdr ? a : cljs.core.conj_BANG_.call(null, a, mret);
        a = G__7080;
        continue;
      } else {
        cljs.reader.unread.call(null, rdr, ch);
        var o = cljs.reader.read.call(null, rdr, true, null, recursive_QMARK_);
        var G__7081 = o === rdr ? a : cljs.core.conj_BANG_.call(null, a, o);
        a = G__7081;
        continue;
      }
    }
    break;
  }
};
cljs.reader.not_implemented = function not_implemented(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Reader for ", ch, " not implemented yet");
};
cljs.reader.read_dispatch = function read_dispatch(rdr, _) {
  var ch = cljs.reader.read_char.call(null, rdr);
  var dm = cljs.reader.dispatch_macros.call(null, ch);
  if (cljs.core.truth_(dm)) {
    return dm.call(null, rdr, _);
  } else {
    var temp__4124__auto__ = cljs.reader.maybe_read_tagged_type.call(null, rdr, ch);
    if (cljs.core.truth_(temp__4124__auto__)) {
      var obj = temp__4124__auto__;
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, rdr, "No dispatch macro for ", ch);
    }
  }
};
cljs.reader.read_unmatched_delimiter = function read_unmatched_delimiter(rdr, ch) {
  return cljs.reader.reader_error.call(null, rdr, "Unmached delimiter ", ch);
};
cljs.reader.read_list = function read_list(rdr, _) {
  return cljs.core.apply.call(null, cljs.core.list, cljs.reader.read_delimited_list.call(null, ")", rdr, true));
};
cljs.reader.read_comment = cljs.reader.skip_line;
cljs.reader.read_vector = function read_vector(rdr, _) {
  return cljs.reader.read_delimited_list.call(null, "]", rdr, true);
};
cljs.reader.read_map = function read_map(rdr, _) {
  var l = cljs.reader.read_delimited_list.call(null, "}", rdr, true);
  if (cljs.core.odd_QMARK_.call(null, cljs.core.count.call(null, l))) {
    cljs.reader.reader_error.call(null, rdr, "Map literal must contain an even number of forms");
  } else {
  }
  return cljs.core.apply.call(null, cljs.core.hash_map, l);
};
cljs.reader.read_number = function read_number(reader, initch) {
  var buffer = new goog.string.StringBuffer(initch);
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (cljs.core.truth_(function() {
      var or__3639__auto__ = ch == null;
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = cljs.reader.whitespace_QMARK_.call(null, ch);
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          return cljs.reader.macros.call(null, ch);
        }
      }
    }())) {
      cljs.reader.unread.call(null, reader, ch);
      var s = buffer.toString();
      var or__3639__auto__ = cljs.reader.match_number.call(null, s);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return cljs.reader.reader_error.call(null, reader, "Invalid number format [", s, "]");
      }
    } else {
      var G__7082 = function() {
        buffer.append(ch);
        return buffer;
      }();
      var G__7083 = cljs.reader.read_char.call(null, reader);
      buffer = G__7082;
      ch = G__7083;
      continue;
    }
    break;
  }
};
cljs.reader.read_string_STAR_ = function read_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        var G__7084 = function() {
          buffer.append(cljs.reader.escape_char.call(null, buffer, reader));
          return buffer;
        }();
        var G__7085 = cljs.reader.read_char.call(null, reader);
        buffer = G__7084;
        ch = G__7085;
        continue;
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__7086 = function() {
            buffer.append(ch);
            return buffer;
          }();
          var G__7087 = cljs.reader.read_char.call(null, reader);
          buffer = G__7086;
          ch = G__7087;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.read_raw_string_STAR_ = function read_raw_string_STAR_(reader, _) {
  var buffer = new goog.string.StringBuffer;
  var ch = cljs.reader.read_char.call(null, reader);
  while (true) {
    if (ch == null) {
      return cljs.reader.reader_error.call(null, reader, "EOF while reading");
    } else {
      if ("\\" === ch) {
        buffer.append(ch);
        var nch = cljs.reader.read_char.call(null, reader);
        if (nch == null) {
          return cljs.reader.reader_error.call(null, reader, "EOF while reading");
        } else {
          var G__7092 = function() {
            var G__7090 = buffer;
            G__7090.append(nch);
            return G__7090;
          }();
          var G__7093 = cljs.reader.read_char.call(null, reader);
          buffer = G__7092;
          ch = G__7093;
          continue;
        }
      } else {
        if ('"' === ch) {
          return buffer.toString();
        } else {
          var G__7094 = function() {
            var G__7091 = buffer;
            G__7091.append(ch);
            return G__7091;
          }();
          var G__7095 = cljs.reader.read_char.call(null, reader);
          buffer = G__7094;
          ch = G__7095;
          continue;
        }
      }
    }
    break;
  }
};
cljs.reader.special_symbols = function special_symbols(t, not_found) {
  if (t === "nil") {
    return null;
  } else {
    if (t === "true") {
      return true;
    } else {
      if (t === "false") {
        return false;
      } else {
        return not_found;
      }
    }
  }
};
cljs.reader.read_symbol = function read_symbol(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, initch);
  if (cljs.core.truth_(goog.string.contains(token, "/"))) {
    return cljs.core.symbol.call(null, cljs.core.subs.call(null, token, 0, token.indexOf("/")), cljs.core.subs.call(null, token, token.indexOf("/") + 1, token.length));
  } else {
    return cljs.reader.special_symbols.call(null, token, cljs.core.symbol.call(null, token));
  }
};
cljs.reader.read_keyword = function read_keyword(reader, initch) {
  var token = cljs.reader.read_token.call(null, reader, cljs.reader.read_char.call(null, reader));
  var a = cljs.reader.re_matches_STAR_.call(null, cljs.reader.symbol_pattern, token);
  var token__$1 = a[0];
  var ns = a[1];
  var name = a[2];
  if (!(void 0 === ns) && ns.substring(ns.length - 2, ns.length) === ":/" || name[name.length - 1] === ":" || !(token__$1.indexOf("::", 1) === -1)) {
    return cljs.reader.reader_error.call(null, reader, "Invalid token: ", token__$1);
  } else {
    if (!(ns == null) && ns.length > 0) {
      return cljs.core.keyword.call(null, ns.substring(0, ns.indexOf("/")), name);
    } else {
      return cljs.core.keyword.call(null, token__$1);
    }
  }
};
cljs.reader.desugar_meta = function desugar_meta(f) {
  if (f instanceof cljs.core.Symbol) {
    return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
  } else {
    if (typeof f === "string") {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "tag", "tag", -1290361223), f], null);
    } else {
      if (f instanceof cljs.core.Keyword) {
        return new cljs.core.PersistentArrayMap.fromArray([f, true], true, false);
      } else {
        return f;
      }
    }
  }
};
cljs.reader.wrapping_reader = function wrapping_reader(sym) {
  return function(rdr, _) {
    return cljs.core._conj.call(null, cljs.core._conj.call(null, cljs.core.List.EMPTY, cljs.reader.read.call(null, rdr, true, null, true)), sym);
  };
};
cljs.reader.throwing_reader = function throwing_reader(msg) {
  return function(rdr, _) {
    return cljs.reader.reader_error.call(null, rdr, msg);
  };
};
cljs.reader.read_meta = function read_meta(rdr, _) {
  var m = cljs.reader.desugar_meta.call(null, cljs.reader.read.call(null, rdr, true, null, true));
  if (cljs.core.map_QMARK_.call(null, m)) {
  } else {
    cljs.reader.reader_error.call(null, rdr, "Metadata must be Symbol,Keyword,String or Map");
  }
  var o = cljs.reader.read.call(null, rdr, true, null, true);
  if (function() {
    var G__7097 = o;
    if (G__7097) {
      var bit__4302__auto__ = G__7097.cljs$lang$protocol_mask$partition0$ & 262144;
      if (bit__4302__auto__ || G__7097.cljs$core$IWithMeta$) {
        return true;
      } else {
        if (!G__7097.cljs$lang$protocol_mask$partition0$) {
          return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__7097);
        } else {
          return false;
        }
      }
    } else {
      return cljs.core.native_satisfies_QMARK_.call(null, cljs.core.IWithMeta, G__7097);
    }
  }()) {
    return cljs.core.with_meta.call(null, o, cljs.core.merge.call(null, cljs.core.meta.call(null, o), m));
  } else {
    return cljs.reader.reader_error.call(null, rdr, "Metadata can only be applied to IWithMetas");
  }
};
cljs.reader.read_set = function read_set(rdr, _) {
  return cljs.core.set.call(null, cljs.reader.read_delimited_list.call(null, "}", rdr, true));
};
cljs.reader.read_regex = function read_regex(rdr, ch) {
  return cljs.core.re_pattern.call(null, cljs.reader.read_raw_string_STAR_.call(null, rdr, ch));
};
cljs.reader.read_discard = function read_discard(rdr, _) {
  cljs.reader.read.call(null, rdr, true, null, true);
  return rdr;
};
cljs.reader.macros = function macros(c) {
  if (c === '"') {
    return cljs.reader.read_string_STAR_;
  } else {
    if (c === ":") {
      return cljs.reader.read_keyword;
    } else {
      if (c === ";") {
        return cljs.reader.read_comment;
      } else {
        if (c === "'") {
          return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "quote", "quote", 1377916282, null));
        } else {
          if (c === "@") {
            return cljs.reader.wrapping_reader.call(null, new cljs.core.Symbol(null, "deref", "deref", 1494944732, null));
          } else {
            if (c === "^") {
              return cljs.reader.read_meta;
            } else {
              if (c === "`") {
                return cljs.reader.not_implemented;
              } else {
                if (c === "~") {
                  return cljs.reader.not_implemented;
                } else {
                  if (c === "(") {
                    return cljs.reader.read_list;
                  } else {
                    if (c === ")") {
                      return cljs.reader.read_unmatched_delimiter;
                    } else {
                      if (c === "[") {
                        return cljs.reader.read_vector;
                      } else {
                        if (c === "]") {
                          return cljs.reader.read_unmatched_delimiter;
                        } else {
                          if (c === "{") {
                            return cljs.reader.read_map;
                          } else {
                            if (c === "}") {
                              return cljs.reader.read_unmatched_delimiter;
                            } else {
                              if (c === "\\") {
                                return cljs.reader.read_char;
                              } else {
                                if (c === "#") {
                                  return cljs.reader.read_dispatch;
                                } else {
                                  return null;
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
cljs.reader.dispatch_macros = function dispatch_macros(s) {
  if (s === "{") {
    return cljs.reader.read_set;
  } else {
    if (s === "\x3c") {
      return cljs.reader.throwing_reader.call(null, "Unreadable form");
    } else {
      if (s === '"') {
        return cljs.reader.read_regex;
      } else {
        if (s === "!") {
          return cljs.reader.read_comment;
        } else {
          if (s === "_") {
            return cljs.reader.read_discard;
          } else {
            return null;
          }
        }
      }
    }
  }
};
cljs.reader.read = function read(reader, eof_is_error, sentinel, is_recursive) {
  while (true) {
    var ch = cljs.reader.read_char.call(null, reader);
    if (ch == null) {
      if (cljs.core.truth_(eof_is_error)) {
        return cljs.reader.reader_error.call(null, reader, "EOF while reading");
      } else {
        return sentinel;
      }
    } else {
      if (cljs.reader.whitespace_QMARK_.call(null, ch)) {
        var G__7098 = reader;
        var G__7099 = eof_is_error;
        var G__7100 = sentinel;
        var G__7101 = is_recursive;
        reader = G__7098;
        eof_is_error = G__7099;
        sentinel = G__7100;
        is_recursive = G__7101;
        continue;
      } else {
        if (cljs.reader.comment_prefix_QMARK_.call(null, ch)) {
          var G__7102 = cljs.reader.read_comment.call(null, reader, ch);
          var G__7103 = eof_is_error;
          var G__7104 = sentinel;
          var G__7105 = is_recursive;
          reader = G__7102;
          eof_is_error = G__7103;
          sentinel = G__7104;
          is_recursive = G__7105;
          continue;
        } else {
          var f = cljs.reader.macros.call(null, ch);
          var res = cljs.core.truth_(f) ? f.call(null, reader, ch) : cljs.reader.number_literal_QMARK_.call(null, reader, ch) ? cljs.reader.read_number.call(null, reader, ch) : cljs.reader.read_symbol.call(null, reader, ch);
          if (res === reader) {
            var G__7106 = reader;
            var G__7107 = eof_is_error;
            var G__7108 = sentinel;
            var G__7109 = is_recursive;
            reader = G__7106;
            eof_is_error = G__7107;
            sentinel = G__7108;
            is_recursive = G__7109;
            continue;
          } else {
            return res;
          }
        }
      }
    }
    break;
  }
};
cljs.reader.read_string = function read_string(s) {
  var r = cljs.reader.push_back_reader.call(null, s);
  return cljs.reader.read.call(null, r, false, null, false);
};
cljs.reader.zero_fill_right_and_truncate = function zero_fill_right_and_truncate(s, width) {
  if (cljs.core._EQ_.call(null, width, cljs.core.count.call(null, s))) {
    return s;
  } else {
    if (width < cljs.core.count.call(null, s)) {
      return cljs.core.subs.call(null, s, 0, width);
    } else {
      var b = new goog.string.StringBuffer(s);
      while (true) {
        if (b.getLength() < width) {
          var G__7110 = b.append("0");
          b = G__7110;
          continue;
        } else {
          return b.toString();
        }
        break;
      }
    }
  }
};
cljs.reader.divisible_QMARK_ = function divisible_QMARK_(num, div) {
  return cljs.core.mod.call(null, num, div) === 0;
};
cljs.reader.indivisible_QMARK_ = function indivisible_QMARK_(num, div) {
  return!cljs.reader.divisible_QMARK_.call(null, num, div);
};
cljs.reader.leap_year_QMARK_ = function leap_year_QMARK_(year) {
  return cljs.reader.divisible_QMARK_.call(null, year, 4) && (cljs.reader.indivisible_QMARK_.call(null, year, 100) || cljs.reader.divisible_QMARK_.call(null, year, 400));
};
cljs.reader.days_in_month = function() {
  var dim_norm = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  var dim_leap = new cljs.core.PersistentVector(null, 13, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], null);
  return function(dim_norm, dim_leap) {
    return function(month, leap_year_QMARK_) {
      return cljs.core.get.call(null, cljs.core.truth_(leap_year_QMARK_) ? dim_leap : dim_norm, month);
    };
  }(dim_norm, dim_leap);
}();
cljs.reader.timestamp_regex = /(\d\d\d\d)(?:-(\d\d)(?:-(\d\d)(?:[T](\d\d)(?::(\d\d)(?::(\d\d)(?:[.](\d+))?)?)?)?)?)?(?:[Z]|([-+])(\d\d):(\d\d))?/;
cljs.reader.parse_int = function parse_int(s) {
  var n = parseInt(s, 10);
  if (cljs.core.not.call(null, isNaN(n))) {
    return n;
  } else {
    return null;
  }
};
cljs.reader.check = function check(low, n, high, msg) {
  if (low <= n && n <= high) {
  } else {
    cljs.reader.reader_error.call(null, null, "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(msg) + " Failed:  " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(low) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(n) + "\x3c\x3d" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(high));
  }
  return n;
};
cljs.reader.parse_and_validate_timestamp = function parse_and_validate_timestamp(s) {
  var vec__7112 = cljs.core.re_matches.call(null, cljs.reader.timestamp_regex, s);
  var _ = cljs.core.nth.call(null, vec__7112, 0, null);
  var years = cljs.core.nth.call(null, vec__7112, 1, null);
  var months = cljs.core.nth.call(null, vec__7112, 2, null);
  var days = cljs.core.nth.call(null, vec__7112, 3, null);
  var hours = cljs.core.nth.call(null, vec__7112, 4, null);
  var minutes = cljs.core.nth.call(null, vec__7112, 5, null);
  var seconds = cljs.core.nth.call(null, vec__7112, 6, null);
  var fraction = cljs.core.nth.call(null, vec__7112, 7, null);
  var offset_sign = cljs.core.nth.call(null, vec__7112, 8, null);
  var offset_hours = cljs.core.nth.call(null, vec__7112, 9, null);
  var offset_minutes = cljs.core.nth.call(null, vec__7112, 10, null);
  var v = vec__7112;
  if (cljs.core.not.call(null, v)) {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(s));
  } else {
    var years__$1 = cljs.reader.parse_int.call(null, years);
    var months__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, months);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 1;
      }
    }();
    var days__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, days);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 1;
      }
    }();
    var hours__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, hours);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 0;
      }
    }();
    var minutes__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, minutes);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 0;
      }
    }();
    var seconds__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, seconds);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 0;
      }
    }();
    var fraction__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, cljs.reader.zero_fill_right_and_truncate.call(null, fraction, 3));
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 0;
      }
    }();
    var offset_sign__$1 = cljs.core._EQ_.call(null, offset_sign, "-") ? -1 : 1;
    var offset_hours__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, offset_hours);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 0;
      }
    }();
    var offset_minutes__$1 = function() {
      var or__3639__auto__ = cljs.reader.parse_int.call(null, offset_minutes);
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return 0;
      }
    }();
    var offset = offset_sign__$1 * (offset_hours__$1 * 60 + offset_minutes__$1);
    return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [years__$1, cljs.reader.check.call(null, 1, months__$1, 12, "timestamp month field must be in range 1..12"), cljs.reader.check.call(null, 1, days__$1, cljs.reader.days_in_month.call(null, months__$1, cljs.reader.leap_year_QMARK_.call(null, years__$1)), "timestamp day field must be in range 1..last day in month"), cljs.reader.check.call(null, 0, hours__$1, 23, "timestamp hour field must be in range 0..23"), 
    cljs.reader.check.call(null, 0, minutes__$1, 59, "timestamp minute field must be in range 0..59"), cljs.reader.check.call(null, 0, seconds__$1, cljs.core._EQ_.call(null, minutes__$1, 59) ? 60 : 59, "timestamp second field must be in range 0..60"), cljs.reader.check.call(null, 0, fraction__$1, 999, "timestamp millisecond field must be in range 0..999"), offset], null);
  }
};
cljs.reader.parse_timestamp = function parse_timestamp(ts) {
  var temp__4124__auto__ = cljs.reader.parse_and_validate_timestamp.call(null, ts);
  if (cljs.core.truth_(temp__4124__auto__)) {
    var vec__7114 = temp__4124__auto__;
    var years = cljs.core.nth.call(null, vec__7114, 0, null);
    var months = cljs.core.nth.call(null, vec__7114, 1, null);
    var days = cljs.core.nth.call(null, vec__7114, 2, null);
    var hours = cljs.core.nth.call(null, vec__7114, 3, null);
    var minutes = cljs.core.nth.call(null, vec__7114, 4, null);
    var seconds = cljs.core.nth.call(null, vec__7114, 5, null);
    var ms = cljs.core.nth.call(null, vec__7114, 6, null);
    var offset = cljs.core.nth.call(null, vec__7114, 7, null);
    return new Date(Date.UTC(years, months - 1, days, hours, minutes, seconds, ms) - offset * 60 * 1E3);
  } else {
    return cljs.reader.reader_error.call(null, null, "Unrecognized date/time syntax: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ts));
  }
};
cljs.reader.read_date = function read_date(s) {
  if (typeof s === "string") {
    return cljs.reader.parse_timestamp.call(null, s);
  } else {
    return cljs.reader.reader_error.call(null, null, "Instance literal expects a string for its timestamp.");
  }
};
cljs.reader.read_queue = function read_queue(elems) {
  if (cljs.core.vector_QMARK_.call(null, elems)) {
    return cljs.core.into.call(null, cljs.core.PersistentQueue.EMPTY, elems);
  } else {
    return cljs.reader.reader_error.call(null, null, "Queue literal expects a vector for its elements.");
  }
};
cljs.reader.read_js = function read_js(form) {
  if (cljs.core.vector_QMARK_.call(null, form)) {
    var arr = [];
    var seq__7127_7139 = cljs.core.seq.call(null, form);
    var chunk__7128_7140 = null;
    var count__7129_7141 = 0;
    var i__7130_7142 = 0;
    while (true) {
      if (i__7130_7142 < count__7129_7141) {
        var x_7143 = cljs.core._nth.call(null, chunk__7128_7140, i__7130_7142);
        arr.push(x_7143);
        var G__7144 = seq__7127_7139;
        var G__7145 = chunk__7128_7140;
        var G__7146 = count__7129_7141;
        var G__7147 = i__7130_7142 + 1;
        seq__7127_7139 = G__7144;
        chunk__7128_7140 = G__7145;
        count__7129_7141 = G__7146;
        i__7130_7142 = G__7147;
        continue;
      } else {
        var temp__4126__auto___7148 = cljs.core.seq.call(null, seq__7127_7139);
        if (temp__4126__auto___7148) {
          var seq__7127_7149__$1 = temp__4126__auto___7148;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7127_7149__$1)) {
            var c__4408__auto___7150 = cljs.core.chunk_first.call(null, seq__7127_7149__$1);
            var G__7151 = cljs.core.chunk_rest.call(null, seq__7127_7149__$1);
            var G__7152 = c__4408__auto___7150;
            var G__7153 = cljs.core.count.call(null, c__4408__auto___7150);
            var G__7154 = 0;
            seq__7127_7139 = G__7151;
            chunk__7128_7140 = G__7152;
            count__7129_7141 = G__7153;
            i__7130_7142 = G__7154;
            continue;
          } else {
            var x_7155 = cljs.core.first.call(null, seq__7127_7149__$1);
            arr.push(x_7155);
            var G__7156 = cljs.core.next.call(null, seq__7127_7149__$1);
            var G__7157 = null;
            var G__7158 = 0;
            var G__7159 = 0;
            seq__7127_7139 = G__7156;
            chunk__7128_7140 = G__7157;
            count__7129_7141 = G__7158;
            i__7130_7142 = G__7159;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return arr;
  } else {
    if (cljs.core.map_QMARK_.call(null, form)) {
      var obj = function() {
        var obj7132 = {};
        return obj7132;
      }();
      var seq__7133_7160 = cljs.core.seq.call(null, form);
      var chunk__7134_7161 = null;
      var count__7135_7162 = 0;
      var i__7136_7163 = 0;
      while (true) {
        if (i__7136_7163 < count__7135_7162) {
          var vec__7137_7164 = cljs.core._nth.call(null, chunk__7134_7161, i__7136_7163);
          var k_7165 = cljs.core.nth.call(null, vec__7137_7164, 0, null);
          var v_7166 = cljs.core.nth.call(null, vec__7137_7164, 1, null);
          obj[cljs.core.name.call(null, k_7165)] = v_7166;
          var G__7167 = seq__7133_7160;
          var G__7168 = chunk__7134_7161;
          var G__7169 = count__7135_7162;
          var G__7170 = i__7136_7163 + 1;
          seq__7133_7160 = G__7167;
          chunk__7134_7161 = G__7168;
          count__7135_7162 = G__7169;
          i__7136_7163 = G__7170;
          continue;
        } else {
          var temp__4126__auto___7171 = cljs.core.seq.call(null, seq__7133_7160);
          if (temp__4126__auto___7171) {
            var seq__7133_7172__$1 = temp__4126__auto___7171;
            if (cljs.core.chunked_seq_QMARK_.call(null, seq__7133_7172__$1)) {
              var c__4408__auto___7173 = cljs.core.chunk_first.call(null, seq__7133_7172__$1);
              var G__7174 = cljs.core.chunk_rest.call(null, seq__7133_7172__$1);
              var G__7175 = c__4408__auto___7173;
              var G__7176 = cljs.core.count.call(null, c__4408__auto___7173);
              var G__7177 = 0;
              seq__7133_7160 = G__7174;
              chunk__7134_7161 = G__7175;
              count__7135_7162 = G__7176;
              i__7136_7163 = G__7177;
              continue;
            } else {
              var vec__7138_7178 = cljs.core.first.call(null, seq__7133_7172__$1);
              var k_7179 = cljs.core.nth.call(null, vec__7138_7178, 0, null);
              var v_7180 = cljs.core.nth.call(null, vec__7138_7178, 1, null);
              obj[cljs.core.name.call(null, k_7179)] = v_7180;
              var G__7181 = cljs.core.next.call(null, seq__7133_7172__$1);
              var G__7182 = null;
              var G__7183 = 0;
              var G__7184 = 0;
              seq__7133_7160 = G__7181;
              chunk__7134_7161 = G__7182;
              count__7135_7162 = G__7183;
              i__7136_7163 = G__7184;
              continue;
            }
          } else {
          }
        }
        break;
      }
      return obj;
    } else {
      return cljs.reader.reader_error.call(null, null, "JS literal expects a vector or map containing only string or unqualified keyword keys");
    }
  }
};
cljs.reader.read_uuid = function read_uuid(uuid) {
  if (typeof uuid === "string") {
    return new cljs.core.UUID(uuid);
  } else {
    return cljs.reader.reader_error.call(null, null, "UUID literal expects a string as its representation.");
  }
};
cljs.reader._STAR_tag_table_STAR_ = cljs.core.atom.call(null, new cljs.core.PersistentArrayMap(null, 4, ["inst", cljs.reader.read_date, "uuid", cljs.reader.read_uuid, "queue", cljs.reader.read_queue, "js", cljs.reader.read_js], null));
cljs.reader._STAR_default_data_reader_fn_STAR_ = cljs.core.atom.call(null, null);
cljs.reader.maybe_read_tagged_type = function maybe_read_tagged_type(rdr, initch) {
  var tag = cljs.reader.read_symbol.call(null, rdr, initch);
  var pfn = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag));
  var dfn = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  if (cljs.core.truth_(pfn)) {
    return pfn.call(null, cljs.reader.read.call(null, rdr, true, null, false));
  } else {
    if (cljs.core.truth_(dfn)) {
      return dfn.call(null, tag, cljs.reader.read.call(null, rdr, true, null, false));
    } else {
      return cljs.reader.reader_error.call(null, rdr, "Could not find tag parser for ", "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag), " in ", cljs.core.pr_str.call(null, cljs.core.keys.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_))));
    }
  }
};
cljs.reader.register_tag_parser_BANG_ = function register_tag_parser_BANG_(tag, f) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.assoc, tag__$1, f);
  return old_parser;
};
cljs.reader.deregister_tag_parser_BANG_ = function deregister_tag_parser_BANG_(tag) {
  var tag__$1 = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag);
  var old_parser = cljs.core.get.call(null, cljs.core.deref.call(null, cljs.reader._STAR_tag_table_STAR_), tag__$1);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_tag_table_STAR_, cljs.core.dissoc, tag__$1);
  return old_parser;
};
cljs.reader.register_default_tag_parser_BANG_ = function register_default_tag_parser_BANG_(f) {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return f;
    };
  }(old_parser));
  return old_parser;
};
cljs.reader.deregister_default_tag_parser_BANG_ = function deregister_default_tag_parser_BANG_() {
  var old_parser = cljs.core.deref.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_);
  cljs.core.swap_BANG_.call(null, cljs.reader._STAR_default_data_reader_fn_STAR_, function(old_parser) {
    return function(_) {
      return null;
    };
  }(old_parser));
  return old_parser;
};
goog.provide("ajax.core");
goog.require("cljs.core");
goog.require("goog.Uri");
goog.require("cognitect.transit");
goog.require("goog.net.XhrIo");
goog.require("goog.net.XhrManager");
goog.require("goog.net.XhrIo");
goog.require("goog.Uri.QueryData");
goog.require("goog.Uri");
goog.require("goog.Uri.QueryData");
goog.require("cognitect.transit");
goog.require("goog.net.EventType");
goog.require("goog.events");
goog.require("goog.structs");
goog.require("goog.structs");
goog.require("goog.json.Serializer");
goog.require("goog.net.XhrManager");
goog.require("clojure.string");
goog.require("clojure.string");
goog.require("cljs.reader");
goog.require("goog.events");
goog.require("cljs.reader");
goog.require("goog.net.ErrorCode");
ajax.core.AjaxImpl = function() {
  var obj6988 = {};
  return obj6988;
}();
ajax.core._js_ajax_request = function _js_ajax_request(this$, uri, method, body, headers, handler, opts) {
  if (function() {
    var and__3627__auto__ = this$;
    if (and__3627__auto__) {
      return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxImpl$_js_ajax_request$arity$7(this$, uri, method, body, headers, handler, opts);
  } else {
    var x__4275__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3639__auto__ = ajax.core._js_ajax_request[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = ajax.core._js_ajax_request["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxImpl.-js-ajax-request", this$);
        }
      }
    }().call(null, this$, uri, method, body, headers, handler, opts);
  }
};
ajax.core.AjaxRequest = function() {
  var obj6990 = {};
  return obj6990;
}();
ajax.core._abort = function _abort(this$, error_code) {
  if (function() {
    var and__3627__auto__ = this$;
    if (and__3627__auto__) {
      return this$.ajax$core$AjaxRequest$_abort$arity$2;
    } else {
      return and__3627__auto__;
    }
  }()) {
    return this$.ajax$core$AjaxRequest$_abort$arity$2(this$, error_code);
  } else {
    var x__4275__auto__ = this$ == null ? null : this$;
    return function() {
      var or__3639__auto__ = ajax.core._abort[goog.typeOf(x__4275__auto__)];
      if (or__3639__auto__) {
        return or__3639__auto__;
      } else {
        var or__3639__auto____$1 = ajax.core._abort["_"];
        if (or__3639__auto____$1) {
          return or__3639__auto____$1;
        } else {
          throw cljs.core.missing_protocol.call(null, "AjaxRequest.-abort", this$);
        }
      }
    }().call(null, this$, error_code);
  }
};
ajax.core.DirectlySubmittable = function() {
  var obj6992 = {};
  return obj6992;
}();
String.prototype.ajax$core$DirectlySubmittable$ = true;
FormData.prototype.ajax$core$DirectlySubmittable$ = true;
ajax.core.AjaxImpl["null"] = true;
ajax.core._js_ajax_request["null"] = function(this$, uri, method, body, headers, handler, p__6993) {
  var map__6994 = p__6993;
  var map__6994__$1 = cljs.core.seq_QMARK_.call(null, map__6994) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6994) : map__6994;
  var timeout = cljs.core.get.call(null, map__6994__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var G__6995 = new goog.net.XhrIo;
  goog.events.listen(G__6995, goog.net.EventType.COMPLETE, handler);
  G__6995.setTimeoutInterval(function() {
    var or__3639__auto__ = timeout;
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return 0;
    }
  }());
  G__6995.send(uri, method, body, headers);
  return G__6995;
};
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$ = true;
goog.net.XhrIo.prototype.ajax$core$AjaxRequest$_abort$arity$2 = function(this$, error_code) {
  var this$__$1 = this;
  return this$__$1.abort(error_code);
};
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$ = true;
goog.net.XhrManager.prototype.ajax$core$AjaxImpl$_js_ajax_request$arity$7 = function(this$, uri, method, body, headers, handler, p__6996) {
  var map__6997 = p__6996;
  var map__6997__$1 = cljs.core.seq_QMARK_.call(null, map__6997) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6997) : map__6997;
  var max_retries = cljs.core.get.call(null, map__6997__$1, new cljs.core.Keyword(null, "max-retries", "max-retries", -1933762121));
  var priority = cljs.core.get.call(null, map__6997__$1, new cljs.core.Keyword(null, "priority", "priority", 1431093715));
  var timeout = cljs.core.get.call(null, map__6997__$1, new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
  var id = cljs.core.get.call(null, map__6997__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var this$__$1 = this;
  return this$__$1.send(id, uri, method, body, headers, priority, handler, max_retries);
};
ajax.core.abort = function abort(this$) {
  return ajax.core._abort.call(null, this$, goog.net.ErrorCode.ABORT);
};
ajax.core.success_QMARK_ = function success_QMARK_(status) {
  return cljs.core.some.call(null, cljs.core.PersistentHashSet.fromArray([status], true), new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [200, 201, 202, 204, 205, 206], null));
};
ajax.core.read_edn = function read_edn(xhrio) {
  return cljs.reader.read_string.call(null, xhrio.getResponseText());
};
ajax.core.edn_response_format = function() {
  var edn_response_format = null;
  var edn_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_edn, new cljs.core.Keyword(null, "description", "description", -1428560544), "EDN"], null);
  };
  var edn_response_format__1 = function(opts) {
    return edn_response_format.call(null);
  };
  edn_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return edn_response_format__0.call(this);
      case 1:
        return edn_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  edn_response_format.cljs$core$IFn$_invoke$arity$0 = edn_response_format__0;
  edn_response_format.cljs$core$IFn$_invoke$arity$1 = edn_response_format__1;
  return edn_response_format;
}();
ajax.core.edn_request_format = function edn_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), cljs.core.pr_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/edn"], null);
};
ajax.core.transit_content_type = "application/transit+json; charset\x3dutf-8";
ajax.core.transit_write = function() {
  var transit_write = null;
  var transit_write__1 = function(writer) {
    return function(params) {
      return cognitect.transit.write.call(null, writer, params);
    };
  };
  var transit_write__2 = function(writer, params) {
    return cognitect.transit.write.call(null, writer, params);
  };
  transit_write = function(writer, params) {
    switch(arguments.length) {
      case 1:
        return transit_write__1.call(this, writer);
      case 2:
        return transit_write__2.call(this, writer, params);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_write.cljs$core$IFn$_invoke$arity$1 = transit_write__1;
  transit_write.cljs$core$IFn$_invoke$arity$2 = transit_write__2;
  return transit_write;
}();
ajax.core.transit_request_format = function() {
  var transit_request_format = null;
  var transit_request_format__0 = function() {
    return transit_request_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_request_format__1 = function(p__6998) {
    var map__7000 = p__6998;
    var map__7000__$1 = cljs.core.seq_QMARK_.call(null, map__7000) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7000) : map__7000;
    var opts = map__7000__$1;
    var writer = cljs.core.get.call(null, map__7000__$1, new cljs.core.Keyword(null, "writer", "writer", -277568236));
    var type = cljs.core.get.call(null, map__7000__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var writer__$1 = function() {
      var or__3639__auto__ = writer;
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return cognitect.transit.writer.call(null, function() {
          var or__3639__auto____$1 = type;
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.transit_write.call(null, writer__$1), new cljs.core.Keyword(null, "content-type", "content-type", -508222634), ajax.core.transit_content_type], null);
  };
  transit_request_format = function(p__6998) {
    switch(arguments.length) {
      case 0:
        return transit_request_format__0.call(this);
      case 1:
        return transit_request_format__1.call(this, p__6998);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_request_format.cljs$core$IFn$_invoke$arity$0 = transit_request_format__0;
  transit_request_format.cljs$core$IFn$_invoke$arity$1 = transit_request_format__1;
  return transit_request_format;
}();
ajax.core.transit_read = function() {
  var transit_read = null;
  var transit_read__1 = function(reader) {
    return function(raw, xhrio) {
      var text = xhrio.getResponseText();
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__2 = function(reader, raw) {
    return function(xhrio) {
      var text = xhrio.getResponseText();
      var data = cognitect.transit.read.call(null, reader, text);
      if (cljs.core.truth_(raw)) {
        return data;
      } else {
        return cljs.core.js__GT_clj.call(null, data);
      }
    };
  };
  var transit_read__3 = function(reader, raw, xhrio) {
    var text = xhrio.getResponseText();
    var data = cognitect.transit.read.call(null, reader, text);
    if (cljs.core.truth_(raw)) {
      return data;
    } else {
      return cljs.core.js__GT_clj.call(null, data);
    }
  };
  transit_read = function(reader, raw, xhrio) {
    switch(arguments.length) {
      case 1:
        return transit_read__1.call(this, reader);
      case 2:
        return transit_read__2.call(this, reader, raw);
      case 3:
        return transit_read__3.call(this, reader, raw, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_read.cljs$core$IFn$_invoke$arity$1 = transit_read__1;
  transit_read.cljs$core$IFn$_invoke$arity$2 = transit_read__2;
  transit_read.cljs$core$IFn$_invoke$arity$3 = transit_read__3;
  return transit_read;
}();
ajax.core.transit_response_format = function() {
  var transit_response_format = null;
  var transit_response_format__0 = function() {
    return transit_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var transit_response_format__1 = function(p__7001) {
    var map__7003 = p__7001;
    var map__7003__$1 = cljs.core.seq_QMARK_.call(null, map__7003) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7003) : map__7003;
    var opts = map__7003__$1;
    var raw = cljs.core.get.call(null, map__7003__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var reader = cljs.core.get.call(null, map__7003__$1, new cljs.core.Keyword(null, "reader", "reader", 169660853));
    var type = cljs.core.get.call(null, map__7003__$1, new cljs.core.Keyword(null, "type", "type", 1174270348));
    var reader__$1 = function() {
      var or__3639__auto__ = reader;
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return cognitect.transit.reader.call(null, function() {
          var or__3639__auto____$1 = reader;
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            return new cljs.core.Keyword(null, "json", "json", 1279968570);
          }
        }(), opts);
      }
    }();
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.transit_read.call(null, reader__$1, raw), new cljs.core.Keyword(null, "description", "description", -1428560544), "Transit"], null);
  };
  transit_response_format = function(p__7001) {
    switch(arguments.length) {
      case 0:
        return transit_response_format__0.call(this);
      case 1:
        return transit_response_format__1.call(this, p__7001);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  transit_response_format.cljs$core$IFn$_invoke$arity$0 = transit_response_format__0;
  transit_response_format.cljs$core$IFn$_invoke$arity$1 = transit_response_format__1;
  return transit_response_format;
}();
ajax.core.params_to_str = function params_to_str(params) {
  if (cljs.core.truth_(params)) {
    return goog.Uri.QueryData.createFromMap(new goog.structs.Map(cljs.core.clj__GT_js.call(null, params))).toString();
  } else {
    return null;
  }
};
ajax.core.read_text = function read_text(xhrio) {
  return xhrio.getResponseText();
};
ajax.core.url_request_format = function url_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.params_to_str, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/x-www-form-urlencoded"], null);
};
ajax.core.raw_response_format = function() {
  var raw_response_format = null;
  var raw_response_format__0 = function() {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.read_text, new cljs.core.Keyword(null, "description", "description", -1428560544), "raw text"], null);
  };
  var raw_response_format__1 = function(opts) {
    return raw_response_format.call(null);
  };
  raw_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return raw_response_format__0.call(this);
      case 1:
        return raw_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  raw_response_format.cljs$core$IFn$_invoke$arity$0 = raw_response_format__0;
  raw_response_format.cljs$core$IFn$_invoke$arity$1 = raw_response_format__1;
  return raw_response_format;
}();
ajax.core.write_json = function write_json(data) {
  return(new goog.json.Serializer).serialize(cljs.core.clj__GT_js.call(null, data));
};
ajax.core.json_request_format = function json_request_format() {
  return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), ajax.core.write_json, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "application/json"], null);
};
ajax.core.json_read = function() {
  var json_read = null;
  var json_read__1 = function(prefix) {
    return function(raw, keywords_QMARK_, xhrio) {
      var json = xhrio.getResponseJson(prefix);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__2 = function(prefix, raw) {
    return function(keywords_QMARK_, xhrio) {
      var json = xhrio.getResponseJson(prefix);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__3 = function(prefix, raw, keywords_QMARK_) {
    return function(xhrio) {
      var json = xhrio.getResponseJson(prefix);
      if (cljs.core.truth_(raw)) {
        return json;
      } else {
        return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
      }
    };
  };
  var json_read__4 = function(prefix, raw, keywords_QMARK_, xhrio) {
    var json = xhrio.getResponseJson(prefix);
    if (cljs.core.truth_(raw)) {
      return json;
    } else {
      return cljs.core.js__GT_clj.call(null, json, new cljs.core.Keyword(null, "keywordize-keys", "keywordize-keys", 1310784252), keywords_QMARK_);
    }
  };
  json_read = function(prefix, raw, keywords_QMARK_, xhrio) {
    switch(arguments.length) {
      case 1:
        return json_read__1.call(this, prefix);
      case 2:
        return json_read__2.call(this, prefix, raw);
      case 3:
        return json_read__3.call(this, prefix, raw, keywords_QMARK_);
      case 4:
        return json_read__4.call(this, prefix, raw, keywords_QMARK_, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_read.cljs$core$IFn$_invoke$arity$1 = json_read__1;
  json_read.cljs$core$IFn$_invoke$arity$2 = json_read__2;
  json_read.cljs$core$IFn$_invoke$arity$3 = json_read__3;
  json_read.cljs$core$IFn$_invoke$arity$4 = json_read__4;
  return json_read;
}();
ajax.core.json_response_format = function() {
  var json_response_format = null;
  var json_response_format__0 = function() {
    return json_response_format.call(null, cljs.core.PersistentArrayMap.EMPTY);
  };
  var json_response_format__1 = function(p__7004) {
    var map__7006 = p__7004;
    var map__7006__$1 = cljs.core.seq_QMARK_.call(null, map__7006) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7006) : map__7006;
    var raw = cljs.core.get.call(null, map__7006__$1, new cljs.core.Keyword(null, "raw", "raw", 1604651272));
    var keywords_QMARK_ = cljs.core.get.call(null, map__7006__$1, new cljs.core.Keyword(null, "keywords?", "keywords?", 764949733));
    var prefix = cljs.core.get.call(null, map__7006__$1, new cljs.core.Keyword(null, "prefix", "prefix", -265908465));
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.json_read.call(null, prefix, raw, keywords_QMARK_), new cljs.core.Keyword(null, "description", "description", -1428560544), "JSON" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(prefix) ? " prefix '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix) + "'" : null) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(keywords_QMARK_) ? " keywordize" : 
    null)], null);
  };
  json_response_format = function(p__7004) {
    switch(arguments.length) {
      case 0:
        return json_response_format__0.call(this);
      case 1:
        return json_response_format__1.call(this, p__7004);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  json_response_format.cljs$core$IFn$_invoke$arity$0 = json_response_format__0;
  json_response_format.cljs$core$IFn$_invoke$arity$1 = json_response_format__1;
  return json_response_format;
}();
ajax.core.get_response_format = function get_response_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
    } else {
      throw new Error("unrecognized response format: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(format));
    }
  }
};
ajax.core.exception_response = function exception_response(e, status, p__7007, xhrio) {
  var map__7009 = p__7007;
  var map__7009__$1 = cljs.core.seq_QMARK_.call(null, map__7009) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7009) : map__7009;
  var description = cljs.core.get.call(null, map__7009__$1, new cljs.core.Keyword(null, "description", "description", -1428560544));
  var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), null], null);
  var status_text = "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(e.message) + "  Format should have been " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(description);
  var parse_error = cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), new cljs.core.Keyword(null, "parse", "parse", -1162164619), new cljs.core.Keyword(null, "original-text", "original-text", 744448452), xhrio.getResponseText());
  if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
    return parse_error;
  } else {
    return cljs.core.assoc.call(null, response, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), xhrio.getStatusText(), new cljs.core.Keyword(null, "parse-error", "parse-error", 255902478), parse_error);
  }
};
ajax.core.fail = function() {
  var fail__delegate = function(status, status_text, failure, params) {
    var response = new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "status", "status", -1997798413), status, new cljs.core.Keyword(null, "status-text", "status-text", -1834235478), status_text, new cljs.core.Keyword(null, "failure", "failure", 720415879), failure], null);
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, cljs.core.reduce.call(null, cljs.core.conj, response, cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, params)))], null);
  };
  var fail = function(status, status_text, failure, var_args) {
    var params = null;
    if (arguments.length > 3) {
      params = cljs.core.array_seq(Array.prototype.slice.call(arguments, 3), 0);
    }
    return fail__delegate.call(this, status, status_text, failure, params);
  };
  fail.cljs$lang$maxFixedArity = 3;
  fail.cljs$lang$applyTo = function(arglist__7010) {
    var status = cljs.core.first(arglist__7010);
    arglist__7010 = cljs.core.next(arglist__7010);
    var status_text = cljs.core.first(arglist__7010);
    arglist__7010 = cljs.core.next(arglist__7010);
    var failure = cljs.core.first(arglist__7010);
    var params = cljs.core.rest(arglist__7010);
    return fail__delegate(status, status_text, failure, params);
  };
  fail.cljs$core$IFn$_invoke$arity$variadic = fail__delegate;
  return fail;
}();
ajax.core.interpret_response = function interpret_response(p__7011, response) {
  var map__7015 = p__7011;
  var map__7015__$1 = cljs.core.seq_QMARK_.call(null, map__7015) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7015) : map__7015;
  var format = map__7015__$1;
  var read = cljs.core.get.call(null, map__7015__$1, new cljs.core.Keyword(null, "read", "read", 1140058661));
  try {
    var xhrio = response.target;
    var status = xhrio.getStatus();
    var fail = cljs.core.partial.call(null, ajax.core.fail, status);
    if (cljs.core._EQ_.call(null, -1, status)) {
      if (cljs.core._EQ_.call(null, xhrio.getLastErrorCode(), goog.net.ErrorCode.ABORT)) {
        return fail.call(null, "Request aborted by client.", new cljs.core.Keyword(null, "aborted", "aborted", 1775972619));
      } else {
        return fail.call(null, "Request timed out.", new cljs.core.Keyword(null, "timeout", "timeout", -318625318));
      }
    } else {
      try {
        var response__$1 = read.call(null, xhrio);
        if (cljs.core.truth_(ajax.core.success_QMARK_.call(null, status))) {
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [true, response__$1], null);
        } else {
          return fail.call(null, xhrio.getStatusText(), new cljs.core.Keyword(null, "error", "error", -978969032), new cljs.core.Keyword(null, "response", "response", -1068424192), response__$1);
        }
      } catch (e7017) {
        if (e7017 instanceof Object) {
          var e = e7017;
          return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [false, ajax.core.exception_response.call(null, e, status, format, xhrio)], null);
        } else {
          throw e7017;
        }
      }
    }
  } catch (e7016) {
    if (e7016 instanceof Object) {
      var e = e7016;
      return ajax.core.fail.call(null, 0, e.message, new cljs.core.Keyword(null, "exception", "exception", -335277064), new cljs.core.Keyword(null, "exception", "exception", -335277064), e);
    } else {
      throw e7016;
    }
  }
};
ajax.core.no_format = function no_format(xhrio) {
  throw new Error("No response format was supplied.");
};
ajax.core.uri_with_params = function uri_with_params(uri, params) {
  if (cljs.core.truth_(params)) {
    return "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(uri) + "?" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(ajax.core.params_to_str.call(null, params));
  } else {
    return uri;
  }
};
ajax.core.get_request_format = function get_request_format(format) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.ifn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "write", "write", -1857649168), format, new cljs.core.Keyword(null, "content-type", "content-type", -508222634), "text/plain"], null);
    } else {
      return null;
    }
  }
};
ajax.core.normalize_method = function normalize_method(method) {
  if (method instanceof cljs.core.Keyword) {
    return clojure.string.upper_case.call(null, cljs.core.name.call(null, method));
  } else {
    return method;
  }
};
ajax.core.process_inputs = function process_inputs(p__7018) {
  var map__7022 = p__7018;
  var map__7022__$1 = cljs.core.seq_QMARK_.call(null, map__7022) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7022) : map__7022;
  var headers = cljs.core.get.call(null, map__7022__$1, new cljs.core.Keyword(null, "headers", "headers", -835030129));
  var params = cljs.core.get.call(null, map__7022__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var format = cljs.core.get.call(null, map__7022__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__7022__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__7022__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  if (cljs.core._EQ_.call(null, ajax.core.normalize_method.call(null, method), "GET")) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [ajax.core.uri_with_params.call(null, uri, params), null, headers], null);
  } else {
    var map__7023 = ajax.core.get_request_format.call(null, format);
    var map__7023__$1 = cljs.core.seq_QMARK_.call(null, map__7023) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7023) : map__7023;
    var content_type = cljs.core.get.call(null, map__7023__$1, new cljs.core.Keyword(null, "content-type", "content-type", -508222634));
    var write = cljs.core.get.call(null, map__7023__$1, new cljs.core.Keyword(null, "write", "write", -1857649168));
    var body = !(write == null) ? write.call(null, params) : function() {
      var G__7024 = params;
      if (G__7024) {
        var bit__4302__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3639__auto__ = bit__4302__auto__;
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return G__7024.ajax$core$DirectlySubmittable$;
          }
        }())) {
          return true;
        } else {
          if (!G__7024.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__7024);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__7024);
      }
    }() ? params : function() {
      throw new Error("unrecognized request format: " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(format));
    }();
    var content_type__$1 = cljs.core.truth_(content_type) ? new cljs.core.PersistentArrayMap(null, 1, ["Content-Type", content_type], null) : null;
    var headers__$1 = cljs.core.merge.call(null, function() {
      var or__3639__auto__ = headers;
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return cljs.core.PersistentArrayMap.EMPTY;
      }
    }(), content_type__$1);
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [uri, body, headers__$1], null);
  }
};
ajax.core.js_handler = function() {
  var js_handler = null;
  var js_handler__1 = function(response_format) {
    return function(handler, xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__2 = function(response_format, handler) {
    return function(xhrio) {
      var response = ajax.core.interpret_response.call(null, response_format, xhrio);
      return handler.call(null, response);
    };
  };
  var js_handler__3 = function(response_format, handler, xhrio) {
    var response = ajax.core.interpret_response.call(null, response_format, xhrio);
    return handler.call(null, response);
  };
  js_handler = function(response_format, handler, xhrio) {
    switch(arguments.length) {
      case 1:
        return js_handler__1.call(this, response_format);
      case 2:
        return js_handler__2.call(this, response_format, handler);
      case 3:
        return js_handler__3.call(this, response_format, handler, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  js_handler.cljs$core$IFn$_invoke$arity$1 = js_handler__1;
  js_handler.cljs$core$IFn$_invoke$arity$2 = js_handler__2;
  js_handler.cljs$core$IFn$_invoke$arity$3 = js_handler__3;
  return js_handler;
}();
ajax.core.base_handler = function base_handler(response_format, p__7025) {
  var map__7027 = p__7025;
  var map__7027__$1 = cljs.core.seq_QMARK_.call(null, map__7027) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7027) : map__7027;
  var handler = cljs.core.get.call(null, map__7027__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  if (cljs.core.truth_(handler)) {
    return ajax.core.js_handler.call(null, response_format, handler);
  } else {
    throw new Error("No ajax handler provided.");
  }
};
ajax.core.ajax_request = function ajax_request(p__7028) {
  var map__7031 = p__7028;
  var map__7031__$1 = cljs.core.seq_QMARK_.call(null, map__7031) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7031) : map__7031;
  var opts = map__7031__$1;
  var manager = cljs.core.get.call(null, map__7031__$1, new cljs.core.Keyword(null, "manager", "manager", -818607470));
  var response_format = cljs.core.get.call(null, map__7031__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var method = cljs.core.get.call(null, map__7031__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var uri = cljs.core.get.call(null, map__7031__$1, new cljs.core.Keyword(null, "uri", "uri", -774711847));
  var response_format__$1 = ajax.core.get_response_format.call(null, response_format);
  var method__$1 = ajax.core.normalize_method.call(null, method);
  var vec__7032 = ajax.core.process_inputs.call(null, opts);
  var uri__$1 = cljs.core.nth.call(null, vec__7032, 0, null);
  var body = cljs.core.nth.call(null, vec__7032, 1, null);
  var headers = cljs.core.nth.call(null, vec__7032, 2, null);
  var handler = ajax.core.base_handler.call(null, response_format__$1, opts);
  return ajax.core._js_ajax_request.call(null, manager, uri__$1, method__$1, body, cljs.core.clj__GT_js.call(null, headers), handler, opts);
};
ajax.core.default_formats = new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/json", ajax.core.json_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/edn", ajax.core.edn_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/plain", ajax.core.raw_response_format], 
null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["text/html", ajax.core.raw_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, ["application/transit+json", ajax.core.transit_response_format], null), new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null, ajax.core.raw_response_format], null)], null);
ajax.core.detect_content_type = function() {
  var detect_content_type = null;
  var detect_content_type__1 = function(content_type) {
    return function(p__7038) {
      var vec__7039 = p__7038;
      var substring = cljs.core.nth.call(null, vec__7039, 0, null);
      return substring == null || content_type.indexOf(substring) >= 0;
    };
  };
  var detect_content_type__2 = function(content_type, p__7033) {
    var vec__7037 = p__7033;
    var substring = cljs.core.nth.call(null, vec__7037, 0, null);
    return substring == null || content_type.indexOf(substring) >= 0;
  };
  detect_content_type = function(content_type, p__7033) {
    switch(arguments.length) {
      case 1:
        return detect_content_type__1.call(this, content_type);
      case 2:
        return detect_content_type__2.call(this, content_type, p__7033);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_content_type.cljs$core$IFn$_invoke$arity$1 = detect_content_type__1;
  detect_content_type.cljs$core$IFn$_invoke$arity$2 = detect_content_type__2;
  return detect_content_type;
}();
ajax.core.get_default_format = function get_default_format(xhrio, p__7040) {
  var map__7042 = p__7040;
  var map__7042__$1 = cljs.core.seq_QMARK_.call(null, map__7042) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7042) : map__7042;
  var opts = map__7042__$1;
  var defaults = cljs.core.get.call(null, map__7042__$1, new cljs.core.Keyword(null, "defaults", "defaults", 976027214));
  var f = ajax.core.detect_content_type.call(null, function() {
    var or__3639__auto__ = xhrio.getResponseHeader("Content-Type");
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return "";
    }
  }());
  return cljs.core.second.call(null, cljs.core.first.call(null, cljs.core.filter.call(null, f, defaults))).call(null, opts);
};
ajax.core.detect_response_format_read = function() {
  var detect_response_format_read = null;
  var detect_response_format_read__1 = function(opts) {
    return function(xhrio) {
      return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
    };
  };
  var detect_response_format_read__2 = function(opts, xhrio) {
    return(new cljs.core.Keyword(null, "read", "read", 1140058661)).cljs$core$IFn$_invoke$arity$1(ajax.core.get_default_format.call(null, xhrio, opts)).call(null, xhrio);
  };
  detect_response_format_read = function(opts, xhrio) {
    switch(arguments.length) {
      case 1:
        return detect_response_format_read__1.call(this, opts);
      case 2:
        return detect_response_format_read__2.call(this, opts, xhrio);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format_read.cljs$core$IFn$_invoke$arity$1 = detect_response_format_read__1;
  detect_response_format_read.cljs$core$IFn$_invoke$arity$2 = detect_response_format_read__2;
  return detect_response_format_read;
}();
ajax.core.detect_response_format = function() {
  var detect_response_format = null;
  var detect_response_format__0 = function() {
    return detect_response_format.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "defaults", "defaults", 976027214), ajax.core.default_formats], null));
  };
  var detect_response_format__1 = function(opts) {
    return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), ajax.core.detect_response_format_read.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), "(from content type)"], null);
  };
  detect_response_format = function(opts) {
    switch(arguments.length) {
      case 0:
        return detect_response_format__0.call(this);
      case 1:
        return detect_response_format__1.call(this, opts);
    }
    throw new Error("Invalid arity: " + arguments.length);
  };
  detect_response_format.cljs$core$IFn$_invoke$arity$0 = detect_response_format__0;
  detect_response_format.cljs$core$IFn$_invoke$arity$1 = detect_response_format__1;
  return detect_response_format;
}();
ajax.core.keyword_request_format = function keyword_request_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "write", "write", -1857649168), format], null);
    } else {
      if (format == null) {
        return ajax.core.transit_request_format.call(null, format_params);
      } else {
        var G__7044 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__7044) {
          case "url":
            return ajax.core.url_request_format.call(null);
            break;
          case "raw":
            return ajax.core.url_request_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_request_format.call(null);
            break;
          case "json":
            return ajax.core.json_request_format.call(null);
            break;
          case "transit":
            return ajax.core.transit_request_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.keyword_response_format = function keyword_response_format(format, format_params) {
  if (cljs.core.map_QMARK_.call(null, format)) {
    return format;
  } else {
    if (cljs.core.fn_QMARK_.call(null, format)) {
      return new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "read", "read", 1140058661), format, new cljs.core.Keyword(null, "description", "description", -1428560544), "custom"], null);
    } else {
      if (format == null) {
        return ajax.core.detect_response_format.call(null);
      } else {
        var G__7047 = format instanceof cljs.core.Keyword ? format.fqn : null;
        switch(G__7047) {
          case "detect":
            return ajax.core.detect_response_format.call(null);
            break;
          case "raw":
            return ajax.core.raw_response_format.call(null);
            break;
          case "edn":
            return ajax.core.edn_response_format.call(null);
            break;
          case "json":
            return ajax.core.json_response_format.call(null, format_params);
            break;
          case "transit":
            return ajax.core.transit_response_format.call(null, format_params);
            break;
          default:
            return null;
        }
      }
    }
  }
};
ajax.core.transform_handler = function transform_handler(p__7049) {
  var map__7054 = p__7049;
  var map__7054__$1 = cljs.core.seq_QMARK_.call(null, map__7054) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7054) : map__7054;
  var finally$ = cljs.core.get.call(null, map__7054__$1, new cljs.core.Keyword(null, "finally", "finally", 1589088705));
  var error_handler = cljs.core.get.call(null, map__7054__$1, new cljs.core.Keyword(null, "error-handler", "error-handler", -484945776));
  var handler = cljs.core.get.call(null, map__7054__$1, new cljs.core.Keyword(null, "handler", "handler", -195596612));
  return function(map__7054, map__7054__$1, finally$, error_handler, handler) {
    return function easy_handler(p__7055) {
      var vec__7057 = p__7055;
      var ok = cljs.core.nth.call(null, vec__7057, 0, null);
      var result = cljs.core.nth.call(null, vec__7057, 1, null);
      var temp__4124__auto___7058 = cljs.core.truth_(ok) ? handler : error_handler;
      if (cljs.core.truth_(temp__4124__auto___7058)) {
        var h_7059 = temp__4124__auto___7058;
        h_7059.call(null, result);
      } else {
      }
      if (cljs.core.fn_QMARK_.call(null, finally$)) {
        return finally$.call(null);
      } else {
        return null;
      }
    };
  }(map__7054, map__7054__$1, finally$, error_handler, handler);
};
ajax.core.transform_opts = function transform_opts(p__7060) {
  var map__7064 = p__7060;
  var map__7064__$1 = cljs.core.seq_QMARK_.call(null, map__7064) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7064) : map__7064;
  var opts = map__7064__$1;
  var params = cljs.core.get.call(null, map__7064__$1, new cljs.core.Keyword(null, "params", "params", 710516235));
  var response_format = cljs.core.get.call(null, map__7064__$1, new cljs.core.Keyword(null, "response-format", "response-format", 1664465322));
  var format = cljs.core.get.call(null, map__7064__$1, new cljs.core.Keyword(null, "format", "format", -1306924766));
  var method = cljs.core.get.call(null, map__7064__$1, new cljs.core.Keyword(null, "method", "method", 55703592));
  var needs_format = !function() {
    var or__3639__auto__ = function() {
      var G__7066 = params;
      if (G__7066) {
        var bit__4302__auto__ = null;
        if (cljs.core.truth_(function() {
          var or__3639__auto__ = bit__4302__auto__;
          if (cljs.core.truth_(or__3639__auto__)) {
            return or__3639__auto__;
          } else {
            return G__7066.ajax$core$DirectlySubmittable$;
          }
        }())) {
          return true;
        } else {
          if (!G__7066.cljs$lang$protocol_mask$partition$) {
            return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__7066);
          } else {
            return false;
          }
        }
      } else {
        return cljs.core.native_satisfies_QMARK_.call(null, ajax.core.DirectlySubmittable, G__7066);
      }
    }();
    if (or__3639__auto__) {
      return or__3639__auto__;
    } else {
      return cljs.core._EQ_.call(null, method, "GET");
    }
  }();
  var rf = cljs.core.truth_(function() {
    var or__3639__auto__ = format;
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return needs_format;
    }
  }()) ? ajax.core.keyword_request_format.call(null, format, opts) : null;
  return cljs.core.assoc.call(null, opts, new cljs.core.Keyword(null, "handler", "handler", -195596612), ajax.core.transform_handler.call(null, opts), new cljs.core.Keyword(null, "format", "format", -1306924766), function() {
    var or__3639__auto__ = rf;
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      if (needs_format) {
        throw new Error("unrecognized request format: '" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(function() {
          var or__3639__auto____$1 = format;
          if (cljs.core.truth_(or__3639__auto____$1)) {
            return or__3639__auto____$1;
          } else {
            return "NIL";
          }
        }()) + "'");
      } else {
        return null;
      }
    }
  }(), new cljs.core.Keyword(null, "response-format", "response-format", 1664465322), ajax.core.keyword_response_format.call(null, response_format, opts));
};
ajax.core.easy_ajax_request = function easy_ajax_request(uri, method, opts) {
  return ajax.core.ajax_request.call(null, cljs.core.assoc.call(null, ajax.core.transform_opts.call(null, opts), new cljs.core.Keyword(null, "uri", "uri", -774711847), uri, new cljs.core.Keyword(null, "method", "method", 55703592), method));
};
ajax.core.GET = function() {
  var GET__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "GET", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var GET = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return GET__delegate.call(this, uri, opts);
  };
  GET.cljs$lang$maxFixedArity = 1;
  GET.cljs$lang$applyTo = function(arglist__7067) {
    var uri = cljs.core.first(arglist__7067);
    var opts = cljs.core.rest(arglist__7067);
    return GET__delegate(uri, opts);
  };
  GET.cljs$core$IFn$_invoke$arity$variadic = GET__delegate;
  return GET;
}();
ajax.core.HEAD = function() {
  var HEAD__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "HEAD", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var HEAD = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return HEAD__delegate.call(this, uri, opts);
  };
  HEAD.cljs$lang$maxFixedArity = 1;
  HEAD.cljs$lang$applyTo = function(arglist__7068) {
    var uri = cljs.core.first(arglist__7068);
    var opts = cljs.core.rest(arglist__7068);
    return HEAD__delegate(uri, opts);
  };
  HEAD.cljs$core$IFn$_invoke$arity$variadic = HEAD__delegate;
  return HEAD;
}();
ajax.core.POST = function() {
  var POST__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "POST", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var POST = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return POST__delegate.call(this, uri, opts);
  };
  POST.cljs$lang$maxFixedArity = 1;
  POST.cljs$lang$applyTo = function(arglist__7069) {
    var uri = cljs.core.first(arglist__7069);
    var opts = cljs.core.rest(arglist__7069);
    return POST__delegate(uri, opts);
  };
  POST.cljs$core$IFn$_invoke$arity$variadic = POST__delegate;
  return POST;
}();
ajax.core.PUT = function() {
  var PUT__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "PUT", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var PUT = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return PUT__delegate.call(this, uri, opts);
  };
  PUT.cljs$lang$maxFixedArity = 1;
  PUT.cljs$lang$applyTo = function(arglist__7070) {
    var uri = cljs.core.first(arglist__7070);
    var opts = cljs.core.rest(arglist__7070);
    return PUT__delegate(uri, opts);
  };
  PUT.cljs$core$IFn$_invoke$arity$variadic = PUT__delegate;
  return PUT;
}();
ajax.core.DELETE = function() {
  var DELETE__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "DELETE", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var DELETE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return DELETE__delegate.call(this, uri, opts);
  };
  DELETE.cljs$lang$maxFixedArity = 1;
  DELETE.cljs$lang$applyTo = function(arglist__7071) {
    var uri = cljs.core.first(arglist__7071);
    var opts = cljs.core.rest(arglist__7071);
    return DELETE__delegate(uri, opts);
  };
  DELETE.cljs$core$IFn$_invoke$arity$variadic = DELETE__delegate;
  return DELETE;
}();
ajax.core.OPTIONS = function() {
  var OPTIONS__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "OPTIONS", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var OPTIONS = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return OPTIONS__delegate.call(this, uri, opts);
  };
  OPTIONS.cljs$lang$maxFixedArity = 1;
  OPTIONS.cljs$lang$applyTo = function(arglist__7072) {
    var uri = cljs.core.first(arglist__7072);
    var opts = cljs.core.rest(arglist__7072);
    return OPTIONS__delegate(uri, opts);
  };
  OPTIONS.cljs$core$IFn$_invoke$arity$variadic = OPTIONS__delegate;
  return OPTIONS;
}();
ajax.core.TRACE = function() {
  var TRACE__delegate = function(uri, opts) {
    var f__6879__auto__ = cljs.core.first.call(null, opts);
    return ajax.core.easy_ajax_request.call(null, uri, "TRACE", f__6879__auto__ instanceof cljs.core.Keyword ? cljs.core.apply.call(null, cljs.core.hash_map, opts) : f__6879__auto__);
  };
  var TRACE = function(uri, var_args) {
    var opts = null;
    if (arguments.length > 1) {
      opts = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return TRACE__delegate.call(this, uri, opts);
  };
  TRACE.cljs$lang$maxFixedArity = 1;
  TRACE.cljs$lang$applyTo = function(arglist__7073) {
    var uri = cljs.core.first(arglist__7073);
    var opts = cljs.core.rest(arglist__7073);
    return TRACE__delegate(uri, opts);
  };
  TRACE.cljs$core$IFn$_invoke$arity$variadic = TRACE__delegate;
  return TRACE;
}();
goog.provide("quiescent");
goog.require("cljs.core");
quiescent.js_props = function js_props(obj) {
  if (cljs.core.map_QMARK_.call(null, obj)) {
    var o = function() {
      var obj10922 = {};
      return obj10922;
    }();
    var seq__10923_10929 = cljs.core.seq.call(null, obj);
    var chunk__10924_10930 = null;
    var count__10925_10931 = 0;
    var i__10926_10932 = 0;
    while (true) {
      if (i__10926_10932 < count__10925_10931) {
        var vec__10927_10933 = cljs.core._nth.call(null, chunk__10924_10930, i__10926_10932);
        var k_10934 = cljs.core.nth.call(null, vec__10927_10933, 0, null);
        var v_10935 = cljs.core.nth.call(null, vec__10927_10933, 1, null);
        o[cljs.core.name.call(null, k_10934)] = js_props.call(null, v_10935);
        var G__10936 = seq__10923_10929;
        var G__10937 = chunk__10924_10930;
        var G__10938 = count__10925_10931;
        var G__10939 = i__10926_10932 + 1;
        seq__10923_10929 = G__10936;
        chunk__10924_10930 = G__10937;
        count__10925_10931 = G__10938;
        i__10926_10932 = G__10939;
        continue;
      } else {
        var temp__4126__auto___10940 = cljs.core.seq.call(null, seq__10923_10929);
        if (temp__4126__auto___10940) {
          var seq__10923_10941__$1 = temp__4126__auto___10940;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__10923_10941__$1)) {
            var c__4408__auto___10942 = cljs.core.chunk_first.call(null, seq__10923_10941__$1);
            var G__10943 = cljs.core.chunk_rest.call(null, seq__10923_10941__$1);
            var G__10944 = c__4408__auto___10942;
            var G__10945 = cljs.core.count.call(null, c__4408__auto___10942);
            var G__10946 = 0;
            seq__10923_10929 = G__10943;
            chunk__10924_10930 = G__10944;
            count__10925_10931 = G__10945;
            i__10926_10932 = G__10946;
            continue;
          } else {
            var vec__10928_10947 = cljs.core.first.call(null, seq__10923_10941__$1);
            var k_10948 = cljs.core.nth.call(null, vec__10928_10947, 0, null);
            var v_10949 = cljs.core.nth.call(null, vec__10928_10947, 1, null);
            o[cljs.core.name.call(null, k_10948)] = js_props.call(null, v_10949);
            var G__10950 = cljs.core.next.call(null, seq__10923_10941__$1);
            var G__10951 = null;
            var G__10952 = 0;
            var G__10953 = 0;
            seq__10923_10929 = G__10950;
            chunk__10924_10930 = G__10951;
            count__10925_10931 = G__10952;
            i__10926_10932 = G__10953;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return o;
  } else {
    return obj;
  }
};
quiescent._STAR_component_STAR_ = null;
quiescent.component = function component(renderer) {
  var react_component = React.createClass({"render":function() {
    var this$ = this;
    var _STAR_component_STAR_10955 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return cljs.core.apply.call(null, renderer, this$.props["value"], this$.props["statics"]);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_10955;
    }
  }, "shouldComponentUpdate":function(next_props, _) {
    var this$ = this;
    return cljs.core.not_EQ_.call(null, this$.props["value"], next_props["value"]);
  }});
  return function(react_component) {
    return function() {
      var G__10956__delegate = function(value, static_args) {
        return react_component.call(null, {"statics":static_args, "value":value});
      };
      var G__10956 = function(value, var_args) {
        var static_args = null;
        if (arguments.length > 1) {
          static_args = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
        }
        return G__10956__delegate.call(this, value, static_args);
      };
      G__10956.cljs$lang$maxFixedArity = 1;
      G__10956.cljs$lang$applyTo = function(arglist__10957) {
        var value = cljs.core.first(arglist__10957);
        var static_args = cljs.core.rest(arglist__10957);
        return G__10956__delegate(value, static_args);
      };
      G__10956.cljs$core$IFn$_invoke$arity$variadic = G__10956__delegate;
      return G__10956;
    }();
  }(react_component);
};
quiescent.WrapperComponent = React.createClass({"componentWillUnmount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillUnmount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_10962 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_10962;
    }
  } else {
    return null;
  }
}, "componentWillUpdate":function(_, ___$1) {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillUpdate"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_10961 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_10961;
    }
  } else {
    return null;
  }
}, "componentWillMount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onWillMount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_10960 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null);
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_10960;
    }
  } else {
    return null;
  }
}, "componentDidMount":function() {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onMount"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_10959 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_10959;
    }
  } else {
    return null;
  }
}, "componentDidUpdate":function(prev_props, prev_state) {
  var this$ = this;
  var temp__4126__auto__ = this$.props["onUpdate"];
  if (cljs.core.truth_(temp__4126__auto__)) {
    var f = temp__4126__auto__;
    var _STAR_component_STAR_10958 = quiescent._STAR_component_STAR_;
    try {
      quiescent._STAR_component_STAR_ = this$;
      return f.call(null, this$.getDOMNode());
    } finally {
      quiescent._STAR_component_STAR_ = _STAR_component_STAR_10958;
    }
  } else {
    return null;
  }
}, "render":function() {
  var this$ = this;
  return this$.props["wrappee"];
}});
quiescent.wrapper = function() {
  var wrapper__delegate = function(child, kvs) {
    var props = quiescent.js_props.call(null, cljs.core.apply.call(null, cljs.core.array_map, new cljs.core.Keyword(null, "wrappee", "wrappee", 876822573), child, kvs));
    var temp__4126__auto___10963 = child.props["key"];
    if (cljs.core.truth_(temp__4126__auto___10963)) {
      var key_10964 = temp__4126__auto___10963;
      props["key"] = key_10964;
    } else {
    }
    return quiescent.WrapperComponent.call(null, props);
  };
  var wrapper = function(child, var_args) {
    var kvs = null;
    if (arguments.length > 1) {
      kvs = cljs.core.array_seq(Array.prototype.slice.call(arguments, 1), 0);
    }
    return wrapper__delegate.call(this, child, kvs);
  };
  wrapper.cljs$lang$maxFixedArity = 1;
  wrapper.cljs$lang$applyTo = function(arglist__10965) {
    var child = cljs.core.first(arglist__10965);
    var kvs = cljs.core.rest(arglist__10965);
    return wrapper__delegate(child, kvs);
  };
  wrapper.cljs$core$IFn$_invoke$arity$variadic = wrapper__delegate;
  return wrapper;
}();
quiescent.on_update = function on_update(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onUpdate", "onUpdate", -315358968), f);
};
quiescent.on_mount = function on_mount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onMount", "onMount", -876858467), f);
};
quiescent.on_render = function on_render(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onMount", "onMount", -876858467), f, new cljs.core.Keyword(null, "onUpdate", "onUpdate", -315358968), f);
};
quiescent.on_will_mount = function on_will_mount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillMount", "onWillMount", -2065876946), f);
};
quiescent.on_will_update = function on_will_update(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillUpdate", "onWillUpdate", 1307659073), f);
};
quiescent.on_will_render = function on_will_render(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillMount", "onWillMount", -2065876946), f, new cljs.core.Keyword(null, "onWillUpdate", "onWillUpdate", 1307659073), f);
};
quiescent.on_will_unmount = function on_will_unmount(child, f) {
  return quiescent.wrapper.call(null, child, new cljs.core.Keyword(null, "onWillUnmount", "onWillUnmount", -16104606), f);
};
quiescent.render = function render(component, node) {
  return React.renderComponent(component, node);
};
goog.provide("quiescent.dom");
goog.require("cljs.core");
goog.require("quiescent");
goog.require("quiescent");
quiescent.dom.a = function() {
  var a__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7347_8295 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7348_8296 = null;
    var count__7349_8297 = 0;
    var i__7350_8298 = 0;
    while (true) {
      if (i__7350_8298 < count__7349_8297) {
        var arg__5130__auto___8299 = cljs.core._nth.call(null, chunk__7348_8296, i__7350_8298);
        a__5129__auto__.push(arg__5130__auto___8299);
        var G__8300 = seq__7347_8295;
        var G__8301 = chunk__7348_8296;
        var G__8302 = count__7349_8297;
        var G__8303 = i__7350_8298 + 1;
        seq__7347_8295 = G__8300;
        chunk__7348_8296 = G__8301;
        count__7349_8297 = G__8302;
        i__7350_8298 = G__8303;
        continue;
      } else {
        var temp__4126__auto___8304 = cljs.core.seq.call(null, seq__7347_8295);
        if (temp__4126__auto___8304) {
          var seq__7347_8305__$1 = temp__4126__auto___8304;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7347_8305__$1)) {
            var c__4408__auto___8306 = cljs.core.chunk_first.call(null, seq__7347_8305__$1);
            var G__8307 = cljs.core.chunk_rest.call(null, seq__7347_8305__$1);
            var G__8308 = c__4408__auto___8306;
            var G__8309 = cljs.core.count.call(null, c__4408__auto___8306);
            var G__8310 = 0;
            seq__7347_8295 = G__8307;
            chunk__7348_8296 = G__8308;
            count__7349_8297 = G__8309;
            i__7350_8298 = G__8310;
            continue;
          } else {
            var arg__5130__auto___8311 = cljs.core.first.call(null, seq__7347_8305__$1);
            a__5129__auto__.push(arg__5130__auto___8311);
            var G__8312 = cljs.core.next.call(null, seq__7347_8305__$1);
            var G__8313 = null;
            var G__8314 = 0;
            var G__8315 = 0;
            seq__7347_8295 = G__8312;
            chunk__7348_8296 = G__8313;
            count__7349_8297 = G__8314;
            i__7350_8298 = G__8315;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.a.apply(null, a__5129__auto__);
  };
  var a = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return a__delegate.call(this, args__5128__auto__);
  };
  a.cljs$lang$maxFixedArity = 0;
  a.cljs$lang$applyTo = function(arglist__8316) {
    var args__5128__auto__ = cljs.core.seq(arglist__8316);
    return a__delegate(args__5128__auto__);
  };
  a.cljs$core$IFn$_invoke$arity$variadic = a__delegate;
  return a;
}();
quiescent.dom.abbr = function() {
  var abbr__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7355_8317 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7356_8318 = null;
    var count__7357_8319 = 0;
    var i__7358_8320 = 0;
    while (true) {
      if (i__7358_8320 < count__7357_8319) {
        var arg__5130__auto___8321 = cljs.core._nth.call(null, chunk__7356_8318, i__7358_8320);
        a__5129__auto__.push(arg__5130__auto___8321);
        var G__8322 = seq__7355_8317;
        var G__8323 = chunk__7356_8318;
        var G__8324 = count__7357_8319;
        var G__8325 = i__7358_8320 + 1;
        seq__7355_8317 = G__8322;
        chunk__7356_8318 = G__8323;
        count__7357_8319 = G__8324;
        i__7358_8320 = G__8325;
        continue;
      } else {
        var temp__4126__auto___8326 = cljs.core.seq.call(null, seq__7355_8317);
        if (temp__4126__auto___8326) {
          var seq__7355_8327__$1 = temp__4126__auto___8326;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7355_8327__$1)) {
            var c__4408__auto___8328 = cljs.core.chunk_first.call(null, seq__7355_8327__$1);
            var G__8329 = cljs.core.chunk_rest.call(null, seq__7355_8327__$1);
            var G__8330 = c__4408__auto___8328;
            var G__8331 = cljs.core.count.call(null, c__4408__auto___8328);
            var G__8332 = 0;
            seq__7355_8317 = G__8329;
            chunk__7356_8318 = G__8330;
            count__7357_8319 = G__8331;
            i__7358_8320 = G__8332;
            continue;
          } else {
            var arg__5130__auto___8333 = cljs.core.first.call(null, seq__7355_8327__$1);
            a__5129__auto__.push(arg__5130__auto___8333);
            var G__8334 = cljs.core.next.call(null, seq__7355_8327__$1);
            var G__8335 = null;
            var G__8336 = 0;
            var G__8337 = 0;
            seq__7355_8317 = G__8334;
            chunk__7356_8318 = G__8335;
            count__7357_8319 = G__8336;
            i__7358_8320 = G__8337;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.abbr.apply(null, a__5129__auto__);
  };
  var abbr = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return abbr__delegate.call(this, args__5128__auto__);
  };
  abbr.cljs$lang$maxFixedArity = 0;
  abbr.cljs$lang$applyTo = function(arglist__8338) {
    var args__5128__auto__ = cljs.core.seq(arglist__8338);
    return abbr__delegate(args__5128__auto__);
  };
  abbr.cljs$core$IFn$_invoke$arity$variadic = abbr__delegate;
  return abbr;
}();
quiescent.dom.address = function() {
  var address__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7363_8339 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7364_8340 = null;
    var count__7365_8341 = 0;
    var i__7366_8342 = 0;
    while (true) {
      if (i__7366_8342 < count__7365_8341) {
        var arg__5130__auto___8343 = cljs.core._nth.call(null, chunk__7364_8340, i__7366_8342);
        a__5129__auto__.push(arg__5130__auto___8343);
        var G__8344 = seq__7363_8339;
        var G__8345 = chunk__7364_8340;
        var G__8346 = count__7365_8341;
        var G__8347 = i__7366_8342 + 1;
        seq__7363_8339 = G__8344;
        chunk__7364_8340 = G__8345;
        count__7365_8341 = G__8346;
        i__7366_8342 = G__8347;
        continue;
      } else {
        var temp__4126__auto___8348 = cljs.core.seq.call(null, seq__7363_8339);
        if (temp__4126__auto___8348) {
          var seq__7363_8349__$1 = temp__4126__auto___8348;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7363_8349__$1)) {
            var c__4408__auto___8350 = cljs.core.chunk_first.call(null, seq__7363_8349__$1);
            var G__8351 = cljs.core.chunk_rest.call(null, seq__7363_8349__$1);
            var G__8352 = c__4408__auto___8350;
            var G__8353 = cljs.core.count.call(null, c__4408__auto___8350);
            var G__8354 = 0;
            seq__7363_8339 = G__8351;
            chunk__7364_8340 = G__8352;
            count__7365_8341 = G__8353;
            i__7366_8342 = G__8354;
            continue;
          } else {
            var arg__5130__auto___8355 = cljs.core.first.call(null, seq__7363_8349__$1);
            a__5129__auto__.push(arg__5130__auto___8355);
            var G__8356 = cljs.core.next.call(null, seq__7363_8349__$1);
            var G__8357 = null;
            var G__8358 = 0;
            var G__8359 = 0;
            seq__7363_8339 = G__8356;
            chunk__7364_8340 = G__8357;
            count__7365_8341 = G__8358;
            i__7366_8342 = G__8359;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.address.apply(null, a__5129__auto__);
  };
  var address = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return address__delegate.call(this, args__5128__auto__);
  };
  address.cljs$lang$maxFixedArity = 0;
  address.cljs$lang$applyTo = function(arglist__8360) {
    var args__5128__auto__ = cljs.core.seq(arglist__8360);
    return address__delegate(args__5128__auto__);
  };
  address.cljs$core$IFn$_invoke$arity$variadic = address__delegate;
  return address;
}();
quiescent.dom.area = function() {
  var area__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7371_8361 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7372_8362 = null;
    var count__7373_8363 = 0;
    var i__7374_8364 = 0;
    while (true) {
      if (i__7374_8364 < count__7373_8363) {
        var arg__5130__auto___8365 = cljs.core._nth.call(null, chunk__7372_8362, i__7374_8364);
        a__5129__auto__.push(arg__5130__auto___8365);
        var G__8366 = seq__7371_8361;
        var G__8367 = chunk__7372_8362;
        var G__8368 = count__7373_8363;
        var G__8369 = i__7374_8364 + 1;
        seq__7371_8361 = G__8366;
        chunk__7372_8362 = G__8367;
        count__7373_8363 = G__8368;
        i__7374_8364 = G__8369;
        continue;
      } else {
        var temp__4126__auto___8370 = cljs.core.seq.call(null, seq__7371_8361);
        if (temp__4126__auto___8370) {
          var seq__7371_8371__$1 = temp__4126__auto___8370;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7371_8371__$1)) {
            var c__4408__auto___8372 = cljs.core.chunk_first.call(null, seq__7371_8371__$1);
            var G__8373 = cljs.core.chunk_rest.call(null, seq__7371_8371__$1);
            var G__8374 = c__4408__auto___8372;
            var G__8375 = cljs.core.count.call(null, c__4408__auto___8372);
            var G__8376 = 0;
            seq__7371_8361 = G__8373;
            chunk__7372_8362 = G__8374;
            count__7373_8363 = G__8375;
            i__7374_8364 = G__8376;
            continue;
          } else {
            var arg__5130__auto___8377 = cljs.core.first.call(null, seq__7371_8371__$1);
            a__5129__auto__.push(arg__5130__auto___8377);
            var G__8378 = cljs.core.next.call(null, seq__7371_8371__$1);
            var G__8379 = null;
            var G__8380 = 0;
            var G__8381 = 0;
            seq__7371_8361 = G__8378;
            chunk__7372_8362 = G__8379;
            count__7373_8363 = G__8380;
            i__7374_8364 = G__8381;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.area.apply(null, a__5129__auto__);
  };
  var area = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return area__delegate.call(this, args__5128__auto__);
  };
  area.cljs$lang$maxFixedArity = 0;
  area.cljs$lang$applyTo = function(arglist__8382) {
    var args__5128__auto__ = cljs.core.seq(arglist__8382);
    return area__delegate(args__5128__auto__);
  };
  area.cljs$core$IFn$_invoke$arity$variadic = area__delegate;
  return area;
}();
quiescent.dom.article = function() {
  var article__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7379_8383 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7380_8384 = null;
    var count__7381_8385 = 0;
    var i__7382_8386 = 0;
    while (true) {
      if (i__7382_8386 < count__7381_8385) {
        var arg__5130__auto___8387 = cljs.core._nth.call(null, chunk__7380_8384, i__7382_8386);
        a__5129__auto__.push(arg__5130__auto___8387);
        var G__8388 = seq__7379_8383;
        var G__8389 = chunk__7380_8384;
        var G__8390 = count__7381_8385;
        var G__8391 = i__7382_8386 + 1;
        seq__7379_8383 = G__8388;
        chunk__7380_8384 = G__8389;
        count__7381_8385 = G__8390;
        i__7382_8386 = G__8391;
        continue;
      } else {
        var temp__4126__auto___8392 = cljs.core.seq.call(null, seq__7379_8383);
        if (temp__4126__auto___8392) {
          var seq__7379_8393__$1 = temp__4126__auto___8392;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7379_8393__$1)) {
            var c__4408__auto___8394 = cljs.core.chunk_first.call(null, seq__7379_8393__$1);
            var G__8395 = cljs.core.chunk_rest.call(null, seq__7379_8393__$1);
            var G__8396 = c__4408__auto___8394;
            var G__8397 = cljs.core.count.call(null, c__4408__auto___8394);
            var G__8398 = 0;
            seq__7379_8383 = G__8395;
            chunk__7380_8384 = G__8396;
            count__7381_8385 = G__8397;
            i__7382_8386 = G__8398;
            continue;
          } else {
            var arg__5130__auto___8399 = cljs.core.first.call(null, seq__7379_8393__$1);
            a__5129__auto__.push(arg__5130__auto___8399);
            var G__8400 = cljs.core.next.call(null, seq__7379_8393__$1);
            var G__8401 = null;
            var G__8402 = 0;
            var G__8403 = 0;
            seq__7379_8383 = G__8400;
            chunk__7380_8384 = G__8401;
            count__7381_8385 = G__8402;
            i__7382_8386 = G__8403;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.article.apply(null, a__5129__auto__);
  };
  var article = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return article__delegate.call(this, args__5128__auto__);
  };
  article.cljs$lang$maxFixedArity = 0;
  article.cljs$lang$applyTo = function(arglist__8404) {
    var args__5128__auto__ = cljs.core.seq(arglist__8404);
    return article__delegate(args__5128__auto__);
  };
  article.cljs$core$IFn$_invoke$arity$variadic = article__delegate;
  return article;
}();
quiescent.dom.aside = function() {
  var aside__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7387_8405 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7388_8406 = null;
    var count__7389_8407 = 0;
    var i__7390_8408 = 0;
    while (true) {
      if (i__7390_8408 < count__7389_8407) {
        var arg__5130__auto___8409 = cljs.core._nth.call(null, chunk__7388_8406, i__7390_8408);
        a__5129__auto__.push(arg__5130__auto___8409);
        var G__8410 = seq__7387_8405;
        var G__8411 = chunk__7388_8406;
        var G__8412 = count__7389_8407;
        var G__8413 = i__7390_8408 + 1;
        seq__7387_8405 = G__8410;
        chunk__7388_8406 = G__8411;
        count__7389_8407 = G__8412;
        i__7390_8408 = G__8413;
        continue;
      } else {
        var temp__4126__auto___8414 = cljs.core.seq.call(null, seq__7387_8405);
        if (temp__4126__auto___8414) {
          var seq__7387_8415__$1 = temp__4126__auto___8414;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7387_8415__$1)) {
            var c__4408__auto___8416 = cljs.core.chunk_first.call(null, seq__7387_8415__$1);
            var G__8417 = cljs.core.chunk_rest.call(null, seq__7387_8415__$1);
            var G__8418 = c__4408__auto___8416;
            var G__8419 = cljs.core.count.call(null, c__4408__auto___8416);
            var G__8420 = 0;
            seq__7387_8405 = G__8417;
            chunk__7388_8406 = G__8418;
            count__7389_8407 = G__8419;
            i__7390_8408 = G__8420;
            continue;
          } else {
            var arg__5130__auto___8421 = cljs.core.first.call(null, seq__7387_8415__$1);
            a__5129__auto__.push(arg__5130__auto___8421);
            var G__8422 = cljs.core.next.call(null, seq__7387_8415__$1);
            var G__8423 = null;
            var G__8424 = 0;
            var G__8425 = 0;
            seq__7387_8405 = G__8422;
            chunk__7388_8406 = G__8423;
            count__7389_8407 = G__8424;
            i__7390_8408 = G__8425;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.aside.apply(null, a__5129__auto__);
  };
  var aside = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return aside__delegate.call(this, args__5128__auto__);
  };
  aside.cljs$lang$maxFixedArity = 0;
  aside.cljs$lang$applyTo = function(arglist__8426) {
    var args__5128__auto__ = cljs.core.seq(arglist__8426);
    return aside__delegate(args__5128__auto__);
  };
  aside.cljs$core$IFn$_invoke$arity$variadic = aside__delegate;
  return aside;
}();
quiescent.dom.audio = function() {
  var audio__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7395_8427 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7396_8428 = null;
    var count__7397_8429 = 0;
    var i__7398_8430 = 0;
    while (true) {
      if (i__7398_8430 < count__7397_8429) {
        var arg__5130__auto___8431 = cljs.core._nth.call(null, chunk__7396_8428, i__7398_8430);
        a__5129__auto__.push(arg__5130__auto___8431);
        var G__8432 = seq__7395_8427;
        var G__8433 = chunk__7396_8428;
        var G__8434 = count__7397_8429;
        var G__8435 = i__7398_8430 + 1;
        seq__7395_8427 = G__8432;
        chunk__7396_8428 = G__8433;
        count__7397_8429 = G__8434;
        i__7398_8430 = G__8435;
        continue;
      } else {
        var temp__4126__auto___8436 = cljs.core.seq.call(null, seq__7395_8427);
        if (temp__4126__auto___8436) {
          var seq__7395_8437__$1 = temp__4126__auto___8436;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7395_8437__$1)) {
            var c__4408__auto___8438 = cljs.core.chunk_first.call(null, seq__7395_8437__$1);
            var G__8439 = cljs.core.chunk_rest.call(null, seq__7395_8437__$1);
            var G__8440 = c__4408__auto___8438;
            var G__8441 = cljs.core.count.call(null, c__4408__auto___8438);
            var G__8442 = 0;
            seq__7395_8427 = G__8439;
            chunk__7396_8428 = G__8440;
            count__7397_8429 = G__8441;
            i__7398_8430 = G__8442;
            continue;
          } else {
            var arg__5130__auto___8443 = cljs.core.first.call(null, seq__7395_8437__$1);
            a__5129__auto__.push(arg__5130__auto___8443);
            var G__8444 = cljs.core.next.call(null, seq__7395_8437__$1);
            var G__8445 = null;
            var G__8446 = 0;
            var G__8447 = 0;
            seq__7395_8427 = G__8444;
            chunk__7396_8428 = G__8445;
            count__7397_8429 = G__8446;
            i__7398_8430 = G__8447;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.audio.apply(null, a__5129__auto__);
  };
  var audio = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return audio__delegate.call(this, args__5128__auto__);
  };
  audio.cljs$lang$maxFixedArity = 0;
  audio.cljs$lang$applyTo = function(arglist__8448) {
    var args__5128__auto__ = cljs.core.seq(arglist__8448);
    return audio__delegate(args__5128__auto__);
  };
  audio.cljs$core$IFn$_invoke$arity$variadic = audio__delegate;
  return audio;
}();
quiescent.dom.b = function() {
  var b__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7403_8449 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7404_8450 = null;
    var count__7405_8451 = 0;
    var i__7406_8452 = 0;
    while (true) {
      if (i__7406_8452 < count__7405_8451) {
        var arg__5130__auto___8453 = cljs.core._nth.call(null, chunk__7404_8450, i__7406_8452);
        a__5129__auto__.push(arg__5130__auto___8453);
        var G__8454 = seq__7403_8449;
        var G__8455 = chunk__7404_8450;
        var G__8456 = count__7405_8451;
        var G__8457 = i__7406_8452 + 1;
        seq__7403_8449 = G__8454;
        chunk__7404_8450 = G__8455;
        count__7405_8451 = G__8456;
        i__7406_8452 = G__8457;
        continue;
      } else {
        var temp__4126__auto___8458 = cljs.core.seq.call(null, seq__7403_8449);
        if (temp__4126__auto___8458) {
          var seq__7403_8459__$1 = temp__4126__auto___8458;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7403_8459__$1)) {
            var c__4408__auto___8460 = cljs.core.chunk_first.call(null, seq__7403_8459__$1);
            var G__8461 = cljs.core.chunk_rest.call(null, seq__7403_8459__$1);
            var G__8462 = c__4408__auto___8460;
            var G__8463 = cljs.core.count.call(null, c__4408__auto___8460);
            var G__8464 = 0;
            seq__7403_8449 = G__8461;
            chunk__7404_8450 = G__8462;
            count__7405_8451 = G__8463;
            i__7406_8452 = G__8464;
            continue;
          } else {
            var arg__5130__auto___8465 = cljs.core.first.call(null, seq__7403_8459__$1);
            a__5129__auto__.push(arg__5130__auto___8465);
            var G__8466 = cljs.core.next.call(null, seq__7403_8459__$1);
            var G__8467 = null;
            var G__8468 = 0;
            var G__8469 = 0;
            seq__7403_8449 = G__8466;
            chunk__7404_8450 = G__8467;
            count__7405_8451 = G__8468;
            i__7406_8452 = G__8469;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.b.apply(null, a__5129__auto__);
  };
  var b = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return b__delegate.call(this, args__5128__auto__);
  };
  b.cljs$lang$maxFixedArity = 0;
  b.cljs$lang$applyTo = function(arglist__8470) {
    var args__5128__auto__ = cljs.core.seq(arglist__8470);
    return b__delegate(args__5128__auto__);
  };
  b.cljs$core$IFn$_invoke$arity$variadic = b__delegate;
  return b;
}();
quiescent.dom.base = function() {
  var base__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7411_8471 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7412_8472 = null;
    var count__7413_8473 = 0;
    var i__7414_8474 = 0;
    while (true) {
      if (i__7414_8474 < count__7413_8473) {
        var arg__5130__auto___8475 = cljs.core._nth.call(null, chunk__7412_8472, i__7414_8474);
        a__5129__auto__.push(arg__5130__auto___8475);
        var G__8476 = seq__7411_8471;
        var G__8477 = chunk__7412_8472;
        var G__8478 = count__7413_8473;
        var G__8479 = i__7414_8474 + 1;
        seq__7411_8471 = G__8476;
        chunk__7412_8472 = G__8477;
        count__7413_8473 = G__8478;
        i__7414_8474 = G__8479;
        continue;
      } else {
        var temp__4126__auto___8480 = cljs.core.seq.call(null, seq__7411_8471);
        if (temp__4126__auto___8480) {
          var seq__7411_8481__$1 = temp__4126__auto___8480;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7411_8481__$1)) {
            var c__4408__auto___8482 = cljs.core.chunk_first.call(null, seq__7411_8481__$1);
            var G__8483 = cljs.core.chunk_rest.call(null, seq__7411_8481__$1);
            var G__8484 = c__4408__auto___8482;
            var G__8485 = cljs.core.count.call(null, c__4408__auto___8482);
            var G__8486 = 0;
            seq__7411_8471 = G__8483;
            chunk__7412_8472 = G__8484;
            count__7413_8473 = G__8485;
            i__7414_8474 = G__8486;
            continue;
          } else {
            var arg__5130__auto___8487 = cljs.core.first.call(null, seq__7411_8481__$1);
            a__5129__auto__.push(arg__5130__auto___8487);
            var G__8488 = cljs.core.next.call(null, seq__7411_8481__$1);
            var G__8489 = null;
            var G__8490 = 0;
            var G__8491 = 0;
            seq__7411_8471 = G__8488;
            chunk__7412_8472 = G__8489;
            count__7413_8473 = G__8490;
            i__7414_8474 = G__8491;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.base.apply(null, a__5129__auto__);
  };
  var base = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return base__delegate.call(this, args__5128__auto__);
  };
  base.cljs$lang$maxFixedArity = 0;
  base.cljs$lang$applyTo = function(arglist__8492) {
    var args__5128__auto__ = cljs.core.seq(arglist__8492);
    return base__delegate(args__5128__auto__);
  };
  base.cljs$core$IFn$_invoke$arity$variadic = base__delegate;
  return base;
}();
quiescent.dom.bdi = function() {
  var bdi__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7419_8493 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7420_8494 = null;
    var count__7421_8495 = 0;
    var i__7422_8496 = 0;
    while (true) {
      if (i__7422_8496 < count__7421_8495) {
        var arg__5130__auto___8497 = cljs.core._nth.call(null, chunk__7420_8494, i__7422_8496);
        a__5129__auto__.push(arg__5130__auto___8497);
        var G__8498 = seq__7419_8493;
        var G__8499 = chunk__7420_8494;
        var G__8500 = count__7421_8495;
        var G__8501 = i__7422_8496 + 1;
        seq__7419_8493 = G__8498;
        chunk__7420_8494 = G__8499;
        count__7421_8495 = G__8500;
        i__7422_8496 = G__8501;
        continue;
      } else {
        var temp__4126__auto___8502 = cljs.core.seq.call(null, seq__7419_8493);
        if (temp__4126__auto___8502) {
          var seq__7419_8503__$1 = temp__4126__auto___8502;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7419_8503__$1)) {
            var c__4408__auto___8504 = cljs.core.chunk_first.call(null, seq__7419_8503__$1);
            var G__8505 = cljs.core.chunk_rest.call(null, seq__7419_8503__$1);
            var G__8506 = c__4408__auto___8504;
            var G__8507 = cljs.core.count.call(null, c__4408__auto___8504);
            var G__8508 = 0;
            seq__7419_8493 = G__8505;
            chunk__7420_8494 = G__8506;
            count__7421_8495 = G__8507;
            i__7422_8496 = G__8508;
            continue;
          } else {
            var arg__5130__auto___8509 = cljs.core.first.call(null, seq__7419_8503__$1);
            a__5129__auto__.push(arg__5130__auto___8509);
            var G__8510 = cljs.core.next.call(null, seq__7419_8503__$1);
            var G__8511 = null;
            var G__8512 = 0;
            var G__8513 = 0;
            seq__7419_8493 = G__8510;
            chunk__7420_8494 = G__8511;
            count__7421_8495 = G__8512;
            i__7422_8496 = G__8513;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdi.apply(null, a__5129__auto__);
  };
  var bdi = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdi__delegate.call(this, args__5128__auto__);
  };
  bdi.cljs$lang$maxFixedArity = 0;
  bdi.cljs$lang$applyTo = function(arglist__8514) {
    var args__5128__auto__ = cljs.core.seq(arglist__8514);
    return bdi__delegate(args__5128__auto__);
  };
  bdi.cljs$core$IFn$_invoke$arity$variadic = bdi__delegate;
  return bdi;
}();
quiescent.dom.bdo = function() {
  var bdo__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7427_8515 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7428_8516 = null;
    var count__7429_8517 = 0;
    var i__7430_8518 = 0;
    while (true) {
      if (i__7430_8518 < count__7429_8517) {
        var arg__5130__auto___8519 = cljs.core._nth.call(null, chunk__7428_8516, i__7430_8518);
        a__5129__auto__.push(arg__5130__auto___8519);
        var G__8520 = seq__7427_8515;
        var G__8521 = chunk__7428_8516;
        var G__8522 = count__7429_8517;
        var G__8523 = i__7430_8518 + 1;
        seq__7427_8515 = G__8520;
        chunk__7428_8516 = G__8521;
        count__7429_8517 = G__8522;
        i__7430_8518 = G__8523;
        continue;
      } else {
        var temp__4126__auto___8524 = cljs.core.seq.call(null, seq__7427_8515);
        if (temp__4126__auto___8524) {
          var seq__7427_8525__$1 = temp__4126__auto___8524;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7427_8525__$1)) {
            var c__4408__auto___8526 = cljs.core.chunk_first.call(null, seq__7427_8525__$1);
            var G__8527 = cljs.core.chunk_rest.call(null, seq__7427_8525__$1);
            var G__8528 = c__4408__auto___8526;
            var G__8529 = cljs.core.count.call(null, c__4408__auto___8526);
            var G__8530 = 0;
            seq__7427_8515 = G__8527;
            chunk__7428_8516 = G__8528;
            count__7429_8517 = G__8529;
            i__7430_8518 = G__8530;
            continue;
          } else {
            var arg__5130__auto___8531 = cljs.core.first.call(null, seq__7427_8525__$1);
            a__5129__auto__.push(arg__5130__auto___8531);
            var G__8532 = cljs.core.next.call(null, seq__7427_8525__$1);
            var G__8533 = null;
            var G__8534 = 0;
            var G__8535 = 0;
            seq__7427_8515 = G__8532;
            chunk__7428_8516 = G__8533;
            count__7429_8517 = G__8534;
            i__7430_8518 = G__8535;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.bdo.apply(null, a__5129__auto__);
  };
  var bdo = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return bdo__delegate.call(this, args__5128__auto__);
  };
  bdo.cljs$lang$maxFixedArity = 0;
  bdo.cljs$lang$applyTo = function(arglist__8536) {
    var args__5128__auto__ = cljs.core.seq(arglist__8536);
    return bdo__delegate(args__5128__auto__);
  };
  bdo.cljs$core$IFn$_invoke$arity$variadic = bdo__delegate;
  return bdo;
}();
quiescent.dom.big = function() {
  var big__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7435_8537 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7436_8538 = null;
    var count__7437_8539 = 0;
    var i__7438_8540 = 0;
    while (true) {
      if (i__7438_8540 < count__7437_8539) {
        var arg__5130__auto___8541 = cljs.core._nth.call(null, chunk__7436_8538, i__7438_8540);
        a__5129__auto__.push(arg__5130__auto___8541);
        var G__8542 = seq__7435_8537;
        var G__8543 = chunk__7436_8538;
        var G__8544 = count__7437_8539;
        var G__8545 = i__7438_8540 + 1;
        seq__7435_8537 = G__8542;
        chunk__7436_8538 = G__8543;
        count__7437_8539 = G__8544;
        i__7438_8540 = G__8545;
        continue;
      } else {
        var temp__4126__auto___8546 = cljs.core.seq.call(null, seq__7435_8537);
        if (temp__4126__auto___8546) {
          var seq__7435_8547__$1 = temp__4126__auto___8546;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7435_8547__$1)) {
            var c__4408__auto___8548 = cljs.core.chunk_first.call(null, seq__7435_8547__$1);
            var G__8549 = cljs.core.chunk_rest.call(null, seq__7435_8547__$1);
            var G__8550 = c__4408__auto___8548;
            var G__8551 = cljs.core.count.call(null, c__4408__auto___8548);
            var G__8552 = 0;
            seq__7435_8537 = G__8549;
            chunk__7436_8538 = G__8550;
            count__7437_8539 = G__8551;
            i__7438_8540 = G__8552;
            continue;
          } else {
            var arg__5130__auto___8553 = cljs.core.first.call(null, seq__7435_8547__$1);
            a__5129__auto__.push(arg__5130__auto___8553);
            var G__8554 = cljs.core.next.call(null, seq__7435_8547__$1);
            var G__8555 = null;
            var G__8556 = 0;
            var G__8557 = 0;
            seq__7435_8537 = G__8554;
            chunk__7436_8538 = G__8555;
            count__7437_8539 = G__8556;
            i__7438_8540 = G__8557;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.big.apply(null, a__5129__auto__);
  };
  var big = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return big__delegate.call(this, args__5128__auto__);
  };
  big.cljs$lang$maxFixedArity = 0;
  big.cljs$lang$applyTo = function(arglist__8558) {
    var args__5128__auto__ = cljs.core.seq(arglist__8558);
    return big__delegate(args__5128__auto__);
  };
  big.cljs$core$IFn$_invoke$arity$variadic = big__delegate;
  return big;
}();
quiescent.dom.blockquote = function() {
  var blockquote__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7443_8559 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7444_8560 = null;
    var count__7445_8561 = 0;
    var i__7446_8562 = 0;
    while (true) {
      if (i__7446_8562 < count__7445_8561) {
        var arg__5130__auto___8563 = cljs.core._nth.call(null, chunk__7444_8560, i__7446_8562);
        a__5129__auto__.push(arg__5130__auto___8563);
        var G__8564 = seq__7443_8559;
        var G__8565 = chunk__7444_8560;
        var G__8566 = count__7445_8561;
        var G__8567 = i__7446_8562 + 1;
        seq__7443_8559 = G__8564;
        chunk__7444_8560 = G__8565;
        count__7445_8561 = G__8566;
        i__7446_8562 = G__8567;
        continue;
      } else {
        var temp__4126__auto___8568 = cljs.core.seq.call(null, seq__7443_8559);
        if (temp__4126__auto___8568) {
          var seq__7443_8569__$1 = temp__4126__auto___8568;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7443_8569__$1)) {
            var c__4408__auto___8570 = cljs.core.chunk_first.call(null, seq__7443_8569__$1);
            var G__8571 = cljs.core.chunk_rest.call(null, seq__7443_8569__$1);
            var G__8572 = c__4408__auto___8570;
            var G__8573 = cljs.core.count.call(null, c__4408__auto___8570);
            var G__8574 = 0;
            seq__7443_8559 = G__8571;
            chunk__7444_8560 = G__8572;
            count__7445_8561 = G__8573;
            i__7446_8562 = G__8574;
            continue;
          } else {
            var arg__5130__auto___8575 = cljs.core.first.call(null, seq__7443_8569__$1);
            a__5129__auto__.push(arg__5130__auto___8575);
            var G__8576 = cljs.core.next.call(null, seq__7443_8569__$1);
            var G__8577 = null;
            var G__8578 = 0;
            var G__8579 = 0;
            seq__7443_8559 = G__8576;
            chunk__7444_8560 = G__8577;
            count__7445_8561 = G__8578;
            i__7446_8562 = G__8579;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.blockquote.apply(null, a__5129__auto__);
  };
  var blockquote = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return blockquote__delegate.call(this, args__5128__auto__);
  };
  blockquote.cljs$lang$maxFixedArity = 0;
  blockquote.cljs$lang$applyTo = function(arglist__8580) {
    var args__5128__auto__ = cljs.core.seq(arglist__8580);
    return blockquote__delegate(args__5128__auto__);
  };
  blockquote.cljs$core$IFn$_invoke$arity$variadic = blockquote__delegate;
  return blockquote;
}();
quiescent.dom.body = function() {
  var body__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7451_8581 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7452_8582 = null;
    var count__7453_8583 = 0;
    var i__7454_8584 = 0;
    while (true) {
      if (i__7454_8584 < count__7453_8583) {
        var arg__5130__auto___8585 = cljs.core._nth.call(null, chunk__7452_8582, i__7454_8584);
        a__5129__auto__.push(arg__5130__auto___8585);
        var G__8586 = seq__7451_8581;
        var G__8587 = chunk__7452_8582;
        var G__8588 = count__7453_8583;
        var G__8589 = i__7454_8584 + 1;
        seq__7451_8581 = G__8586;
        chunk__7452_8582 = G__8587;
        count__7453_8583 = G__8588;
        i__7454_8584 = G__8589;
        continue;
      } else {
        var temp__4126__auto___8590 = cljs.core.seq.call(null, seq__7451_8581);
        if (temp__4126__auto___8590) {
          var seq__7451_8591__$1 = temp__4126__auto___8590;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7451_8591__$1)) {
            var c__4408__auto___8592 = cljs.core.chunk_first.call(null, seq__7451_8591__$1);
            var G__8593 = cljs.core.chunk_rest.call(null, seq__7451_8591__$1);
            var G__8594 = c__4408__auto___8592;
            var G__8595 = cljs.core.count.call(null, c__4408__auto___8592);
            var G__8596 = 0;
            seq__7451_8581 = G__8593;
            chunk__7452_8582 = G__8594;
            count__7453_8583 = G__8595;
            i__7454_8584 = G__8596;
            continue;
          } else {
            var arg__5130__auto___8597 = cljs.core.first.call(null, seq__7451_8591__$1);
            a__5129__auto__.push(arg__5130__auto___8597);
            var G__8598 = cljs.core.next.call(null, seq__7451_8591__$1);
            var G__8599 = null;
            var G__8600 = 0;
            var G__8601 = 0;
            seq__7451_8581 = G__8598;
            chunk__7452_8582 = G__8599;
            count__7453_8583 = G__8600;
            i__7454_8584 = G__8601;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.body.apply(null, a__5129__auto__);
  };
  var body = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return body__delegate.call(this, args__5128__auto__);
  };
  body.cljs$lang$maxFixedArity = 0;
  body.cljs$lang$applyTo = function(arglist__8602) {
    var args__5128__auto__ = cljs.core.seq(arglist__8602);
    return body__delegate(args__5128__auto__);
  };
  body.cljs$core$IFn$_invoke$arity$variadic = body__delegate;
  return body;
}();
quiescent.dom.br = function() {
  var br__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7459_8603 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7460_8604 = null;
    var count__7461_8605 = 0;
    var i__7462_8606 = 0;
    while (true) {
      if (i__7462_8606 < count__7461_8605) {
        var arg__5130__auto___8607 = cljs.core._nth.call(null, chunk__7460_8604, i__7462_8606);
        a__5129__auto__.push(arg__5130__auto___8607);
        var G__8608 = seq__7459_8603;
        var G__8609 = chunk__7460_8604;
        var G__8610 = count__7461_8605;
        var G__8611 = i__7462_8606 + 1;
        seq__7459_8603 = G__8608;
        chunk__7460_8604 = G__8609;
        count__7461_8605 = G__8610;
        i__7462_8606 = G__8611;
        continue;
      } else {
        var temp__4126__auto___8612 = cljs.core.seq.call(null, seq__7459_8603);
        if (temp__4126__auto___8612) {
          var seq__7459_8613__$1 = temp__4126__auto___8612;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7459_8613__$1)) {
            var c__4408__auto___8614 = cljs.core.chunk_first.call(null, seq__7459_8613__$1);
            var G__8615 = cljs.core.chunk_rest.call(null, seq__7459_8613__$1);
            var G__8616 = c__4408__auto___8614;
            var G__8617 = cljs.core.count.call(null, c__4408__auto___8614);
            var G__8618 = 0;
            seq__7459_8603 = G__8615;
            chunk__7460_8604 = G__8616;
            count__7461_8605 = G__8617;
            i__7462_8606 = G__8618;
            continue;
          } else {
            var arg__5130__auto___8619 = cljs.core.first.call(null, seq__7459_8613__$1);
            a__5129__auto__.push(arg__5130__auto___8619);
            var G__8620 = cljs.core.next.call(null, seq__7459_8613__$1);
            var G__8621 = null;
            var G__8622 = 0;
            var G__8623 = 0;
            seq__7459_8603 = G__8620;
            chunk__7460_8604 = G__8621;
            count__7461_8605 = G__8622;
            i__7462_8606 = G__8623;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.br.apply(null, a__5129__auto__);
  };
  var br = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return br__delegate.call(this, args__5128__auto__);
  };
  br.cljs$lang$maxFixedArity = 0;
  br.cljs$lang$applyTo = function(arglist__8624) {
    var args__5128__auto__ = cljs.core.seq(arglist__8624);
    return br__delegate(args__5128__auto__);
  };
  br.cljs$core$IFn$_invoke$arity$variadic = br__delegate;
  return br;
}();
quiescent.dom.button = function() {
  var button__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7467_8625 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7468_8626 = null;
    var count__7469_8627 = 0;
    var i__7470_8628 = 0;
    while (true) {
      if (i__7470_8628 < count__7469_8627) {
        var arg__5130__auto___8629 = cljs.core._nth.call(null, chunk__7468_8626, i__7470_8628);
        a__5129__auto__.push(arg__5130__auto___8629);
        var G__8630 = seq__7467_8625;
        var G__8631 = chunk__7468_8626;
        var G__8632 = count__7469_8627;
        var G__8633 = i__7470_8628 + 1;
        seq__7467_8625 = G__8630;
        chunk__7468_8626 = G__8631;
        count__7469_8627 = G__8632;
        i__7470_8628 = G__8633;
        continue;
      } else {
        var temp__4126__auto___8634 = cljs.core.seq.call(null, seq__7467_8625);
        if (temp__4126__auto___8634) {
          var seq__7467_8635__$1 = temp__4126__auto___8634;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7467_8635__$1)) {
            var c__4408__auto___8636 = cljs.core.chunk_first.call(null, seq__7467_8635__$1);
            var G__8637 = cljs.core.chunk_rest.call(null, seq__7467_8635__$1);
            var G__8638 = c__4408__auto___8636;
            var G__8639 = cljs.core.count.call(null, c__4408__auto___8636);
            var G__8640 = 0;
            seq__7467_8625 = G__8637;
            chunk__7468_8626 = G__8638;
            count__7469_8627 = G__8639;
            i__7470_8628 = G__8640;
            continue;
          } else {
            var arg__5130__auto___8641 = cljs.core.first.call(null, seq__7467_8635__$1);
            a__5129__auto__.push(arg__5130__auto___8641);
            var G__8642 = cljs.core.next.call(null, seq__7467_8635__$1);
            var G__8643 = null;
            var G__8644 = 0;
            var G__8645 = 0;
            seq__7467_8625 = G__8642;
            chunk__7468_8626 = G__8643;
            count__7469_8627 = G__8644;
            i__7470_8628 = G__8645;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.button.apply(null, a__5129__auto__);
  };
  var button = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return button__delegate.call(this, args__5128__auto__);
  };
  button.cljs$lang$maxFixedArity = 0;
  button.cljs$lang$applyTo = function(arglist__8646) {
    var args__5128__auto__ = cljs.core.seq(arglist__8646);
    return button__delegate(args__5128__auto__);
  };
  button.cljs$core$IFn$_invoke$arity$variadic = button__delegate;
  return button;
}();
quiescent.dom.canvas = function() {
  var canvas__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7475_8647 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7476_8648 = null;
    var count__7477_8649 = 0;
    var i__7478_8650 = 0;
    while (true) {
      if (i__7478_8650 < count__7477_8649) {
        var arg__5130__auto___8651 = cljs.core._nth.call(null, chunk__7476_8648, i__7478_8650);
        a__5129__auto__.push(arg__5130__auto___8651);
        var G__8652 = seq__7475_8647;
        var G__8653 = chunk__7476_8648;
        var G__8654 = count__7477_8649;
        var G__8655 = i__7478_8650 + 1;
        seq__7475_8647 = G__8652;
        chunk__7476_8648 = G__8653;
        count__7477_8649 = G__8654;
        i__7478_8650 = G__8655;
        continue;
      } else {
        var temp__4126__auto___8656 = cljs.core.seq.call(null, seq__7475_8647);
        if (temp__4126__auto___8656) {
          var seq__7475_8657__$1 = temp__4126__auto___8656;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7475_8657__$1)) {
            var c__4408__auto___8658 = cljs.core.chunk_first.call(null, seq__7475_8657__$1);
            var G__8659 = cljs.core.chunk_rest.call(null, seq__7475_8657__$1);
            var G__8660 = c__4408__auto___8658;
            var G__8661 = cljs.core.count.call(null, c__4408__auto___8658);
            var G__8662 = 0;
            seq__7475_8647 = G__8659;
            chunk__7476_8648 = G__8660;
            count__7477_8649 = G__8661;
            i__7478_8650 = G__8662;
            continue;
          } else {
            var arg__5130__auto___8663 = cljs.core.first.call(null, seq__7475_8657__$1);
            a__5129__auto__.push(arg__5130__auto___8663);
            var G__8664 = cljs.core.next.call(null, seq__7475_8657__$1);
            var G__8665 = null;
            var G__8666 = 0;
            var G__8667 = 0;
            seq__7475_8647 = G__8664;
            chunk__7476_8648 = G__8665;
            count__7477_8649 = G__8666;
            i__7478_8650 = G__8667;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.canvas.apply(null, a__5129__auto__);
  };
  var canvas = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return canvas__delegate.call(this, args__5128__auto__);
  };
  canvas.cljs$lang$maxFixedArity = 0;
  canvas.cljs$lang$applyTo = function(arglist__8668) {
    var args__5128__auto__ = cljs.core.seq(arglist__8668);
    return canvas__delegate(args__5128__auto__);
  };
  canvas.cljs$core$IFn$_invoke$arity$variadic = canvas__delegate;
  return canvas;
}();
quiescent.dom.caption = function() {
  var caption__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7483_8669 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7484_8670 = null;
    var count__7485_8671 = 0;
    var i__7486_8672 = 0;
    while (true) {
      if (i__7486_8672 < count__7485_8671) {
        var arg__5130__auto___8673 = cljs.core._nth.call(null, chunk__7484_8670, i__7486_8672);
        a__5129__auto__.push(arg__5130__auto___8673);
        var G__8674 = seq__7483_8669;
        var G__8675 = chunk__7484_8670;
        var G__8676 = count__7485_8671;
        var G__8677 = i__7486_8672 + 1;
        seq__7483_8669 = G__8674;
        chunk__7484_8670 = G__8675;
        count__7485_8671 = G__8676;
        i__7486_8672 = G__8677;
        continue;
      } else {
        var temp__4126__auto___8678 = cljs.core.seq.call(null, seq__7483_8669);
        if (temp__4126__auto___8678) {
          var seq__7483_8679__$1 = temp__4126__auto___8678;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7483_8679__$1)) {
            var c__4408__auto___8680 = cljs.core.chunk_first.call(null, seq__7483_8679__$1);
            var G__8681 = cljs.core.chunk_rest.call(null, seq__7483_8679__$1);
            var G__8682 = c__4408__auto___8680;
            var G__8683 = cljs.core.count.call(null, c__4408__auto___8680);
            var G__8684 = 0;
            seq__7483_8669 = G__8681;
            chunk__7484_8670 = G__8682;
            count__7485_8671 = G__8683;
            i__7486_8672 = G__8684;
            continue;
          } else {
            var arg__5130__auto___8685 = cljs.core.first.call(null, seq__7483_8679__$1);
            a__5129__auto__.push(arg__5130__auto___8685);
            var G__8686 = cljs.core.next.call(null, seq__7483_8679__$1);
            var G__8687 = null;
            var G__8688 = 0;
            var G__8689 = 0;
            seq__7483_8669 = G__8686;
            chunk__7484_8670 = G__8687;
            count__7485_8671 = G__8688;
            i__7486_8672 = G__8689;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.caption.apply(null, a__5129__auto__);
  };
  var caption = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return caption__delegate.call(this, args__5128__auto__);
  };
  caption.cljs$lang$maxFixedArity = 0;
  caption.cljs$lang$applyTo = function(arglist__8690) {
    var args__5128__auto__ = cljs.core.seq(arglist__8690);
    return caption__delegate(args__5128__auto__);
  };
  caption.cljs$core$IFn$_invoke$arity$variadic = caption__delegate;
  return caption;
}();
quiescent.dom.cite = function() {
  var cite__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7491_8691 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7492_8692 = null;
    var count__7493_8693 = 0;
    var i__7494_8694 = 0;
    while (true) {
      if (i__7494_8694 < count__7493_8693) {
        var arg__5130__auto___8695 = cljs.core._nth.call(null, chunk__7492_8692, i__7494_8694);
        a__5129__auto__.push(arg__5130__auto___8695);
        var G__8696 = seq__7491_8691;
        var G__8697 = chunk__7492_8692;
        var G__8698 = count__7493_8693;
        var G__8699 = i__7494_8694 + 1;
        seq__7491_8691 = G__8696;
        chunk__7492_8692 = G__8697;
        count__7493_8693 = G__8698;
        i__7494_8694 = G__8699;
        continue;
      } else {
        var temp__4126__auto___8700 = cljs.core.seq.call(null, seq__7491_8691);
        if (temp__4126__auto___8700) {
          var seq__7491_8701__$1 = temp__4126__auto___8700;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7491_8701__$1)) {
            var c__4408__auto___8702 = cljs.core.chunk_first.call(null, seq__7491_8701__$1);
            var G__8703 = cljs.core.chunk_rest.call(null, seq__7491_8701__$1);
            var G__8704 = c__4408__auto___8702;
            var G__8705 = cljs.core.count.call(null, c__4408__auto___8702);
            var G__8706 = 0;
            seq__7491_8691 = G__8703;
            chunk__7492_8692 = G__8704;
            count__7493_8693 = G__8705;
            i__7494_8694 = G__8706;
            continue;
          } else {
            var arg__5130__auto___8707 = cljs.core.first.call(null, seq__7491_8701__$1);
            a__5129__auto__.push(arg__5130__auto___8707);
            var G__8708 = cljs.core.next.call(null, seq__7491_8701__$1);
            var G__8709 = null;
            var G__8710 = 0;
            var G__8711 = 0;
            seq__7491_8691 = G__8708;
            chunk__7492_8692 = G__8709;
            count__7493_8693 = G__8710;
            i__7494_8694 = G__8711;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.cite.apply(null, a__5129__auto__);
  };
  var cite = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return cite__delegate.call(this, args__5128__auto__);
  };
  cite.cljs$lang$maxFixedArity = 0;
  cite.cljs$lang$applyTo = function(arglist__8712) {
    var args__5128__auto__ = cljs.core.seq(arglist__8712);
    return cite__delegate(args__5128__auto__);
  };
  cite.cljs$core$IFn$_invoke$arity$variadic = cite__delegate;
  return cite;
}();
quiescent.dom.code = function() {
  var code__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7499_8713 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7500_8714 = null;
    var count__7501_8715 = 0;
    var i__7502_8716 = 0;
    while (true) {
      if (i__7502_8716 < count__7501_8715) {
        var arg__5130__auto___8717 = cljs.core._nth.call(null, chunk__7500_8714, i__7502_8716);
        a__5129__auto__.push(arg__5130__auto___8717);
        var G__8718 = seq__7499_8713;
        var G__8719 = chunk__7500_8714;
        var G__8720 = count__7501_8715;
        var G__8721 = i__7502_8716 + 1;
        seq__7499_8713 = G__8718;
        chunk__7500_8714 = G__8719;
        count__7501_8715 = G__8720;
        i__7502_8716 = G__8721;
        continue;
      } else {
        var temp__4126__auto___8722 = cljs.core.seq.call(null, seq__7499_8713);
        if (temp__4126__auto___8722) {
          var seq__7499_8723__$1 = temp__4126__auto___8722;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7499_8723__$1)) {
            var c__4408__auto___8724 = cljs.core.chunk_first.call(null, seq__7499_8723__$1);
            var G__8725 = cljs.core.chunk_rest.call(null, seq__7499_8723__$1);
            var G__8726 = c__4408__auto___8724;
            var G__8727 = cljs.core.count.call(null, c__4408__auto___8724);
            var G__8728 = 0;
            seq__7499_8713 = G__8725;
            chunk__7500_8714 = G__8726;
            count__7501_8715 = G__8727;
            i__7502_8716 = G__8728;
            continue;
          } else {
            var arg__5130__auto___8729 = cljs.core.first.call(null, seq__7499_8723__$1);
            a__5129__auto__.push(arg__5130__auto___8729);
            var G__8730 = cljs.core.next.call(null, seq__7499_8723__$1);
            var G__8731 = null;
            var G__8732 = 0;
            var G__8733 = 0;
            seq__7499_8713 = G__8730;
            chunk__7500_8714 = G__8731;
            count__7501_8715 = G__8732;
            i__7502_8716 = G__8733;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.code.apply(null, a__5129__auto__);
  };
  var code = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return code__delegate.call(this, args__5128__auto__);
  };
  code.cljs$lang$maxFixedArity = 0;
  code.cljs$lang$applyTo = function(arglist__8734) {
    var args__5128__auto__ = cljs.core.seq(arglist__8734);
    return code__delegate(args__5128__auto__);
  };
  code.cljs$core$IFn$_invoke$arity$variadic = code__delegate;
  return code;
}();
quiescent.dom.col = function() {
  var col__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7507_8735 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7508_8736 = null;
    var count__7509_8737 = 0;
    var i__7510_8738 = 0;
    while (true) {
      if (i__7510_8738 < count__7509_8737) {
        var arg__5130__auto___8739 = cljs.core._nth.call(null, chunk__7508_8736, i__7510_8738);
        a__5129__auto__.push(arg__5130__auto___8739);
        var G__8740 = seq__7507_8735;
        var G__8741 = chunk__7508_8736;
        var G__8742 = count__7509_8737;
        var G__8743 = i__7510_8738 + 1;
        seq__7507_8735 = G__8740;
        chunk__7508_8736 = G__8741;
        count__7509_8737 = G__8742;
        i__7510_8738 = G__8743;
        continue;
      } else {
        var temp__4126__auto___8744 = cljs.core.seq.call(null, seq__7507_8735);
        if (temp__4126__auto___8744) {
          var seq__7507_8745__$1 = temp__4126__auto___8744;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7507_8745__$1)) {
            var c__4408__auto___8746 = cljs.core.chunk_first.call(null, seq__7507_8745__$1);
            var G__8747 = cljs.core.chunk_rest.call(null, seq__7507_8745__$1);
            var G__8748 = c__4408__auto___8746;
            var G__8749 = cljs.core.count.call(null, c__4408__auto___8746);
            var G__8750 = 0;
            seq__7507_8735 = G__8747;
            chunk__7508_8736 = G__8748;
            count__7509_8737 = G__8749;
            i__7510_8738 = G__8750;
            continue;
          } else {
            var arg__5130__auto___8751 = cljs.core.first.call(null, seq__7507_8745__$1);
            a__5129__auto__.push(arg__5130__auto___8751);
            var G__8752 = cljs.core.next.call(null, seq__7507_8745__$1);
            var G__8753 = null;
            var G__8754 = 0;
            var G__8755 = 0;
            seq__7507_8735 = G__8752;
            chunk__7508_8736 = G__8753;
            count__7509_8737 = G__8754;
            i__7510_8738 = G__8755;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.col.apply(null, a__5129__auto__);
  };
  var col = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return col__delegate.call(this, args__5128__auto__);
  };
  col.cljs$lang$maxFixedArity = 0;
  col.cljs$lang$applyTo = function(arglist__8756) {
    var args__5128__auto__ = cljs.core.seq(arglist__8756);
    return col__delegate(args__5128__auto__);
  };
  col.cljs$core$IFn$_invoke$arity$variadic = col__delegate;
  return col;
}();
quiescent.dom.colgroup = function() {
  var colgroup__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7515_8757 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7516_8758 = null;
    var count__7517_8759 = 0;
    var i__7518_8760 = 0;
    while (true) {
      if (i__7518_8760 < count__7517_8759) {
        var arg__5130__auto___8761 = cljs.core._nth.call(null, chunk__7516_8758, i__7518_8760);
        a__5129__auto__.push(arg__5130__auto___8761);
        var G__8762 = seq__7515_8757;
        var G__8763 = chunk__7516_8758;
        var G__8764 = count__7517_8759;
        var G__8765 = i__7518_8760 + 1;
        seq__7515_8757 = G__8762;
        chunk__7516_8758 = G__8763;
        count__7517_8759 = G__8764;
        i__7518_8760 = G__8765;
        continue;
      } else {
        var temp__4126__auto___8766 = cljs.core.seq.call(null, seq__7515_8757);
        if (temp__4126__auto___8766) {
          var seq__7515_8767__$1 = temp__4126__auto___8766;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7515_8767__$1)) {
            var c__4408__auto___8768 = cljs.core.chunk_first.call(null, seq__7515_8767__$1);
            var G__8769 = cljs.core.chunk_rest.call(null, seq__7515_8767__$1);
            var G__8770 = c__4408__auto___8768;
            var G__8771 = cljs.core.count.call(null, c__4408__auto___8768);
            var G__8772 = 0;
            seq__7515_8757 = G__8769;
            chunk__7516_8758 = G__8770;
            count__7517_8759 = G__8771;
            i__7518_8760 = G__8772;
            continue;
          } else {
            var arg__5130__auto___8773 = cljs.core.first.call(null, seq__7515_8767__$1);
            a__5129__auto__.push(arg__5130__auto___8773);
            var G__8774 = cljs.core.next.call(null, seq__7515_8767__$1);
            var G__8775 = null;
            var G__8776 = 0;
            var G__8777 = 0;
            seq__7515_8757 = G__8774;
            chunk__7516_8758 = G__8775;
            count__7517_8759 = G__8776;
            i__7518_8760 = G__8777;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.colgroup.apply(null, a__5129__auto__);
  };
  var colgroup = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return colgroup__delegate.call(this, args__5128__auto__);
  };
  colgroup.cljs$lang$maxFixedArity = 0;
  colgroup.cljs$lang$applyTo = function(arglist__8778) {
    var args__5128__auto__ = cljs.core.seq(arglist__8778);
    return colgroup__delegate(args__5128__auto__);
  };
  colgroup.cljs$core$IFn$_invoke$arity$variadic = colgroup__delegate;
  return colgroup;
}();
quiescent.dom.data = function() {
  var data__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7523_8779 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7524_8780 = null;
    var count__7525_8781 = 0;
    var i__7526_8782 = 0;
    while (true) {
      if (i__7526_8782 < count__7525_8781) {
        var arg__5130__auto___8783 = cljs.core._nth.call(null, chunk__7524_8780, i__7526_8782);
        a__5129__auto__.push(arg__5130__auto___8783);
        var G__8784 = seq__7523_8779;
        var G__8785 = chunk__7524_8780;
        var G__8786 = count__7525_8781;
        var G__8787 = i__7526_8782 + 1;
        seq__7523_8779 = G__8784;
        chunk__7524_8780 = G__8785;
        count__7525_8781 = G__8786;
        i__7526_8782 = G__8787;
        continue;
      } else {
        var temp__4126__auto___8788 = cljs.core.seq.call(null, seq__7523_8779);
        if (temp__4126__auto___8788) {
          var seq__7523_8789__$1 = temp__4126__auto___8788;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7523_8789__$1)) {
            var c__4408__auto___8790 = cljs.core.chunk_first.call(null, seq__7523_8789__$1);
            var G__8791 = cljs.core.chunk_rest.call(null, seq__7523_8789__$1);
            var G__8792 = c__4408__auto___8790;
            var G__8793 = cljs.core.count.call(null, c__4408__auto___8790);
            var G__8794 = 0;
            seq__7523_8779 = G__8791;
            chunk__7524_8780 = G__8792;
            count__7525_8781 = G__8793;
            i__7526_8782 = G__8794;
            continue;
          } else {
            var arg__5130__auto___8795 = cljs.core.first.call(null, seq__7523_8789__$1);
            a__5129__auto__.push(arg__5130__auto___8795);
            var G__8796 = cljs.core.next.call(null, seq__7523_8789__$1);
            var G__8797 = null;
            var G__8798 = 0;
            var G__8799 = 0;
            seq__7523_8779 = G__8796;
            chunk__7524_8780 = G__8797;
            count__7525_8781 = G__8798;
            i__7526_8782 = G__8799;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.data.apply(null, a__5129__auto__);
  };
  var data = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return data__delegate.call(this, args__5128__auto__);
  };
  data.cljs$lang$maxFixedArity = 0;
  data.cljs$lang$applyTo = function(arglist__8800) {
    var args__5128__auto__ = cljs.core.seq(arglist__8800);
    return data__delegate(args__5128__auto__);
  };
  data.cljs$core$IFn$_invoke$arity$variadic = data__delegate;
  return data;
}();
quiescent.dom.datalist = function() {
  var datalist__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7531_8801 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7532_8802 = null;
    var count__7533_8803 = 0;
    var i__7534_8804 = 0;
    while (true) {
      if (i__7534_8804 < count__7533_8803) {
        var arg__5130__auto___8805 = cljs.core._nth.call(null, chunk__7532_8802, i__7534_8804);
        a__5129__auto__.push(arg__5130__auto___8805);
        var G__8806 = seq__7531_8801;
        var G__8807 = chunk__7532_8802;
        var G__8808 = count__7533_8803;
        var G__8809 = i__7534_8804 + 1;
        seq__7531_8801 = G__8806;
        chunk__7532_8802 = G__8807;
        count__7533_8803 = G__8808;
        i__7534_8804 = G__8809;
        continue;
      } else {
        var temp__4126__auto___8810 = cljs.core.seq.call(null, seq__7531_8801);
        if (temp__4126__auto___8810) {
          var seq__7531_8811__$1 = temp__4126__auto___8810;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7531_8811__$1)) {
            var c__4408__auto___8812 = cljs.core.chunk_first.call(null, seq__7531_8811__$1);
            var G__8813 = cljs.core.chunk_rest.call(null, seq__7531_8811__$1);
            var G__8814 = c__4408__auto___8812;
            var G__8815 = cljs.core.count.call(null, c__4408__auto___8812);
            var G__8816 = 0;
            seq__7531_8801 = G__8813;
            chunk__7532_8802 = G__8814;
            count__7533_8803 = G__8815;
            i__7534_8804 = G__8816;
            continue;
          } else {
            var arg__5130__auto___8817 = cljs.core.first.call(null, seq__7531_8811__$1);
            a__5129__auto__.push(arg__5130__auto___8817);
            var G__8818 = cljs.core.next.call(null, seq__7531_8811__$1);
            var G__8819 = null;
            var G__8820 = 0;
            var G__8821 = 0;
            seq__7531_8801 = G__8818;
            chunk__7532_8802 = G__8819;
            count__7533_8803 = G__8820;
            i__7534_8804 = G__8821;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.datalist.apply(null, a__5129__auto__);
  };
  var datalist = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return datalist__delegate.call(this, args__5128__auto__);
  };
  datalist.cljs$lang$maxFixedArity = 0;
  datalist.cljs$lang$applyTo = function(arglist__8822) {
    var args__5128__auto__ = cljs.core.seq(arglist__8822);
    return datalist__delegate(args__5128__auto__);
  };
  datalist.cljs$core$IFn$_invoke$arity$variadic = datalist__delegate;
  return datalist;
}();
quiescent.dom.dd = function() {
  var dd__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7539_8823 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7540_8824 = null;
    var count__7541_8825 = 0;
    var i__7542_8826 = 0;
    while (true) {
      if (i__7542_8826 < count__7541_8825) {
        var arg__5130__auto___8827 = cljs.core._nth.call(null, chunk__7540_8824, i__7542_8826);
        a__5129__auto__.push(arg__5130__auto___8827);
        var G__8828 = seq__7539_8823;
        var G__8829 = chunk__7540_8824;
        var G__8830 = count__7541_8825;
        var G__8831 = i__7542_8826 + 1;
        seq__7539_8823 = G__8828;
        chunk__7540_8824 = G__8829;
        count__7541_8825 = G__8830;
        i__7542_8826 = G__8831;
        continue;
      } else {
        var temp__4126__auto___8832 = cljs.core.seq.call(null, seq__7539_8823);
        if (temp__4126__auto___8832) {
          var seq__7539_8833__$1 = temp__4126__auto___8832;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7539_8833__$1)) {
            var c__4408__auto___8834 = cljs.core.chunk_first.call(null, seq__7539_8833__$1);
            var G__8835 = cljs.core.chunk_rest.call(null, seq__7539_8833__$1);
            var G__8836 = c__4408__auto___8834;
            var G__8837 = cljs.core.count.call(null, c__4408__auto___8834);
            var G__8838 = 0;
            seq__7539_8823 = G__8835;
            chunk__7540_8824 = G__8836;
            count__7541_8825 = G__8837;
            i__7542_8826 = G__8838;
            continue;
          } else {
            var arg__5130__auto___8839 = cljs.core.first.call(null, seq__7539_8833__$1);
            a__5129__auto__.push(arg__5130__auto___8839);
            var G__8840 = cljs.core.next.call(null, seq__7539_8833__$1);
            var G__8841 = null;
            var G__8842 = 0;
            var G__8843 = 0;
            seq__7539_8823 = G__8840;
            chunk__7540_8824 = G__8841;
            count__7541_8825 = G__8842;
            i__7542_8826 = G__8843;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dd.apply(null, a__5129__auto__);
  };
  var dd = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dd__delegate.call(this, args__5128__auto__);
  };
  dd.cljs$lang$maxFixedArity = 0;
  dd.cljs$lang$applyTo = function(arglist__8844) {
    var args__5128__auto__ = cljs.core.seq(arglist__8844);
    return dd__delegate(args__5128__auto__);
  };
  dd.cljs$core$IFn$_invoke$arity$variadic = dd__delegate;
  return dd;
}();
quiescent.dom.del = function() {
  var del__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7547_8845 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7548_8846 = null;
    var count__7549_8847 = 0;
    var i__7550_8848 = 0;
    while (true) {
      if (i__7550_8848 < count__7549_8847) {
        var arg__5130__auto___8849 = cljs.core._nth.call(null, chunk__7548_8846, i__7550_8848);
        a__5129__auto__.push(arg__5130__auto___8849);
        var G__8850 = seq__7547_8845;
        var G__8851 = chunk__7548_8846;
        var G__8852 = count__7549_8847;
        var G__8853 = i__7550_8848 + 1;
        seq__7547_8845 = G__8850;
        chunk__7548_8846 = G__8851;
        count__7549_8847 = G__8852;
        i__7550_8848 = G__8853;
        continue;
      } else {
        var temp__4126__auto___8854 = cljs.core.seq.call(null, seq__7547_8845);
        if (temp__4126__auto___8854) {
          var seq__7547_8855__$1 = temp__4126__auto___8854;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7547_8855__$1)) {
            var c__4408__auto___8856 = cljs.core.chunk_first.call(null, seq__7547_8855__$1);
            var G__8857 = cljs.core.chunk_rest.call(null, seq__7547_8855__$1);
            var G__8858 = c__4408__auto___8856;
            var G__8859 = cljs.core.count.call(null, c__4408__auto___8856);
            var G__8860 = 0;
            seq__7547_8845 = G__8857;
            chunk__7548_8846 = G__8858;
            count__7549_8847 = G__8859;
            i__7550_8848 = G__8860;
            continue;
          } else {
            var arg__5130__auto___8861 = cljs.core.first.call(null, seq__7547_8855__$1);
            a__5129__auto__.push(arg__5130__auto___8861);
            var G__8862 = cljs.core.next.call(null, seq__7547_8855__$1);
            var G__8863 = null;
            var G__8864 = 0;
            var G__8865 = 0;
            seq__7547_8845 = G__8862;
            chunk__7548_8846 = G__8863;
            count__7549_8847 = G__8864;
            i__7550_8848 = G__8865;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.del.apply(null, a__5129__auto__);
  };
  var del = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return del__delegate.call(this, args__5128__auto__);
  };
  del.cljs$lang$maxFixedArity = 0;
  del.cljs$lang$applyTo = function(arglist__8866) {
    var args__5128__auto__ = cljs.core.seq(arglist__8866);
    return del__delegate(args__5128__auto__);
  };
  del.cljs$core$IFn$_invoke$arity$variadic = del__delegate;
  return del;
}();
quiescent.dom.details = function() {
  var details__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7555_8867 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7556_8868 = null;
    var count__7557_8869 = 0;
    var i__7558_8870 = 0;
    while (true) {
      if (i__7558_8870 < count__7557_8869) {
        var arg__5130__auto___8871 = cljs.core._nth.call(null, chunk__7556_8868, i__7558_8870);
        a__5129__auto__.push(arg__5130__auto___8871);
        var G__8872 = seq__7555_8867;
        var G__8873 = chunk__7556_8868;
        var G__8874 = count__7557_8869;
        var G__8875 = i__7558_8870 + 1;
        seq__7555_8867 = G__8872;
        chunk__7556_8868 = G__8873;
        count__7557_8869 = G__8874;
        i__7558_8870 = G__8875;
        continue;
      } else {
        var temp__4126__auto___8876 = cljs.core.seq.call(null, seq__7555_8867);
        if (temp__4126__auto___8876) {
          var seq__7555_8877__$1 = temp__4126__auto___8876;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7555_8877__$1)) {
            var c__4408__auto___8878 = cljs.core.chunk_first.call(null, seq__7555_8877__$1);
            var G__8879 = cljs.core.chunk_rest.call(null, seq__7555_8877__$1);
            var G__8880 = c__4408__auto___8878;
            var G__8881 = cljs.core.count.call(null, c__4408__auto___8878);
            var G__8882 = 0;
            seq__7555_8867 = G__8879;
            chunk__7556_8868 = G__8880;
            count__7557_8869 = G__8881;
            i__7558_8870 = G__8882;
            continue;
          } else {
            var arg__5130__auto___8883 = cljs.core.first.call(null, seq__7555_8877__$1);
            a__5129__auto__.push(arg__5130__auto___8883);
            var G__8884 = cljs.core.next.call(null, seq__7555_8877__$1);
            var G__8885 = null;
            var G__8886 = 0;
            var G__8887 = 0;
            seq__7555_8867 = G__8884;
            chunk__7556_8868 = G__8885;
            count__7557_8869 = G__8886;
            i__7558_8870 = G__8887;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.details.apply(null, a__5129__auto__);
  };
  var details = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return details__delegate.call(this, args__5128__auto__);
  };
  details.cljs$lang$maxFixedArity = 0;
  details.cljs$lang$applyTo = function(arglist__8888) {
    var args__5128__auto__ = cljs.core.seq(arglist__8888);
    return details__delegate(args__5128__auto__);
  };
  details.cljs$core$IFn$_invoke$arity$variadic = details__delegate;
  return details;
}();
quiescent.dom.dfn = function() {
  var dfn__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7563_8889 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7564_8890 = null;
    var count__7565_8891 = 0;
    var i__7566_8892 = 0;
    while (true) {
      if (i__7566_8892 < count__7565_8891) {
        var arg__5130__auto___8893 = cljs.core._nth.call(null, chunk__7564_8890, i__7566_8892);
        a__5129__auto__.push(arg__5130__auto___8893);
        var G__8894 = seq__7563_8889;
        var G__8895 = chunk__7564_8890;
        var G__8896 = count__7565_8891;
        var G__8897 = i__7566_8892 + 1;
        seq__7563_8889 = G__8894;
        chunk__7564_8890 = G__8895;
        count__7565_8891 = G__8896;
        i__7566_8892 = G__8897;
        continue;
      } else {
        var temp__4126__auto___8898 = cljs.core.seq.call(null, seq__7563_8889);
        if (temp__4126__auto___8898) {
          var seq__7563_8899__$1 = temp__4126__auto___8898;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7563_8899__$1)) {
            var c__4408__auto___8900 = cljs.core.chunk_first.call(null, seq__7563_8899__$1);
            var G__8901 = cljs.core.chunk_rest.call(null, seq__7563_8899__$1);
            var G__8902 = c__4408__auto___8900;
            var G__8903 = cljs.core.count.call(null, c__4408__auto___8900);
            var G__8904 = 0;
            seq__7563_8889 = G__8901;
            chunk__7564_8890 = G__8902;
            count__7565_8891 = G__8903;
            i__7566_8892 = G__8904;
            continue;
          } else {
            var arg__5130__auto___8905 = cljs.core.first.call(null, seq__7563_8899__$1);
            a__5129__auto__.push(arg__5130__auto___8905);
            var G__8906 = cljs.core.next.call(null, seq__7563_8899__$1);
            var G__8907 = null;
            var G__8908 = 0;
            var G__8909 = 0;
            seq__7563_8889 = G__8906;
            chunk__7564_8890 = G__8907;
            count__7565_8891 = G__8908;
            i__7566_8892 = G__8909;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dfn.apply(null, a__5129__auto__);
  };
  var dfn = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dfn__delegate.call(this, args__5128__auto__);
  };
  dfn.cljs$lang$maxFixedArity = 0;
  dfn.cljs$lang$applyTo = function(arglist__8910) {
    var args__5128__auto__ = cljs.core.seq(arglist__8910);
    return dfn__delegate(args__5128__auto__);
  };
  dfn.cljs$core$IFn$_invoke$arity$variadic = dfn__delegate;
  return dfn;
}();
quiescent.dom.div = function() {
  var div__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7571_8911 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7572_8912 = null;
    var count__7573_8913 = 0;
    var i__7574_8914 = 0;
    while (true) {
      if (i__7574_8914 < count__7573_8913) {
        var arg__5130__auto___8915 = cljs.core._nth.call(null, chunk__7572_8912, i__7574_8914);
        a__5129__auto__.push(arg__5130__auto___8915);
        var G__8916 = seq__7571_8911;
        var G__8917 = chunk__7572_8912;
        var G__8918 = count__7573_8913;
        var G__8919 = i__7574_8914 + 1;
        seq__7571_8911 = G__8916;
        chunk__7572_8912 = G__8917;
        count__7573_8913 = G__8918;
        i__7574_8914 = G__8919;
        continue;
      } else {
        var temp__4126__auto___8920 = cljs.core.seq.call(null, seq__7571_8911);
        if (temp__4126__auto___8920) {
          var seq__7571_8921__$1 = temp__4126__auto___8920;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7571_8921__$1)) {
            var c__4408__auto___8922 = cljs.core.chunk_first.call(null, seq__7571_8921__$1);
            var G__8923 = cljs.core.chunk_rest.call(null, seq__7571_8921__$1);
            var G__8924 = c__4408__auto___8922;
            var G__8925 = cljs.core.count.call(null, c__4408__auto___8922);
            var G__8926 = 0;
            seq__7571_8911 = G__8923;
            chunk__7572_8912 = G__8924;
            count__7573_8913 = G__8925;
            i__7574_8914 = G__8926;
            continue;
          } else {
            var arg__5130__auto___8927 = cljs.core.first.call(null, seq__7571_8921__$1);
            a__5129__auto__.push(arg__5130__auto___8927);
            var G__8928 = cljs.core.next.call(null, seq__7571_8921__$1);
            var G__8929 = null;
            var G__8930 = 0;
            var G__8931 = 0;
            seq__7571_8911 = G__8928;
            chunk__7572_8912 = G__8929;
            count__7573_8913 = G__8930;
            i__7574_8914 = G__8931;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.div.apply(null, a__5129__auto__);
  };
  var div = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return div__delegate.call(this, args__5128__auto__);
  };
  div.cljs$lang$maxFixedArity = 0;
  div.cljs$lang$applyTo = function(arglist__8932) {
    var args__5128__auto__ = cljs.core.seq(arglist__8932);
    return div__delegate(args__5128__auto__);
  };
  div.cljs$core$IFn$_invoke$arity$variadic = div__delegate;
  return div;
}();
quiescent.dom.dl = function() {
  var dl__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7579_8933 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7580_8934 = null;
    var count__7581_8935 = 0;
    var i__7582_8936 = 0;
    while (true) {
      if (i__7582_8936 < count__7581_8935) {
        var arg__5130__auto___8937 = cljs.core._nth.call(null, chunk__7580_8934, i__7582_8936);
        a__5129__auto__.push(arg__5130__auto___8937);
        var G__8938 = seq__7579_8933;
        var G__8939 = chunk__7580_8934;
        var G__8940 = count__7581_8935;
        var G__8941 = i__7582_8936 + 1;
        seq__7579_8933 = G__8938;
        chunk__7580_8934 = G__8939;
        count__7581_8935 = G__8940;
        i__7582_8936 = G__8941;
        continue;
      } else {
        var temp__4126__auto___8942 = cljs.core.seq.call(null, seq__7579_8933);
        if (temp__4126__auto___8942) {
          var seq__7579_8943__$1 = temp__4126__auto___8942;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7579_8943__$1)) {
            var c__4408__auto___8944 = cljs.core.chunk_first.call(null, seq__7579_8943__$1);
            var G__8945 = cljs.core.chunk_rest.call(null, seq__7579_8943__$1);
            var G__8946 = c__4408__auto___8944;
            var G__8947 = cljs.core.count.call(null, c__4408__auto___8944);
            var G__8948 = 0;
            seq__7579_8933 = G__8945;
            chunk__7580_8934 = G__8946;
            count__7581_8935 = G__8947;
            i__7582_8936 = G__8948;
            continue;
          } else {
            var arg__5130__auto___8949 = cljs.core.first.call(null, seq__7579_8943__$1);
            a__5129__auto__.push(arg__5130__auto___8949);
            var G__8950 = cljs.core.next.call(null, seq__7579_8943__$1);
            var G__8951 = null;
            var G__8952 = 0;
            var G__8953 = 0;
            seq__7579_8933 = G__8950;
            chunk__7580_8934 = G__8951;
            count__7581_8935 = G__8952;
            i__7582_8936 = G__8953;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dl.apply(null, a__5129__auto__);
  };
  var dl = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dl__delegate.call(this, args__5128__auto__);
  };
  dl.cljs$lang$maxFixedArity = 0;
  dl.cljs$lang$applyTo = function(arglist__8954) {
    var args__5128__auto__ = cljs.core.seq(arglist__8954);
    return dl__delegate(args__5128__auto__);
  };
  dl.cljs$core$IFn$_invoke$arity$variadic = dl__delegate;
  return dl;
}();
quiescent.dom.dt = function() {
  var dt__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7587_8955 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7588_8956 = null;
    var count__7589_8957 = 0;
    var i__7590_8958 = 0;
    while (true) {
      if (i__7590_8958 < count__7589_8957) {
        var arg__5130__auto___8959 = cljs.core._nth.call(null, chunk__7588_8956, i__7590_8958);
        a__5129__auto__.push(arg__5130__auto___8959);
        var G__8960 = seq__7587_8955;
        var G__8961 = chunk__7588_8956;
        var G__8962 = count__7589_8957;
        var G__8963 = i__7590_8958 + 1;
        seq__7587_8955 = G__8960;
        chunk__7588_8956 = G__8961;
        count__7589_8957 = G__8962;
        i__7590_8958 = G__8963;
        continue;
      } else {
        var temp__4126__auto___8964 = cljs.core.seq.call(null, seq__7587_8955);
        if (temp__4126__auto___8964) {
          var seq__7587_8965__$1 = temp__4126__auto___8964;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7587_8965__$1)) {
            var c__4408__auto___8966 = cljs.core.chunk_first.call(null, seq__7587_8965__$1);
            var G__8967 = cljs.core.chunk_rest.call(null, seq__7587_8965__$1);
            var G__8968 = c__4408__auto___8966;
            var G__8969 = cljs.core.count.call(null, c__4408__auto___8966);
            var G__8970 = 0;
            seq__7587_8955 = G__8967;
            chunk__7588_8956 = G__8968;
            count__7589_8957 = G__8969;
            i__7590_8958 = G__8970;
            continue;
          } else {
            var arg__5130__auto___8971 = cljs.core.first.call(null, seq__7587_8965__$1);
            a__5129__auto__.push(arg__5130__auto___8971);
            var G__8972 = cljs.core.next.call(null, seq__7587_8965__$1);
            var G__8973 = null;
            var G__8974 = 0;
            var G__8975 = 0;
            seq__7587_8955 = G__8972;
            chunk__7588_8956 = G__8973;
            count__7589_8957 = G__8974;
            i__7590_8958 = G__8975;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.dt.apply(null, a__5129__auto__);
  };
  var dt = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return dt__delegate.call(this, args__5128__auto__);
  };
  dt.cljs$lang$maxFixedArity = 0;
  dt.cljs$lang$applyTo = function(arglist__8976) {
    var args__5128__auto__ = cljs.core.seq(arglist__8976);
    return dt__delegate(args__5128__auto__);
  };
  dt.cljs$core$IFn$_invoke$arity$variadic = dt__delegate;
  return dt;
}();
quiescent.dom.em = function() {
  var em__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7595_8977 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7596_8978 = null;
    var count__7597_8979 = 0;
    var i__7598_8980 = 0;
    while (true) {
      if (i__7598_8980 < count__7597_8979) {
        var arg__5130__auto___8981 = cljs.core._nth.call(null, chunk__7596_8978, i__7598_8980);
        a__5129__auto__.push(arg__5130__auto___8981);
        var G__8982 = seq__7595_8977;
        var G__8983 = chunk__7596_8978;
        var G__8984 = count__7597_8979;
        var G__8985 = i__7598_8980 + 1;
        seq__7595_8977 = G__8982;
        chunk__7596_8978 = G__8983;
        count__7597_8979 = G__8984;
        i__7598_8980 = G__8985;
        continue;
      } else {
        var temp__4126__auto___8986 = cljs.core.seq.call(null, seq__7595_8977);
        if (temp__4126__auto___8986) {
          var seq__7595_8987__$1 = temp__4126__auto___8986;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7595_8987__$1)) {
            var c__4408__auto___8988 = cljs.core.chunk_first.call(null, seq__7595_8987__$1);
            var G__8989 = cljs.core.chunk_rest.call(null, seq__7595_8987__$1);
            var G__8990 = c__4408__auto___8988;
            var G__8991 = cljs.core.count.call(null, c__4408__auto___8988);
            var G__8992 = 0;
            seq__7595_8977 = G__8989;
            chunk__7596_8978 = G__8990;
            count__7597_8979 = G__8991;
            i__7598_8980 = G__8992;
            continue;
          } else {
            var arg__5130__auto___8993 = cljs.core.first.call(null, seq__7595_8987__$1);
            a__5129__auto__.push(arg__5130__auto___8993);
            var G__8994 = cljs.core.next.call(null, seq__7595_8987__$1);
            var G__8995 = null;
            var G__8996 = 0;
            var G__8997 = 0;
            seq__7595_8977 = G__8994;
            chunk__7596_8978 = G__8995;
            count__7597_8979 = G__8996;
            i__7598_8980 = G__8997;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.em.apply(null, a__5129__auto__);
  };
  var em = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return em__delegate.call(this, args__5128__auto__);
  };
  em.cljs$lang$maxFixedArity = 0;
  em.cljs$lang$applyTo = function(arglist__8998) {
    var args__5128__auto__ = cljs.core.seq(arglist__8998);
    return em__delegate(args__5128__auto__);
  };
  em.cljs$core$IFn$_invoke$arity$variadic = em__delegate;
  return em;
}();
quiescent.dom.embed = function() {
  var embed__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7611_8999 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7612_9000 = null;
    var count__7613_9001 = 0;
    var i__7614_9002 = 0;
    while (true) {
      if (i__7614_9002 < count__7613_9001) {
        var arg__5130__auto___9003 = cljs.core._nth.call(null, chunk__7612_9000, i__7614_9002);
        a__5129__auto__.push(arg__5130__auto___9003);
        var G__9004 = seq__7611_8999;
        var G__9005 = chunk__7612_9000;
        var G__9006 = count__7613_9001;
        var G__9007 = i__7614_9002 + 1;
        seq__7611_8999 = G__9004;
        chunk__7612_9000 = G__9005;
        count__7613_9001 = G__9006;
        i__7614_9002 = G__9007;
        continue;
      } else {
        var temp__4126__auto___9008 = cljs.core.seq.call(null, seq__7611_8999);
        if (temp__4126__auto___9008) {
          var seq__7611_9009__$1 = temp__4126__auto___9008;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7611_9009__$1)) {
            var c__4408__auto___9010 = cljs.core.chunk_first.call(null, seq__7611_9009__$1);
            var G__9011 = cljs.core.chunk_rest.call(null, seq__7611_9009__$1);
            var G__9012 = c__4408__auto___9010;
            var G__9013 = cljs.core.count.call(null, c__4408__auto___9010);
            var G__9014 = 0;
            seq__7611_8999 = G__9011;
            chunk__7612_9000 = G__9012;
            count__7613_9001 = G__9013;
            i__7614_9002 = G__9014;
            continue;
          } else {
            var arg__5130__auto___9015 = cljs.core.first.call(null, seq__7611_9009__$1);
            a__5129__auto__.push(arg__5130__auto___9015);
            var G__9016 = cljs.core.next.call(null, seq__7611_9009__$1);
            var G__9017 = null;
            var G__9018 = 0;
            var G__9019 = 0;
            seq__7611_8999 = G__9016;
            chunk__7612_9000 = G__9017;
            count__7613_9001 = G__9018;
            i__7614_9002 = G__9019;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.embed.apply(null, a__5129__auto__);
  };
  var embed = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return embed__delegate.call(this, args__5128__auto__);
  };
  embed.cljs$lang$maxFixedArity = 0;
  embed.cljs$lang$applyTo = function(arglist__9020) {
    var args__5128__auto__ = cljs.core.seq(arglist__9020);
    return embed__delegate(args__5128__auto__);
  };
  embed.cljs$core$IFn$_invoke$arity$variadic = embed__delegate;
  return embed;
}();
quiescent.dom.fieldset = function() {
  var fieldset__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7619_9021 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7620_9022 = null;
    var count__7621_9023 = 0;
    var i__7622_9024 = 0;
    while (true) {
      if (i__7622_9024 < count__7621_9023) {
        var arg__5130__auto___9025 = cljs.core._nth.call(null, chunk__7620_9022, i__7622_9024);
        a__5129__auto__.push(arg__5130__auto___9025);
        var G__9026 = seq__7619_9021;
        var G__9027 = chunk__7620_9022;
        var G__9028 = count__7621_9023;
        var G__9029 = i__7622_9024 + 1;
        seq__7619_9021 = G__9026;
        chunk__7620_9022 = G__9027;
        count__7621_9023 = G__9028;
        i__7622_9024 = G__9029;
        continue;
      } else {
        var temp__4126__auto___9030 = cljs.core.seq.call(null, seq__7619_9021);
        if (temp__4126__auto___9030) {
          var seq__7619_9031__$1 = temp__4126__auto___9030;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7619_9031__$1)) {
            var c__4408__auto___9032 = cljs.core.chunk_first.call(null, seq__7619_9031__$1);
            var G__9033 = cljs.core.chunk_rest.call(null, seq__7619_9031__$1);
            var G__9034 = c__4408__auto___9032;
            var G__9035 = cljs.core.count.call(null, c__4408__auto___9032);
            var G__9036 = 0;
            seq__7619_9021 = G__9033;
            chunk__7620_9022 = G__9034;
            count__7621_9023 = G__9035;
            i__7622_9024 = G__9036;
            continue;
          } else {
            var arg__5130__auto___9037 = cljs.core.first.call(null, seq__7619_9031__$1);
            a__5129__auto__.push(arg__5130__auto___9037);
            var G__9038 = cljs.core.next.call(null, seq__7619_9031__$1);
            var G__9039 = null;
            var G__9040 = 0;
            var G__9041 = 0;
            seq__7619_9021 = G__9038;
            chunk__7620_9022 = G__9039;
            count__7621_9023 = G__9040;
            i__7622_9024 = G__9041;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.fieldset.apply(null, a__5129__auto__);
  };
  var fieldset = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return fieldset__delegate.call(this, args__5128__auto__);
  };
  fieldset.cljs$lang$maxFixedArity = 0;
  fieldset.cljs$lang$applyTo = function(arglist__9042) {
    var args__5128__auto__ = cljs.core.seq(arglist__9042);
    return fieldset__delegate(args__5128__auto__);
  };
  fieldset.cljs$core$IFn$_invoke$arity$variadic = fieldset__delegate;
  return fieldset;
}();
quiescent.dom.figcaption = function() {
  var figcaption__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7627_9043 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7628_9044 = null;
    var count__7629_9045 = 0;
    var i__7630_9046 = 0;
    while (true) {
      if (i__7630_9046 < count__7629_9045) {
        var arg__5130__auto___9047 = cljs.core._nth.call(null, chunk__7628_9044, i__7630_9046);
        a__5129__auto__.push(arg__5130__auto___9047);
        var G__9048 = seq__7627_9043;
        var G__9049 = chunk__7628_9044;
        var G__9050 = count__7629_9045;
        var G__9051 = i__7630_9046 + 1;
        seq__7627_9043 = G__9048;
        chunk__7628_9044 = G__9049;
        count__7629_9045 = G__9050;
        i__7630_9046 = G__9051;
        continue;
      } else {
        var temp__4126__auto___9052 = cljs.core.seq.call(null, seq__7627_9043);
        if (temp__4126__auto___9052) {
          var seq__7627_9053__$1 = temp__4126__auto___9052;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7627_9053__$1)) {
            var c__4408__auto___9054 = cljs.core.chunk_first.call(null, seq__7627_9053__$1);
            var G__9055 = cljs.core.chunk_rest.call(null, seq__7627_9053__$1);
            var G__9056 = c__4408__auto___9054;
            var G__9057 = cljs.core.count.call(null, c__4408__auto___9054);
            var G__9058 = 0;
            seq__7627_9043 = G__9055;
            chunk__7628_9044 = G__9056;
            count__7629_9045 = G__9057;
            i__7630_9046 = G__9058;
            continue;
          } else {
            var arg__5130__auto___9059 = cljs.core.first.call(null, seq__7627_9053__$1);
            a__5129__auto__.push(arg__5130__auto___9059);
            var G__9060 = cljs.core.next.call(null, seq__7627_9053__$1);
            var G__9061 = null;
            var G__9062 = 0;
            var G__9063 = 0;
            seq__7627_9043 = G__9060;
            chunk__7628_9044 = G__9061;
            count__7629_9045 = G__9062;
            i__7630_9046 = G__9063;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figcaption.apply(null, a__5129__auto__);
  };
  var figcaption = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figcaption__delegate.call(this, args__5128__auto__);
  };
  figcaption.cljs$lang$maxFixedArity = 0;
  figcaption.cljs$lang$applyTo = function(arglist__9064) {
    var args__5128__auto__ = cljs.core.seq(arglist__9064);
    return figcaption__delegate(args__5128__auto__);
  };
  figcaption.cljs$core$IFn$_invoke$arity$variadic = figcaption__delegate;
  return figcaption;
}();
quiescent.dom.figure = function() {
  var figure__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7635_9065 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7636_9066 = null;
    var count__7637_9067 = 0;
    var i__7638_9068 = 0;
    while (true) {
      if (i__7638_9068 < count__7637_9067) {
        var arg__5130__auto___9069 = cljs.core._nth.call(null, chunk__7636_9066, i__7638_9068);
        a__5129__auto__.push(arg__5130__auto___9069);
        var G__9070 = seq__7635_9065;
        var G__9071 = chunk__7636_9066;
        var G__9072 = count__7637_9067;
        var G__9073 = i__7638_9068 + 1;
        seq__7635_9065 = G__9070;
        chunk__7636_9066 = G__9071;
        count__7637_9067 = G__9072;
        i__7638_9068 = G__9073;
        continue;
      } else {
        var temp__4126__auto___9074 = cljs.core.seq.call(null, seq__7635_9065);
        if (temp__4126__auto___9074) {
          var seq__7635_9075__$1 = temp__4126__auto___9074;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7635_9075__$1)) {
            var c__4408__auto___9076 = cljs.core.chunk_first.call(null, seq__7635_9075__$1);
            var G__9077 = cljs.core.chunk_rest.call(null, seq__7635_9075__$1);
            var G__9078 = c__4408__auto___9076;
            var G__9079 = cljs.core.count.call(null, c__4408__auto___9076);
            var G__9080 = 0;
            seq__7635_9065 = G__9077;
            chunk__7636_9066 = G__9078;
            count__7637_9067 = G__9079;
            i__7638_9068 = G__9080;
            continue;
          } else {
            var arg__5130__auto___9081 = cljs.core.first.call(null, seq__7635_9075__$1);
            a__5129__auto__.push(arg__5130__auto___9081);
            var G__9082 = cljs.core.next.call(null, seq__7635_9075__$1);
            var G__9083 = null;
            var G__9084 = 0;
            var G__9085 = 0;
            seq__7635_9065 = G__9082;
            chunk__7636_9066 = G__9083;
            count__7637_9067 = G__9084;
            i__7638_9068 = G__9085;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.figure.apply(null, a__5129__auto__);
  };
  var figure = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return figure__delegate.call(this, args__5128__auto__);
  };
  figure.cljs$lang$maxFixedArity = 0;
  figure.cljs$lang$applyTo = function(arglist__9086) {
    var args__5128__auto__ = cljs.core.seq(arglist__9086);
    return figure__delegate(args__5128__auto__);
  };
  figure.cljs$core$IFn$_invoke$arity$variadic = figure__delegate;
  return figure;
}();
quiescent.dom.footer = function() {
  var footer__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7643_9087 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7644_9088 = null;
    var count__7645_9089 = 0;
    var i__7646_9090 = 0;
    while (true) {
      if (i__7646_9090 < count__7645_9089) {
        var arg__5130__auto___9091 = cljs.core._nth.call(null, chunk__7644_9088, i__7646_9090);
        a__5129__auto__.push(arg__5130__auto___9091);
        var G__9092 = seq__7643_9087;
        var G__9093 = chunk__7644_9088;
        var G__9094 = count__7645_9089;
        var G__9095 = i__7646_9090 + 1;
        seq__7643_9087 = G__9092;
        chunk__7644_9088 = G__9093;
        count__7645_9089 = G__9094;
        i__7646_9090 = G__9095;
        continue;
      } else {
        var temp__4126__auto___9096 = cljs.core.seq.call(null, seq__7643_9087);
        if (temp__4126__auto___9096) {
          var seq__7643_9097__$1 = temp__4126__auto___9096;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7643_9097__$1)) {
            var c__4408__auto___9098 = cljs.core.chunk_first.call(null, seq__7643_9097__$1);
            var G__9099 = cljs.core.chunk_rest.call(null, seq__7643_9097__$1);
            var G__9100 = c__4408__auto___9098;
            var G__9101 = cljs.core.count.call(null, c__4408__auto___9098);
            var G__9102 = 0;
            seq__7643_9087 = G__9099;
            chunk__7644_9088 = G__9100;
            count__7645_9089 = G__9101;
            i__7646_9090 = G__9102;
            continue;
          } else {
            var arg__5130__auto___9103 = cljs.core.first.call(null, seq__7643_9097__$1);
            a__5129__auto__.push(arg__5130__auto___9103);
            var G__9104 = cljs.core.next.call(null, seq__7643_9097__$1);
            var G__9105 = null;
            var G__9106 = 0;
            var G__9107 = 0;
            seq__7643_9087 = G__9104;
            chunk__7644_9088 = G__9105;
            count__7645_9089 = G__9106;
            i__7646_9090 = G__9107;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.footer.apply(null, a__5129__auto__);
  };
  var footer = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return footer__delegate.call(this, args__5128__auto__);
  };
  footer.cljs$lang$maxFixedArity = 0;
  footer.cljs$lang$applyTo = function(arglist__9108) {
    var args__5128__auto__ = cljs.core.seq(arglist__9108);
    return footer__delegate(args__5128__auto__);
  };
  footer.cljs$core$IFn$_invoke$arity$variadic = footer__delegate;
  return footer;
}();
quiescent.dom.form = function() {
  var form__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7651_9109 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7652_9110 = null;
    var count__7653_9111 = 0;
    var i__7654_9112 = 0;
    while (true) {
      if (i__7654_9112 < count__7653_9111) {
        var arg__5130__auto___9113 = cljs.core._nth.call(null, chunk__7652_9110, i__7654_9112);
        a__5129__auto__.push(arg__5130__auto___9113);
        var G__9114 = seq__7651_9109;
        var G__9115 = chunk__7652_9110;
        var G__9116 = count__7653_9111;
        var G__9117 = i__7654_9112 + 1;
        seq__7651_9109 = G__9114;
        chunk__7652_9110 = G__9115;
        count__7653_9111 = G__9116;
        i__7654_9112 = G__9117;
        continue;
      } else {
        var temp__4126__auto___9118 = cljs.core.seq.call(null, seq__7651_9109);
        if (temp__4126__auto___9118) {
          var seq__7651_9119__$1 = temp__4126__auto___9118;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7651_9119__$1)) {
            var c__4408__auto___9120 = cljs.core.chunk_first.call(null, seq__7651_9119__$1);
            var G__9121 = cljs.core.chunk_rest.call(null, seq__7651_9119__$1);
            var G__9122 = c__4408__auto___9120;
            var G__9123 = cljs.core.count.call(null, c__4408__auto___9120);
            var G__9124 = 0;
            seq__7651_9109 = G__9121;
            chunk__7652_9110 = G__9122;
            count__7653_9111 = G__9123;
            i__7654_9112 = G__9124;
            continue;
          } else {
            var arg__5130__auto___9125 = cljs.core.first.call(null, seq__7651_9119__$1);
            a__5129__auto__.push(arg__5130__auto___9125);
            var G__9126 = cljs.core.next.call(null, seq__7651_9119__$1);
            var G__9127 = null;
            var G__9128 = 0;
            var G__9129 = 0;
            seq__7651_9109 = G__9126;
            chunk__7652_9110 = G__9127;
            count__7653_9111 = G__9128;
            i__7654_9112 = G__9129;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.form.apply(null, a__5129__auto__);
  };
  var form = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return form__delegate.call(this, args__5128__auto__);
  };
  form.cljs$lang$maxFixedArity = 0;
  form.cljs$lang$applyTo = function(arglist__9130) {
    var args__5128__auto__ = cljs.core.seq(arglist__9130);
    return form__delegate(args__5128__auto__);
  };
  form.cljs$core$IFn$_invoke$arity$variadic = form__delegate;
  return form;
}();
quiescent.dom.h1 = function() {
  var h1__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7659_9131 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7660_9132 = null;
    var count__7661_9133 = 0;
    var i__7662_9134 = 0;
    while (true) {
      if (i__7662_9134 < count__7661_9133) {
        var arg__5130__auto___9135 = cljs.core._nth.call(null, chunk__7660_9132, i__7662_9134);
        a__5129__auto__.push(arg__5130__auto___9135);
        var G__9136 = seq__7659_9131;
        var G__9137 = chunk__7660_9132;
        var G__9138 = count__7661_9133;
        var G__9139 = i__7662_9134 + 1;
        seq__7659_9131 = G__9136;
        chunk__7660_9132 = G__9137;
        count__7661_9133 = G__9138;
        i__7662_9134 = G__9139;
        continue;
      } else {
        var temp__4126__auto___9140 = cljs.core.seq.call(null, seq__7659_9131);
        if (temp__4126__auto___9140) {
          var seq__7659_9141__$1 = temp__4126__auto___9140;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7659_9141__$1)) {
            var c__4408__auto___9142 = cljs.core.chunk_first.call(null, seq__7659_9141__$1);
            var G__9143 = cljs.core.chunk_rest.call(null, seq__7659_9141__$1);
            var G__9144 = c__4408__auto___9142;
            var G__9145 = cljs.core.count.call(null, c__4408__auto___9142);
            var G__9146 = 0;
            seq__7659_9131 = G__9143;
            chunk__7660_9132 = G__9144;
            count__7661_9133 = G__9145;
            i__7662_9134 = G__9146;
            continue;
          } else {
            var arg__5130__auto___9147 = cljs.core.first.call(null, seq__7659_9141__$1);
            a__5129__auto__.push(arg__5130__auto___9147);
            var G__9148 = cljs.core.next.call(null, seq__7659_9141__$1);
            var G__9149 = null;
            var G__9150 = 0;
            var G__9151 = 0;
            seq__7659_9131 = G__9148;
            chunk__7660_9132 = G__9149;
            count__7661_9133 = G__9150;
            i__7662_9134 = G__9151;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h1.apply(null, a__5129__auto__);
  };
  var h1 = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h1__delegate.call(this, args__5128__auto__);
  };
  h1.cljs$lang$maxFixedArity = 0;
  h1.cljs$lang$applyTo = function(arglist__9152) {
    var args__5128__auto__ = cljs.core.seq(arglist__9152);
    return h1__delegate(args__5128__auto__);
  };
  h1.cljs$core$IFn$_invoke$arity$variadic = h1__delegate;
  return h1;
}();
quiescent.dom.h2 = function() {
  var h2__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7667_9153 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7668_9154 = null;
    var count__7669_9155 = 0;
    var i__7670_9156 = 0;
    while (true) {
      if (i__7670_9156 < count__7669_9155) {
        var arg__5130__auto___9157 = cljs.core._nth.call(null, chunk__7668_9154, i__7670_9156);
        a__5129__auto__.push(arg__5130__auto___9157);
        var G__9158 = seq__7667_9153;
        var G__9159 = chunk__7668_9154;
        var G__9160 = count__7669_9155;
        var G__9161 = i__7670_9156 + 1;
        seq__7667_9153 = G__9158;
        chunk__7668_9154 = G__9159;
        count__7669_9155 = G__9160;
        i__7670_9156 = G__9161;
        continue;
      } else {
        var temp__4126__auto___9162 = cljs.core.seq.call(null, seq__7667_9153);
        if (temp__4126__auto___9162) {
          var seq__7667_9163__$1 = temp__4126__auto___9162;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7667_9163__$1)) {
            var c__4408__auto___9164 = cljs.core.chunk_first.call(null, seq__7667_9163__$1);
            var G__9165 = cljs.core.chunk_rest.call(null, seq__7667_9163__$1);
            var G__9166 = c__4408__auto___9164;
            var G__9167 = cljs.core.count.call(null, c__4408__auto___9164);
            var G__9168 = 0;
            seq__7667_9153 = G__9165;
            chunk__7668_9154 = G__9166;
            count__7669_9155 = G__9167;
            i__7670_9156 = G__9168;
            continue;
          } else {
            var arg__5130__auto___9169 = cljs.core.first.call(null, seq__7667_9163__$1);
            a__5129__auto__.push(arg__5130__auto___9169);
            var G__9170 = cljs.core.next.call(null, seq__7667_9163__$1);
            var G__9171 = null;
            var G__9172 = 0;
            var G__9173 = 0;
            seq__7667_9153 = G__9170;
            chunk__7668_9154 = G__9171;
            count__7669_9155 = G__9172;
            i__7670_9156 = G__9173;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h2.apply(null, a__5129__auto__);
  };
  var h2 = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h2__delegate.call(this, args__5128__auto__);
  };
  h2.cljs$lang$maxFixedArity = 0;
  h2.cljs$lang$applyTo = function(arglist__9174) {
    var args__5128__auto__ = cljs.core.seq(arglist__9174);
    return h2__delegate(args__5128__auto__);
  };
  h2.cljs$core$IFn$_invoke$arity$variadic = h2__delegate;
  return h2;
}();
quiescent.dom.h3 = function() {
  var h3__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7675_9175 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7676_9176 = null;
    var count__7677_9177 = 0;
    var i__7678_9178 = 0;
    while (true) {
      if (i__7678_9178 < count__7677_9177) {
        var arg__5130__auto___9179 = cljs.core._nth.call(null, chunk__7676_9176, i__7678_9178);
        a__5129__auto__.push(arg__5130__auto___9179);
        var G__9180 = seq__7675_9175;
        var G__9181 = chunk__7676_9176;
        var G__9182 = count__7677_9177;
        var G__9183 = i__7678_9178 + 1;
        seq__7675_9175 = G__9180;
        chunk__7676_9176 = G__9181;
        count__7677_9177 = G__9182;
        i__7678_9178 = G__9183;
        continue;
      } else {
        var temp__4126__auto___9184 = cljs.core.seq.call(null, seq__7675_9175);
        if (temp__4126__auto___9184) {
          var seq__7675_9185__$1 = temp__4126__auto___9184;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7675_9185__$1)) {
            var c__4408__auto___9186 = cljs.core.chunk_first.call(null, seq__7675_9185__$1);
            var G__9187 = cljs.core.chunk_rest.call(null, seq__7675_9185__$1);
            var G__9188 = c__4408__auto___9186;
            var G__9189 = cljs.core.count.call(null, c__4408__auto___9186);
            var G__9190 = 0;
            seq__7675_9175 = G__9187;
            chunk__7676_9176 = G__9188;
            count__7677_9177 = G__9189;
            i__7678_9178 = G__9190;
            continue;
          } else {
            var arg__5130__auto___9191 = cljs.core.first.call(null, seq__7675_9185__$1);
            a__5129__auto__.push(arg__5130__auto___9191);
            var G__9192 = cljs.core.next.call(null, seq__7675_9185__$1);
            var G__9193 = null;
            var G__9194 = 0;
            var G__9195 = 0;
            seq__7675_9175 = G__9192;
            chunk__7676_9176 = G__9193;
            count__7677_9177 = G__9194;
            i__7678_9178 = G__9195;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h3.apply(null, a__5129__auto__);
  };
  var h3 = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h3__delegate.call(this, args__5128__auto__);
  };
  h3.cljs$lang$maxFixedArity = 0;
  h3.cljs$lang$applyTo = function(arglist__9196) {
    var args__5128__auto__ = cljs.core.seq(arglist__9196);
    return h3__delegate(args__5128__auto__);
  };
  h3.cljs$core$IFn$_invoke$arity$variadic = h3__delegate;
  return h3;
}();
quiescent.dom.h4 = function() {
  var h4__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7683_9197 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7684_9198 = null;
    var count__7685_9199 = 0;
    var i__7686_9200 = 0;
    while (true) {
      if (i__7686_9200 < count__7685_9199) {
        var arg__5130__auto___9201 = cljs.core._nth.call(null, chunk__7684_9198, i__7686_9200);
        a__5129__auto__.push(arg__5130__auto___9201);
        var G__9202 = seq__7683_9197;
        var G__9203 = chunk__7684_9198;
        var G__9204 = count__7685_9199;
        var G__9205 = i__7686_9200 + 1;
        seq__7683_9197 = G__9202;
        chunk__7684_9198 = G__9203;
        count__7685_9199 = G__9204;
        i__7686_9200 = G__9205;
        continue;
      } else {
        var temp__4126__auto___9206 = cljs.core.seq.call(null, seq__7683_9197);
        if (temp__4126__auto___9206) {
          var seq__7683_9207__$1 = temp__4126__auto___9206;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7683_9207__$1)) {
            var c__4408__auto___9208 = cljs.core.chunk_first.call(null, seq__7683_9207__$1);
            var G__9209 = cljs.core.chunk_rest.call(null, seq__7683_9207__$1);
            var G__9210 = c__4408__auto___9208;
            var G__9211 = cljs.core.count.call(null, c__4408__auto___9208);
            var G__9212 = 0;
            seq__7683_9197 = G__9209;
            chunk__7684_9198 = G__9210;
            count__7685_9199 = G__9211;
            i__7686_9200 = G__9212;
            continue;
          } else {
            var arg__5130__auto___9213 = cljs.core.first.call(null, seq__7683_9207__$1);
            a__5129__auto__.push(arg__5130__auto___9213);
            var G__9214 = cljs.core.next.call(null, seq__7683_9207__$1);
            var G__9215 = null;
            var G__9216 = 0;
            var G__9217 = 0;
            seq__7683_9197 = G__9214;
            chunk__7684_9198 = G__9215;
            count__7685_9199 = G__9216;
            i__7686_9200 = G__9217;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h4.apply(null, a__5129__auto__);
  };
  var h4 = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h4__delegate.call(this, args__5128__auto__);
  };
  h4.cljs$lang$maxFixedArity = 0;
  h4.cljs$lang$applyTo = function(arglist__9218) {
    var args__5128__auto__ = cljs.core.seq(arglist__9218);
    return h4__delegate(args__5128__auto__);
  };
  h4.cljs$core$IFn$_invoke$arity$variadic = h4__delegate;
  return h4;
}();
quiescent.dom.h5 = function() {
  var h5__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7691_9219 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7692_9220 = null;
    var count__7693_9221 = 0;
    var i__7694_9222 = 0;
    while (true) {
      if (i__7694_9222 < count__7693_9221) {
        var arg__5130__auto___9223 = cljs.core._nth.call(null, chunk__7692_9220, i__7694_9222);
        a__5129__auto__.push(arg__5130__auto___9223);
        var G__9224 = seq__7691_9219;
        var G__9225 = chunk__7692_9220;
        var G__9226 = count__7693_9221;
        var G__9227 = i__7694_9222 + 1;
        seq__7691_9219 = G__9224;
        chunk__7692_9220 = G__9225;
        count__7693_9221 = G__9226;
        i__7694_9222 = G__9227;
        continue;
      } else {
        var temp__4126__auto___9228 = cljs.core.seq.call(null, seq__7691_9219);
        if (temp__4126__auto___9228) {
          var seq__7691_9229__$1 = temp__4126__auto___9228;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7691_9229__$1)) {
            var c__4408__auto___9230 = cljs.core.chunk_first.call(null, seq__7691_9229__$1);
            var G__9231 = cljs.core.chunk_rest.call(null, seq__7691_9229__$1);
            var G__9232 = c__4408__auto___9230;
            var G__9233 = cljs.core.count.call(null, c__4408__auto___9230);
            var G__9234 = 0;
            seq__7691_9219 = G__9231;
            chunk__7692_9220 = G__9232;
            count__7693_9221 = G__9233;
            i__7694_9222 = G__9234;
            continue;
          } else {
            var arg__5130__auto___9235 = cljs.core.first.call(null, seq__7691_9229__$1);
            a__5129__auto__.push(arg__5130__auto___9235);
            var G__9236 = cljs.core.next.call(null, seq__7691_9229__$1);
            var G__9237 = null;
            var G__9238 = 0;
            var G__9239 = 0;
            seq__7691_9219 = G__9236;
            chunk__7692_9220 = G__9237;
            count__7693_9221 = G__9238;
            i__7694_9222 = G__9239;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h5.apply(null, a__5129__auto__);
  };
  var h5 = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h5__delegate.call(this, args__5128__auto__);
  };
  h5.cljs$lang$maxFixedArity = 0;
  h5.cljs$lang$applyTo = function(arglist__9240) {
    var args__5128__auto__ = cljs.core.seq(arglist__9240);
    return h5__delegate(args__5128__auto__);
  };
  h5.cljs$core$IFn$_invoke$arity$variadic = h5__delegate;
  return h5;
}();
quiescent.dom.h6 = function() {
  var h6__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7699_9241 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7700_9242 = null;
    var count__7701_9243 = 0;
    var i__7702_9244 = 0;
    while (true) {
      if (i__7702_9244 < count__7701_9243) {
        var arg__5130__auto___9245 = cljs.core._nth.call(null, chunk__7700_9242, i__7702_9244);
        a__5129__auto__.push(arg__5130__auto___9245);
        var G__9246 = seq__7699_9241;
        var G__9247 = chunk__7700_9242;
        var G__9248 = count__7701_9243;
        var G__9249 = i__7702_9244 + 1;
        seq__7699_9241 = G__9246;
        chunk__7700_9242 = G__9247;
        count__7701_9243 = G__9248;
        i__7702_9244 = G__9249;
        continue;
      } else {
        var temp__4126__auto___9250 = cljs.core.seq.call(null, seq__7699_9241);
        if (temp__4126__auto___9250) {
          var seq__7699_9251__$1 = temp__4126__auto___9250;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7699_9251__$1)) {
            var c__4408__auto___9252 = cljs.core.chunk_first.call(null, seq__7699_9251__$1);
            var G__9253 = cljs.core.chunk_rest.call(null, seq__7699_9251__$1);
            var G__9254 = c__4408__auto___9252;
            var G__9255 = cljs.core.count.call(null, c__4408__auto___9252);
            var G__9256 = 0;
            seq__7699_9241 = G__9253;
            chunk__7700_9242 = G__9254;
            count__7701_9243 = G__9255;
            i__7702_9244 = G__9256;
            continue;
          } else {
            var arg__5130__auto___9257 = cljs.core.first.call(null, seq__7699_9251__$1);
            a__5129__auto__.push(arg__5130__auto___9257);
            var G__9258 = cljs.core.next.call(null, seq__7699_9251__$1);
            var G__9259 = null;
            var G__9260 = 0;
            var G__9261 = 0;
            seq__7699_9241 = G__9258;
            chunk__7700_9242 = G__9259;
            count__7701_9243 = G__9260;
            i__7702_9244 = G__9261;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.h6.apply(null, a__5129__auto__);
  };
  var h6 = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return h6__delegate.call(this, args__5128__auto__);
  };
  h6.cljs$lang$maxFixedArity = 0;
  h6.cljs$lang$applyTo = function(arglist__9262) {
    var args__5128__auto__ = cljs.core.seq(arglist__9262);
    return h6__delegate(args__5128__auto__);
  };
  h6.cljs$core$IFn$_invoke$arity$variadic = h6__delegate;
  return h6;
}();
quiescent.dom.head = function() {
  var head__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7707_9263 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7708_9264 = null;
    var count__7709_9265 = 0;
    var i__7710_9266 = 0;
    while (true) {
      if (i__7710_9266 < count__7709_9265) {
        var arg__5130__auto___9267 = cljs.core._nth.call(null, chunk__7708_9264, i__7710_9266);
        a__5129__auto__.push(arg__5130__auto___9267);
        var G__9268 = seq__7707_9263;
        var G__9269 = chunk__7708_9264;
        var G__9270 = count__7709_9265;
        var G__9271 = i__7710_9266 + 1;
        seq__7707_9263 = G__9268;
        chunk__7708_9264 = G__9269;
        count__7709_9265 = G__9270;
        i__7710_9266 = G__9271;
        continue;
      } else {
        var temp__4126__auto___9272 = cljs.core.seq.call(null, seq__7707_9263);
        if (temp__4126__auto___9272) {
          var seq__7707_9273__$1 = temp__4126__auto___9272;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7707_9273__$1)) {
            var c__4408__auto___9274 = cljs.core.chunk_first.call(null, seq__7707_9273__$1);
            var G__9275 = cljs.core.chunk_rest.call(null, seq__7707_9273__$1);
            var G__9276 = c__4408__auto___9274;
            var G__9277 = cljs.core.count.call(null, c__4408__auto___9274);
            var G__9278 = 0;
            seq__7707_9263 = G__9275;
            chunk__7708_9264 = G__9276;
            count__7709_9265 = G__9277;
            i__7710_9266 = G__9278;
            continue;
          } else {
            var arg__5130__auto___9279 = cljs.core.first.call(null, seq__7707_9273__$1);
            a__5129__auto__.push(arg__5130__auto___9279);
            var G__9280 = cljs.core.next.call(null, seq__7707_9273__$1);
            var G__9281 = null;
            var G__9282 = 0;
            var G__9283 = 0;
            seq__7707_9263 = G__9280;
            chunk__7708_9264 = G__9281;
            count__7709_9265 = G__9282;
            i__7710_9266 = G__9283;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.head.apply(null, a__5129__auto__);
  };
  var head = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return head__delegate.call(this, args__5128__auto__);
  };
  head.cljs$lang$maxFixedArity = 0;
  head.cljs$lang$applyTo = function(arglist__9284) {
    var args__5128__auto__ = cljs.core.seq(arglist__9284);
    return head__delegate(args__5128__auto__);
  };
  head.cljs$core$IFn$_invoke$arity$variadic = head__delegate;
  return head;
}();
quiescent.dom.header = function() {
  var header__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7715_9285 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7716_9286 = null;
    var count__7717_9287 = 0;
    var i__7718_9288 = 0;
    while (true) {
      if (i__7718_9288 < count__7717_9287) {
        var arg__5130__auto___9289 = cljs.core._nth.call(null, chunk__7716_9286, i__7718_9288);
        a__5129__auto__.push(arg__5130__auto___9289);
        var G__9290 = seq__7715_9285;
        var G__9291 = chunk__7716_9286;
        var G__9292 = count__7717_9287;
        var G__9293 = i__7718_9288 + 1;
        seq__7715_9285 = G__9290;
        chunk__7716_9286 = G__9291;
        count__7717_9287 = G__9292;
        i__7718_9288 = G__9293;
        continue;
      } else {
        var temp__4126__auto___9294 = cljs.core.seq.call(null, seq__7715_9285);
        if (temp__4126__auto___9294) {
          var seq__7715_9295__$1 = temp__4126__auto___9294;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7715_9295__$1)) {
            var c__4408__auto___9296 = cljs.core.chunk_first.call(null, seq__7715_9295__$1);
            var G__9297 = cljs.core.chunk_rest.call(null, seq__7715_9295__$1);
            var G__9298 = c__4408__auto___9296;
            var G__9299 = cljs.core.count.call(null, c__4408__auto___9296);
            var G__9300 = 0;
            seq__7715_9285 = G__9297;
            chunk__7716_9286 = G__9298;
            count__7717_9287 = G__9299;
            i__7718_9288 = G__9300;
            continue;
          } else {
            var arg__5130__auto___9301 = cljs.core.first.call(null, seq__7715_9295__$1);
            a__5129__auto__.push(arg__5130__auto___9301);
            var G__9302 = cljs.core.next.call(null, seq__7715_9295__$1);
            var G__9303 = null;
            var G__9304 = 0;
            var G__9305 = 0;
            seq__7715_9285 = G__9302;
            chunk__7716_9286 = G__9303;
            count__7717_9287 = G__9304;
            i__7718_9288 = G__9305;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.header.apply(null, a__5129__auto__);
  };
  var header = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return header__delegate.call(this, args__5128__auto__);
  };
  header.cljs$lang$maxFixedArity = 0;
  header.cljs$lang$applyTo = function(arglist__9306) {
    var args__5128__auto__ = cljs.core.seq(arglist__9306);
    return header__delegate(args__5128__auto__);
  };
  header.cljs$core$IFn$_invoke$arity$variadic = header__delegate;
  return header;
}();
quiescent.dom.hr = function() {
  var hr__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7723_9307 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7724_9308 = null;
    var count__7725_9309 = 0;
    var i__7726_9310 = 0;
    while (true) {
      if (i__7726_9310 < count__7725_9309) {
        var arg__5130__auto___9311 = cljs.core._nth.call(null, chunk__7724_9308, i__7726_9310);
        a__5129__auto__.push(arg__5130__auto___9311);
        var G__9312 = seq__7723_9307;
        var G__9313 = chunk__7724_9308;
        var G__9314 = count__7725_9309;
        var G__9315 = i__7726_9310 + 1;
        seq__7723_9307 = G__9312;
        chunk__7724_9308 = G__9313;
        count__7725_9309 = G__9314;
        i__7726_9310 = G__9315;
        continue;
      } else {
        var temp__4126__auto___9316 = cljs.core.seq.call(null, seq__7723_9307);
        if (temp__4126__auto___9316) {
          var seq__7723_9317__$1 = temp__4126__auto___9316;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7723_9317__$1)) {
            var c__4408__auto___9318 = cljs.core.chunk_first.call(null, seq__7723_9317__$1);
            var G__9319 = cljs.core.chunk_rest.call(null, seq__7723_9317__$1);
            var G__9320 = c__4408__auto___9318;
            var G__9321 = cljs.core.count.call(null, c__4408__auto___9318);
            var G__9322 = 0;
            seq__7723_9307 = G__9319;
            chunk__7724_9308 = G__9320;
            count__7725_9309 = G__9321;
            i__7726_9310 = G__9322;
            continue;
          } else {
            var arg__5130__auto___9323 = cljs.core.first.call(null, seq__7723_9317__$1);
            a__5129__auto__.push(arg__5130__auto___9323);
            var G__9324 = cljs.core.next.call(null, seq__7723_9317__$1);
            var G__9325 = null;
            var G__9326 = 0;
            var G__9327 = 0;
            seq__7723_9307 = G__9324;
            chunk__7724_9308 = G__9325;
            count__7725_9309 = G__9326;
            i__7726_9310 = G__9327;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.hr.apply(null, a__5129__auto__);
  };
  var hr = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return hr__delegate.call(this, args__5128__auto__);
  };
  hr.cljs$lang$maxFixedArity = 0;
  hr.cljs$lang$applyTo = function(arglist__9328) {
    var args__5128__auto__ = cljs.core.seq(arglist__9328);
    return hr__delegate(args__5128__auto__);
  };
  hr.cljs$core$IFn$_invoke$arity$variadic = hr__delegate;
  return hr;
}();
quiescent.dom.html = function() {
  var html__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7731_9329 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7732_9330 = null;
    var count__7733_9331 = 0;
    var i__7734_9332 = 0;
    while (true) {
      if (i__7734_9332 < count__7733_9331) {
        var arg__5130__auto___9333 = cljs.core._nth.call(null, chunk__7732_9330, i__7734_9332);
        a__5129__auto__.push(arg__5130__auto___9333);
        var G__9334 = seq__7731_9329;
        var G__9335 = chunk__7732_9330;
        var G__9336 = count__7733_9331;
        var G__9337 = i__7734_9332 + 1;
        seq__7731_9329 = G__9334;
        chunk__7732_9330 = G__9335;
        count__7733_9331 = G__9336;
        i__7734_9332 = G__9337;
        continue;
      } else {
        var temp__4126__auto___9338 = cljs.core.seq.call(null, seq__7731_9329);
        if (temp__4126__auto___9338) {
          var seq__7731_9339__$1 = temp__4126__auto___9338;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7731_9339__$1)) {
            var c__4408__auto___9340 = cljs.core.chunk_first.call(null, seq__7731_9339__$1);
            var G__9341 = cljs.core.chunk_rest.call(null, seq__7731_9339__$1);
            var G__9342 = c__4408__auto___9340;
            var G__9343 = cljs.core.count.call(null, c__4408__auto___9340);
            var G__9344 = 0;
            seq__7731_9329 = G__9341;
            chunk__7732_9330 = G__9342;
            count__7733_9331 = G__9343;
            i__7734_9332 = G__9344;
            continue;
          } else {
            var arg__5130__auto___9345 = cljs.core.first.call(null, seq__7731_9339__$1);
            a__5129__auto__.push(arg__5130__auto___9345);
            var G__9346 = cljs.core.next.call(null, seq__7731_9339__$1);
            var G__9347 = null;
            var G__9348 = 0;
            var G__9349 = 0;
            seq__7731_9329 = G__9346;
            chunk__7732_9330 = G__9347;
            count__7733_9331 = G__9348;
            i__7734_9332 = G__9349;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.html.apply(null, a__5129__auto__);
  };
  var html = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return html__delegate.call(this, args__5128__auto__);
  };
  html.cljs$lang$maxFixedArity = 0;
  html.cljs$lang$applyTo = function(arglist__9350) {
    var args__5128__auto__ = cljs.core.seq(arglist__9350);
    return html__delegate(args__5128__auto__);
  };
  html.cljs$core$IFn$_invoke$arity$variadic = html__delegate;
  return html;
}();
quiescent.dom.i = function() {
  var i__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7739_9351 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7740_9352 = null;
    var count__7741_9353 = 0;
    var i__7742_9354 = 0;
    while (true) {
      if (i__7742_9354 < count__7741_9353) {
        var arg__5130__auto___9355 = cljs.core._nth.call(null, chunk__7740_9352, i__7742_9354);
        a__5129__auto__.push(arg__5130__auto___9355);
        var G__9356 = seq__7739_9351;
        var G__9357 = chunk__7740_9352;
        var G__9358 = count__7741_9353;
        var G__9359 = i__7742_9354 + 1;
        seq__7739_9351 = G__9356;
        chunk__7740_9352 = G__9357;
        count__7741_9353 = G__9358;
        i__7742_9354 = G__9359;
        continue;
      } else {
        var temp__4126__auto___9360 = cljs.core.seq.call(null, seq__7739_9351);
        if (temp__4126__auto___9360) {
          var seq__7739_9361__$1 = temp__4126__auto___9360;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7739_9361__$1)) {
            var c__4408__auto___9362 = cljs.core.chunk_first.call(null, seq__7739_9361__$1);
            var G__9363 = cljs.core.chunk_rest.call(null, seq__7739_9361__$1);
            var G__9364 = c__4408__auto___9362;
            var G__9365 = cljs.core.count.call(null, c__4408__auto___9362);
            var G__9366 = 0;
            seq__7739_9351 = G__9363;
            chunk__7740_9352 = G__9364;
            count__7741_9353 = G__9365;
            i__7742_9354 = G__9366;
            continue;
          } else {
            var arg__5130__auto___9367 = cljs.core.first.call(null, seq__7739_9361__$1);
            a__5129__auto__.push(arg__5130__auto___9367);
            var G__9368 = cljs.core.next.call(null, seq__7739_9361__$1);
            var G__9369 = null;
            var G__9370 = 0;
            var G__9371 = 0;
            seq__7739_9351 = G__9368;
            chunk__7740_9352 = G__9369;
            count__7741_9353 = G__9370;
            i__7742_9354 = G__9371;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.i.apply(null, a__5129__auto__);
  };
  var i = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return i__delegate.call(this, args__5128__auto__);
  };
  i.cljs$lang$maxFixedArity = 0;
  i.cljs$lang$applyTo = function(arglist__9372) {
    var args__5128__auto__ = cljs.core.seq(arglist__9372);
    return i__delegate(args__5128__auto__);
  };
  i.cljs$core$IFn$_invoke$arity$variadic = i__delegate;
  return i;
}();
quiescent.dom.iframe = function() {
  var iframe__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7747_9373 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7748_9374 = null;
    var count__7749_9375 = 0;
    var i__7750_9376 = 0;
    while (true) {
      if (i__7750_9376 < count__7749_9375) {
        var arg__5130__auto___9377 = cljs.core._nth.call(null, chunk__7748_9374, i__7750_9376);
        a__5129__auto__.push(arg__5130__auto___9377);
        var G__9378 = seq__7747_9373;
        var G__9379 = chunk__7748_9374;
        var G__9380 = count__7749_9375;
        var G__9381 = i__7750_9376 + 1;
        seq__7747_9373 = G__9378;
        chunk__7748_9374 = G__9379;
        count__7749_9375 = G__9380;
        i__7750_9376 = G__9381;
        continue;
      } else {
        var temp__4126__auto___9382 = cljs.core.seq.call(null, seq__7747_9373);
        if (temp__4126__auto___9382) {
          var seq__7747_9383__$1 = temp__4126__auto___9382;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7747_9383__$1)) {
            var c__4408__auto___9384 = cljs.core.chunk_first.call(null, seq__7747_9383__$1);
            var G__9385 = cljs.core.chunk_rest.call(null, seq__7747_9383__$1);
            var G__9386 = c__4408__auto___9384;
            var G__9387 = cljs.core.count.call(null, c__4408__auto___9384);
            var G__9388 = 0;
            seq__7747_9373 = G__9385;
            chunk__7748_9374 = G__9386;
            count__7749_9375 = G__9387;
            i__7750_9376 = G__9388;
            continue;
          } else {
            var arg__5130__auto___9389 = cljs.core.first.call(null, seq__7747_9383__$1);
            a__5129__auto__.push(arg__5130__auto___9389);
            var G__9390 = cljs.core.next.call(null, seq__7747_9383__$1);
            var G__9391 = null;
            var G__9392 = 0;
            var G__9393 = 0;
            seq__7747_9373 = G__9390;
            chunk__7748_9374 = G__9391;
            count__7749_9375 = G__9392;
            i__7750_9376 = G__9393;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.iframe.apply(null, a__5129__auto__);
  };
  var iframe = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return iframe__delegate.call(this, args__5128__auto__);
  };
  iframe.cljs$lang$maxFixedArity = 0;
  iframe.cljs$lang$applyTo = function(arglist__9394) {
    var args__5128__auto__ = cljs.core.seq(arglist__9394);
    return iframe__delegate(args__5128__auto__);
  };
  iframe.cljs$core$IFn$_invoke$arity$variadic = iframe__delegate;
  return iframe;
}();
quiescent.dom.img = function() {
  var img__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7755_9395 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7756_9396 = null;
    var count__7757_9397 = 0;
    var i__7758_9398 = 0;
    while (true) {
      if (i__7758_9398 < count__7757_9397) {
        var arg__5130__auto___9399 = cljs.core._nth.call(null, chunk__7756_9396, i__7758_9398);
        a__5129__auto__.push(arg__5130__auto___9399);
        var G__9400 = seq__7755_9395;
        var G__9401 = chunk__7756_9396;
        var G__9402 = count__7757_9397;
        var G__9403 = i__7758_9398 + 1;
        seq__7755_9395 = G__9400;
        chunk__7756_9396 = G__9401;
        count__7757_9397 = G__9402;
        i__7758_9398 = G__9403;
        continue;
      } else {
        var temp__4126__auto___9404 = cljs.core.seq.call(null, seq__7755_9395);
        if (temp__4126__auto___9404) {
          var seq__7755_9405__$1 = temp__4126__auto___9404;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7755_9405__$1)) {
            var c__4408__auto___9406 = cljs.core.chunk_first.call(null, seq__7755_9405__$1);
            var G__9407 = cljs.core.chunk_rest.call(null, seq__7755_9405__$1);
            var G__9408 = c__4408__auto___9406;
            var G__9409 = cljs.core.count.call(null, c__4408__auto___9406);
            var G__9410 = 0;
            seq__7755_9395 = G__9407;
            chunk__7756_9396 = G__9408;
            count__7757_9397 = G__9409;
            i__7758_9398 = G__9410;
            continue;
          } else {
            var arg__5130__auto___9411 = cljs.core.first.call(null, seq__7755_9405__$1);
            a__5129__auto__.push(arg__5130__auto___9411);
            var G__9412 = cljs.core.next.call(null, seq__7755_9405__$1);
            var G__9413 = null;
            var G__9414 = 0;
            var G__9415 = 0;
            seq__7755_9395 = G__9412;
            chunk__7756_9396 = G__9413;
            count__7757_9397 = G__9414;
            i__7758_9398 = G__9415;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.img.apply(null, a__5129__auto__);
  };
  var img = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return img__delegate.call(this, args__5128__auto__);
  };
  img.cljs$lang$maxFixedArity = 0;
  img.cljs$lang$applyTo = function(arglist__9416) {
    var args__5128__auto__ = cljs.core.seq(arglist__9416);
    return img__delegate(args__5128__auto__);
  };
  img.cljs$core$IFn$_invoke$arity$variadic = img__delegate;
  return img;
}();
quiescent.dom.input = function() {
  var input__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7763_9417 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7764_9418 = null;
    var count__7765_9419 = 0;
    var i__7766_9420 = 0;
    while (true) {
      if (i__7766_9420 < count__7765_9419) {
        var arg__5130__auto___9421 = cljs.core._nth.call(null, chunk__7764_9418, i__7766_9420);
        a__5129__auto__.push(arg__5130__auto___9421);
        var G__9422 = seq__7763_9417;
        var G__9423 = chunk__7764_9418;
        var G__9424 = count__7765_9419;
        var G__9425 = i__7766_9420 + 1;
        seq__7763_9417 = G__9422;
        chunk__7764_9418 = G__9423;
        count__7765_9419 = G__9424;
        i__7766_9420 = G__9425;
        continue;
      } else {
        var temp__4126__auto___9426 = cljs.core.seq.call(null, seq__7763_9417);
        if (temp__4126__auto___9426) {
          var seq__7763_9427__$1 = temp__4126__auto___9426;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7763_9427__$1)) {
            var c__4408__auto___9428 = cljs.core.chunk_first.call(null, seq__7763_9427__$1);
            var G__9429 = cljs.core.chunk_rest.call(null, seq__7763_9427__$1);
            var G__9430 = c__4408__auto___9428;
            var G__9431 = cljs.core.count.call(null, c__4408__auto___9428);
            var G__9432 = 0;
            seq__7763_9417 = G__9429;
            chunk__7764_9418 = G__9430;
            count__7765_9419 = G__9431;
            i__7766_9420 = G__9432;
            continue;
          } else {
            var arg__5130__auto___9433 = cljs.core.first.call(null, seq__7763_9427__$1);
            a__5129__auto__.push(arg__5130__auto___9433);
            var G__9434 = cljs.core.next.call(null, seq__7763_9427__$1);
            var G__9435 = null;
            var G__9436 = 0;
            var G__9437 = 0;
            seq__7763_9417 = G__9434;
            chunk__7764_9418 = G__9435;
            count__7765_9419 = G__9436;
            i__7766_9420 = G__9437;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.input.apply(null, a__5129__auto__);
  };
  var input = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return input__delegate.call(this, args__5128__auto__);
  };
  input.cljs$lang$maxFixedArity = 0;
  input.cljs$lang$applyTo = function(arglist__9438) {
    var args__5128__auto__ = cljs.core.seq(arglist__9438);
    return input__delegate(args__5128__auto__);
  };
  input.cljs$core$IFn$_invoke$arity$variadic = input__delegate;
  return input;
}();
quiescent.dom.ins = function() {
  var ins__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7771_9439 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7772_9440 = null;
    var count__7773_9441 = 0;
    var i__7774_9442 = 0;
    while (true) {
      if (i__7774_9442 < count__7773_9441) {
        var arg__5130__auto___9443 = cljs.core._nth.call(null, chunk__7772_9440, i__7774_9442);
        a__5129__auto__.push(arg__5130__auto___9443);
        var G__9444 = seq__7771_9439;
        var G__9445 = chunk__7772_9440;
        var G__9446 = count__7773_9441;
        var G__9447 = i__7774_9442 + 1;
        seq__7771_9439 = G__9444;
        chunk__7772_9440 = G__9445;
        count__7773_9441 = G__9446;
        i__7774_9442 = G__9447;
        continue;
      } else {
        var temp__4126__auto___9448 = cljs.core.seq.call(null, seq__7771_9439);
        if (temp__4126__auto___9448) {
          var seq__7771_9449__$1 = temp__4126__auto___9448;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7771_9449__$1)) {
            var c__4408__auto___9450 = cljs.core.chunk_first.call(null, seq__7771_9449__$1);
            var G__9451 = cljs.core.chunk_rest.call(null, seq__7771_9449__$1);
            var G__9452 = c__4408__auto___9450;
            var G__9453 = cljs.core.count.call(null, c__4408__auto___9450);
            var G__9454 = 0;
            seq__7771_9439 = G__9451;
            chunk__7772_9440 = G__9452;
            count__7773_9441 = G__9453;
            i__7774_9442 = G__9454;
            continue;
          } else {
            var arg__5130__auto___9455 = cljs.core.first.call(null, seq__7771_9449__$1);
            a__5129__auto__.push(arg__5130__auto___9455);
            var G__9456 = cljs.core.next.call(null, seq__7771_9449__$1);
            var G__9457 = null;
            var G__9458 = 0;
            var G__9459 = 0;
            seq__7771_9439 = G__9456;
            chunk__7772_9440 = G__9457;
            count__7773_9441 = G__9458;
            i__7774_9442 = G__9459;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ins.apply(null, a__5129__auto__);
  };
  var ins = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ins__delegate.call(this, args__5128__auto__);
  };
  ins.cljs$lang$maxFixedArity = 0;
  ins.cljs$lang$applyTo = function(arglist__9460) {
    var args__5128__auto__ = cljs.core.seq(arglist__9460);
    return ins__delegate(args__5128__auto__);
  };
  ins.cljs$core$IFn$_invoke$arity$variadic = ins__delegate;
  return ins;
}();
quiescent.dom.kbd = function() {
  var kbd__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7779_9461 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7780_9462 = null;
    var count__7781_9463 = 0;
    var i__7782_9464 = 0;
    while (true) {
      if (i__7782_9464 < count__7781_9463) {
        var arg__5130__auto___9465 = cljs.core._nth.call(null, chunk__7780_9462, i__7782_9464);
        a__5129__auto__.push(arg__5130__auto___9465);
        var G__9466 = seq__7779_9461;
        var G__9467 = chunk__7780_9462;
        var G__9468 = count__7781_9463;
        var G__9469 = i__7782_9464 + 1;
        seq__7779_9461 = G__9466;
        chunk__7780_9462 = G__9467;
        count__7781_9463 = G__9468;
        i__7782_9464 = G__9469;
        continue;
      } else {
        var temp__4126__auto___9470 = cljs.core.seq.call(null, seq__7779_9461);
        if (temp__4126__auto___9470) {
          var seq__7779_9471__$1 = temp__4126__auto___9470;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7779_9471__$1)) {
            var c__4408__auto___9472 = cljs.core.chunk_first.call(null, seq__7779_9471__$1);
            var G__9473 = cljs.core.chunk_rest.call(null, seq__7779_9471__$1);
            var G__9474 = c__4408__auto___9472;
            var G__9475 = cljs.core.count.call(null, c__4408__auto___9472);
            var G__9476 = 0;
            seq__7779_9461 = G__9473;
            chunk__7780_9462 = G__9474;
            count__7781_9463 = G__9475;
            i__7782_9464 = G__9476;
            continue;
          } else {
            var arg__5130__auto___9477 = cljs.core.first.call(null, seq__7779_9471__$1);
            a__5129__auto__.push(arg__5130__auto___9477);
            var G__9478 = cljs.core.next.call(null, seq__7779_9471__$1);
            var G__9479 = null;
            var G__9480 = 0;
            var G__9481 = 0;
            seq__7779_9461 = G__9478;
            chunk__7780_9462 = G__9479;
            count__7781_9463 = G__9480;
            i__7782_9464 = G__9481;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.kbd.apply(null, a__5129__auto__);
  };
  var kbd = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return kbd__delegate.call(this, args__5128__auto__);
  };
  kbd.cljs$lang$maxFixedArity = 0;
  kbd.cljs$lang$applyTo = function(arglist__9482) {
    var args__5128__auto__ = cljs.core.seq(arglist__9482);
    return kbd__delegate(args__5128__auto__);
  };
  kbd.cljs$core$IFn$_invoke$arity$variadic = kbd__delegate;
  return kbd;
}();
quiescent.dom.keygen = function() {
  var keygen__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7787_9483 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7788_9484 = null;
    var count__7789_9485 = 0;
    var i__7790_9486 = 0;
    while (true) {
      if (i__7790_9486 < count__7789_9485) {
        var arg__5130__auto___9487 = cljs.core._nth.call(null, chunk__7788_9484, i__7790_9486);
        a__5129__auto__.push(arg__5130__auto___9487);
        var G__9488 = seq__7787_9483;
        var G__9489 = chunk__7788_9484;
        var G__9490 = count__7789_9485;
        var G__9491 = i__7790_9486 + 1;
        seq__7787_9483 = G__9488;
        chunk__7788_9484 = G__9489;
        count__7789_9485 = G__9490;
        i__7790_9486 = G__9491;
        continue;
      } else {
        var temp__4126__auto___9492 = cljs.core.seq.call(null, seq__7787_9483);
        if (temp__4126__auto___9492) {
          var seq__7787_9493__$1 = temp__4126__auto___9492;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7787_9493__$1)) {
            var c__4408__auto___9494 = cljs.core.chunk_first.call(null, seq__7787_9493__$1);
            var G__9495 = cljs.core.chunk_rest.call(null, seq__7787_9493__$1);
            var G__9496 = c__4408__auto___9494;
            var G__9497 = cljs.core.count.call(null, c__4408__auto___9494);
            var G__9498 = 0;
            seq__7787_9483 = G__9495;
            chunk__7788_9484 = G__9496;
            count__7789_9485 = G__9497;
            i__7790_9486 = G__9498;
            continue;
          } else {
            var arg__5130__auto___9499 = cljs.core.first.call(null, seq__7787_9493__$1);
            a__5129__auto__.push(arg__5130__auto___9499);
            var G__9500 = cljs.core.next.call(null, seq__7787_9493__$1);
            var G__9501 = null;
            var G__9502 = 0;
            var G__9503 = 0;
            seq__7787_9483 = G__9500;
            chunk__7788_9484 = G__9501;
            count__7789_9485 = G__9502;
            i__7790_9486 = G__9503;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.keygen.apply(null, a__5129__auto__);
  };
  var keygen = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return keygen__delegate.call(this, args__5128__auto__);
  };
  keygen.cljs$lang$maxFixedArity = 0;
  keygen.cljs$lang$applyTo = function(arglist__9504) {
    var args__5128__auto__ = cljs.core.seq(arglist__9504);
    return keygen__delegate(args__5128__auto__);
  };
  keygen.cljs$core$IFn$_invoke$arity$variadic = keygen__delegate;
  return keygen;
}();
quiescent.dom.label = function() {
  var label__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7795_9505 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7796_9506 = null;
    var count__7797_9507 = 0;
    var i__7798_9508 = 0;
    while (true) {
      if (i__7798_9508 < count__7797_9507) {
        var arg__5130__auto___9509 = cljs.core._nth.call(null, chunk__7796_9506, i__7798_9508);
        a__5129__auto__.push(arg__5130__auto___9509);
        var G__9510 = seq__7795_9505;
        var G__9511 = chunk__7796_9506;
        var G__9512 = count__7797_9507;
        var G__9513 = i__7798_9508 + 1;
        seq__7795_9505 = G__9510;
        chunk__7796_9506 = G__9511;
        count__7797_9507 = G__9512;
        i__7798_9508 = G__9513;
        continue;
      } else {
        var temp__4126__auto___9514 = cljs.core.seq.call(null, seq__7795_9505);
        if (temp__4126__auto___9514) {
          var seq__7795_9515__$1 = temp__4126__auto___9514;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7795_9515__$1)) {
            var c__4408__auto___9516 = cljs.core.chunk_first.call(null, seq__7795_9515__$1);
            var G__9517 = cljs.core.chunk_rest.call(null, seq__7795_9515__$1);
            var G__9518 = c__4408__auto___9516;
            var G__9519 = cljs.core.count.call(null, c__4408__auto___9516);
            var G__9520 = 0;
            seq__7795_9505 = G__9517;
            chunk__7796_9506 = G__9518;
            count__7797_9507 = G__9519;
            i__7798_9508 = G__9520;
            continue;
          } else {
            var arg__5130__auto___9521 = cljs.core.first.call(null, seq__7795_9515__$1);
            a__5129__auto__.push(arg__5130__auto___9521);
            var G__9522 = cljs.core.next.call(null, seq__7795_9515__$1);
            var G__9523 = null;
            var G__9524 = 0;
            var G__9525 = 0;
            seq__7795_9505 = G__9522;
            chunk__7796_9506 = G__9523;
            count__7797_9507 = G__9524;
            i__7798_9508 = G__9525;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.label.apply(null, a__5129__auto__);
  };
  var label = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return label__delegate.call(this, args__5128__auto__);
  };
  label.cljs$lang$maxFixedArity = 0;
  label.cljs$lang$applyTo = function(arglist__9526) {
    var args__5128__auto__ = cljs.core.seq(arglist__9526);
    return label__delegate(args__5128__auto__);
  };
  label.cljs$core$IFn$_invoke$arity$variadic = label__delegate;
  return label;
}();
quiescent.dom.legend = function() {
  var legend__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7803_9527 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7804_9528 = null;
    var count__7805_9529 = 0;
    var i__7806_9530 = 0;
    while (true) {
      if (i__7806_9530 < count__7805_9529) {
        var arg__5130__auto___9531 = cljs.core._nth.call(null, chunk__7804_9528, i__7806_9530);
        a__5129__auto__.push(arg__5130__auto___9531);
        var G__9532 = seq__7803_9527;
        var G__9533 = chunk__7804_9528;
        var G__9534 = count__7805_9529;
        var G__9535 = i__7806_9530 + 1;
        seq__7803_9527 = G__9532;
        chunk__7804_9528 = G__9533;
        count__7805_9529 = G__9534;
        i__7806_9530 = G__9535;
        continue;
      } else {
        var temp__4126__auto___9536 = cljs.core.seq.call(null, seq__7803_9527);
        if (temp__4126__auto___9536) {
          var seq__7803_9537__$1 = temp__4126__auto___9536;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7803_9537__$1)) {
            var c__4408__auto___9538 = cljs.core.chunk_first.call(null, seq__7803_9537__$1);
            var G__9539 = cljs.core.chunk_rest.call(null, seq__7803_9537__$1);
            var G__9540 = c__4408__auto___9538;
            var G__9541 = cljs.core.count.call(null, c__4408__auto___9538);
            var G__9542 = 0;
            seq__7803_9527 = G__9539;
            chunk__7804_9528 = G__9540;
            count__7805_9529 = G__9541;
            i__7806_9530 = G__9542;
            continue;
          } else {
            var arg__5130__auto___9543 = cljs.core.first.call(null, seq__7803_9537__$1);
            a__5129__auto__.push(arg__5130__auto___9543);
            var G__9544 = cljs.core.next.call(null, seq__7803_9537__$1);
            var G__9545 = null;
            var G__9546 = 0;
            var G__9547 = 0;
            seq__7803_9527 = G__9544;
            chunk__7804_9528 = G__9545;
            count__7805_9529 = G__9546;
            i__7806_9530 = G__9547;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.legend.apply(null, a__5129__auto__);
  };
  var legend = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return legend__delegate.call(this, args__5128__auto__);
  };
  legend.cljs$lang$maxFixedArity = 0;
  legend.cljs$lang$applyTo = function(arglist__9548) {
    var args__5128__auto__ = cljs.core.seq(arglist__9548);
    return legend__delegate(args__5128__auto__);
  };
  legend.cljs$core$IFn$_invoke$arity$variadic = legend__delegate;
  return legend;
}();
quiescent.dom.li = function() {
  var li__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7811_9549 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7812_9550 = null;
    var count__7813_9551 = 0;
    var i__7814_9552 = 0;
    while (true) {
      if (i__7814_9552 < count__7813_9551) {
        var arg__5130__auto___9553 = cljs.core._nth.call(null, chunk__7812_9550, i__7814_9552);
        a__5129__auto__.push(arg__5130__auto___9553);
        var G__9554 = seq__7811_9549;
        var G__9555 = chunk__7812_9550;
        var G__9556 = count__7813_9551;
        var G__9557 = i__7814_9552 + 1;
        seq__7811_9549 = G__9554;
        chunk__7812_9550 = G__9555;
        count__7813_9551 = G__9556;
        i__7814_9552 = G__9557;
        continue;
      } else {
        var temp__4126__auto___9558 = cljs.core.seq.call(null, seq__7811_9549);
        if (temp__4126__auto___9558) {
          var seq__7811_9559__$1 = temp__4126__auto___9558;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7811_9559__$1)) {
            var c__4408__auto___9560 = cljs.core.chunk_first.call(null, seq__7811_9559__$1);
            var G__9561 = cljs.core.chunk_rest.call(null, seq__7811_9559__$1);
            var G__9562 = c__4408__auto___9560;
            var G__9563 = cljs.core.count.call(null, c__4408__auto___9560);
            var G__9564 = 0;
            seq__7811_9549 = G__9561;
            chunk__7812_9550 = G__9562;
            count__7813_9551 = G__9563;
            i__7814_9552 = G__9564;
            continue;
          } else {
            var arg__5130__auto___9565 = cljs.core.first.call(null, seq__7811_9559__$1);
            a__5129__auto__.push(arg__5130__auto___9565);
            var G__9566 = cljs.core.next.call(null, seq__7811_9559__$1);
            var G__9567 = null;
            var G__9568 = 0;
            var G__9569 = 0;
            seq__7811_9549 = G__9566;
            chunk__7812_9550 = G__9567;
            count__7813_9551 = G__9568;
            i__7814_9552 = G__9569;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.li.apply(null, a__5129__auto__);
  };
  var li = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return li__delegate.call(this, args__5128__auto__);
  };
  li.cljs$lang$maxFixedArity = 0;
  li.cljs$lang$applyTo = function(arglist__9570) {
    var args__5128__auto__ = cljs.core.seq(arglist__9570);
    return li__delegate(args__5128__auto__);
  };
  li.cljs$core$IFn$_invoke$arity$variadic = li__delegate;
  return li;
}();
quiescent.dom.link = function() {
  var link__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7819_9571 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7820_9572 = null;
    var count__7821_9573 = 0;
    var i__7822_9574 = 0;
    while (true) {
      if (i__7822_9574 < count__7821_9573) {
        var arg__5130__auto___9575 = cljs.core._nth.call(null, chunk__7820_9572, i__7822_9574);
        a__5129__auto__.push(arg__5130__auto___9575);
        var G__9576 = seq__7819_9571;
        var G__9577 = chunk__7820_9572;
        var G__9578 = count__7821_9573;
        var G__9579 = i__7822_9574 + 1;
        seq__7819_9571 = G__9576;
        chunk__7820_9572 = G__9577;
        count__7821_9573 = G__9578;
        i__7822_9574 = G__9579;
        continue;
      } else {
        var temp__4126__auto___9580 = cljs.core.seq.call(null, seq__7819_9571);
        if (temp__4126__auto___9580) {
          var seq__7819_9581__$1 = temp__4126__auto___9580;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7819_9581__$1)) {
            var c__4408__auto___9582 = cljs.core.chunk_first.call(null, seq__7819_9581__$1);
            var G__9583 = cljs.core.chunk_rest.call(null, seq__7819_9581__$1);
            var G__9584 = c__4408__auto___9582;
            var G__9585 = cljs.core.count.call(null, c__4408__auto___9582);
            var G__9586 = 0;
            seq__7819_9571 = G__9583;
            chunk__7820_9572 = G__9584;
            count__7821_9573 = G__9585;
            i__7822_9574 = G__9586;
            continue;
          } else {
            var arg__5130__auto___9587 = cljs.core.first.call(null, seq__7819_9581__$1);
            a__5129__auto__.push(arg__5130__auto___9587);
            var G__9588 = cljs.core.next.call(null, seq__7819_9581__$1);
            var G__9589 = null;
            var G__9590 = 0;
            var G__9591 = 0;
            seq__7819_9571 = G__9588;
            chunk__7820_9572 = G__9589;
            count__7821_9573 = G__9590;
            i__7822_9574 = G__9591;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.link.apply(null, a__5129__auto__);
  };
  var link = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return link__delegate.call(this, args__5128__auto__);
  };
  link.cljs$lang$maxFixedArity = 0;
  link.cljs$lang$applyTo = function(arglist__9592) {
    var args__5128__auto__ = cljs.core.seq(arglist__9592);
    return link__delegate(args__5128__auto__);
  };
  link.cljs$core$IFn$_invoke$arity$variadic = link__delegate;
  return link;
}();
quiescent.dom.main = function() {
  var main__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7827_9593 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7828_9594 = null;
    var count__7829_9595 = 0;
    var i__7830_9596 = 0;
    while (true) {
      if (i__7830_9596 < count__7829_9595) {
        var arg__5130__auto___9597 = cljs.core._nth.call(null, chunk__7828_9594, i__7830_9596);
        a__5129__auto__.push(arg__5130__auto___9597);
        var G__9598 = seq__7827_9593;
        var G__9599 = chunk__7828_9594;
        var G__9600 = count__7829_9595;
        var G__9601 = i__7830_9596 + 1;
        seq__7827_9593 = G__9598;
        chunk__7828_9594 = G__9599;
        count__7829_9595 = G__9600;
        i__7830_9596 = G__9601;
        continue;
      } else {
        var temp__4126__auto___9602 = cljs.core.seq.call(null, seq__7827_9593);
        if (temp__4126__auto___9602) {
          var seq__7827_9603__$1 = temp__4126__auto___9602;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7827_9603__$1)) {
            var c__4408__auto___9604 = cljs.core.chunk_first.call(null, seq__7827_9603__$1);
            var G__9605 = cljs.core.chunk_rest.call(null, seq__7827_9603__$1);
            var G__9606 = c__4408__auto___9604;
            var G__9607 = cljs.core.count.call(null, c__4408__auto___9604);
            var G__9608 = 0;
            seq__7827_9593 = G__9605;
            chunk__7828_9594 = G__9606;
            count__7829_9595 = G__9607;
            i__7830_9596 = G__9608;
            continue;
          } else {
            var arg__5130__auto___9609 = cljs.core.first.call(null, seq__7827_9603__$1);
            a__5129__auto__.push(arg__5130__auto___9609);
            var G__9610 = cljs.core.next.call(null, seq__7827_9603__$1);
            var G__9611 = null;
            var G__9612 = 0;
            var G__9613 = 0;
            seq__7827_9593 = G__9610;
            chunk__7828_9594 = G__9611;
            count__7829_9595 = G__9612;
            i__7830_9596 = G__9613;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.main.apply(null, a__5129__auto__);
  };
  var main = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return main__delegate.call(this, args__5128__auto__);
  };
  main.cljs$lang$maxFixedArity = 0;
  main.cljs$lang$applyTo = function(arglist__9614) {
    var args__5128__auto__ = cljs.core.seq(arglist__9614);
    return main__delegate(args__5128__auto__);
  };
  main.cljs$core$IFn$_invoke$arity$variadic = main__delegate;
  return main;
}();
quiescent.dom.map = function() {
  var map__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7835_9615 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7836_9616 = null;
    var count__7837_9617 = 0;
    var i__7838_9618 = 0;
    while (true) {
      if (i__7838_9618 < count__7837_9617) {
        var arg__5130__auto___9619 = cljs.core._nth.call(null, chunk__7836_9616, i__7838_9618);
        a__5129__auto__.push(arg__5130__auto___9619);
        var G__9620 = seq__7835_9615;
        var G__9621 = chunk__7836_9616;
        var G__9622 = count__7837_9617;
        var G__9623 = i__7838_9618 + 1;
        seq__7835_9615 = G__9620;
        chunk__7836_9616 = G__9621;
        count__7837_9617 = G__9622;
        i__7838_9618 = G__9623;
        continue;
      } else {
        var temp__4126__auto___9624 = cljs.core.seq.call(null, seq__7835_9615);
        if (temp__4126__auto___9624) {
          var seq__7835_9625__$1 = temp__4126__auto___9624;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7835_9625__$1)) {
            var c__4408__auto___9626 = cljs.core.chunk_first.call(null, seq__7835_9625__$1);
            var G__9627 = cljs.core.chunk_rest.call(null, seq__7835_9625__$1);
            var G__9628 = c__4408__auto___9626;
            var G__9629 = cljs.core.count.call(null, c__4408__auto___9626);
            var G__9630 = 0;
            seq__7835_9615 = G__9627;
            chunk__7836_9616 = G__9628;
            count__7837_9617 = G__9629;
            i__7838_9618 = G__9630;
            continue;
          } else {
            var arg__5130__auto___9631 = cljs.core.first.call(null, seq__7835_9625__$1);
            a__5129__auto__.push(arg__5130__auto___9631);
            var G__9632 = cljs.core.next.call(null, seq__7835_9625__$1);
            var G__9633 = null;
            var G__9634 = 0;
            var G__9635 = 0;
            seq__7835_9615 = G__9632;
            chunk__7836_9616 = G__9633;
            count__7837_9617 = G__9634;
            i__7838_9618 = G__9635;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.map.apply(null, a__5129__auto__);
  };
  var map = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return map__delegate.call(this, args__5128__auto__);
  };
  map.cljs$lang$maxFixedArity = 0;
  map.cljs$lang$applyTo = function(arglist__9636) {
    var args__5128__auto__ = cljs.core.seq(arglist__9636);
    return map__delegate(args__5128__auto__);
  };
  map.cljs$core$IFn$_invoke$arity$variadic = map__delegate;
  return map;
}();
quiescent.dom.mark = function() {
  var mark__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7843_9637 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7844_9638 = null;
    var count__7845_9639 = 0;
    var i__7846_9640 = 0;
    while (true) {
      if (i__7846_9640 < count__7845_9639) {
        var arg__5130__auto___9641 = cljs.core._nth.call(null, chunk__7844_9638, i__7846_9640);
        a__5129__auto__.push(arg__5130__auto___9641);
        var G__9642 = seq__7843_9637;
        var G__9643 = chunk__7844_9638;
        var G__9644 = count__7845_9639;
        var G__9645 = i__7846_9640 + 1;
        seq__7843_9637 = G__9642;
        chunk__7844_9638 = G__9643;
        count__7845_9639 = G__9644;
        i__7846_9640 = G__9645;
        continue;
      } else {
        var temp__4126__auto___9646 = cljs.core.seq.call(null, seq__7843_9637);
        if (temp__4126__auto___9646) {
          var seq__7843_9647__$1 = temp__4126__auto___9646;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7843_9647__$1)) {
            var c__4408__auto___9648 = cljs.core.chunk_first.call(null, seq__7843_9647__$1);
            var G__9649 = cljs.core.chunk_rest.call(null, seq__7843_9647__$1);
            var G__9650 = c__4408__auto___9648;
            var G__9651 = cljs.core.count.call(null, c__4408__auto___9648);
            var G__9652 = 0;
            seq__7843_9637 = G__9649;
            chunk__7844_9638 = G__9650;
            count__7845_9639 = G__9651;
            i__7846_9640 = G__9652;
            continue;
          } else {
            var arg__5130__auto___9653 = cljs.core.first.call(null, seq__7843_9647__$1);
            a__5129__auto__.push(arg__5130__auto___9653);
            var G__9654 = cljs.core.next.call(null, seq__7843_9647__$1);
            var G__9655 = null;
            var G__9656 = 0;
            var G__9657 = 0;
            seq__7843_9637 = G__9654;
            chunk__7844_9638 = G__9655;
            count__7845_9639 = G__9656;
            i__7846_9640 = G__9657;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.mark.apply(null, a__5129__auto__);
  };
  var mark = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return mark__delegate.call(this, args__5128__auto__);
  };
  mark.cljs$lang$maxFixedArity = 0;
  mark.cljs$lang$applyTo = function(arglist__9658) {
    var args__5128__auto__ = cljs.core.seq(arglist__9658);
    return mark__delegate(args__5128__auto__);
  };
  mark.cljs$core$IFn$_invoke$arity$variadic = mark__delegate;
  return mark;
}();
quiescent.dom.menu = function() {
  var menu__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7851_9659 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7852_9660 = null;
    var count__7853_9661 = 0;
    var i__7854_9662 = 0;
    while (true) {
      if (i__7854_9662 < count__7853_9661) {
        var arg__5130__auto___9663 = cljs.core._nth.call(null, chunk__7852_9660, i__7854_9662);
        a__5129__auto__.push(arg__5130__auto___9663);
        var G__9664 = seq__7851_9659;
        var G__9665 = chunk__7852_9660;
        var G__9666 = count__7853_9661;
        var G__9667 = i__7854_9662 + 1;
        seq__7851_9659 = G__9664;
        chunk__7852_9660 = G__9665;
        count__7853_9661 = G__9666;
        i__7854_9662 = G__9667;
        continue;
      } else {
        var temp__4126__auto___9668 = cljs.core.seq.call(null, seq__7851_9659);
        if (temp__4126__auto___9668) {
          var seq__7851_9669__$1 = temp__4126__auto___9668;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7851_9669__$1)) {
            var c__4408__auto___9670 = cljs.core.chunk_first.call(null, seq__7851_9669__$1);
            var G__9671 = cljs.core.chunk_rest.call(null, seq__7851_9669__$1);
            var G__9672 = c__4408__auto___9670;
            var G__9673 = cljs.core.count.call(null, c__4408__auto___9670);
            var G__9674 = 0;
            seq__7851_9659 = G__9671;
            chunk__7852_9660 = G__9672;
            count__7853_9661 = G__9673;
            i__7854_9662 = G__9674;
            continue;
          } else {
            var arg__5130__auto___9675 = cljs.core.first.call(null, seq__7851_9669__$1);
            a__5129__auto__.push(arg__5130__auto___9675);
            var G__9676 = cljs.core.next.call(null, seq__7851_9669__$1);
            var G__9677 = null;
            var G__9678 = 0;
            var G__9679 = 0;
            seq__7851_9659 = G__9676;
            chunk__7852_9660 = G__9677;
            count__7853_9661 = G__9678;
            i__7854_9662 = G__9679;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menu.apply(null, a__5129__auto__);
  };
  var menu = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menu__delegate.call(this, args__5128__auto__);
  };
  menu.cljs$lang$maxFixedArity = 0;
  menu.cljs$lang$applyTo = function(arglist__9680) {
    var args__5128__auto__ = cljs.core.seq(arglist__9680);
    return menu__delegate(args__5128__auto__);
  };
  menu.cljs$core$IFn$_invoke$arity$variadic = menu__delegate;
  return menu;
}();
quiescent.dom.menuitem = function() {
  var menuitem__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7859_9681 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7860_9682 = null;
    var count__7861_9683 = 0;
    var i__7862_9684 = 0;
    while (true) {
      if (i__7862_9684 < count__7861_9683) {
        var arg__5130__auto___9685 = cljs.core._nth.call(null, chunk__7860_9682, i__7862_9684);
        a__5129__auto__.push(arg__5130__auto___9685);
        var G__9686 = seq__7859_9681;
        var G__9687 = chunk__7860_9682;
        var G__9688 = count__7861_9683;
        var G__9689 = i__7862_9684 + 1;
        seq__7859_9681 = G__9686;
        chunk__7860_9682 = G__9687;
        count__7861_9683 = G__9688;
        i__7862_9684 = G__9689;
        continue;
      } else {
        var temp__4126__auto___9690 = cljs.core.seq.call(null, seq__7859_9681);
        if (temp__4126__auto___9690) {
          var seq__7859_9691__$1 = temp__4126__auto___9690;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7859_9691__$1)) {
            var c__4408__auto___9692 = cljs.core.chunk_first.call(null, seq__7859_9691__$1);
            var G__9693 = cljs.core.chunk_rest.call(null, seq__7859_9691__$1);
            var G__9694 = c__4408__auto___9692;
            var G__9695 = cljs.core.count.call(null, c__4408__auto___9692);
            var G__9696 = 0;
            seq__7859_9681 = G__9693;
            chunk__7860_9682 = G__9694;
            count__7861_9683 = G__9695;
            i__7862_9684 = G__9696;
            continue;
          } else {
            var arg__5130__auto___9697 = cljs.core.first.call(null, seq__7859_9691__$1);
            a__5129__auto__.push(arg__5130__auto___9697);
            var G__9698 = cljs.core.next.call(null, seq__7859_9691__$1);
            var G__9699 = null;
            var G__9700 = 0;
            var G__9701 = 0;
            seq__7859_9681 = G__9698;
            chunk__7860_9682 = G__9699;
            count__7861_9683 = G__9700;
            i__7862_9684 = G__9701;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.menuitem.apply(null, a__5129__auto__);
  };
  var menuitem = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return menuitem__delegate.call(this, args__5128__auto__);
  };
  menuitem.cljs$lang$maxFixedArity = 0;
  menuitem.cljs$lang$applyTo = function(arglist__9702) {
    var args__5128__auto__ = cljs.core.seq(arglist__9702);
    return menuitem__delegate(args__5128__auto__);
  };
  menuitem.cljs$core$IFn$_invoke$arity$variadic = menuitem__delegate;
  return menuitem;
}();
quiescent.dom.meta = function() {
  var meta__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7867_9703 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7868_9704 = null;
    var count__7869_9705 = 0;
    var i__7870_9706 = 0;
    while (true) {
      if (i__7870_9706 < count__7869_9705) {
        var arg__5130__auto___9707 = cljs.core._nth.call(null, chunk__7868_9704, i__7870_9706);
        a__5129__auto__.push(arg__5130__auto___9707);
        var G__9708 = seq__7867_9703;
        var G__9709 = chunk__7868_9704;
        var G__9710 = count__7869_9705;
        var G__9711 = i__7870_9706 + 1;
        seq__7867_9703 = G__9708;
        chunk__7868_9704 = G__9709;
        count__7869_9705 = G__9710;
        i__7870_9706 = G__9711;
        continue;
      } else {
        var temp__4126__auto___9712 = cljs.core.seq.call(null, seq__7867_9703);
        if (temp__4126__auto___9712) {
          var seq__7867_9713__$1 = temp__4126__auto___9712;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7867_9713__$1)) {
            var c__4408__auto___9714 = cljs.core.chunk_first.call(null, seq__7867_9713__$1);
            var G__9715 = cljs.core.chunk_rest.call(null, seq__7867_9713__$1);
            var G__9716 = c__4408__auto___9714;
            var G__9717 = cljs.core.count.call(null, c__4408__auto___9714);
            var G__9718 = 0;
            seq__7867_9703 = G__9715;
            chunk__7868_9704 = G__9716;
            count__7869_9705 = G__9717;
            i__7870_9706 = G__9718;
            continue;
          } else {
            var arg__5130__auto___9719 = cljs.core.first.call(null, seq__7867_9713__$1);
            a__5129__auto__.push(arg__5130__auto___9719);
            var G__9720 = cljs.core.next.call(null, seq__7867_9713__$1);
            var G__9721 = null;
            var G__9722 = 0;
            var G__9723 = 0;
            seq__7867_9703 = G__9720;
            chunk__7868_9704 = G__9721;
            count__7869_9705 = G__9722;
            i__7870_9706 = G__9723;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meta.apply(null, a__5129__auto__);
  };
  var meta = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meta__delegate.call(this, args__5128__auto__);
  };
  meta.cljs$lang$maxFixedArity = 0;
  meta.cljs$lang$applyTo = function(arglist__9724) {
    var args__5128__auto__ = cljs.core.seq(arglist__9724);
    return meta__delegate(args__5128__auto__);
  };
  meta.cljs$core$IFn$_invoke$arity$variadic = meta__delegate;
  return meta;
}();
quiescent.dom.meter = function() {
  var meter__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7875_9725 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7876_9726 = null;
    var count__7877_9727 = 0;
    var i__7878_9728 = 0;
    while (true) {
      if (i__7878_9728 < count__7877_9727) {
        var arg__5130__auto___9729 = cljs.core._nth.call(null, chunk__7876_9726, i__7878_9728);
        a__5129__auto__.push(arg__5130__auto___9729);
        var G__9730 = seq__7875_9725;
        var G__9731 = chunk__7876_9726;
        var G__9732 = count__7877_9727;
        var G__9733 = i__7878_9728 + 1;
        seq__7875_9725 = G__9730;
        chunk__7876_9726 = G__9731;
        count__7877_9727 = G__9732;
        i__7878_9728 = G__9733;
        continue;
      } else {
        var temp__4126__auto___9734 = cljs.core.seq.call(null, seq__7875_9725);
        if (temp__4126__auto___9734) {
          var seq__7875_9735__$1 = temp__4126__auto___9734;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7875_9735__$1)) {
            var c__4408__auto___9736 = cljs.core.chunk_first.call(null, seq__7875_9735__$1);
            var G__9737 = cljs.core.chunk_rest.call(null, seq__7875_9735__$1);
            var G__9738 = c__4408__auto___9736;
            var G__9739 = cljs.core.count.call(null, c__4408__auto___9736);
            var G__9740 = 0;
            seq__7875_9725 = G__9737;
            chunk__7876_9726 = G__9738;
            count__7877_9727 = G__9739;
            i__7878_9728 = G__9740;
            continue;
          } else {
            var arg__5130__auto___9741 = cljs.core.first.call(null, seq__7875_9735__$1);
            a__5129__auto__.push(arg__5130__auto___9741);
            var G__9742 = cljs.core.next.call(null, seq__7875_9735__$1);
            var G__9743 = null;
            var G__9744 = 0;
            var G__9745 = 0;
            seq__7875_9725 = G__9742;
            chunk__7876_9726 = G__9743;
            count__7877_9727 = G__9744;
            i__7878_9728 = G__9745;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.meter.apply(null, a__5129__auto__);
  };
  var meter = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return meter__delegate.call(this, args__5128__auto__);
  };
  meter.cljs$lang$maxFixedArity = 0;
  meter.cljs$lang$applyTo = function(arglist__9746) {
    var args__5128__auto__ = cljs.core.seq(arglist__9746);
    return meter__delegate(args__5128__auto__);
  };
  meter.cljs$core$IFn$_invoke$arity$variadic = meter__delegate;
  return meter;
}();
quiescent.dom.nav = function() {
  var nav__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7883_9747 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7884_9748 = null;
    var count__7885_9749 = 0;
    var i__7886_9750 = 0;
    while (true) {
      if (i__7886_9750 < count__7885_9749) {
        var arg__5130__auto___9751 = cljs.core._nth.call(null, chunk__7884_9748, i__7886_9750);
        a__5129__auto__.push(arg__5130__auto___9751);
        var G__9752 = seq__7883_9747;
        var G__9753 = chunk__7884_9748;
        var G__9754 = count__7885_9749;
        var G__9755 = i__7886_9750 + 1;
        seq__7883_9747 = G__9752;
        chunk__7884_9748 = G__9753;
        count__7885_9749 = G__9754;
        i__7886_9750 = G__9755;
        continue;
      } else {
        var temp__4126__auto___9756 = cljs.core.seq.call(null, seq__7883_9747);
        if (temp__4126__auto___9756) {
          var seq__7883_9757__$1 = temp__4126__auto___9756;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7883_9757__$1)) {
            var c__4408__auto___9758 = cljs.core.chunk_first.call(null, seq__7883_9757__$1);
            var G__9759 = cljs.core.chunk_rest.call(null, seq__7883_9757__$1);
            var G__9760 = c__4408__auto___9758;
            var G__9761 = cljs.core.count.call(null, c__4408__auto___9758);
            var G__9762 = 0;
            seq__7883_9747 = G__9759;
            chunk__7884_9748 = G__9760;
            count__7885_9749 = G__9761;
            i__7886_9750 = G__9762;
            continue;
          } else {
            var arg__5130__auto___9763 = cljs.core.first.call(null, seq__7883_9757__$1);
            a__5129__auto__.push(arg__5130__auto___9763);
            var G__9764 = cljs.core.next.call(null, seq__7883_9757__$1);
            var G__9765 = null;
            var G__9766 = 0;
            var G__9767 = 0;
            seq__7883_9747 = G__9764;
            chunk__7884_9748 = G__9765;
            count__7885_9749 = G__9766;
            i__7886_9750 = G__9767;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.nav.apply(null, a__5129__auto__);
  };
  var nav = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return nav__delegate.call(this, args__5128__auto__);
  };
  nav.cljs$lang$maxFixedArity = 0;
  nav.cljs$lang$applyTo = function(arglist__9768) {
    var args__5128__auto__ = cljs.core.seq(arglist__9768);
    return nav__delegate(args__5128__auto__);
  };
  nav.cljs$core$IFn$_invoke$arity$variadic = nav__delegate;
  return nav;
}();
quiescent.dom.noscript = function() {
  var noscript__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7891_9769 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7892_9770 = null;
    var count__7893_9771 = 0;
    var i__7894_9772 = 0;
    while (true) {
      if (i__7894_9772 < count__7893_9771) {
        var arg__5130__auto___9773 = cljs.core._nth.call(null, chunk__7892_9770, i__7894_9772);
        a__5129__auto__.push(arg__5130__auto___9773);
        var G__9774 = seq__7891_9769;
        var G__9775 = chunk__7892_9770;
        var G__9776 = count__7893_9771;
        var G__9777 = i__7894_9772 + 1;
        seq__7891_9769 = G__9774;
        chunk__7892_9770 = G__9775;
        count__7893_9771 = G__9776;
        i__7894_9772 = G__9777;
        continue;
      } else {
        var temp__4126__auto___9778 = cljs.core.seq.call(null, seq__7891_9769);
        if (temp__4126__auto___9778) {
          var seq__7891_9779__$1 = temp__4126__auto___9778;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7891_9779__$1)) {
            var c__4408__auto___9780 = cljs.core.chunk_first.call(null, seq__7891_9779__$1);
            var G__9781 = cljs.core.chunk_rest.call(null, seq__7891_9779__$1);
            var G__9782 = c__4408__auto___9780;
            var G__9783 = cljs.core.count.call(null, c__4408__auto___9780);
            var G__9784 = 0;
            seq__7891_9769 = G__9781;
            chunk__7892_9770 = G__9782;
            count__7893_9771 = G__9783;
            i__7894_9772 = G__9784;
            continue;
          } else {
            var arg__5130__auto___9785 = cljs.core.first.call(null, seq__7891_9779__$1);
            a__5129__auto__.push(arg__5130__auto___9785);
            var G__9786 = cljs.core.next.call(null, seq__7891_9779__$1);
            var G__9787 = null;
            var G__9788 = 0;
            var G__9789 = 0;
            seq__7891_9769 = G__9786;
            chunk__7892_9770 = G__9787;
            count__7893_9771 = G__9788;
            i__7894_9772 = G__9789;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.noscript.apply(null, a__5129__auto__);
  };
  var noscript = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return noscript__delegate.call(this, args__5128__auto__);
  };
  noscript.cljs$lang$maxFixedArity = 0;
  noscript.cljs$lang$applyTo = function(arglist__9790) {
    var args__5128__auto__ = cljs.core.seq(arglist__9790);
    return noscript__delegate(args__5128__auto__);
  };
  noscript.cljs$core$IFn$_invoke$arity$variadic = noscript__delegate;
  return noscript;
}();
quiescent.dom.object = function() {
  var object__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7899_9791 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7900_9792 = null;
    var count__7901_9793 = 0;
    var i__7902_9794 = 0;
    while (true) {
      if (i__7902_9794 < count__7901_9793) {
        var arg__5130__auto___9795 = cljs.core._nth.call(null, chunk__7900_9792, i__7902_9794);
        a__5129__auto__.push(arg__5130__auto___9795);
        var G__9796 = seq__7899_9791;
        var G__9797 = chunk__7900_9792;
        var G__9798 = count__7901_9793;
        var G__9799 = i__7902_9794 + 1;
        seq__7899_9791 = G__9796;
        chunk__7900_9792 = G__9797;
        count__7901_9793 = G__9798;
        i__7902_9794 = G__9799;
        continue;
      } else {
        var temp__4126__auto___9800 = cljs.core.seq.call(null, seq__7899_9791);
        if (temp__4126__auto___9800) {
          var seq__7899_9801__$1 = temp__4126__auto___9800;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7899_9801__$1)) {
            var c__4408__auto___9802 = cljs.core.chunk_first.call(null, seq__7899_9801__$1);
            var G__9803 = cljs.core.chunk_rest.call(null, seq__7899_9801__$1);
            var G__9804 = c__4408__auto___9802;
            var G__9805 = cljs.core.count.call(null, c__4408__auto___9802);
            var G__9806 = 0;
            seq__7899_9791 = G__9803;
            chunk__7900_9792 = G__9804;
            count__7901_9793 = G__9805;
            i__7902_9794 = G__9806;
            continue;
          } else {
            var arg__5130__auto___9807 = cljs.core.first.call(null, seq__7899_9801__$1);
            a__5129__auto__.push(arg__5130__auto___9807);
            var G__9808 = cljs.core.next.call(null, seq__7899_9801__$1);
            var G__9809 = null;
            var G__9810 = 0;
            var G__9811 = 0;
            seq__7899_9791 = G__9808;
            chunk__7900_9792 = G__9809;
            count__7901_9793 = G__9810;
            i__7902_9794 = G__9811;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.object.apply(null, a__5129__auto__);
  };
  var object = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return object__delegate.call(this, args__5128__auto__);
  };
  object.cljs$lang$maxFixedArity = 0;
  object.cljs$lang$applyTo = function(arglist__9812) {
    var args__5128__auto__ = cljs.core.seq(arglist__9812);
    return object__delegate(args__5128__auto__);
  };
  object.cljs$core$IFn$_invoke$arity$variadic = object__delegate;
  return object;
}();
quiescent.dom.ol = function() {
  var ol__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7907_9813 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7908_9814 = null;
    var count__7909_9815 = 0;
    var i__7910_9816 = 0;
    while (true) {
      if (i__7910_9816 < count__7909_9815) {
        var arg__5130__auto___9817 = cljs.core._nth.call(null, chunk__7908_9814, i__7910_9816);
        a__5129__auto__.push(arg__5130__auto___9817);
        var G__9818 = seq__7907_9813;
        var G__9819 = chunk__7908_9814;
        var G__9820 = count__7909_9815;
        var G__9821 = i__7910_9816 + 1;
        seq__7907_9813 = G__9818;
        chunk__7908_9814 = G__9819;
        count__7909_9815 = G__9820;
        i__7910_9816 = G__9821;
        continue;
      } else {
        var temp__4126__auto___9822 = cljs.core.seq.call(null, seq__7907_9813);
        if (temp__4126__auto___9822) {
          var seq__7907_9823__$1 = temp__4126__auto___9822;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7907_9823__$1)) {
            var c__4408__auto___9824 = cljs.core.chunk_first.call(null, seq__7907_9823__$1);
            var G__9825 = cljs.core.chunk_rest.call(null, seq__7907_9823__$1);
            var G__9826 = c__4408__auto___9824;
            var G__9827 = cljs.core.count.call(null, c__4408__auto___9824);
            var G__9828 = 0;
            seq__7907_9813 = G__9825;
            chunk__7908_9814 = G__9826;
            count__7909_9815 = G__9827;
            i__7910_9816 = G__9828;
            continue;
          } else {
            var arg__5130__auto___9829 = cljs.core.first.call(null, seq__7907_9823__$1);
            a__5129__auto__.push(arg__5130__auto___9829);
            var G__9830 = cljs.core.next.call(null, seq__7907_9823__$1);
            var G__9831 = null;
            var G__9832 = 0;
            var G__9833 = 0;
            seq__7907_9813 = G__9830;
            chunk__7908_9814 = G__9831;
            count__7909_9815 = G__9832;
            i__7910_9816 = G__9833;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ol.apply(null, a__5129__auto__);
  };
  var ol = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ol__delegate.call(this, args__5128__auto__);
  };
  ol.cljs$lang$maxFixedArity = 0;
  ol.cljs$lang$applyTo = function(arglist__9834) {
    var args__5128__auto__ = cljs.core.seq(arglist__9834);
    return ol__delegate(args__5128__auto__);
  };
  ol.cljs$core$IFn$_invoke$arity$variadic = ol__delegate;
  return ol;
}();
quiescent.dom.optgroup = function() {
  var optgroup__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7915_9835 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7916_9836 = null;
    var count__7917_9837 = 0;
    var i__7918_9838 = 0;
    while (true) {
      if (i__7918_9838 < count__7917_9837) {
        var arg__5130__auto___9839 = cljs.core._nth.call(null, chunk__7916_9836, i__7918_9838);
        a__5129__auto__.push(arg__5130__auto___9839);
        var G__9840 = seq__7915_9835;
        var G__9841 = chunk__7916_9836;
        var G__9842 = count__7917_9837;
        var G__9843 = i__7918_9838 + 1;
        seq__7915_9835 = G__9840;
        chunk__7916_9836 = G__9841;
        count__7917_9837 = G__9842;
        i__7918_9838 = G__9843;
        continue;
      } else {
        var temp__4126__auto___9844 = cljs.core.seq.call(null, seq__7915_9835);
        if (temp__4126__auto___9844) {
          var seq__7915_9845__$1 = temp__4126__auto___9844;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7915_9845__$1)) {
            var c__4408__auto___9846 = cljs.core.chunk_first.call(null, seq__7915_9845__$1);
            var G__9847 = cljs.core.chunk_rest.call(null, seq__7915_9845__$1);
            var G__9848 = c__4408__auto___9846;
            var G__9849 = cljs.core.count.call(null, c__4408__auto___9846);
            var G__9850 = 0;
            seq__7915_9835 = G__9847;
            chunk__7916_9836 = G__9848;
            count__7917_9837 = G__9849;
            i__7918_9838 = G__9850;
            continue;
          } else {
            var arg__5130__auto___9851 = cljs.core.first.call(null, seq__7915_9845__$1);
            a__5129__auto__.push(arg__5130__auto___9851);
            var G__9852 = cljs.core.next.call(null, seq__7915_9845__$1);
            var G__9853 = null;
            var G__9854 = 0;
            var G__9855 = 0;
            seq__7915_9835 = G__9852;
            chunk__7916_9836 = G__9853;
            count__7917_9837 = G__9854;
            i__7918_9838 = G__9855;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.optgroup.apply(null, a__5129__auto__);
  };
  var optgroup = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return optgroup__delegate.call(this, args__5128__auto__);
  };
  optgroup.cljs$lang$maxFixedArity = 0;
  optgroup.cljs$lang$applyTo = function(arglist__9856) {
    var args__5128__auto__ = cljs.core.seq(arglist__9856);
    return optgroup__delegate(args__5128__auto__);
  };
  optgroup.cljs$core$IFn$_invoke$arity$variadic = optgroup__delegate;
  return optgroup;
}();
quiescent.dom.option = function() {
  var option__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7923_9857 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7924_9858 = null;
    var count__7925_9859 = 0;
    var i__7926_9860 = 0;
    while (true) {
      if (i__7926_9860 < count__7925_9859) {
        var arg__5130__auto___9861 = cljs.core._nth.call(null, chunk__7924_9858, i__7926_9860);
        a__5129__auto__.push(arg__5130__auto___9861);
        var G__9862 = seq__7923_9857;
        var G__9863 = chunk__7924_9858;
        var G__9864 = count__7925_9859;
        var G__9865 = i__7926_9860 + 1;
        seq__7923_9857 = G__9862;
        chunk__7924_9858 = G__9863;
        count__7925_9859 = G__9864;
        i__7926_9860 = G__9865;
        continue;
      } else {
        var temp__4126__auto___9866 = cljs.core.seq.call(null, seq__7923_9857);
        if (temp__4126__auto___9866) {
          var seq__7923_9867__$1 = temp__4126__auto___9866;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7923_9867__$1)) {
            var c__4408__auto___9868 = cljs.core.chunk_first.call(null, seq__7923_9867__$1);
            var G__9869 = cljs.core.chunk_rest.call(null, seq__7923_9867__$1);
            var G__9870 = c__4408__auto___9868;
            var G__9871 = cljs.core.count.call(null, c__4408__auto___9868);
            var G__9872 = 0;
            seq__7923_9857 = G__9869;
            chunk__7924_9858 = G__9870;
            count__7925_9859 = G__9871;
            i__7926_9860 = G__9872;
            continue;
          } else {
            var arg__5130__auto___9873 = cljs.core.first.call(null, seq__7923_9867__$1);
            a__5129__auto__.push(arg__5130__auto___9873);
            var G__9874 = cljs.core.next.call(null, seq__7923_9867__$1);
            var G__9875 = null;
            var G__9876 = 0;
            var G__9877 = 0;
            seq__7923_9857 = G__9874;
            chunk__7924_9858 = G__9875;
            count__7925_9859 = G__9876;
            i__7926_9860 = G__9877;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.option.apply(null, a__5129__auto__);
  };
  var option = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return option__delegate.call(this, args__5128__auto__);
  };
  option.cljs$lang$maxFixedArity = 0;
  option.cljs$lang$applyTo = function(arglist__9878) {
    var args__5128__auto__ = cljs.core.seq(arglist__9878);
    return option__delegate(args__5128__auto__);
  };
  option.cljs$core$IFn$_invoke$arity$variadic = option__delegate;
  return option;
}();
quiescent.dom.output = function() {
  var output__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7931_9879 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7932_9880 = null;
    var count__7933_9881 = 0;
    var i__7934_9882 = 0;
    while (true) {
      if (i__7934_9882 < count__7933_9881) {
        var arg__5130__auto___9883 = cljs.core._nth.call(null, chunk__7932_9880, i__7934_9882);
        a__5129__auto__.push(arg__5130__auto___9883);
        var G__9884 = seq__7931_9879;
        var G__9885 = chunk__7932_9880;
        var G__9886 = count__7933_9881;
        var G__9887 = i__7934_9882 + 1;
        seq__7931_9879 = G__9884;
        chunk__7932_9880 = G__9885;
        count__7933_9881 = G__9886;
        i__7934_9882 = G__9887;
        continue;
      } else {
        var temp__4126__auto___9888 = cljs.core.seq.call(null, seq__7931_9879);
        if (temp__4126__auto___9888) {
          var seq__7931_9889__$1 = temp__4126__auto___9888;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7931_9889__$1)) {
            var c__4408__auto___9890 = cljs.core.chunk_first.call(null, seq__7931_9889__$1);
            var G__9891 = cljs.core.chunk_rest.call(null, seq__7931_9889__$1);
            var G__9892 = c__4408__auto___9890;
            var G__9893 = cljs.core.count.call(null, c__4408__auto___9890);
            var G__9894 = 0;
            seq__7931_9879 = G__9891;
            chunk__7932_9880 = G__9892;
            count__7933_9881 = G__9893;
            i__7934_9882 = G__9894;
            continue;
          } else {
            var arg__5130__auto___9895 = cljs.core.first.call(null, seq__7931_9889__$1);
            a__5129__auto__.push(arg__5130__auto___9895);
            var G__9896 = cljs.core.next.call(null, seq__7931_9889__$1);
            var G__9897 = null;
            var G__9898 = 0;
            var G__9899 = 0;
            seq__7931_9879 = G__9896;
            chunk__7932_9880 = G__9897;
            count__7933_9881 = G__9898;
            i__7934_9882 = G__9899;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.output.apply(null, a__5129__auto__);
  };
  var output = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return output__delegate.call(this, args__5128__auto__);
  };
  output.cljs$lang$maxFixedArity = 0;
  output.cljs$lang$applyTo = function(arglist__9900) {
    var args__5128__auto__ = cljs.core.seq(arglist__9900);
    return output__delegate(args__5128__auto__);
  };
  output.cljs$core$IFn$_invoke$arity$variadic = output__delegate;
  return output;
}();
quiescent.dom.p = function() {
  var p__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7939_9901 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7940_9902 = null;
    var count__7941_9903 = 0;
    var i__7942_9904 = 0;
    while (true) {
      if (i__7942_9904 < count__7941_9903) {
        var arg__5130__auto___9905 = cljs.core._nth.call(null, chunk__7940_9902, i__7942_9904);
        a__5129__auto__.push(arg__5130__auto___9905);
        var G__9906 = seq__7939_9901;
        var G__9907 = chunk__7940_9902;
        var G__9908 = count__7941_9903;
        var G__9909 = i__7942_9904 + 1;
        seq__7939_9901 = G__9906;
        chunk__7940_9902 = G__9907;
        count__7941_9903 = G__9908;
        i__7942_9904 = G__9909;
        continue;
      } else {
        var temp__4126__auto___9910 = cljs.core.seq.call(null, seq__7939_9901);
        if (temp__4126__auto___9910) {
          var seq__7939_9911__$1 = temp__4126__auto___9910;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7939_9911__$1)) {
            var c__4408__auto___9912 = cljs.core.chunk_first.call(null, seq__7939_9911__$1);
            var G__9913 = cljs.core.chunk_rest.call(null, seq__7939_9911__$1);
            var G__9914 = c__4408__auto___9912;
            var G__9915 = cljs.core.count.call(null, c__4408__auto___9912);
            var G__9916 = 0;
            seq__7939_9901 = G__9913;
            chunk__7940_9902 = G__9914;
            count__7941_9903 = G__9915;
            i__7942_9904 = G__9916;
            continue;
          } else {
            var arg__5130__auto___9917 = cljs.core.first.call(null, seq__7939_9911__$1);
            a__5129__auto__.push(arg__5130__auto___9917);
            var G__9918 = cljs.core.next.call(null, seq__7939_9911__$1);
            var G__9919 = null;
            var G__9920 = 0;
            var G__9921 = 0;
            seq__7939_9901 = G__9918;
            chunk__7940_9902 = G__9919;
            count__7941_9903 = G__9920;
            i__7942_9904 = G__9921;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.p.apply(null, a__5129__auto__);
  };
  var p = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return p__delegate.call(this, args__5128__auto__);
  };
  p.cljs$lang$maxFixedArity = 0;
  p.cljs$lang$applyTo = function(arglist__9922) {
    var args__5128__auto__ = cljs.core.seq(arglist__9922);
    return p__delegate(args__5128__auto__);
  };
  p.cljs$core$IFn$_invoke$arity$variadic = p__delegate;
  return p;
}();
quiescent.dom.param = function() {
  var param__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7947_9923 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7948_9924 = null;
    var count__7949_9925 = 0;
    var i__7950_9926 = 0;
    while (true) {
      if (i__7950_9926 < count__7949_9925) {
        var arg__5130__auto___9927 = cljs.core._nth.call(null, chunk__7948_9924, i__7950_9926);
        a__5129__auto__.push(arg__5130__auto___9927);
        var G__9928 = seq__7947_9923;
        var G__9929 = chunk__7948_9924;
        var G__9930 = count__7949_9925;
        var G__9931 = i__7950_9926 + 1;
        seq__7947_9923 = G__9928;
        chunk__7948_9924 = G__9929;
        count__7949_9925 = G__9930;
        i__7950_9926 = G__9931;
        continue;
      } else {
        var temp__4126__auto___9932 = cljs.core.seq.call(null, seq__7947_9923);
        if (temp__4126__auto___9932) {
          var seq__7947_9933__$1 = temp__4126__auto___9932;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7947_9933__$1)) {
            var c__4408__auto___9934 = cljs.core.chunk_first.call(null, seq__7947_9933__$1);
            var G__9935 = cljs.core.chunk_rest.call(null, seq__7947_9933__$1);
            var G__9936 = c__4408__auto___9934;
            var G__9937 = cljs.core.count.call(null, c__4408__auto___9934);
            var G__9938 = 0;
            seq__7947_9923 = G__9935;
            chunk__7948_9924 = G__9936;
            count__7949_9925 = G__9937;
            i__7950_9926 = G__9938;
            continue;
          } else {
            var arg__5130__auto___9939 = cljs.core.first.call(null, seq__7947_9933__$1);
            a__5129__auto__.push(arg__5130__auto___9939);
            var G__9940 = cljs.core.next.call(null, seq__7947_9933__$1);
            var G__9941 = null;
            var G__9942 = 0;
            var G__9943 = 0;
            seq__7947_9923 = G__9940;
            chunk__7948_9924 = G__9941;
            count__7949_9925 = G__9942;
            i__7950_9926 = G__9943;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.param.apply(null, a__5129__auto__);
  };
  var param = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return param__delegate.call(this, args__5128__auto__);
  };
  param.cljs$lang$maxFixedArity = 0;
  param.cljs$lang$applyTo = function(arglist__9944) {
    var args__5128__auto__ = cljs.core.seq(arglist__9944);
    return param__delegate(args__5128__auto__);
  };
  param.cljs$core$IFn$_invoke$arity$variadic = param__delegate;
  return param;
}();
quiescent.dom.pre = function() {
  var pre__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7955_9945 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7956_9946 = null;
    var count__7957_9947 = 0;
    var i__7958_9948 = 0;
    while (true) {
      if (i__7958_9948 < count__7957_9947) {
        var arg__5130__auto___9949 = cljs.core._nth.call(null, chunk__7956_9946, i__7958_9948);
        a__5129__auto__.push(arg__5130__auto___9949);
        var G__9950 = seq__7955_9945;
        var G__9951 = chunk__7956_9946;
        var G__9952 = count__7957_9947;
        var G__9953 = i__7958_9948 + 1;
        seq__7955_9945 = G__9950;
        chunk__7956_9946 = G__9951;
        count__7957_9947 = G__9952;
        i__7958_9948 = G__9953;
        continue;
      } else {
        var temp__4126__auto___9954 = cljs.core.seq.call(null, seq__7955_9945);
        if (temp__4126__auto___9954) {
          var seq__7955_9955__$1 = temp__4126__auto___9954;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7955_9955__$1)) {
            var c__4408__auto___9956 = cljs.core.chunk_first.call(null, seq__7955_9955__$1);
            var G__9957 = cljs.core.chunk_rest.call(null, seq__7955_9955__$1);
            var G__9958 = c__4408__auto___9956;
            var G__9959 = cljs.core.count.call(null, c__4408__auto___9956);
            var G__9960 = 0;
            seq__7955_9945 = G__9957;
            chunk__7956_9946 = G__9958;
            count__7957_9947 = G__9959;
            i__7958_9948 = G__9960;
            continue;
          } else {
            var arg__5130__auto___9961 = cljs.core.first.call(null, seq__7955_9955__$1);
            a__5129__auto__.push(arg__5130__auto___9961);
            var G__9962 = cljs.core.next.call(null, seq__7955_9955__$1);
            var G__9963 = null;
            var G__9964 = 0;
            var G__9965 = 0;
            seq__7955_9945 = G__9962;
            chunk__7956_9946 = G__9963;
            count__7957_9947 = G__9964;
            i__7958_9948 = G__9965;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.pre.apply(null, a__5129__auto__);
  };
  var pre = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return pre__delegate.call(this, args__5128__auto__);
  };
  pre.cljs$lang$maxFixedArity = 0;
  pre.cljs$lang$applyTo = function(arglist__9966) {
    var args__5128__auto__ = cljs.core.seq(arglist__9966);
    return pre__delegate(args__5128__auto__);
  };
  pre.cljs$core$IFn$_invoke$arity$variadic = pre__delegate;
  return pre;
}();
quiescent.dom.progress = function() {
  var progress__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7963_9967 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7964_9968 = null;
    var count__7965_9969 = 0;
    var i__7966_9970 = 0;
    while (true) {
      if (i__7966_9970 < count__7965_9969) {
        var arg__5130__auto___9971 = cljs.core._nth.call(null, chunk__7964_9968, i__7966_9970);
        a__5129__auto__.push(arg__5130__auto___9971);
        var G__9972 = seq__7963_9967;
        var G__9973 = chunk__7964_9968;
        var G__9974 = count__7965_9969;
        var G__9975 = i__7966_9970 + 1;
        seq__7963_9967 = G__9972;
        chunk__7964_9968 = G__9973;
        count__7965_9969 = G__9974;
        i__7966_9970 = G__9975;
        continue;
      } else {
        var temp__4126__auto___9976 = cljs.core.seq.call(null, seq__7963_9967);
        if (temp__4126__auto___9976) {
          var seq__7963_9977__$1 = temp__4126__auto___9976;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7963_9977__$1)) {
            var c__4408__auto___9978 = cljs.core.chunk_first.call(null, seq__7963_9977__$1);
            var G__9979 = cljs.core.chunk_rest.call(null, seq__7963_9977__$1);
            var G__9980 = c__4408__auto___9978;
            var G__9981 = cljs.core.count.call(null, c__4408__auto___9978);
            var G__9982 = 0;
            seq__7963_9967 = G__9979;
            chunk__7964_9968 = G__9980;
            count__7965_9969 = G__9981;
            i__7966_9970 = G__9982;
            continue;
          } else {
            var arg__5130__auto___9983 = cljs.core.first.call(null, seq__7963_9977__$1);
            a__5129__auto__.push(arg__5130__auto___9983);
            var G__9984 = cljs.core.next.call(null, seq__7963_9977__$1);
            var G__9985 = null;
            var G__9986 = 0;
            var G__9987 = 0;
            seq__7963_9967 = G__9984;
            chunk__7964_9968 = G__9985;
            count__7965_9969 = G__9986;
            i__7966_9970 = G__9987;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.progress.apply(null, a__5129__auto__);
  };
  var progress = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return progress__delegate.call(this, args__5128__auto__);
  };
  progress.cljs$lang$maxFixedArity = 0;
  progress.cljs$lang$applyTo = function(arglist__9988) {
    var args__5128__auto__ = cljs.core.seq(arglist__9988);
    return progress__delegate(args__5128__auto__);
  };
  progress.cljs$core$IFn$_invoke$arity$variadic = progress__delegate;
  return progress;
}();
quiescent.dom.q = function() {
  var q__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7971_9989 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7972_9990 = null;
    var count__7973_9991 = 0;
    var i__7974_9992 = 0;
    while (true) {
      if (i__7974_9992 < count__7973_9991) {
        var arg__5130__auto___9993 = cljs.core._nth.call(null, chunk__7972_9990, i__7974_9992);
        a__5129__auto__.push(arg__5130__auto___9993);
        var G__9994 = seq__7971_9989;
        var G__9995 = chunk__7972_9990;
        var G__9996 = count__7973_9991;
        var G__9997 = i__7974_9992 + 1;
        seq__7971_9989 = G__9994;
        chunk__7972_9990 = G__9995;
        count__7973_9991 = G__9996;
        i__7974_9992 = G__9997;
        continue;
      } else {
        var temp__4126__auto___9998 = cljs.core.seq.call(null, seq__7971_9989);
        if (temp__4126__auto___9998) {
          var seq__7971_9999__$1 = temp__4126__auto___9998;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7971_9999__$1)) {
            var c__4408__auto___10000 = cljs.core.chunk_first.call(null, seq__7971_9999__$1);
            var G__10001 = cljs.core.chunk_rest.call(null, seq__7971_9999__$1);
            var G__10002 = c__4408__auto___10000;
            var G__10003 = cljs.core.count.call(null, c__4408__auto___10000);
            var G__10004 = 0;
            seq__7971_9989 = G__10001;
            chunk__7972_9990 = G__10002;
            count__7973_9991 = G__10003;
            i__7974_9992 = G__10004;
            continue;
          } else {
            var arg__5130__auto___10005 = cljs.core.first.call(null, seq__7971_9999__$1);
            a__5129__auto__.push(arg__5130__auto___10005);
            var G__10006 = cljs.core.next.call(null, seq__7971_9999__$1);
            var G__10007 = null;
            var G__10008 = 0;
            var G__10009 = 0;
            seq__7971_9989 = G__10006;
            chunk__7972_9990 = G__10007;
            count__7973_9991 = G__10008;
            i__7974_9992 = G__10009;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.q.apply(null, a__5129__auto__);
  };
  var q = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return q__delegate.call(this, args__5128__auto__);
  };
  q.cljs$lang$maxFixedArity = 0;
  q.cljs$lang$applyTo = function(arglist__10010) {
    var args__5128__auto__ = cljs.core.seq(arglist__10010);
    return q__delegate(args__5128__auto__);
  };
  q.cljs$core$IFn$_invoke$arity$variadic = q__delegate;
  return q;
}();
quiescent.dom.rp = function() {
  var rp__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7979_10011 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7980_10012 = null;
    var count__7981_10013 = 0;
    var i__7982_10014 = 0;
    while (true) {
      if (i__7982_10014 < count__7981_10013) {
        var arg__5130__auto___10015 = cljs.core._nth.call(null, chunk__7980_10012, i__7982_10014);
        a__5129__auto__.push(arg__5130__auto___10015);
        var G__10016 = seq__7979_10011;
        var G__10017 = chunk__7980_10012;
        var G__10018 = count__7981_10013;
        var G__10019 = i__7982_10014 + 1;
        seq__7979_10011 = G__10016;
        chunk__7980_10012 = G__10017;
        count__7981_10013 = G__10018;
        i__7982_10014 = G__10019;
        continue;
      } else {
        var temp__4126__auto___10020 = cljs.core.seq.call(null, seq__7979_10011);
        if (temp__4126__auto___10020) {
          var seq__7979_10021__$1 = temp__4126__auto___10020;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7979_10021__$1)) {
            var c__4408__auto___10022 = cljs.core.chunk_first.call(null, seq__7979_10021__$1);
            var G__10023 = cljs.core.chunk_rest.call(null, seq__7979_10021__$1);
            var G__10024 = c__4408__auto___10022;
            var G__10025 = cljs.core.count.call(null, c__4408__auto___10022);
            var G__10026 = 0;
            seq__7979_10011 = G__10023;
            chunk__7980_10012 = G__10024;
            count__7981_10013 = G__10025;
            i__7982_10014 = G__10026;
            continue;
          } else {
            var arg__5130__auto___10027 = cljs.core.first.call(null, seq__7979_10021__$1);
            a__5129__auto__.push(arg__5130__auto___10027);
            var G__10028 = cljs.core.next.call(null, seq__7979_10021__$1);
            var G__10029 = null;
            var G__10030 = 0;
            var G__10031 = 0;
            seq__7979_10011 = G__10028;
            chunk__7980_10012 = G__10029;
            count__7981_10013 = G__10030;
            i__7982_10014 = G__10031;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rp.apply(null, a__5129__auto__);
  };
  var rp = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rp__delegate.call(this, args__5128__auto__);
  };
  rp.cljs$lang$maxFixedArity = 0;
  rp.cljs$lang$applyTo = function(arglist__10032) {
    var args__5128__auto__ = cljs.core.seq(arglist__10032);
    return rp__delegate(args__5128__auto__);
  };
  rp.cljs$core$IFn$_invoke$arity$variadic = rp__delegate;
  return rp;
}();
quiescent.dom.rt = function() {
  var rt__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7987_10033 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7988_10034 = null;
    var count__7989_10035 = 0;
    var i__7990_10036 = 0;
    while (true) {
      if (i__7990_10036 < count__7989_10035) {
        var arg__5130__auto___10037 = cljs.core._nth.call(null, chunk__7988_10034, i__7990_10036);
        a__5129__auto__.push(arg__5130__auto___10037);
        var G__10038 = seq__7987_10033;
        var G__10039 = chunk__7988_10034;
        var G__10040 = count__7989_10035;
        var G__10041 = i__7990_10036 + 1;
        seq__7987_10033 = G__10038;
        chunk__7988_10034 = G__10039;
        count__7989_10035 = G__10040;
        i__7990_10036 = G__10041;
        continue;
      } else {
        var temp__4126__auto___10042 = cljs.core.seq.call(null, seq__7987_10033);
        if (temp__4126__auto___10042) {
          var seq__7987_10043__$1 = temp__4126__auto___10042;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7987_10043__$1)) {
            var c__4408__auto___10044 = cljs.core.chunk_first.call(null, seq__7987_10043__$1);
            var G__10045 = cljs.core.chunk_rest.call(null, seq__7987_10043__$1);
            var G__10046 = c__4408__auto___10044;
            var G__10047 = cljs.core.count.call(null, c__4408__auto___10044);
            var G__10048 = 0;
            seq__7987_10033 = G__10045;
            chunk__7988_10034 = G__10046;
            count__7989_10035 = G__10047;
            i__7990_10036 = G__10048;
            continue;
          } else {
            var arg__5130__auto___10049 = cljs.core.first.call(null, seq__7987_10043__$1);
            a__5129__auto__.push(arg__5130__auto___10049);
            var G__10050 = cljs.core.next.call(null, seq__7987_10043__$1);
            var G__10051 = null;
            var G__10052 = 0;
            var G__10053 = 0;
            seq__7987_10033 = G__10050;
            chunk__7988_10034 = G__10051;
            count__7989_10035 = G__10052;
            i__7990_10036 = G__10053;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rt.apply(null, a__5129__auto__);
  };
  var rt = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rt__delegate.call(this, args__5128__auto__);
  };
  rt.cljs$lang$maxFixedArity = 0;
  rt.cljs$lang$applyTo = function(arglist__10054) {
    var args__5128__auto__ = cljs.core.seq(arglist__10054);
    return rt__delegate(args__5128__auto__);
  };
  rt.cljs$core$IFn$_invoke$arity$variadic = rt__delegate;
  return rt;
}();
quiescent.dom.ruby = function() {
  var ruby__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7995_10055 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7996_10056 = null;
    var count__7997_10057 = 0;
    var i__7998_10058 = 0;
    while (true) {
      if (i__7998_10058 < count__7997_10057) {
        var arg__5130__auto___10059 = cljs.core._nth.call(null, chunk__7996_10056, i__7998_10058);
        a__5129__auto__.push(arg__5130__auto___10059);
        var G__10060 = seq__7995_10055;
        var G__10061 = chunk__7996_10056;
        var G__10062 = count__7997_10057;
        var G__10063 = i__7998_10058 + 1;
        seq__7995_10055 = G__10060;
        chunk__7996_10056 = G__10061;
        count__7997_10057 = G__10062;
        i__7998_10058 = G__10063;
        continue;
      } else {
        var temp__4126__auto___10064 = cljs.core.seq.call(null, seq__7995_10055);
        if (temp__4126__auto___10064) {
          var seq__7995_10065__$1 = temp__4126__auto___10064;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7995_10065__$1)) {
            var c__4408__auto___10066 = cljs.core.chunk_first.call(null, seq__7995_10065__$1);
            var G__10067 = cljs.core.chunk_rest.call(null, seq__7995_10065__$1);
            var G__10068 = c__4408__auto___10066;
            var G__10069 = cljs.core.count.call(null, c__4408__auto___10066);
            var G__10070 = 0;
            seq__7995_10055 = G__10067;
            chunk__7996_10056 = G__10068;
            count__7997_10057 = G__10069;
            i__7998_10058 = G__10070;
            continue;
          } else {
            var arg__5130__auto___10071 = cljs.core.first.call(null, seq__7995_10065__$1);
            a__5129__auto__.push(arg__5130__auto___10071);
            var G__10072 = cljs.core.next.call(null, seq__7995_10065__$1);
            var G__10073 = null;
            var G__10074 = 0;
            var G__10075 = 0;
            seq__7995_10055 = G__10072;
            chunk__7996_10056 = G__10073;
            count__7997_10057 = G__10074;
            i__7998_10058 = G__10075;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ruby.apply(null, a__5129__auto__);
  };
  var ruby = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ruby__delegate.call(this, args__5128__auto__);
  };
  ruby.cljs$lang$maxFixedArity = 0;
  ruby.cljs$lang$applyTo = function(arglist__10076) {
    var args__5128__auto__ = cljs.core.seq(arglist__10076);
    return ruby__delegate(args__5128__auto__);
  };
  ruby.cljs$core$IFn$_invoke$arity$variadic = ruby__delegate;
  return ruby;
}();
quiescent.dom.s = function() {
  var s__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8003_10077 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8004_10078 = null;
    var count__8005_10079 = 0;
    var i__8006_10080 = 0;
    while (true) {
      if (i__8006_10080 < count__8005_10079) {
        var arg__5130__auto___10081 = cljs.core._nth.call(null, chunk__8004_10078, i__8006_10080);
        a__5129__auto__.push(arg__5130__auto___10081);
        var G__10082 = seq__8003_10077;
        var G__10083 = chunk__8004_10078;
        var G__10084 = count__8005_10079;
        var G__10085 = i__8006_10080 + 1;
        seq__8003_10077 = G__10082;
        chunk__8004_10078 = G__10083;
        count__8005_10079 = G__10084;
        i__8006_10080 = G__10085;
        continue;
      } else {
        var temp__4126__auto___10086 = cljs.core.seq.call(null, seq__8003_10077);
        if (temp__4126__auto___10086) {
          var seq__8003_10087__$1 = temp__4126__auto___10086;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8003_10087__$1)) {
            var c__4408__auto___10088 = cljs.core.chunk_first.call(null, seq__8003_10087__$1);
            var G__10089 = cljs.core.chunk_rest.call(null, seq__8003_10087__$1);
            var G__10090 = c__4408__auto___10088;
            var G__10091 = cljs.core.count.call(null, c__4408__auto___10088);
            var G__10092 = 0;
            seq__8003_10077 = G__10089;
            chunk__8004_10078 = G__10090;
            count__8005_10079 = G__10091;
            i__8006_10080 = G__10092;
            continue;
          } else {
            var arg__5130__auto___10093 = cljs.core.first.call(null, seq__8003_10087__$1);
            a__5129__auto__.push(arg__5130__auto___10093);
            var G__10094 = cljs.core.next.call(null, seq__8003_10087__$1);
            var G__10095 = null;
            var G__10096 = 0;
            var G__10097 = 0;
            seq__8003_10077 = G__10094;
            chunk__8004_10078 = G__10095;
            count__8005_10079 = G__10096;
            i__8006_10080 = G__10097;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.s.apply(null, a__5129__auto__);
  };
  var s = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return s__delegate.call(this, args__5128__auto__);
  };
  s.cljs$lang$maxFixedArity = 0;
  s.cljs$lang$applyTo = function(arglist__10098) {
    var args__5128__auto__ = cljs.core.seq(arglist__10098);
    return s__delegate(args__5128__auto__);
  };
  s.cljs$core$IFn$_invoke$arity$variadic = s__delegate;
  return s;
}();
quiescent.dom.samp = function() {
  var samp__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8011_10099 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8012_10100 = null;
    var count__8013_10101 = 0;
    var i__8014_10102 = 0;
    while (true) {
      if (i__8014_10102 < count__8013_10101) {
        var arg__5130__auto___10103 = cljs.core._nth.call(null, chunk__8012_10100, i__8014_10102);
        a__5129__auto__.push(arg__5130__auto___10103);
        var G__10104 = seq__8011_10099;
        var G__10105 = chunk__8012_10100;
        var G__10106 = count__8013_10101;
        var G__10107 = i__8014_10102 + 1;
        seq__8011_10099 = G__10104;
        chunk__8012_10100 = G__10105;
        count__8013_10101 = G__10106;
        i__8014_10102 = G__10107;
        continue;
      } else {
        var temp__4126__auto___10108 = cljs.core.seq.call(null, seq__8011_10099);
        if (temp__4126__auto___10108) {
          var seq__8011_10109__$1 = temp__4126__auto___10108;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8011_10109__$1)) {
            var c__4408__auto___10110 = cljs.core.chunk_first.call(null, seq__8011_10109__$1);
            var G__10111 = cljs.core.chunk_rest.call(null, seq__8011_10109__$1);
            var G__10112 = c__4408__auto___10110;
            var G__10113 = cljs.core.count.call(null, c__4408__auto___10110);
            var G__10114 = 0;
            seq__8011_10099 = G__10111;
            chunk__8012_10100 = G__10112;
            count__8013_10101 = G__10113;
            i__8014_10102 = G__10114;
            continue;
          } else {
            var arg__5130__auto___10115 = cljs.core.first.call(null, seq__8011_10109__$1);
            a__5129__auto__.push(arg__5130__auto___10115);
            var G__10116 = cljs.core.next.call(null, seq__8011_10109__$1);
            var G__10117 = null;
            var G__10118 = 0;
            var G__10119 = 0;
            seq__8011_10099 = G__10116;
            chunk__8012_10100 = G__10117;
            count__8013_10101 = G__10118;
            i__8014_10102 = G__10119;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.samp.apply(null, a__5129__auto__);
  };
  var samp = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return samp__delegate.call(this, args__5128__auto__);
  };
  samp.cljs$lang$maxFixedArity = 0;
  samp.cljs$lang$applyTo = function(arglist__10120) {
    var args__5128__auto__ = cljs.core.seq(arglist__10120);
    return samp__delegate(args__5128__auto__);
  };
  samp.cljs$core$IFn$_invoke$arity$variadic = samp__delegate;
  return samp;
}();
quiescent.dom.script = function() {
  var script__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8019_10121 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8020_10122 = null;
    var count__8021_10123 = 0;
    var i__8022_10124 = 0;
    while (true) {
      if (i__8022_10124 < count__8021_10123) {
        var arg__5130__auto___10125 = cljs.core._nth.call(null, chunk__8020_10122, i__8022_10124);
        a__5129__auto__.push(arg__5130__auto___10125);
        var G__10126 = seq__8019_10121;
        var G__10127 = chunk__8020_10122;
        var G__10128 = count__8021_10123;
        var G__10129 = i__8022_10124 + 1;
        seq__8019_10121 = G__10126;
        chunk__8020_10122 = G__10127;
        count__8021_10123 = G__10128;
        i__8022_10124 = G__10129;
        continue;
      } else {
        var temp__4126__auto___10130 = cljs.core.seq.call(null, seq__8019_10121);
        if (temp__4126__auto___10130) {
          var seq__8019_10131__$1 = temp__4126__auto___10130;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8019_10131__$1)) {
            var c__4408__auto___10132 = cljs.core.chunk_first.call(null, seq__8019_10131__$1);
            var G__10133 = cljs.core.chunk_rest.call(null, seq__8019_10131__$1);
            var G__10134 = c__4408__auto___10132;
            var G__10135 = cljs.core.count.call(null, c__4408__auto___10132);
            var G__10136 = 0;
            seq__8019_10121 = G__10133;
            chunk__8020_10122 = G__10134;
            count__8021_10123 = G__10135;
            i__8022_10124 = G__10136;
            continue;
          } else {
            var arg__5130__auto___10137 = cljs.core.first.call(null, seq__8019_10131__$1);
            a__5129__auto__.push(arg__5130__auto___10137);
            var G__10138 = cljs.core.next.call(null, seq__8019_10131__$1);
            var G__10139 = null;
            var G__10140 = 0;
            var G__10141 = 0;
            seq__8019_10121 = G__10138;
            chunk__8020_10122 = G__10139;
            count__8021_10123 = G__10140;
            i__8022_10124 = G__10141;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.script.apply(null, a__5129__auto__);
  };
  var script = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return script__delegate.call(this, args__5128__auto__);
  };
  script.cljs$lang$maxFixedArity = 0;
  script.cljs$lang$applyTo = function(arglist__10142) {
    var args__5128__auto__ = cljs.core.seq(arglist__10142);
    return script__delegate(args__5128__auto__);
  };
  script.cljs$core$IFn$_invoke$arity$variadic = script__delegate;
  return script;
}();
quiescent.dom.section = function() {
  var section__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8027_10143 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8028_10144 = null;
    var count__8029_10145 = 0;
    var i__8030_10146 = 0;
    while (true) {
      if (i__8030_10146 < count__8029_10145) {
        var arg__5130__auto___10147 = cljs.core._nth.call(null, chunk__8028_10144, i__8030_10146);
        a__5129__auto__.push(arg__5130__auto___10147);
        var G__10148 = seq__8027_10143;
        var G__10149 = chunk__8028_10144;
        var G__10150 = count__8029_10145;
        var G__10151 = i__8030_10146 + 1;
        seq__8027_10143 = G__10148;
        chunk__8028_10144 = G__10149;
        count__8029_10145 = G__10150;
        i__8030_10146 = G__10151;
        continue;
      } else {
        var temp__4126__auto___10152 = cljs.core.seq.call(null, seq__8027_10143);
        if (temp__4126__auto___10152) {
          var seq__8027_10153__$1 = temp__4126__auto___10152;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8027_10153__$1)) {
            var c__4408__auto___10154 = cljs.core.chunk_first.call(null, seq__8027_10153__$1);
            var G__10155 = cljs.core.chunk_rest.call(null, seq__8027_10153__$1);
            var G__10156 = c__4408__auto___10154;
            var G__10157 = cljs.core.count.call(null, c__4408__auto___10154);
            var G__10158 = 0;
            seq__8027_10143 = G__10155;
            chunk__8028_10144 = G__10156;
            count__8029_10145 = G__10157;
            i__8030_10146 = G__10158;
            continue;
          } else {
            var arg__5130__auto___10159 = cljs.core.first.call(null, seq__8027_10153__$1);
            a__5129__auto__.push(arg__5130__auto___10159);
            var G__10160 = cljs.core.next.call(null, seq__8027_10153__$1);
            var G__10161 = null;
            var G__10162 = 0;
            var G__10163 = 0;
            seq__8027_10143 = G__10160;
            chunk__8028_10144 = G__10161;
            count__8029_10145 = G__10162;
            i__8030_10146 = G__10163;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.section.apply(null, a__5129__auto__);
  };
  var section = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return section__delegate.call(this, args__5128__auto__);
  };
  section.cljs$lang$maxFixedArity = 0;
  section.cljs$lang$applyTo = function(arglist__10164) {
    var args__5128__auto__ = cljs.core.seq(arglist__10164);
    return section__delegate(args__5128__auto__);
  };
  section.cljs$core$IFn$_invoke$arity$variadic = section__delegate;
  return section;
}();
quiescent.dom.select = function() {
  var select__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8035_10165 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8036_10166 = null;
    var count__8037_10167 = 0;
    var i__8038_10168 = 0;
    while (true) {
      if (i__8038_10168 < count__8037_10167) {
        var arg__5130__auto___10169 = cljs.core._nth.call(null, chunk__8036_10166, i__8038_10168);
        a__5129__auto__.push(arg__5130__auto___10169);
        var G__10170 = seq__8035_10165;
        var G__10171 = chunk__8036_10166;
        var G__10172 = count__8037_10167;
        var G__10173 = i__8038_10168 + 1;
        seq__8035_10165 = G__10170;
        chunk__8036_10166 = G__10171;
        count__8037_10167 = G__10172;
        i__8038_10168 = G__10173;
        continue;
      } else {
        var temp__4126__auto___10174 = cljs.core.seq.call(null, seq__8035_10165);
        if (temp__4126__auto___10174) {
          var seq__8035_10175__$1 = temp__4126__auto___10174;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8035_10175__$1)) {
            var c__4408__auto___10176 = cljs.core.chunk_first.call(null, seq__8035_10175__$1);
            var G__10177 = cljs.core.chunk_rest.call(null, seq__8035_10175__$1);
            var G__10178 = c__4408__auto___10176;
            var G__10179 = cljs.core.count.call(null, c__4408__auto___10176);
            var G__10180 = 0;
            seq__8035_10165 = G__10177;
            chunk__8036_10166 = G__10178;
            count__8037_10167 = G__10179;
            i__8038_10168 = G__10180;
            continue;
          } else {
            var arg__5130__auto___10181 = cljs.core.first.call(null, seq__8035_10175__$1);
            a__5129__auto__.push(arg__5130__auto___10181);
            var G__10182 = cljs.core.next.call(null, seq__8035_10175__$1);
            var G__10183 = null;
            var G__10184 = 0;
            var G__10185 = 0;
            seq__8035_10165 = G__10182;
            chunk__8036_10166 = G__10183;
            count__8037_10167 = G__10184;
            i__8038_10168 = G__10185;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.select.apply(null, a__5129__auto__);
  };
  var select = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return select__delegate.call(this, args__5128__auto__);
  };
  select.cljs$lang$maxFixedArity = 0;
  select.cljs$lang$applyTo = function(arglist__10186) {
    var args__5128__auto__ = cljs.core.seq(arglist__10186);
    return select__delegate(args__5128__auto__);
  };
  select.cljs$core$IFn$_invoke$arity$variadic = select__delegate;
  return select;
}();
quiescent.dom.small = function() {
  var small__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8043_10187 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8044_10188 = null;
    var count__8045_10189 = 0;
    var i__8046_10190 = 0;
    while (true) {
      if (i__8046_10190 < count__8045_10189) {
        var arg__5130__auto___10191 = cljs.core._nth.call(null, chunk__8044_10188, i__8046_10190);
        a__5129__auto__.push(arg__5130__auto___10191);
        var G__10192 = seq__8043_10187;
        var G__10193 = chunk__8044_10188;
        var G__10194 = count__8045_10189;
        var G__10195 = i__8046_10190 + 1;
        seq__8043_10187 = G__10192;
        chunk__8044_10188 = G__10193;
        count__8045_10189 = G__10194;
        i__8046_10190 = G__10195;
        continue;
      } else {
        var temp__4126__auto___10196 = cljs.core.seq.call(null, seq__8043_10187);
        if (temp__4126__auto___10196) {
          var seq__8043_10197__$1 = temp__4126__auto___10196;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8043_10197__$1)) {
            var c__4408__auto___10198 = cljs.core.chunk_first.call(null, seq__8043_10197__$1);
            var G__10199 = cljs.core.chunk_rest.call(null, seq__8043_10197__$1);
            var G__10200 = c__4408__auto___10198;
            var G__10201 = cljs.core.count.call(null, c__4408__auto___10198);
            var G__10202 = 0;
            seq__8043_10187 = G__10199;
            chunk__8044_10188 = G__10200;
            count__8045_10189 = G__10201;
            i__8046_10190 = G__10202;
            continue;
          } else {
            var arg__5130__auto___10203 = cljs.core.first.call(null, seq__8043_10197__$1);
            a__5129__auto__.push(arg__5130__auto___10203);
            var G__10204 = cljs.core.next.call(null, seq__8043_10197__$1);
            var G__10205 = null;
            var G__10206 = 0;
            var G__10207 = 0;
            seq__8043_10187 = G__10204;
            chunk__8044_10188 = G__10205;
            count__8045_10189 = G__10206;
            i__8046_10190 = G__10207;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.small.apply(null, a__5129__auto__);
  };
  var small = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return small__delegate.call(this, args__5128__auto__);
  };
  small.cljs$lang$maxFixedArity = 0;
  small.cljs$lang$applyTo = function(arglist__10208) {
    var args__5128__auto__ = cljs.core.seq(arglist__10208);
    return small__delegate(args__5128__auto__);
  };
  small.cljs$core$IFn$_invoke$arity$variadic = small__delegate;
  return small;
}();
quiescent.dom.source = function() {
  var source__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8051_10209 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8052_10210 = null;
    var count__8053_10211 = 0;
    var i__8054_10212 = 0;
    while (true) {
      if (i__8054_10212 < count__8053_10211) {
        var arg__5130__auto___10213 = cljs.core._nth.call(null, chunk__8052_10210, i__8054_10212);
        a__5129__auto__.push(arg__5130__auto___10213);
        var G__10214 = seq__8051_10209;
        var G__10215 = chunk__8052_10210;
        var G__10216 = count__8053_10211;
        var G__10217 = i__8054_10212 + 1;
        seq__8051_10209 = G__10214;
        chunk__8052_10210 = G__10215;
        count__8053_10211 = G__10216;
        i__8054_10212 = G__10217;
        continue;
      } else {
        var temp__4126__auto___10218 = cljs.core.seq.call(null, seq__8051_10209);
        if (temp__4126__auto___10218) {
          var seq__8051_10219__$1 = temp__4126__auto___10218;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8051_10219__$1)) {
            var c__4408__auto___10220 = cljs.core.chunk_first.call(null, seq__8051_10219__$1);
            var G__10221 = cljs.core.chunk_rest.call(null, seq__8051_10219__$1);
            var G__10222 = c__4408__auto___10220;
            var G__10223 = cljs.core.count.call(null, c__4408__auto___10220);
            var G__10224 = 0;
            seq__8051_10209 = G__10221;
            chunk__8052_10210 = G__10222;
            count__8053_10211 = G__10223;
            i__8054_10212 = G__10224;
            continue;
          } else {
            var arg__5130__auto___10225 = cljs.core.first.call(null, seq__8051_10219__$1);
            a__5129__auto__.push(arg__5130__auto___10225);
            var G__10226 = cljs.core.next.call(null, seq__8051_10219__$1);
            var G__10227 = null;
            var G__10228 = 0;
            var G__10229 = 0;
            seq__8051_10209 = G__10226;
            chunk__8052_10210 = G__10227;
            count__8053_10211 = G__10228;
            i__8054_10212 = G__10229;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.source.apply(null, a__5129__auto__);
  };
  var source = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return source__delegate.call(this, args__5128__auto__);
  };
  source.cljs$lang$maxFixedArity = 0;
  source.cljs$lang$applyTo = function(arglist__10230) {
    var args__5128__auto__ = cljs.core.seq(arglist__10230);
    return source__delegate(args__5128__auto__);
  };
  source.cljs$core$IFn$_invoke$arity$variadic = source__delegate;
  return source;
}();
quiescent.dom.span = function() {
  var span__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8059_10231 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8060_10232 = null;
    var count__8061_10233 = 0;
    var i__8062_10234 = 0;
    while (true) {
      if (i__8062_10234 < count__8061_10233) {
        var arg__5130__auto___10235 = cljs.core._nth.call(null, chunk__8060_10232, i__8062_10234);
        a__5129__auto__.push(arg__5130__auto___10235);
        var G__10236 = seq__8059_10231;
        var G__10237 = chunk__8060_10232;
        var G__10238 = count__8061_10233;
        var G__10239 = i__8062_10234 + 1;
        seq__8059_10231 = G__10236;
        chunk__8060_10232 = G__10237;
        count__8061_10233 = G__10238;
        i__8062_10234 = G__10239;
        continue;
      } else {
        var temp__4126__auto___10240 = cljs.core.seq.call(null, seq__8059_10231);
        if (temp__4126__auto___10240) {
          var seq__8059_10241__$1 = temp__4126__auto___10240;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8059_10241__$1)) {
            var c__4408__auto___10242 = cljs.core.chunk_first.call(null, seq__8059_10241__$1);
            var G__10243 = cljs.core.chunk_rest.call(null, seq__8059_10241__$1);
            var G__10244 = c__4408__auto___10242;
            var G__10245 = cljs.core.count.call(null, c__4408__auto___10242);
            var G__10246 = 0;
            seq__8059_10231 = G__10243;
            chunk__8060_10232 = G__10244;
            count__8061_10233 = G__10245;
            i__8062_10234 = G__10246;
            continue;
          } else {
            var arg__5130__auto___10247 = cljs.core.first.call(null, seq__8059_10241__$1);
            a__5129__auto__.push(arg__5130__auto___10247);
            var G__10248 = cljs.core.next.call(null, seq__8059_10241__$1);
            var G__10249 = null;
            var G__10250 = 0;
            var G__10251 = 0;
            seq__8059_10231 = G__10248;
            chunk__8060_10232 = G__10249;
            count__8061_10233 = G__10250;
            i__8062_10234 = G__10251;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.span.apply(null, a__5129__auto__);
  };
  var span = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return span__delegate.call(this, args__5128__auto__);
  };
  span.cljs$lang$maxFixedArity = 0;
  span.cljs$lang$applyTo = function(arglist__10252) {
    var args__5128__auto__ = cljs.core.seq(arglist__10252);
    return span__delegate(args__5128__auto__);
  };
  span.cljs$core$IFn$_invoke$arity$variadic = span__delegate;
  return span;
}();
quiescent.dom.strong = function() {
  var strong__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8067_10253 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8068_10254 = null;
    var count__8069_10255 = 0;
    var i__8070_10256 = 0;
    while (true) {
      if (i__8070_10256 < count__8069_10255) {
        var arg__5130__auto___10257 = cljs.core._nth.call(null, chunk__8068_10254, i__8070_10256);
        a__5129__auto__.push(arg__5130__auto___10257);
        var G__10258 = seq__8067_10253;
        var G__10259 = chunk__8068_10254;
        var G__10260 = count__8069_10255;
        var G__10261 = i__8070_10256 + 1;
        seq__8067_10253 = G__10258;
        chunk__8068_10254 = G__10259;
        count__8069_10255 = G__10260;
        i__8070_10256 = G__10261;
        continue;
      } else {
        var temp__4126__auto___10262 = cljs.core.seq.call(null, seq__8067_10253);
        if (temp__4126__auto___10262) {
          var seq__8067_10263__$1 = temp__4126__auto___10262;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8067_10263__$1)) {
            var c__4408__auto___10264 = cljs.core.chunk_first.call(null, seq__8067_10263__$1);
            var G__10265 = cljs.core.chunk_rest.call(null, seq__8067_10263__$1);
            var G__10266 = c__4408__auto___10264;
            var G__10267 = cljs.core.count.call(null, c__4408__auto___10264);
            var G__10268 = 0;
            seq__8067_10253 = G__10265;
            chunk__8068_10254 = G__10266;
            count__8069_10255 = G__10267;
            i__8070_10256 = G__10268;
            continue;
          } else {
            var arg__5130__auto___10269 = cljs.core.first.call(null, seq__8067_10263__$1);
            a__5129__auto__.push(arg__5130__auto___10269);
            var G__10270 = cljs.core.next.call(null, seq__8067_10263__$1);
            var G__10271 = null;
            var G__10272 = 0;
            var G__10273 = 0;
            seq__8067_10253 = G__10270;
            chunk__8068_10254 = G__10271;
            count__8069_10255 = G__10272;
            i__8070_10256 = G__10273;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.strong.apply(null, a__5129__auto__);
  };
  var strong = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return strong__delegate.call(this, args__5128__auto__);
  };
  strong.cljs$lang$maxFixedArity = 0;
  strong.cljs$lang$applyTo = function(arglist__10274) {
    var args__5128__auto__ = cljs.core.seq(arglist__10274);
    return strong__delegate(args__5128__auto__);
  };
  strong.cljs$core$IFn$_invoke$arity$variadic = strong__delegate;
  return strong;
}();
quiescent.dom.style = function() {
  var style__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8075_10275 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8076_10276 = null;
    var count__8077_10277 = 0;
    var i__8078_10278 = 0;
    while (true) {
      if (i__8078_10278 < count__8077_10277) {
        var arg__5130__auto___10279 = cljs.core._nth.call(null, chunk__8076_10276, i__8078_10278);
        a__5129__auto__.push(arg__5130__auto___10279);
        var G__10280 = seq__8075_10275;
        var G__10281 = chunk__8076_10276;
        var G__10282 = count__8077_10277;
        var G__10283 = i__8078_10278 + 1;
        seq__8075_10275 = G__10280;
        chunk__8076_10276 = G__10281;
        count__8077_10277 = G__10282;
        i__8078_10278 = G__10283;
        continue;
      } else {
        var temp__4126__auto___10284 = cljs.core.seq.call(null, seq__8075_10275);
        if (temp__4126__auto___10284) {
          var seq__8075_10285__$1 = temp__4126__auto___10284;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8075_10285__$1)) {
            var c__4408__auto___10286 = cljs.core.chunk_first.call(null, seq__8075_10285__$1);
            var G__10287 = cljs.core.chunk_rest.call(null, seq__8075_10285__$1);
            var G__10288 = c__4408__auto___10286;
            var G__10289 = cljs.core.count.call(null, c__4408__auto___10286);
            var G__10290 = 0;
            seq__8075_10275 = G__10287;
            chunk__8076_10276 = G__10288;
            count__8077_10277 = G__10289;
            i__8078_10278 = G__10290;
            continue;
          } else {
            var arg__5130__auto___10291 = cljs.core.first.call(null, seq__8075_10285__$1);
            a__5129__auto__.push(arg__5130__auto___10291);
            var G__10292 = cljs.core.next.call(null, seq__8075_10285__$1);
            var G__10293 = null;
            var G__10294 = 0;
            var G__10295 = 0;
            seq__8075_10275 = G__10292;
            chunk__8076_10276 = G__10293;
            count__8077_10277 = G__10294;
            i__8078_10278 = G__10295;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.style.apply(null, a__5129__auto__);
  };
  var style = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return style__delegate.call(this, args__5128__auto__);
  };
  style.cljs$lang$maxFixedArity = 0;
  style.cljs$lang$applyTo = function(arglist__10296) {
    var args__5128__auto__ = cljs.core.seq(arglist__10296);
    return style__delegate(args__5128__auto__);
  };
  style.cljs$core$IFn$_invoke$arity$variadic = style__delegate;
  return style;
}();
quiescent.dom.sub = function() {
  var sub__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8083_10297 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8084_10298 = null;
    var count__8085_10299 = 0;
    var i__8086_10300 = 0;
    while (true) {
      if (i__8086_10300 < count__8085_10299) {
        var arg__5130__auto___10301 = cljs.core._nth.call(null, chunk__8084_10298, i__8086_10300);
        a__5129__auto__.push(arg__5130__auto___10301);
        var G__10302 = seq__8083_10297;
        var G__10303 = chunk__8084_10298;
        var G__10304 = count__8085_10299;
        var G__10305 = i__8086_10300 + 1;
        seq__8083_10297 = G__10302;
        chunk__8084_10298 = G__10303;
        count__8085_10299 = G__10304;
        i__8086_10300 = G__10305;
        continue;
      } else {
        var temp__4126__auto___10306 = cljs.core.seq.call(null, seq__8083_10297);
        if (temp__4126__auto___10306) {
          var seq__8083_10307__$1 = temp__4126__auto___10306;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8083_10307__$1)) {
            var c__4408__auto___10308 = cljs.core.chunk_first.call(null, seq__8083_10307__$1);
            var G__10309 = cljs.core.chunk_rest.call(null, seq__8083_10307__$1);
            var G__10310 = c__4408__auto___10308;
            var G__10311 = cljs.core.count.call(null, c__4408__auto___10308);
            var G__10312 = 0;
            seq__8083_10297 = G__10309;
            chunk__8084_10298 = G__10310;
            count__8085_10299 = G__10311;
            i__8086_10300 = G__10312;
            continue;
          } else {
            var arg__5130__auto___10313 = cljs.core.first.call(null, seq__8083_10307__$1);
            a__5129__auto__.push(arg__5130__auto___10313);
            var G__10314 = cljs.core.next.call(null, seq__8083_10307__$1);
            var G__10315 = null;
            var G__10316 = 0;
            var G__10317 = 0;
            seq__8083_10297 = G__10314;
            chunk__8084_10298 = G__10315;
            count__8085_10299 = G__10316;
            i__8086_10300 = G__10317;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sub.apply(null, a__5129__auto__);
  };
  var sub = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sub__delegate.call(this, args__5128__auto__);
  };
  sub.cljs$lang$maxFixedArity = 0;
  sub.cljs$lang$applyTo = function(arglist__10318) {
    var args__5128__auto__ = cljs.core.seq(arglist__10318);
    return sub__delegate(args__5128__auto__);
  };
  sub.cljs$core$IFn$_invoke$arity$variadic = sub__delegate;
  return sub;
}();
quiescent.dom.summary = function() {
  var summary__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8091_10319 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8092_10320 = null;
    var count__8093_10321 = 0;
    var i__8094_10322 = 0;
    while (true) {
      if (i__8094_10322 < count__8093_10321) {
        var arg__5130__auto___10323 = cljs.core._nth.call(null, chunk__8092_10320, i__8094_10322);
        a__5129__auto__.push(arg__5130__auto___10323);
        var G__10324 = seq__8091_10319;
        var G__10325 = chunk__8092_10320;
        var G__10326 = count__8093_10321;
        var G__10327 = i__8094_10322 + 1;
        seq__8091_10319 = G__10324;
        chunk__8092_10320 = G__10325;
        count__8093_10321 = G__10326;
        i__8094_10322 = G__10327;
        continue;
      } else {
        var temp__4126__auto___10328 = cljs.core.seq.call(null, seq__8091_10319);
        if (temp__4126__auto___10328) {
          var seq__8091_10329__$1 = temp__4126__auto___10328;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8091_10329__$1)) {
            var c__4408__auto___10330 = cljs.core.chunk_first.call(null, seq__8091_10329__$1);
            var G__10331 = cljs.core.chunk_rest.call(null, seq__8091_10329__$1);
            var G__10332 = c__4408__auto___10330;
            var G__10333 = cljs.core.count.call(null, c__4408__auto___10330);
            var G__10334 = 0;
            seq__8091_10319 = G__10331;
            chunk__8092_10320 = G__10332;
            count__8093_10321 = G__10333;
            i__8094_10322 = G__10334;
            continue;
          } else {
            var arg__5130__auto___10335 = cljs.core.first.call(null, seq__8091_10329__$1);
            a__5129__auto__.push(arg__5130__auto___10335);
            var G__10336 = cljs.core.next.call(null, seq__8091_10329__$1);
            var G__10337 = null;
            var G__10338 = 0;
            var G__10339 = 0;
            seq__8091_10319 = G__10336;
            chunk__8092_10320 = G__10337;
            count__8093_10321 = G__10338;
            i__8094_10322 = G__10339;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.summary.apply(null, a__5129__auto__);
  };
  var summary = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return summary__delegate.call(this, args__5128__auto__);
  };
  summary.cljs$lang$maxFixedArity = 0;
  summary.cljs$lang$applyTo = function(arglist__10340) {
    var args__5128__auto__ = cljs.core.seq(arglist__10340);
    return summary__delegate(args__5128__auto__);
  };
  summary.cljs$core$IFn$_invoke$arity$variadic = summary__delegate;
  return summary;
}();
quiescent.dom.sup = function() {
  var sup__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8099_10341 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8100_10342 = null;
    var count__8101_10343 = 0;
    var i__8102_10344 = 0;
    while (true) {
      if (i__8102_10344 < count__8101_10343) {
        var arg__5130__auto___10345 = cljs.core._nth.call(null, chunk__8100_10342, i__8102_10344);
        a__5129__auto__.push(arg__5130__auto___10345);
        var G__10346 = seq__8099_10341;
        var G__10347 = chunk__8100_10342;
        var G__10348 = count__8101_10343;
        var G__10349 = i__8102_10344 + 1;
        seq__8099_10341 = G__10346;
        chunk__8100_10342 = G__10347;
        count__8101_10343 = G__10348;
        i__8102_10344 = G__10349;
        continue;
      } else {
        var temp__4126__auto___10350 = cljs.core.seq.call(null, seq__8099_10341);
        if (temp__4126__auto___10350) {
          var seq__8099_10351__$1 = temp__4126__auto___10350;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8099_10351__$1)) {
            var c__4408__auto___10352 = cljs.core.chunk_first.call(null, seq__8099_10351__$1);
            var G__10353 = cljs.core.chunk_rest.call(null, seq__8099_10351__$1);
            var G__10354 = c__4408__auto___10352;
            var G__10355 = cljs.core.count.call(null, c__4408__auto___10352);
            var G__10356 = 0;
            seq__8099_10341 = G__10353;
            chunk__8100_10342 = G__10354;
            count__8101_10343 = G__10355;
            i__8102_10344 = G__10356;
            continue;
          } else {
            var arg__5130__auto___10357 = cljs.core.first.call(null, seq__8099_10351__$1);
            a__5129__auto__.push(arg__5130__auto___10357);
            var G__10358 = cljs.core.next.call(null, seq__8099_10351__$1);
            var G__10359 = null;
            var G__10360 = 0;
            var G__10361 = 0;
            seq__8099_10341 = G__10358;
            chunk__8100_10342 = G__10359;
            count__8101_10343 = G__10360;
            i__8102_10344 = G__10361;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.sup.apply(null, a__5129__auto__);
  };
  var sup = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return sup__delegate.call(this, args__5128__auto__);
  };
  sup.cljs$lang$maxFixedArity = 0;
  sup.cljs$lang$applyTo = function(arglist__10362) {
    var args__5128__auto__ = cljs.core.seq(arglist__10362);
    return sup__delegate(args__5128__auto__);
  };
  sup.cljs$core$IFn$_invoke$arity$variadic = sup__delegate;
  return sup;
}();
quiescent.dom.table = function() {
  var table__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8107_10363 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8108_10364 = null;
    var count__8109_10365 = 0;
    var i__8110_10366 = 0;
    while (true) {
      if (i__8110_10366 < count__8109_10365) {
        var arg__5130__auto___10367 = cljs.core._nth.call(null, chunk__8108_10364, i__8110_10366);
        a__5129__auto__.push(arg__5130__auto___10367);
        var G__10368 = seq__8107_10363;
        var G__10369 = chunk__8108_10364;
        var G__10370 = count__8109_10365;
        var G__10371 = i__8110_10366 + 1;
        seq__8107_10363 = G__10368;
        chunk__8108_10364 = G__10369;
        count__8109_10365 = G__10370;
        i__8110_10366 = G__10371;
        continue;
      } else {
        var temp__4126__auto___10372 = cljs.core.seq.call(null, seq__8107_10363);
        if (temp__4126__auto___10372) {
          var seq__8107_10373__$1 = temp__4126__auto___10372;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8107_10373__$1)) {
            var c__4408__auto___10374 = cljs.core.chunk_first.call(null, seq__8107_10373__$1);
            var G__10375 = cljs.core.chunk_rest.call(null, seq__8107_10373__$1);
            var G__10376 = c__4408__auto___10374;
            var G__10377 = cljs.core.count.call(null, c__4408__auto___10374);
            var G__10378 = 0;
            seq__8107_10363 = G__10375;
            chunk__8108_10364 = G__10376;
            count__8109_10365 = G__10377;
            i__8110_10366 = G__10378;
            continue;
          } else {
            var arg__5130__auto___10379 = cljs.core.first.call(null, seq__8107_10373__$1);
            a__5129__auto__.push(arg__5130__auto___10379);
            var G__10380 = cljs.core.next.call(null, seq__8107_10373__$1);
            var G__10381 = null;
            var G__10382 = 0;
            var G__10383 = 0;
            seq__8107_10363 = G__10380;
            chunk__8108_10364 = G__10381;
            count__8109_10365 = G__10382;
            i__8110_10366 = G__10383;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.table.apply(null, a__5129__auto__);
  };
  var table = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return table__delegate.call(this, args__5128__auto__);
  };
  table.cljs$lang$maxFixedArity = 0;
  table.cljs$lang$applyTo = function(arglist__10384) {
    var args__5128__auto__ = cljs.core.seq(arglist__10384);
    return table__delegate(args__5128__auto__);
  };
  table.cljs$core$IFn$_invoke$arity$variadic = table__delegate;
  return table;
}();
quiescent.dom.tbody = function() {
  var tbody__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8115_10385 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8116_10386 = null;
    var count__8117_10387 = 0;
    var i__8118_10388 = 0;
    while (true) {
      if (i__8118_10388 < count__8117_10387) {
        var arg__5130__auto___10389 = cljs.core._nth.call(null, chunk__8116_10386, i__8118_10388);
        a__5129__auto__.push(arg__5130__auto___10389);
        var G__10390 = seq__8115_10385;
        var G__10391 = chunk__8116_10386;
        var G__10392 = count__8117_10387;
        var G__10393 = i__8118_10388 + 1;
        seq__8115_10385 = G__10390;
        chunk__8116_10386 = G__10391;
        count__8117_10387 = G__10392;
        i__8118_10388 = G__10393;
        continue;
      } else {
        var temp__4126__auto___10394 = cljs.core.seq.call(null, seq__8115_10385);
        if (temp__4126__auto___10394) {
          var seq__8115_10395__$1 = temp__4126__auto___10394;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8115_10395__$1)) {
            var c__4408__auto___10396 = cljs.core.chunk_first.call(null, seq__8115_10395__$1);
            var G__10397 = cljs.core.chunk_rest.call(null, seq__8115_10395__$1);
            var G__10398 = c__4408__auto___10396;
            var G__10399 = cljs.core.count.call(null, c__4408__auto___10396);
            var G__10400 = 0;
            seq__8115_10385 = G__10397;
            chunk__8116_10386 = G__10398;
            count__8117_10387 = G__10399;
            i__8118_10388 = G__10400;
            continue;
          } else {
            var arg__5130__auto___10401 = cljs.core.first.call(null, seq__8115_10395__$1);
            a__5129__auto__.push(arg__5130__auto___10401);
            var G__10402 = cljs.core.next.call(null, seq__8115_10395__$1);
            var G__10403 = null;
            var G__10404 = 0;
            var G__10405 = 0;
            seq__8115_10385 = G__10402;
            chunk__8116_10386 = G__10403;
            count__8117_10387 = G__10404;
            i__8118_10388 = G__10405;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tbody.apply(null, a__5129__auto__);
  };
  var tbody = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tbody__delegate.call(this, args__5128__auto__);
  };
  tbody.cljs$lang$maxFixedArity = 0;
  tbody.cljs$lang$applyTo = function(arglist__10406) {
    var args__5128__auto__ = cljs.core.seq(arglist__10406);
    return tbody__delegate(args__5128__auto__);
  };
  tbody.cljs$core$IFn$_invoke$arity$variadic = tbody__delegate;
  return tbody;
}();
quiescent.dom.td = function() {
  var td__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8123_10407 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8124_10408 = null;
    var count__8125_10409 = 0;
    var i__8126_10410 = 0;
    while (true) {
      if (i__8126_10410 < count__8125_10409) {
        var arg__5130__auto___10411 = cljs.core._nth.call(null, chunk__8124_10408, i__8126_10410);
        a__5129__auto__.push(arg__5130__auto___10411);
        var G__10412 = seq__8123_10407;
        var G__10413 = chunk__8124_10408;
        var G__10414 = count__8125_10409;
        var G__10415 = i__8126_10410 + 1;
        seq__8123_10407 = G__10412;
        chunk__8124_10408 = G__10413;
        count__8125_10409 = G__10414;
        i__8126_10410 = G__10415;
        continue;
      } else {
        var temp__4126__auto___10416 = cljs.core.seq.call(null, seq__8123_10407);
        if (temp__4126__auto___10416) {
          var seq__8123_10417__$1 = temp__4126__auto___10416;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8123_10417__$1)) {
            var c__4408__auto___10418 = cljs.core.chunk_first.call(null, seq__8123_10417__$1);
            var G__10419 = cljs.core.chunk_rest.call(null, seq__8123_10417__$1);
            var G__10420 = c__4408__auto___10418;
            var G__10421 = cljs.core.count.call(null, c__4408__auto___10418);
            var G__10422 = 0;
            seq__8123_10407 = G__10419;
            chunk__8124_10408 = G__10420;
            count__8125_10409 = G__10421;
            i__8126_10410 = G__10422;
            continue;
          } else {
            var arg__5130__auto___10423 = cljs.core.first.call(null, seq__8123_10417__$1);
            a__5129__auto__.push(arg__5130__auto___10423);
            var G__10424 = cljs.core.next.call(null, seq__8123_10417__$1);
            var G__10425 = null;
            var G__10426 = 0;
            var G__10427 = 0;
            seq__8123_10407 = G__10424;
            chunk__8124_10408 = G__10425;
            count__8125_10409 = G__10426;
            i__8126_10410 = G__10427;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.td.apply(null, a__5129__auto__);
  };
  var td = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return td__delegate.call(this, args__5128__auto__);
  };
  td.cljs$lang$maxFixedArity = 0;
  td.cljs$lang$applyTo = function(arglist__10428) {
    var args__5128__auto__ = cljs.core.seq(arglist__10428);
    return td__delegate(args__5128__auto__);
  };
  td.cljs$core$IFn$_invoke$arity$variadic = td__delegate;
  return td;
}();
quiescent.dom.textarea = function() {
  var textarea__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8131_10429 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8132_10430 = null;
    var count__8133_10431 = 0;
    var i__8134_10432 = 0;
    while (true) {
      if (i__8134_10432 < count__8133_10431) {
        var arg__5130__auto___10433 = cljs.core._nth.call(null, chunk__8132_10430, i__8134_10432);
        a__5129__auto__.push(arg__5130__auto___10433);
        var G__10434 = seq__8131_10429;
        var G__10435 = chunk__8132_10430;
        var G__10436 = count__8133_10431;
        var G__10437 = i__8134_10432 + 1;
        seq__8131_10429 = G__10434;
        chunk__8132_10430 = G__10435;
        count__8133_10431 = G__10436;
        i__8134_10432 = G__10437;
        continue;
      } else {
        var temp__4126__auto___10438 = cljs.core.seq.call(null, seq__8131_10429);
        if (temp__4126__auto___10438) {
          var seq__8131_10439__$1 = temp__4126__auto___10438;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8131_10439__$1)) {
            var c__4408__auto___10440 = cljs.core.chunk_first.call(null, seq__8131_10439__$1);
            var G__10441 = cljs.core.chunk_rest.call(null, seq__8131_10439__$1);
            var G__10442 = c__4408__auto___10440;
            var G__10443 = cljs.core.count.call(null, c__4408__auto___10440);
            var G__10444 = 0;
            seq__8131_10429 = G__10441;
            chunk__8132_10430 = G__10442;
            count__8133_10431 = G__10443;
            i__8134_10432 = G__10444;
            continue;
          } else {
            var arg__5130__auto___10445 = cljs.core.first.call(null, seq__8131_10439__$1);
            a__5129__auto__.push(arg__5130__auto___10445);
            var G__10446 = cljs.core.next.call(null, seq__8131_10439__$1);
            var G__10447 = null;
            var G__10448 = 0;
            var G__10449 = 0;
            seq__8131_10429 = G__10446;
            chunk__8132_10430 = G__10447;
            count__8133_10431 = G__10448;
            i__8134_10432 = G__10449;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.textarea.apply(null, a__5129__auto__);
  };
  var textarea = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return textarea__delegate.call(this, args__5128__auto__);
  };
  textarea.cljs$lang$maxFixedArity = 0;
  textarea.cljs$lang$applyTo = function(arglist__10450) {
    var args__5128__auto__ = cljs.core.seq(arglist__10450);
    return textarea__delegate(args__5128__auto__);
  };
  textarea.cljs$core$IFn$_invoke$arity$variadic = textarea__delegate;
  return textarea;
}();
quiescent.dom.tfoot = function() {
  var tfoot__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8139_10451 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8140_10452 = null;
    var count__8141_10453 = 0;
    var i__8142_10454 = 0;
    while (true) {
      if (i__8142_10454 < count__8141_10453) {
        var arg__5130__auto___10455 = cljs.core._nth.call(null, chunk__8140_10452, i__8142_10454);
        a__5129__auto__.push(arg__5130__auto___10455);
        var G__10456 = seq__8139_10451;
        var G__10457 = chunk__8140_10452;
        var G__10458 = count__8141_10453;
        var G__10459 = i__8142_10454 + 1;
        seq__8139_10451 = G__10456;
        chunk__8140_10452 = G__10457;
        count__8141_10453 = G__10458;
        i__8142_10454 = G__10459;
        continue;
      } else {
        var temp__4126__auto___10460 = cljs.core.seq.call(null, seq__8139_10451);
        if (temp__4126__auto___10460) {
          var seq__8139_10461__$1 = temp__4126__auto___10460;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8139_10461__$1)) {
            var c__4408__auto___10462 = cljs.core.chunk_first.call(null, seq__8139_10461__$1);
            var G__10463 = cljs.core.chunk_rest.call(null, seq__8139_10461__$1);
            var G__10464 = c__4408__auto___10462;
            var G__10465 = cljs.core.count.call(null, c__4408__auto___10462);
            var G__10466 = 0;
            seq__8139_10451 = G__10463;
            chunk__8140_10452 = G__10464;
            count__8141_10453 = G__10465;
            i__8142_10454 = G__10466;
            continue;
          } else {
            var arg__5130__auto___10467 = cljs.core.first.call(null, seq__8139_10461__$1);
            a__5129__auto__.push(arg__5130__auto___10467);
            var G__10468 = cljs.core.next.call(null, seq__8139_10461__$1);
            var G__10469 = null;
            var G__10470 = 0;
            var G__10471 = 0;
            seq__8139_10451 = G__10468;
            chunk__8140_10452 = G__10469;
            count__8141_10453 = G__10470;
            i__8142_10454 = G__10471;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tfoot.apply(null, a__5129__auto__);
  };
  var tfoot = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tfoot__delegate.call(this, args__5128__auto__);
  };
  tfoot.cljs$lang$maxFixedArity = 0;
  tfoot.cljs$lang$applyTo = function(arglist__10472) {
    var args__5128__auto__ = cljs.core.seq(arglist__10472);
    return tfoot__delegate(args__5128__auto__);
  };
  tfoot.cljs$core$IFn$_invoke$arity$variadic = tfoot__delegate;
  return tfoot;
}();
quiescent.dom.th = function() {
  var th__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8147_10473 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8148_10474 = null;
    var count__8149_10475 = 0;
    var i__8150_10476 = 0;
    while (true) {
      if (i__8150_10476 < count__8149_10475) {
        var arg__5130__auto___10477 = cljs.core._nth.call(null, chunk__8148_10474, i__8150_10476);
        a__5129__auto__.push(arg__5130__auto___10477);
        var G__10478 = seq__8147_10473;
        var G__10479 = chunk__8148_10474;
        var G__10480 = count__8149_10475;
        var G__10481 = i__8150_10476 + 1;
        seq__8147_10473 = G__10478;
        chunk__8148_10474 = G__10479;
        count__8149_10475 = G__10480;
        i__8150_10476 = G__10481;
        continue;
      } else {
        var temp__4126__auto___10482 = cljs.core.seq.call(null, seq__8147_10473);
        if (temp__4126__auto___10482) {
          var seq__8147_10483__$1 = temp__4126__auto___10482;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8147_10483__$1)) {
            var c__4408__auto___10484 = cljs.core.chunk_first.call(null, seq__8147_10483__$1);
            var G__10485 = cljs.core.chunk_rest.call(null, seq__8147_10483__$1);
            var G__10486 = c__4408__auto___10484;
            var G__10487 = cljs.core.count.call(null, c__4408__auto___10484);
            var G__10488 = 0;
            seq__8147_10473 = G__10485;
            chunk__8148_10474 = G__10486;
            count__8149_10475 = G__10487;
            i__8150_10476 = G__10488;
            continue;
          } else {
            var arg__5130__auto___10489 = cljs.core.first.call(null, seq__8147_10483__$1);
            a__5129__auto__.push(arg__5130__auto___10489);
            var G__10490 = cljs.core.next.call(null, seq__8147_10483__$1);
            var G__10491 = null;
            var G__10492 = 0;
            var G__10493 = 0;
            seq__8147_10473 = G__10490;
            chunk__8148_10474 = G__10491;
            count__8149_10475 = G__10492;
            i__8150_10476 = G__10493;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.th.apply(null, a__5129__auto__);
  };
  var th = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return th__delegate.call(this, args__5128__auto__);
  };
  th.cljs$lang$maxFixedArity = 0;
  th.cljs$lang$applyTo = function(arglist__10494) {
    var args__5128__auto__ = cljs.core.seq(arglist__10494);
    return th__delegate(args__5128__auto__);
  };
  th.cljs$core$IFn$_invoke$arity$variadic = th__delegate;
  return th;
}();
quiescent.dom.thead = function() {
  var thead__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8155_10495 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8156_10496 = null;
    var count__8157_10497 = 0;
    var i__8158_10498 = 0;
    while (true) {
      if (i__8158_10498 < count__8157_10497) {
        var arg__5130__auto___10499 = cljs.core._nth.call(null, chunk__8156_10496, i__8158_10498);
        a__5129__auto__.push(arg__5130__auto___10499);
        var G__10500 = seq__8155_10495;
        var G__10501 = chunk__8156_10496;
        var G__10502 = count__8157_10497;
        var G__10503 = i__8158_10498 + 1;
        seq__8155_10495 = G__10500;
        chunk__8156_10496 = G__10501;
        count__8157_10497 = G__10502;
        i__8158_10498 = G__10503;
        continue;
      } else {
        var temp__4126__auto___10504 = cljs.core.seq.call(null, seq__8155_10495);
        if (temp__4126__auto___10504) {
          var seq__8155_10505__$1 = temp__4126__auto___10504;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8155_10505__$1)) {
            var c__4408__auto___10506 = cljs.core.chunk_first.call(null, seq__8155_10505__$1);
            var G__10507 = cljs.core.chunk_rest.call(null, seq__8155_10505__$1);
            var G__10508 = c__4408__auto___10506;
            var G__10509 = cljs.core.count.call(null, c__4408__auto___10506);
            var G__10510 = 0;
            seq__8155_10495 = G__10507;
            chunk__8156_10496 = G__10508;
            count__8157_10497 = G__10509;
            i__8158_10498 = G__10510;
            continue;
          } else {
            var arg__5130__auto___10511 = cljs.core.first.call(null, seq__8155_10505__$1);
            a__5129__auto__.push(arg__5130__auto___10511);
            var G__10512 = cljs.core.next.call(null, seq__8155_10505__$1);
            var G__10513 = null;
            var G__10514 = 0;
            var G__10515 = 0;
            seq__8155_10495 = G__10512;
            chunk__8156_10496 = G__10513;
            count__8157_10497 = G__10514;
            i__8158_10498 = G__10515;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.thead.apply(null, a__5129__auto__);
  };
  var thead = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return thead__delegate.call(this, args__5128__auto__);
  };
  thead.cljs$lang$maxFixedArity = 0;
  thead.cljs$lang$applyTo = function(arglist__10516) {
    var args__5128__auto__ = cljs.core.seq(arglist__10516);
    return thead__delegate(args__5128__auto__);
  };
  thead.cljs$core$IFn$_invoke$arity$variadic = thead__delegate;
  return thead;
}();
quiescent.dom.time = function() {
  var time__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8163_10517 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8164_10518 = null;
    var count__8165_10519 = 0;
    var i__8166_10520 = 0;
    while (true) {
      if (i__8166_10520 < count__8165_10519) {
        var arg__5130__auto___10521 = cljs.core._nth.call(null, chunk__8164_10518, i__8166_10520);
        a__5129__auto__.push(arg__5130__auto___10521);
        var G__10522 = seq__8163_10517;
        var G__10523 = chunk__8164_10518;
        var G__10524 = count__8165_10519;
        var G__10525 = i__8166_10520 + 1;
        seq__8163_10517 = G__10522;
        chunk__8164_10518 = G__10523;
        count__8165_10519 = G__10524;
        i__8166_10520 = G__10525;
        continue;
      } else {
        var temp__4126__auto___10526 = cljs.core.seq.call(null, seq__8163_10517);
        if (temp__4126__auto___10526) {
          var seq__8163_10527__$1 = temp__4126__auto___10526;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8163_10527__$1)) {
            var c__4408__auto___10528 = cljs.core.chunk_first.call(null, seq__8163_10527__$1);
            var G__10529 = cljs.core.chunk_rest.call(null, seq__8163_10527__$1);
            var G__10530 = c__4408__auto___10528;
            var G__10531 = cljs.core.count.call(null, c__4408__auto___10528);
            var G__10532 = 0;
            seq__8163_10517 = G__10529;
            chunk__8164_10518 = G__10530;
            count__8165_10519 = G__10531;
            i__8166_10520 = G__10532;
            continue;
          } else {
            var arg__5130__auto___10533 = cljs.core.first.call(null, seq__8163_10527__$1);
            a__5129__auto__.push(arg__5130__auto___10533);
            var G__10534 = cljs.core.next.call(null, seq__8163_10527__$1);
            var G__10535 = null;
            var G__10536 = 0;
            var G__10537 = 0;
            seq__8163_10517 = G__10534;
            chunk__8164_10518 = G__10535;
            count__8165_10519 = G__10536;
            i__8166_10520 = G__10537;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.time.apply(null, a__5129__auto__);
  };
  var time = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return time__delegate.call(this, args__5128__auto__);
  };
  time.cljs$lang$maxFixedArity = 0;
  time.cljs$lang$applyTo = function(arglist__10538) {
    var args__5128__auto__ = cljs.core.seq(arglist__10538);
    return time__delegate(args__5128__auto__);
  };
  time.cljs$core$IFn$_invoke$arity$variadic = time__delegate;
  return time;
}();
quiescent.dom.title = function() {
  var title__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8171_10539 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8172_10540 = null;
    var count__8173_10541 = 0;
    var i__8174_10542 = 0;
    while (true) {
      if (i__8174_10542 < count__8173_10541) {
        var arg__5130__auto___10543 = cljs.core._nth.call(null, chunk__8172_10540, i__8174_10542);
        a__5129__auto__.push(arg__5130__auto___10543);
        var G__10544 = seq__8171_10539;
        var G__10545 = chunk__8172_10540;
        var G__10546 = count__8173_10541;
        var G__10547 = i__8174_10542 + 1;
        seq__8171_10539 = G__10544;
        chunk__8172_10540 = G__10545;
        count__8173_10541 = G__10546;
        i__8174_10542 = G__10547;
        continue;
      } else {
        var temp__4126__auto___10548 = cljs.core.seq.call(null, seq__8171_10539);
        if (temp__4126__auto___10548) {
          var seq__8171_10549__$1 = temp__4126__auto___10548;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8171_10549__$1)) {
            var c__4408__auto___10550 = cljs.core.chunk_first.call(null, seq__8171_10549__$1);
            var G__10551 = cljs.core.chunk_rest.call(null, seq__8171_10549__$1);
            var G__10552 = c__4408__auto___10550;
            var G__10553 = cljs.core.count.call(null, c__4408__auto___10550);
            var G__10554 = 0;
            seq__8171_10539 = G__10551;
            chunk__8172_10540 = G__10552;
            count__8173_10541 = G__10553;
            i__8174_10542 = G__10554;
            continue;
          } else {
            var arg__5130__auto___10555 = cljs.core.first.call(null, seq__8171_10549__$1);
            a__5129__auto__.push(arg__5130__auto___10555);
            var G__10556 = cljs.core.next.call(null, seq__8171_10549__$1);
            var G__10557 = null;
            var G__10558 = 0;
            var G__10559 = 0;
            seq__8171_10539 = G__10556;
            chunk__8172_10540 = G__10557;
            count__8173_10541 = G__10558;
            i__8174_10542 = G__10559;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.title.apply(null, a__5129__auto__);
  };
  var title = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return title__delegate.call(this, args__5128__auto__);
  };
  title.cljs$lang$maxFixedArity = 0;
  title.cljs$lang$applyTo = function(arglist__10560) {
    var args__5128__auto__ = cljs.core.seq(arglist__10560);
    return title__delegate(args__5128__auto__);
  };
  title.cljs$core$IFn$_invoke$arity$variadic = title__delegate;
  return title;
}();
quiescent.dom.tr = function() {
  var tr__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8179_10561 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8180_10562 = null;
    var count__8181_10563 = 0;
    var i__8182_10564 = 0;
    while (true) {
      if (i__8182_10564 < count__8181_10563) {
        var arg__5130__auto___10565 = cljs.core._nth.call(null, chunk__8180_10562, i__8182_10564);
        a__5129__auto__.push(arg__5130__auto___10565);
        var G__10566 = seq__8179_10561;
        var G__10567 = chunk__8180_10562;
        var G__10568 = count__8181_10563;
        var G__10569 = i__8182_10564 + 1;
        seq__8179_10561 = G__10566;
        chunk__8180_10562 = G__10567;
        count__8181_10563 = G__10568;
        i__8182_10564 = G__10569;
        continue;
      } else {
        var temp__4126__auto___10570 = cljs.core.seq.call(null, seq__8179_10561);
        if (temp__4126__auto___10570) {
          var seq__8179_10571__$1 = temp__4126__auto___10570;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8179_10571__$1)) {
            var c__4408__auto___10572 = cljs.core.chunk_first.call(null, seq__8179_10571__$1);
            var G__10573 = cljs.core.chunk_rest.call(null, seq__8179_10571__$1);
            var G__10574 = c__4408__auto___10572;
            var G__10575 = cljs.core.count.call(null, c__4408__auto___10572);
            var G__10576 = 0;
            seq__8179_10561 = G__10573;
            chunk__8180_10562 = G__10574;
            count__8181_10563 = G__10575;
            i__8182_10564 = G__10576;
            continue;
          } else {
            var arg__5130__auto___10577 = cljs.core.first.call(null, seq__8179_10571__$1);
            a__5129__auto__.push(arg__5130__auto___10577);
            var G__10578 = cljs.core.next.call(null, seq__8179_10571__$1);
            var G__10579 = null;
            var G__10580 = 0;
            var G__10581 = 0;
            seq__8179_10561 = G__10578;
            chunk__8180_10562 = G__10579;
            count__8181_10563 = G__10580;
            i__8182_10564 = G__10581;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.tr.apply(null, a__5129__auto__);
  };
  var tr = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return tr__delegate.call(this, args__5128__auto__);
  };
  tr.cljs$lang$maxFixedArity = 0;
  tr.cljs$lang$applyTo = function(arglist__10582) {
    var args__5128__auto__ = cljs.core.seq(arglist__10582);
    return tr__delegate(args__5128__auto__);
  };
  tr.cljs$core$IFn$_invoke$arity$variadic = tr__delegate;
  return tr;
}();
quiescent.dom.track = function() {
  var track__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8187_10583 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8188_10584 = null;
    var count__8189_10585 = 0;
    var i__8190_10586 = 0;
    while (true) {
      if (i__8190_10586 < count__8189_10585) {
        var arg__5130__auto___10587 = cljs.core._nth.call(null, chunk__8188_10584, i__8190_10586);
        a__5129__auto__.push(arg__5130__auto___10587);
        var G__10588 = seq__8187_10583;
        var G__10589 = chunk__8188_10584;
        var G__10590 = count__8189_10585;
        var G__10591 = i__8190_10586 + 1;
        seq__8187_10583 = G__10588;
        chunk__8188_10584 = G__10589;
        count__8189_10585 = G__10590;
        i__8190_10586 = G__10591;
        continue;
      } else {
        var temp__4126__auto___10592 = cljs.core.seq.call(null, seq__8187_10583);
        if (temp__4126__auto___10592) {
          var seq__8187_10593__$1 = temp__4126__auto___10592;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8187_10593__$1)) {
            var c__4408__auto___10594 = cljs.core.chunk_first.call(null, seq__8187_10593__$1);
            var G__10595 = cljs.core.chunk_rest.call(null, seq__8187_10593__$1);
            var G__10596 = c__4408__auto___10594;
            var G__10597 = cljs.core.count.call(null, c__4408__auto___10594);
            var G__10598 = 0;
            seq__8187_10583 = G__10595;
            chunk__8188_10584 = G__10596;
            count__8189_10585 = G__10597;
            i__8190_10586 = G__10598;
            continue;
          } else {
            var arg__5130__auto___10599 = cljs.core.first.call(null, seq__8187_10593__$1);
            a__5129__auto__.push(arg__5130__auto___10599);
            var G__10600 = cljs.core.next.call(null, seq__8187_10593__$1);
            var G__10601 = null;
            var G__10602 = 0;
            var G__10603 = 0;
            seq__8187_10583 = G__10600;
            chunk__8188_10584 = G__10601;
            count__8189_10585 = G__10602;
            i__8190_10586 = G__10603;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.track.apply(null, a__5129__auto__);
  };
  var track = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return track__delegate.call(this, args__5128__auto__);
  };
  track.cljs$lang$maxFixedArity = 0;
  track.cljs$lang$applyTo = function(arglist__10604) {
    var args__5128__auto__ = cljs.core.seq(arglist__10604);
    return track__delegate(args__5128__auto__);
  };
  track.cljs$core$IFn$_invoke$arity$variadic = track__delegate;
  return track;
}();
quiescent.dom.u = function() {
  var u__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8195_10605 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8196_10606 = null;
    var count__8197_10607 = 0;
    var i__8198_10608 = 0;
    while (true) {
      if (i__8198_10608 < count__8197_10607) {
        var arg__5130__auto___10609 = cljs.core._nth.call(null, chunk__8196_10606, i__8198_10608);
        a__5129__auto__.push(arg__5130__auto___10609);
        var G__10610 = seq__8195_10605;
        var G__10611 = chunk__8196_10606;
        var G__10612 = count__8197_10607;
        var G__10613 = i__8198_10608 + 1;
        seq__8195_10605 = G__10610;
        chunk__8196_10606 = G__10611;
        count__8197_10607 = G__10612;
        i__8198_10608 = G__10613;
        continue;
      } else {
        var temp__4126__auto___10614 = cljs.core.seq.call(null, seq__8195_10605);
        if (temp__4126__auto___10614) {
          var seq__8195_10615__$1 = temp__4126__auto___10614;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8195_10615__$1)) {
            var c__4408__auto___10616 = cljs.core.chunk_first.call(null, seq__8195_10615__$1);
            var G__10617 = cljs.core.chunk_rest.call(null, seq__8195_10615__$1);
            var G__10618 = c__4408__auto___10616;
            var G__10619 = cljs.core.count.call(null, c__4408__auto___10616);
            var G__10620 = 0;
            seq__8195_10605 = G__10617;
            chunk__8196_10606 = G__10618;
            count__8197_10607 = G__10619;
            i__8198_10608 = G__10620;
            continue;
          } else {
            var arg__5130__auto___10621 = cljs.core.first.call(null, seq__8195_10615__$1);
            a__5129__auto__.push(arg__5130__auto___10621);
            var G__10622 = cljs.core.next.call(null, seq__8195_10615__$1);
            var G__10623 = null;
            var G__10624 = 0;
            var G__10625 = 0;
            seq__8195_10605 = G__10622;
            chunk__8196_10606 = G__10623;
            count__8197_10607 = G__10624;
            i__8198_10608 = G__10625;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.u.apply(null, a__5129__auto__);
  };
  var u = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return u__delegate.call(this, args__5128__auto__);
  };
  u.cljs$lang$maxFixedArity = 0;
  u.cljs$lang$applyTo = function(arglist__10626) {
    var args__5128__auto__ = cljs.core.seq(arglist__10626);
    return u__delegate(args__5128__auto__);
  };
  u.cljs$core$IFn$_invoke$arity$variadic = u__delegate;
  return u;
}();
quiescent.dom.ul = function() {
  var ul__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8203_10627 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8204_10628 = null;
    var count__8205_10629 = 0;
    var i__8206_10630 = 0;
    while (true) {
      if (i__8206_10630 < count__8205_10629) {
        var arg__5130__auto___10631 = cljs.core._nth.call(null, chunk__8204_10628, i__8206_10630);
        a__5129__auto__.push(arg__5130__auto___10631);
        var G__10632 = seq__8203_10627;
        var G__10633 = chunk__8204_10628;
        var G__10634 = count__8205_10629;
        var G__10635 = i__8206_10630 + 1;
        seq__8203_10627 = G__10632;
        chunk__8204_10628 = G__10633;
        count__8205_10629 = G__10634;
        i__8206_10630 = G__10635;
        continue;
      } else {
        var temp__4126__auto___10636 = cljs.core.seq.call(null, seq__8203_10627);
        if (temp__4126__auto___10636) {
          var seq__8203_10637__$1 = temp__4126__auto___10636;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8203_10637__$1)) {
            var c__4408__auto___10638 = cljs.core.chunk_first.call(null, seq__8203_10637__$1);
            var G__10639 = cljs.core.chunk_rest.call(null, seq__8203_10637__$1);
            var G__10640 = c__4408__auto___10638;
            var G__10641 = cljs.core.count.call(null, c__4408__auto___10638);
            var G__10642 = 0;
            seq__8203_10627 = G__10639;
            chunk__8204_10628 = G__10640;
            count__8205_10629 = G__10641;
            i__8206_10630 = G__10642;
            continue;
          } else {
            var arg__5130__auto___10643 = cljs.core.first.call(null, seq__8203_10637__$1);
            a__5129__auto__.push(arg__5130__auto___10643);
            var G__10644 = cljs.core.next.call(null, seq__8203_10637__$1);
            var G__10645 = null;
            var G__10646 = 0;
            var G__10647 = 0;
            seq__8203_10627 = G__10644;
            chunk__8204_10628 = G__10645;
            count__8205_10629 = G__10646;
            i__8206_10630 = G__10647;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.ul.apply(null, a__5129__auto__);
  };
  var ul = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return ul__delegate.call(this, args__5128__auto__);
  };
  ul.cljs$lang$maxFixedArity = 0;
  ul.cljs$lang$applyTo = function(arglist__10648) {
    var args__5128__auto__ = cljs.core.seq(arglist__10648);
    return ul__delegate(args__5128__auto__);
  };
  ul.cljs$core$IFn$_invoke$arity$variadic = ul__delegate;
  return ul;
}();
quiescent.dom.var$ = function() {
  var var$__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8211_10649 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8212_10650 = null;
    var count__8213_10651 = 0;
    var i__8214_10652 = 0;
    while (true) {
      if (i__8214_10652 < count__8213_10651) {
        var arg__5130__auto___10653 = cljs.core._nth.call(null, chunk__8212_10650, i__8214_10652);
        a__5129__auto__.push(arg__5130__auto___10653);
        var G__10654 = seq__8211_10649;
        var G__10655 = chunk__8212_10650;
        var G__10656 = count__8213_10651;
        var G__10657 = i__8214_10652 + 1;
        seq__8211_10649 = G__10654;
        chunk__8212_10650 = G__10655;
        count__8213_10651 = G__10656;
        i__8214_10652 = G__10657;
        continue;
      } else {
        var temp__4126__auto___10658 = cljs.core.seq.call(null, seq__8211_10649);
        if (temp__4126__auto___10658) {
          var seq__8211_10659__$1 = temp__4126__auto___10658;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8211_10659__$1)) {
            var c__4408__auto___10660 = cljs.core.chunk_first.call(null, seq__8211_10659__$1);
            var G__10661 = cljs.core.chunk_rest.call(null, seq__8211_10659__$1);
            var G__10662 = c__4408__auto___10660;
            var G__10663 = cljs.core.count.call(null, c__4408__auto___10660);
            var G__10664 = 0;
            seq__8211_10649 = G__10661;
            chunk__8212_10650 = G__10662;
            count__8213_10651 = G__10663;
            i__8214_10652 = G__10664;
            continue;
          } else {
            var arg__5130__auto___10665 = cljs.core.first.call(null, seq__8211_10659__$1);
            a__5129__auto__.push(arg__5130__auto___10665);
            var G__10666 = cljs.core.next.call(null, seq__8211_10659__$1);
            var G__10667 = null;
            var G__10668 = 0;
            var G__10669 = 0;
            seq__8211_10649 = G__10666;
            chunk__8212_10650 = G__10667;
            count__8213_10651 = G__10668;
            i__8214_10652 = G__10669;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.var$.apply(null, a__5129__auto__);
  };
  var var$ = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return var$__delegate.call(this, args__5128__auto__);
  };
  var$.cljs$lang$maxFixedArity = 0;
  var$.cljs$lang$applyTo = function(arglist__10670) {
    var args__5128__auto__ = cljs.core.seq(arglist__10670);
    return var$__delegate(args__5128__auto__);
  };
  var$.cljs$core$IFn$_invoke$arity$variadic = var$__delegate;
  return var$;
}();
quiescent.dom.video = function() {
  var video__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8219_10671 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8220_10672 = null;
    var count__8221_10673 = 0;
    var i__8222_10674 = 0;
    while (true) {
      if (i__8222_10674 < count__8221_10673) {
        var arg__5130__auto___10675 = cljs.core._nth.call(null, chunk__8220_10672, i__8222_10674);
        a__5129__auto__.push(arg__5130__auto___10675);
        var G__10676 = seq__8219_10671;
        var G__10677 = chunk__8220_10672;
        var G__10678 = count__8221_10673;
        var G__10679 = i__8222_10674 + 1;
        seq__8219_10671 = G__10676;
        chunk__8220_10672 = G__10677;
        count__8221_10673 = G__10678;
        i__8222_10674 = G__10679;
        continue;
      } else {
        var temp__4126__auto___10680 = cljs.core.seq.call(null, seq__8219_10671);
        if (temp__4126__auto___10680) {
          var seq__8219_10681__$1 = temp__4126__auto___10680;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8219_10681__$1)) {
            var c__4408__auto___10682 = cljs.core.chunk_first.call(null, seq__8219_10681__$1);
            var G__10683 = cljs.core.chunk_rest.call(null, seq__8219_10681__$1);
            var G__10684 = c__4408__auto___10682;
            var G__10685 = cljs.core.count.call(null, c__4408__auto___10682);
            var G__10686 = 0;
            seq__8219_10671 = G__10683;
            chunk__8220_10672 = G__10684;
            count__8221_10673 = G__10685;
            i__8222_10674 = G__10686;
            continue;
          } else {
            var arg__5130__auto___10687 = cljs.core.first.call(null, seq__8219_10681__$1);
            a__5129__auto__.push(arg__5130__auto___10687);
            var G__10688 = cljs.core.next.call(null, seq__8219_10681__$1);
            var G__10689 = null;
            var G__10690 = 0;
            var G__10691 = 0;
            seq__8219_10671 = G__10688;
            chunk__8220_10672 = G__10689;
            count__8221_10673 = G__10690;
            i__8222_10674 = G__10691;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.video.apply(null, a__5129__auto__);
  };
  var video = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return video__delegate.call(this, args__5128__auto__);
  };
  video.cljs$lang$maxFixedArity = 0;
  video.cljs$lang$applyTo = function(arglist__10692) {
    var args__5128__auto__ = cljs.core.seq(arglist__10692);
    return video__delegate(args__5128__auto__);
  };
  video.cljs$core$IFn$_invoke$arity$variadic = video__delegate;
  return video;
}();
quiescent.dom.wbr = function() {
  var wbr__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8227_10693 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8228_10694 = null;
    var count__8229_10695 = 0;
    var i__8230_10696 = 0;
    while (true) {
      if (i__8230_10696 < count__8229_10695) {
        var arg__5130__auto___10697 = cljs.core._nth.call(null, chunk__8228_10694, i__8230_10696);
        a__5129__auto__.push(arg__5130__auto___10697);
        var G__10698 = seq__8227_10693;
        var G__10699 = chunk__8228_10694;
        var G__10700 = count__8229_10695;
        var G__10701 = i__8230_10696 + 1;
        seq__8227_10693 = G__10698;
        chunk__8228_10694 = G__10699;
        count__8229_10695 = G__10700;
        i__8230_10696 = G__10701;
        continue;
      } else {
        var temp__4126__auto___10702 = cljs.core.seq.call(null, seq__8227_10693);
        if (temp__4126__auto___10702) {
          var seq__8227_10703__$1 = temp__4126__auto___10702;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8227_10703__$1)) {
            var c__4408__auto___10704 = cljs.core.chunk_first.call(null, seq__8227_10703__$1);
            var G__10705 = cljs.core.chunk_rest.call(null, seq__8227_10703__$1);
            var G__10706 = c__4408__auto___10704;
            var G__10707 = cljs.core.count.call(null, c__4408__auto___10704);
            var G__10708 = 0;
            seq__8227_10693 = G__10705;
            chunk__8228_10694 = G__10706;
            count__8229_10695 = G__10707;
            i__8230_10696 = G__10708;
            continue;
          } else {
            var arg__5130__auto___10709 = cljs.core.first.call(null, seq__8227_10703__$1);
            a__5129__auto__.push(arg__5130__auto___10709);
            var G__10710 = cljs.core.next.call(null, seq__8227_10703__$1);
            var G__10711 = null;
            var G__10712 = 0;
            var G__10713 = 0;
            seq__8227_10693 = G__10710;
            chunk__8228_10694 = G__10711;
            count__8229_10695 = G__10712;
            i__8230_10696 = G__10713;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.wbr.apply(null, a__5129__auto__);
  };
  var wbr = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return wbr__delegate.call(this, args__5128__auto__);
  };
  wbr.cljs$lang$maxFixedArity = 0;
  wbr.cljs$lang$applyTo = function(arglist__10714) {
    var args__5128__auto__ = cljs.core.seq(arglist__10714);
    return wbr__delegate(args__5128__auto__);
  };
  wbr.cljs$core$IFn$_invoke$arity$variadic = wbr__delegate;
  return wbr;
}();
quiescent.dom.circle = function() {
  var circle__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8235_10715 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8236_10716 = null;
    var count__8237_10717 = 0;
    var i__8238_10718 = 0;
    while (true) {
      if (i__8238_10718 < count__8237_10717) {
        var arg__5130__auto___10719 = cljs.core._nth.call(null, chunk__8236_10716, i__8238_10718);
        a__5129__auto__.push(arg__5130__auto___10719);
        var G__10720 = seq__8235_10715;
        var G__10721 = chunk__8236_10716;
        var G__10722 = count__8237_10717;
        var G__10723 = i__8238_10718 + 1;
        seq__8235_10715 = G__10720;
        chunk__8236_10716 = G__10721;
        count__8237_10717 = G__10722;
        i__8238_10718 = G__10723;
        continue;
      } else {
        var temp__4126__auto___10724 = cljs.core.seq.call(null, seq__8235_10715);
        if (temp__4126__auto___10724) {
          var seq__8235_10725__$1 = temp__4126__auto___10724;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8235_10725__$1)) {
            var c__4408__auto___10726 = cljs.core.chunk_first.call(null, seq__8235_10725__$1);
            var G__10727 = cljs.core.chunk_rest.call(null, seq__8235_10725__$1);
            var G__10728 = c__4408__auto___10726;
            var G__10729 = cljs.core.count.call(null, c__4408__auto___10726);
            var G__10730 = 0;
            seq__8235_10715 = G__10727;
            chunk__8236_10716 = G__10728;
            count__8237_10717 = G__10729;
            i__8238_10718 = G__10730;
            continue;
          } else {
            var arg__5130__auto___10731 = cljs.core.first.call(null, seq__8235_10725__$1);
            a__5129__auto__.push(arg__5130__auto___10731);
            var G__10732 = cljs.core.next.call(null, seq__8235_10725__$1);
            var G__10733 = null;
            var G__10734 = 0;
            var G__10735 = 0;
            seq__8235_10715 = G__10732;
            chunk__8236_10716 = G__10733;
            count__8237_10717 = G__10734;
            i__8238_10718 = G__10735;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.circle.apply(null, a__5129__auto__);
  };
  var circle = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return circle__delegate.call(this, args__5128__auto__);
  };
  circle.cljs$lang$maxFixedArity = 0;
  circle.cljs$lang$applyTo = function(arglist__10736) {
    var args__5128__auto__ = cljs.core.seq(arglist__10736);
    return circle__delegate(args__5128__auto__);
  };
  circle.cljs$core$IFn$_invoke$arity$variadic = circle__delegate;
  return circle;
}();
quiescent.dom.g = function() {
  var g__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8243_10737 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8244_10738 = null;
    var count__8245_10739 = 0;
    var i__8246_10740 = 0;
    while (true) {
      if (i__8246_10740 < count__8245_10739) {
        var arg__5130__auto___10741 = cljs.core._nth.call(null, chunk__8244_10738, i__8246_10740);
        a__5129__auto__.push(arg__5130__auto___10741);
        var G__10742 = seq__8243_10737;
        var G__10743 = chunk__8244_10738;
        var G__10744 = count__8245_10739;
        var G__10745 = i__8246_10740 + 1;
        seq__8243_10737 = G__10742;
        chunk__8244_10738 = G__10743;
        count__8245_10739 = G__10744;
        i__8246_10740 = G__10745;
        continue;
      } else {
        var temp__4126__auto___10746 = cljs.core.seq.call(null, seq__8243_10737);
        if (temp__4126__auto___10746) {
          var seq__8243_10747__$1 = temp__4126__auto___10746;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8243_10747__$1)) {
            var c__4408__auto___10748 = cljs.core.chunk_first.call(null, seq__8243_10747__$1);
            var G__10749 = cljs.core.chunk_rest.call(null, seq__8243_10747__$1);
            var G__10750 = c__4408__auto___10748;
            var G__10751 = cljs.core.count.call(null, c__4408__auto___10748);
            var G__10752 = 0;
            seq__8243_10737 = G__10749;
            chunk__8244_10738 = G__10750;
            count__8245_10739 = G__10751;
            i__8246_10740 = G__10752;
            continue;
          } else {
            var arg__5130__auto___10753 = cljs.core.first.call(null, seq__8243_10747__$1);
            a__5129__auto__.push(arg__5130__auto___10753);
            var G__10754 = cljs.core.next.call(null, seq__8243_10747__$1);
            var G__10755 = null;
            var G__10756 = 0;
            var G__10757 = 0;
            seq__8243_10737 = G__10754;
            chunk__8244_10738 = G__10755;
            count__8245_10739 = G__10756;
            i__8246_10740 = G__10757;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.g.apply(null, a__5129__auto__);
  };
  var g = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return g__delegate.call(this, args__5128__auto__);
  };
  g.cljs$lang$maxFixedArity = 0;
  g.cljs$lang$applyTo = function(arglist__10758) {
    var args__5128__auto__ = cljs.core.seq(arglist__10758);
    return g__delegate(args__5128__auto__);
  };
  g.cljs$core$IFn$_invoke$arity$variadic = g__delegate;
  return g;
}();
quiescent.dom.line = function() {
  var line__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8251_10759 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8252_10760 = null;
    var count__8253_10761 = 0;
    var i__8254_10762 = 0;
    while (true) {
      if (i__8254_10762 < count__8253_10761) {
        var arg__5130__auto___10763 = cljs.core._nth.call(null, chunk__8252_10760, i__8254_10762);
        a__5129__auto__.push(arg__5130__auto___10763);
        var G__10764 = seq__8251_10759;
        var G__10765 = chunk__8252_10760;
        var G__10766 = count__8253_10761;
        var G__10767 = i__8254_10762 + 1;
        seq__8251_10759 = G__10764;
        chunk__8252_10760 = G__10765;
        count__8253_10761 = G__10766;
        i__8254_10762 = G__10767;
        continue;
      } else {
        var temp__4126__auto___10768 = cljs.core.seq.call(null, seq__8251_10759);
        if (temp__4126__auto___10768) {
          var seq__8251_10769__$1 = temp__4126__auto___10768;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8251_10769__$1)) {
            var c__4408__auto___10770 = cljs.core.chunk_first.call(null, seq__8251_10769__$1);
            var G__10771 = cljs.core.chunk_rest.call(null, seq__8251_10769__$1);
            var G__10772 = c__4408__auto___10770;
            var G__10773 = cljs.core.count.call(null, c__4408__auto___10770);
            var G__10774 = 0;
            seq__8251_10759 = G__10771;
            chunk__8252_10760 = G__10772;
            count__8253_10761 = G__10773;
            i__8254_10762 = G__10774;
            continue;
          } else {
            var arg__5130__auto___10775 = cljs.core.first.call(null, seq__8251_10769__$1);
            a__5129__auto__.push(arg__5130__auto___10775);
            var G__10776 = cljs.core.next.call(null, seq__8251_10769__$1);
            var G__10777 = null;
            var G__10778 = 0;
            var G__10779 = 0;
            seq__8251_10759 = G__10776;
            chunk__8252_10760 = G__10777;
            count__8253_10761 = G__10778;
            i__8254_10762 = G__10779;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.line.apply(null, a__5129__auto__);
  };
  var line = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return line__delegate.call(this, args__5128__auto__);
  };
  line.cljs$lang$maxFixedArity = 0;
  line.cljs$lang$applyTo = function(arglist__10780) {
    var args__5128__auto__ = cljs.core.seq(arglist__10780);
    return line__delegate(args__5128__auto__);
  };
  line.cljs$core$IFn$_invoke$arity$variadic = line__delegate;
  return line;
}();
quiescent.dom.path = function() {
  var path__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8259_10781 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8260_10782 = null;
    var count__8261_10783 = 0;
    var i__8262_10784 = 0;
    while (true) {
      if (i__8262_10784 < count__8261_10783) {
        var arg__5130__auto___10785 = cljs.core._nth.call(null, chunk__8260_10782, i__8262_10784);
        a__5129__auto__.push(arg__5130__auto___10785);
        var G__10786 = seq__8259_10781;
        var G__10787 = chunk__8260_10782;
        var G__10788 = count__8261_10783;
        var G__10789 = i__8262_10784 + 1;
        seq__8259_10781 = G__10786;
        chunk__8260_10782 = G__10787;
        count__8261_10783 = G__10788;
        i__8262_10784 = G__10789;
        continue;
      } else {
        var temp__4126__auto___10790 = cljs.core.seq.call(null, seq__8259_10781);
        if (temp__4126__auto___10790) {
          var seq__8259_10791__$1 = temp__4126__auto___10790;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8259_10791__$1)) {
            var c__4408__auto___10792 = cljs.core.chunk_first.call(null, seq__8259_10791__$1);
            var G__10793 = cljs.core.chunk_rest.call(null, seq__8259_10791__$1);
            var G__10794 = c__4408__auto___10792;
            var G__10795 = cljs.core.count.call(null, c__4408__auto___10792);
            var G__10796 = 0;
            seq__8259_10781 = G__10793;
            chunk__8260_10782 = G__10794;
            count__8261_10783 = G__10795;
            i__8262_10784 = G__10796;
            continue;
          } else {
            var arg__5130__auto___10797 = cljs.core.first.call(null, seq__8259_10791__$1);
            a__5129__auto__.push(arg__5130__auto___10797);
            var G__10798 = cljs.core.next.call(null, seq__8259_10791__$1);
            var G__10799 = null;
            var G__10800 = 0;
            var G__10801 = 0;
            seq__8259_10781 = G__10798;
            chunk__8260_10782 = G__10799;
            count__8261_10783 = G__10800;
            i__8262_10784 = G__10801;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.path.apply(null, a__5129__auto__);
  };
  var path = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return path__delegate.call(this, args__5128__auto__);
  };
  path.cljs$lang$maxFixedArity = 0;
  path.cljs$lang$applyTo = function(arglist__10802) {
    var args__5128__auto__ = cljs.core.seq(arglist__10802);
    return path__delegate(args__5128__auto__);
  };
  path.cljs$core$IFn$_invoke$arity$variadic = path__delegate;
  return path;
}();
quiescent.dom.polygon = function() {
  var polygon__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8267_10803 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8268_10804 = null;
    var count__8269_10805 = 0;
    var i__8270_10806 = 0;
    while (true) {
      if (i__8270_10806 < count__8269_10805) {
        var arg__5130__auto___10807 = cljs.core._nth.call(null, chunk__8268_10804, i__8270_10806);
        a__5129__auto__.push(arg__5130__auto___10807);
        var G__10808 = seq__8267_10803;
        var G__10809 = chunk__8268_10804;
        var G__10810 = count__8269_10805;
        var G__10811 = i__8270_10806 + 1;
        seq__8267_10803 = G__10808;
        chunk__8268_10804 = G__10809;
        count__8269_10805 = G__10810;
        i__8270_10806 = G__10811;
        continue;
      } else {
        var temp__4126__auto___10812 = cljs.core.seq.call(null, seq__8267_10803);
        if (temp__4126__auto___10812) {
          var seq__8267_10813__$1 = temp__4126__auto___10812;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8267_10813__$1)) {
            var c__4408__auto___10814 = cljs.core.chunk_first.call(null, seq__8267_10813__$1);
            var G__10815 = cljs.core.chunk_rest.call(null, seq__8267_10813__$1);
            var G__10816 = c__4408__auto___10814;
            var G__10817 = cljs.core.count.call(null, c__4408__auto___10814);
            var G__10818 = 0;
            seq__8267_10803 = G__10815;
            chunk__8268_10804 = G__10816;
            count__8269_10805 = G__10817;
            i__8270_10806 = G__10818;
            continue;
          } else {
            var arg__5130__auto___10819 = cljs.core.first.call(null, seq__8267_10813__$1);
            a__5129__auto__.push(arg__5130__auto___10819);
            var G__10820 = cljs.core.next.call(null, seq__8267_10813__$1);
            var G__10821 = null;
            var G__10822 = 0;
            var G__10823 = 0;
            seq__8267_10803 = G__10820;
            chunk__8268_10804 = G__10821;
            count__8269_10805 = G__10822;
            i__8270_10806 = G__10823;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polygon.apply(null, a__5129__auto__);
  };
  var polygon = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polygon__delegate.call(this, args__5128__auto__);
  };
  polygon.cljs$lang$maxFixedArity = 0;
  polygon.cljs$lang$applyTo = function(arglist__10824) {
    var args__5128__auto__ = cljs.core.seq(arglist__10824);
    return polygon__delegate(args__5128__auto__);
  };
  polygon.cljs$core$IFn$_invoke$arity$variadic = polygon__delegate;
  return polygon;
}();
quiescent.dom.polyline = function() {
  var polyline__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8275_10825 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8276_10826 = null;
    var count__8277_10827 = 0;
    var i__8278_10828 = 0;
    while (true) {
      if (i__8278_10828 < count__8277_10827) {
        var arg__5130__auto___10829 = cljs.core._nth.call(null, chunk__8276_10826, i__8278_10828);
        a__5129__auto__.push(arg__5130__auto___10829);
        var G__10830 = seq__8275_10825;
        var G__10831 = chunk__8276_10826;
        var G__10832 = count__8277_10827;
        var G__10833 = i__8278_10828 + 1;
        seq__8275_10825 = G__10830;
        chunk__8276_10826 = G__10831;
        count__8277_10827 = G__10832;
        i__8278_10828 = G__10833;
        continue;
      } else {
        var temp__4126__auto___10834 = cljs.core.seq.call(null, seq__8275_10825);
        if (temp__4126__auto___10834) {
          var seq__8275_10835__$1 = temp__4126__auto___10834;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8275_10835__$1)) {
            var c__4408__auto___10836 = cljs.core.chunk_first.call(null, seq__8275_10835__$1);
            var G__10837 = cljs.core.chunk_rest.call(null, seq__8275_10835__$1);
            var G__10838 = c__4408__auto___10836;
            var G__10839 = cljs.core.count.call(null, c__4408__auto___10836);
            var G__10840 = 0;
            seq__8275_10825 = G__10837;
            chunk__8276_10826 = G__10838;
            count__8277_10827 = G__10839;
            i__8278_10828 = G__10840;
            continue;
          } else {
            var arg__5130__auto___10841 = cljs.core.first.call(null, seq__8275_10835__$1);
            a__5129__auto__.push(arg__5130__auto___10841);
            var G__10842 = cljs.core.next.call(null, seq__8275_10835__$1);
            var G__10843 = null;
            var G__10844 = 0;
            var G__10845 = 0;
            seq__8275_10825 = G__10842;
            chunk__8276_10826 = G__10843;
            count__8277_10827 = G__10844;
            i__8278_10828 = G__10845;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.polyline.apply(null, a__5129__auto__);
  };
  var polyline = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return polyline__delegate.call(this, args__5128__auto__);
  };
  polyline.cljs$lang$maxFixedArity = 0;
  polyline.cljs$lang$applyTo = function(arglist__10846) {
    var args__5128__auto__ = cljs.core.seq(arglist__10846);
    return polyline__delegate(args__5128__auto__);
  };
  polyline.cljs$core$IFn$_invoke$arity$variadic = polyline__delegate;
  return polyline;
}();
quiescent.dom.rect = function() {
  var rect__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8283_10847 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8284_10848 = null;
    var count__8285_10849 = 0;
    var i__8286_10850 = 0;
    while (true) {
      if (i__8286_10850 < count__8285_10849) {
        var arg__5130__auto___10851 = cljs.core._nth.call(null, chunk__8284_10848, i__8286_10850);
        a__5129__auto__.push(arg__5130__auto___10851);
        var G__10852 = seq__8283_10847;
        var G__10853 = chunk__8284_10848;
        var G__10854 = count__8285_10849;
        var G__10855 = i__8286_10850 + 1;
        seq__8283_10847 = G__10852;
        chunk__8284_10848 = G__10853;
        count__8285_10849 = G__10854;
        i__8286_10850 = G__10855;
        continue;
      } else {
        var temp__4126__auto___10856 = cljs.core.seq.call(null, seq__8283_10847);
        if (temp__4126__auto___10856) {
          var seq__8283_10857__$1 = temp__4126__auto___10856;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8283_10857__$1)) {
            var c__4408__auto___10858 = cljs.core.chunk_first.call(null, seq__8283_10857__$1);
            var G__10859 = cljs.core.chunk_rest.call(null, seq__8283_10857__$1);
            var G__10860 = c__4408__auto___10858;
            var G__10861 = cljs.core.count.call(null, c__4408__auto___10858);
            var G__10862 = 0;
            seq__8283_10847 = G__10859;
            chunk__8284_10848 = G__10860;
            count__8285_10849 = G__10861;
            i__8286_10850 = G__10862;
            continue;
          } else {
            var arg__5130__auto___10863 = cljs.core.first.call(null, seq__8283_10857__$1);
            a__5129__auto__.push(arg__5130__auto___10863);
            var G__10864 = cljs.core.next.call(null, seq__8283_10857__$1);
            var G__10865 = null;
            var G__10866 = 0;
            var G__10867 = 0;
            seq__8283_10847 = G__10864;
            chunk__8284_10848 = G__10865;
            count__8285_10849 = G__10866;
            i__8286_10850 = G__10867;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.rect.apply(null, a__5129__auto__);
  };
  var rect = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return rect__delegate.call(this, args__5128__auto__);
  };
  rect.cljs$lang$maxFixedArity = 0;
  rect.cljs$lang$applyTo = function(arglist__10868) {
    var args__5128__auto__ = cljs.core.seq(arglist__10868);
    return rect__delegate(args__5128__auto__);
  };
  rect.cljs$core$IFn$_invoke$arity$variadic = rect__delegate;
  return rect;
}();
quiescent.dom.svg = function() {
  var svg__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__8291_10869 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__8292_10870 = null;
    var count__8293_10871 = 0;
    var i__8294_10872 = 0;
    while (true) {
      if (i__8294_10872 < count__8293_10871) {
        var arg__5130__auto___10873 = cljs.core._nth.call(null, chunk__8292_10870, i__8294_10872);
        a__5129__auto__.push(arg__5130__auto___10873);
        var G__10874 = seq__8291_10869;
        var G__10875 = chunk__8292_10870;
        var G__10876 = count__8293_10871;
        var G__10877 = i__8294_10872 + 1;
        seq__8291_10869 = G__10874;
        chunk__8292_10870 = G__10875;
        count__8293_10871 = G__10876;
        i__8294_10872 = G__10877;
        continue;
      } else {
        var temp__4126__auto___10878 = cljs.core.seq.call(null, seq__8291_10869);
        if (temp__4126__auto___10878) {
          var seq__8291_10879__$1 = temp__4126__auto___10878;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__8291_10879__$1)) {
            var c__4408__auto___10880 = cljs.core.chunk_first.call(null, seq__8291_10879__$1);
            var G__10881 = cljs.core.chunk_rest.call(null, seq__8291_10879__$1);
            var G__10882 = c__4408__auto___10880;
            var G__10883 = cljs.core.count.call(null, c__4408__auto___10880);
            var G__10884 = 0;
            seq__8291_10869 = G__10881;
            chunk__8292_10870 = G__10882;
            count__8293_10871 = G__10883;
            i__8294_10872 = G__10884;
            continue;
          } else {
            var arg__5130__auto___10885 = cljs.core.first.call(null, seq__8291_10879__$1);
            a__5129__auto__.push(arg__5130__auto___10885);
            var G__10886 = cljs.core.next.call(null, seq__8291_10879__$1);
            var G__10887 = null;
            var G__10888 = 0;
            var G__10889 = 0;
            seq__8291_10869 = G__10886;
            chunk__8292_10870 = G__10887;
            count__8293_10871 = G__10888;
            i__8294_10872 = G__10889;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.svg.apply(null, a__5129__auto__);
  };
  var svg = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return svg__delegate.call(this, args__5128__auto__);
  };
  svg.cljs$lang$maxFixedArity = 0;
  svg.cljs$lang$applyTo = function(arglist__10890) {
    var args__5128__auto__ = cljs.core.seq(arglist__10890);
    return svg__delegate(args__5128__auto__);
  };
  svg.cljs$core$IFn$_invoke$arity$variadic = svg__delegate;
  return svg;
}();
quiescent.dom.text = function() {
  var text__delegate = function(args__5128__auto__) {
    var a__5129__auto__ = [];
    a__5129__auto__.push(quiescent.js_props.call(null, cljs.core.first.call(null, args__5128__auto__)));
    var seq__7603_10891 = cljs.core.seq.call(null, cljs.core.rest.call(null, args__5128__auto__));
    var chunk__7604_10892 = null;
    var count__7605_10893 = 0;
    var i__7606_10894 = 0;
    while (true) {
      if (i__7606_10894 < count__7605_10893) {
        var arg__5130__auto___10895 = cljs.core._nth.call(null, chunk__7604_10892, i__7606_10894);
        a__5129__auto__.push(arg__5130__auto___10895);
        var G__10896 = seq__7603_10891;
        var G__10897 = chunk__7604_10892;
        var G__10898 = count__7605_10893;
        var G__10899 = i__7606_10894 + 1;
        seq__7603_10891 = G__10896;
        chunk__7604_10892 = G__10897;
        count__7605_10893 = G__10898;
        i__7606_10894 = G__10899;
        continue;
      } else {
        var temp__4126__auto___10900 = cljs.core.seq.call(null, seq__7603_10891);
        if (temp__4126__auto___10900) {
          var seq__7603_10901__$1 = temp__4126__auto___10900;
          if (cljs.core.chunked_seq_QMARK_.call(null, seq__7603_10901__$1)) {
            var c__4408__auto___10902 = cljs.core.chunk_first.call(null, seq__7603_10901__$1);
            var G__10903 = cljs.core.chunk_rest.call(null, seq__7603_10901__$1);
            var G__10904 = c__4408__auto___10902;
            var G__10905 = cljs.core.count.call(null, c__4408__auto___10902);
            var G__10906 = 0;
            seq__7603_10891 = G__10903;
            chunk__7604_10892 = G__10904;
            count__7605_10893 = G__10905;
            i__7606_10894 = G__10906;
            continue;
          } else {
            var arg__5130__auto___10907 = cljs.core.first.call(null, seq__7603_10901__$1);
            a__5129__auto__.push(arg__5130__auto___10907);
            var G__10908 = cljs.core.next.call(null, seq__7603_10901__$1);
            var G__10909 = null;
            var G__10910 = 0;
            var G__10911 = 0;
            seq__7603_10891 = G__10908;
            chunk__7604_10892 = G__10909;
            count__7605_10893 = G__10910;
            i__7606_10894 = G__10911;
            continue;
          }
        } else {
        }
      }
      break;
    }
    return React.DOM.text.apply(null, a__5129__auto__);
  };
  var text = function(var_args) {
    var args__5128__auto__ = null;
    if (arguments.length > 0) {
      args__5128__auto__ = cljs.core.array_seq(Array.prototype.slice.call(arguments, 0), 0);
    }
    return text__delegate.call(this, args__5128__auto__);
  };
  text.cljs$lang$maxFixedArity = 0;
  text.cljs$lang$applyTo = function(arglist__10912) {
    var args__5128__auto__ = cljs.core.seq(arglist__10912);
    return text__delegate(args__5128__auto__);
  };
  text.cljs$core$IFn$_invoke$arity$variadic = text__delegate;
  return text;
}();
quiescent.dom.defined_tags = cljs.core.PersistentHashMap.fromArrays([new cljs.core.Keyword(null, "thead", "thead", -291875296), new cljs.core.Keyword(null, "path", "path", -188191168), new cljs.core.Keyword(null, "del", "del", 574975584), new cljs.core.Keyword(null, "fieldset", "fieldset", -1949770816), new cljs.core.Keyword(null, "q", "q", 689001697), new cljs.core.Keyword(null, "figure", "figure", -561394079), new cljs.core.Keyword(null, "aside", "aside", 1414397537), new cljs.core.Keyword(null, 
"figcaption", "figcaption", -1790122047), new cljs.core.Keyword(null, "video", "video", 156888130), new cljs.core.Keyword(null, "address", "address", 559499426), new cljs.core.Keyword(null, "caption", "caption", -855383902), new cljs.core.Keyword(null, "bdi", "bdi", -1323025886), new cljs.core.Keyword(null, "rp", "rp", 2006698083), new cljs.core.Keyword(null, "hr", "hr", 1377740067), new cljs.core.Keyword(null, "dd", "dd", -1340437629), new cljs.core.Keyword(null, "meta", "meta", 1499536964), new cljs.core.Keyword(null, 
"tbody", "tbody", -80678300), new cljs.core.Keyword(null, "table", "table", -564943036), new cljs.core.Keyword(null, "ul", "ul", -1349521403), new cljs.core.Keyword(null, "pre", "pre", 2118456869), new cljs.core.Keyword(null, "sup", "sup", -2039492346), new cljs.core.Keyword(null, "script", "script", -1304443801), new cljs.core.Keyword(null, "big", "big", 903550151), new cljs.core.Keyword(null, "button", "button", 1456579943), new cljs.core.Keyword(null, "dfn", "dfn", 241908167), new cljs.core.Keyword(null, 
"sub", "sub", -2093760025), new cljs.core.Keyword(null, "mark", "mark", -373816345), new cljs.core.Keyword(null, "wbr", "wbr", 228661800), new cljs.core.Keyword(null, "strong", "strong", 269529E3), new cljs.core.Keyword(null, "td", "td", 1479933353), new cljs.core.Keyword(null, "li", "li", 723558921), new cljs.core.Keyword(null, "dt", "dt", -368444759), new cljs.core.Keyword(null, "section", "section", -300141526), new cljs.core.Keyword(null, "th", "th", -545608566), new cljs.core.Keyword(null, "time", 
"time", 1385887882), new cljs.core.Keyword(null, "optgroup", "optgroup", 1738282218), new cljs.core.Keyword(null, "iframe", "iframe", 884422026), new cljs.core.Keyword(null, "tr", "tr", -1424774646), new cljs.core.Keyword(null, "circle", "circle", 1903212362), new cljs.core.Keyword(null, "article", "article", -21685045), new cljs.core.Keyword(null, "legend", "legend", -1027192245), new cljs.core.Keyword(null, "em", "em", 707813035), new cljs.core.Keyword(null, "kbd", "kbd", 316156875), new cljs.core.Keyword(null, 
"abbr", "abbr", 2088591884), new cljs.core.Keyword(null, "source", "source", -433931539), new cljs.core.Keyword(null, "output", "output", -1105869043), new cljs.core.Keyword(null, "ins", "ins", -1021983570), new cljs.core.Keyword(null, "footer", "footer", 1606445390), new cljs.core.Keyword(null, "header", "header", 119441134), new cljs.core.Keyword(null, "datalist", "datalist", -1235043474), new cljs.core.Keyword(null, "tfoot", "tfoot", -701599890), new cljs.core.Keyword(null, "s", "s", 1705939918), 
new cljs.core.Keyword(null, "h5", "h5", -1829156625), new cljs.core.Keyword(null, "canvas", "canvas", -1798817489), new cljs.core.Keyword(null, "param", "param", 2013631823), new cljs.core.Keyword(null, "title", "title", 636505583), new cljs.core.Keyword(null, "small", "small", 2133478704), new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.Keyword(null, "textarea", "textarea", -650375824), new cljs.core.Keyword(null, "div", "div", 1057191632), new cljs.core.Keyword(null, "option", 
"option", 65132272), new cljs.core.Keyword(null, "summary", "summary", 380847952), new cljs.core.Keyword(null, "samp", "samp", 1506141136), new cljs.core.Keyword(null, "h4", "h4", 2004862993), new cljs.core.Keyword(null, "head", "head", -771383919), new cljs.core.Keyword(null, "g", "g", 1738089905), new cljs.core.Keyword(null, "ol", "ol", 932524051), new cljs.core.Keyword(null, "details", "details", 1956795411), new cljs.core.Keyword(null, "line", "line", 212345235), new cljs.core.Keyword(null, "var", 
"var", -769682797), new cljs.core.Keyword(null, "h6", "h6", 557293780), new cljs.core.Keyword(null, "link", "link", -1769163468), new cljs.core.Keyword(null, "col", "col", -1959363084), new cljs.core.Keyword(null, "label", "label", 1718410804), new cljs.core.Keyword(null, "rt", "rt", 623480692), new cljs.core.Keyword(null, "colgroup", "colgroup", 651118645), new cljs.core.Keyword(null, "meter", "meter", -187641611), new cljs.core.Keyword(null, "svg", "svg", 856789142), new cljs.core.Keyword(null, 
"code", "code", 1586293142), new cljs.core.Keyword(null, "bdo", "bdo", -2131148202), new cljs.core.Keyword(null, "b", "b", 1482224470), new cljs.core.Keyword(null, "noscript", "noscript", -704777289), new cljs.core.Keyword(null, "h2", "h2", -372662728), new cljs.core.Keyword(null, "area", "area", 472007256), new cljs.core.Keyword(null, "br", "br", 934104792), new cljs.core.Keyword(null, "form", "form", -1624062471), new cljs.core.Keyword(null, "audio", "audio", 1819127321), new cljs.core.Keyword(null, 
"input", "input", 556931961), new cljs.core.Keyword(null, "menuitem", "menuitem", 1004047353), new cljs.core.Keyword(null, "base", "base", 185279322), new cljs.core.Keyword(null, "h1", "h1", -1896887462), new cljs.core.Keyword(null, "progress", "progress", 244323547), new cljs.core.Keyword(null, "main", "main", -2117802661), new cljs.core.Keyword(null, "embed", "embed", -1354913349), new cljs.core.Keyword(null, "h3", "h3", 2067611163), new cljs.core.Keyword(null, "body", "body", -2049205669), new cljs.core.Keyword(null, 
"keygen", "keygen", -571693253), new cljs.core.Keyword(null, "polyline", "polyline", -1731551044), new cljs.core.Keyword(null, "cite", "cite", 1909439996), new cljs.core.Keyword(null, "rect", "rect", -108902628), new cljs.core.Keyword(null, "p", "p", 151049309), new cljs.core.Keyword(null, "nav", "nav", 719540477), new cljs.core.Keyword(null, "ruby", "ruby", 2000737661), new cljs.core.Keyword(null, "map", "map", 1371690461), new cljs.core.Keyword(null, "object", "object", 1474613949), new cljs.core.Keyword(null, 
"i", "i", -1386841315), new cljs.core.Keyword(null, "menu", "menu", 352255198), new cljs.core.Keyword(null, "blockquote", "blockquote", 372264190), new cljs.core.Keyword(null, "img", "img", 1442687358), new cljs.core.Keyword(null, "a", "a", -2123407586), new cljs.core.Keyword(null, "dl", "dl", -2140151713), new cljs.core.Keyword(null, "select", "select", 1147833503), new cljs.core.Keyword(null, "polygon", "polygon", 837053759), new cljs.core.Keyword(null, "html", "html", -998796897), new cljs.core.Keyword(null, 
"text", "text", -1790561697), new cljs.core.Keyword(null, "span", "span", 1394872991), new cljs.core.Keyword(null, "track", "track", 195787487), new cljs.core.Keyword(null, "data", "data", -232669377), new cljs.core.Keyword(null, "u", "u", -1156634785)], [quiescent.dom.thead, quiescent.dom.path, quiescent.dom.del, quiescent.dom.fieldset, quiescent.dom.q, quiescent.dom.figure, quiescent.dom.aside, quiescent.dom.figcaption, quiescent.dom.video, quiescent.dom.address, quiescent.dom.caption, quiescent.dom.bdi, 
quiescent.dom.rp, quiescent.dom.hr, quiescent.dom.dd, quiescent.dom.meta, quiescent.dom.tbody, quiescent.dom.table, quiescent.dom.ul, quiescent.dom.pre, quiescent.dom.sup, quiescent.dom.script, quiescent.dom.big, quiescent.dom.button, quiescent.dom.dfn, quiescent.dom.sub, quiescent.dom.mark, quiescent.dom.wbr, quiescent.dom.strong, quiescent.dom.td, quiescent.dom.li, quiescent.dom.dt, quiescent.dom.section, quiescent.dom.th, quiescent.dom.time, quiescent.dom.optgroup, quiescent.dom.iframe, quiescent.dom.tr, 
quiescent.dom.circle, quiescent.dom.article, quiescent.dom.legend, quiescent.dom.em, quiescent.dom.kbd, quiescent.dom.abbr, quiescent.dom.source, quiescent.dom.output, quiescent.dom.ins, quiescent.dom.footer, quiescent.dom.header, quiescent.dom.datalist, quiescent.dom.tfoot, quiescent.dom.s, quiescent.dom.h5, quiescent.dom.canvas, quiescent.dom.param, quiescent.dom.title, quiescent.dom.small, quiescent.dom.style, quiescent.dom.textarea, quiescent.dom.div, quiescent.dom.option, quiescent.dom.summary, 
quiescent.dom.samp, quiescent.dom.h4, quiescent.dom.head, quiescent.dom.g, quiescent.dom.ol, quiescent.dom.details, quiescent.dom.line, quiescent.dom.var$, quiescent.dom.h6, quiescent.dom.link, quiescent.dom.col, quiescent.dom.label, quiescent.dom.rt, quiescent.dom.colgroup, quiescent.dom.meter, quiescent.dom.svg, quiescent.dom.code, quiescent.dom.bdo, quiescent.dom.b, quiescent.dom.noscript, quiescent.dom.h2, quiescent.dom.area, quiescent.dom.br, quiescent.dom.form, quiescent.dom.audio, quiescent.dom.input, 
quiescent.dom.menuitem, quiescent.dom.base, quiescent.dom.h1, quiescent.dom.progress, quiescent.dom.main, quiescent.dom.embed, quiescent.dom.h3, quiescent.dom.body, quiescent.dom.keygen, quiescent.dom.polyline, quiescent.dom.cite, quiescent.dom.rect, quiescent.dom.p, quiescent.dom.nav, quiescent.dom.ruby, quiescent.dom.map, quiescent.dom.object, quiescent.dom.i, quiescent.dom.menu, quiescent.dom.blockquote, quiescent.dom.img, quiescent.dom.a, quiescent.dom.dl, quiescent.dom.select, quiescent.dom.polygon, 
quiescent.dom.html, quiescent.dom.text, quiescent.dom.span, quiescent.dom.track, quiescent.dom.data, quiescent.dom.u]);
goog.provide("wishare.timeline");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
wishare.timeline.Event = quiescent.component.call(null, function(p__6101) {
  var map__6102 = p__6101;
  var map__6102__$1 = cljs.core.seq_QMARK_.call(null, map__6102) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6102) : map__6102;
  var timestamp = cljs.core.get.call(null, map__6102__$1, new cljs.core.Keyword(null, "timestamp", "timestamp", 579478971));
  var title = cljs.core.get.call(null, map__6102__$1, new cljs.core.Keyword(null, "title", "title", 636505583));
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-group-item"], null), quiescent.dom.p.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "description"], null), title), quiescent.dom.small.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, 
  "className", "className", -1983287057), "pull-right timestamp"], null), timestamp)));
});
wishare.timeline.Timeline = quiescent.component.call(null, function(items, mode) {
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "col-md-4 side-pane"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel panel-default timeline"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel-heading"], 
  null), quiescent.dom.h2.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel-title"], null), "Recent events")), cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-group"], null), cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "readonly", "readonly", -1101398934)) ? null : cljs.core.map.call(null, wishare.timeline.Event, 
  items))));
});
goog.provide("wishare.wishlist");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
wishare.wishlist.Wish = function Wish(extension) {
  return quiescent.component.call(null, function(data) {
    var vec__6091 = extension.call(null, data);
    var map__6092 = cljs.core.nth.call(null, vec__6091, 0, null);
    var map__6092__$1 = cljs.core.seq_QMARK_.call(null, map__6092) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6092) : map__6092;
    var image = cljs.core.get.call(null, map__6092__$1, new cljs.core.Keyword(null, "image", "image", -58725096));
    var title = cljs.core.get.call(null, map__6092__$1, new cljs.core.Keyword(null, "title", "title", 636505583));
    var id = cljs.core.get.call(null, map__6092__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
    var elems = cljs.core.nthnext.call(null, vec__6091, 1);
    return cljs.core.apply.call(null, quiescent.dom.li, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-group-item wish-item"], null), quiescent.dom.img.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "className", "className", -1983287057), "img-thumbnail photo image32x32", new cljs.core.Keyword(null, "src", "src", -1651076051), function() {
      var or__3639__auto__ = image;
      if (cljs.core.truth_(or__3639__auto__)) {
        return or__3639__auto__;
      } else {
        return "/img/nophoto.png";
      }
    }(), new cljs.core.Keyword(null, "alt", "alt", -3214426), "Wish image thumbnail"], null)), cljs.core.truth_(id) ? quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "href", "href", -793805698), "#", new cljs.core.Keyword(null, "className", "className", -1983287057), "title"], null), title) : quiescent.dom.span.call(null, cljs.core.PersistentArrayMap.EMPTY, title), elems);
  });
};
wishare.wishlist.ROWish = wishare.wishlist.Wish.call(null, function(data) {
  return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.dissoc.call(null, data, new cljs.core.Keyword(null, "id", "id", -1388402092))], null);
});
wishare.wishlist.MyWish = function() {
  var btn = function btn(cls, text) {
    return quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "btn badge btn-default " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cls), new cljs.core.Keyword(null, "type", "type", 1174270348), "button"], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "glyphicon glyphicon-edit"], null)), text);
  };
  return wishare.wishlist.Wish.call(null, function(data) {
    return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [data, btn.call(null, "edit", "Edit"), btn.call(null, "remove", "Remove")], null);
  });
}();
wishare.wishlist.FriendWish = function() {
  var badge = function badge(badges, id, cls, icon, title) {
    return quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "className", "className", -1983287057), "badge gifted " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cls) + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.truth_(badges.call(null, id)) ? " alert-success" : ""), new cljs.core.Keyword(null, "rel", "rel", 1378823488), "tooltip", new cljs.core.Keyword(null, "data-toggle", "data-toggle", 436966687), "tooltip", new cljs.core.Keyword(null, 
    "title", "title", 636505583), title], null), quiescent.dom.span.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "glyphicon glyphicon-" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(icon)], null)));
  };
  return wishare.wishlist.Wish.call(null, function(p__6093) {
    var map__6094 = p__6093;
    var map__6094__$1 = cljs.core.seq_QMARK_.call(null, map__6094) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6094) : map__6094;
    var data = map__6094__$1;
    var badges = cljs.core.get.call(null, map__6094__$1, new cljs.core.Keyword(null, "badges", "badges", -288609067));
    return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [data, function() {
      var b = function() {
        var or__3639__auto__ = badges;
        if (cljs.core.truth_(or__3639__auto__)) {
          return or__3639__auto__;
        } else {
          return cljs.core.PersistentHashSet.EMPTY;
        }
      }();
      return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "badges pull-right"], null), badge.call(null, b, new cljs.core.Keyword(null, "gifted", "gifted", -1966478432), "gifted", "gift", "Gifted!!!"), badge.call(null, b, new cljs.core.Keyword(null, "got-it", "got-it", 1779005190), "got-it", "ok", "I've got it!"), badge.call(null, b, new cljs.core.Keyword(null, "in-progress", "in-progress", 2126442630), 
      "in-progress", "shopping-cart", "In porgress..."), badge.call(null, b, new cljs.core.Keyword(null, "in-tought", "in-tought", 1399767434), "in-thought", "question-sign", "Thinking..."));
    }()], null);
  });
}();
wishare.wishlist.Wishlist = quiescent.component.call(null, function(items, heading, mode) {
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel panel-default wishlist"], null), heading, cljs.core.apply.call(null, cljs.core.partial.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "wishlist list-group"], null), cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "my-own", "my-own", -1841146167)) ? 
  quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-group-item add-wish"], null), quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "type", "type", 1174270348), "button", new cljs.core.Keyword(null, "className", "className", -1983287057), "btn btn-default btn-block add-wish"], null), "Add Wish Item")) : null), function() {
    var item = function() {
      var G__6095 = mode instanceof cljs.core.Keyword ? mode.fqn : null;
      switch(G__6095) {
        case "my-own":
          return wishare.wishlist.MyWish;
          break;
        case "readonly":
          return wishare.wishlist.ROWish;
          break;
        default:
          return wishare.wishlist.FriendWish;
      }
    }();
    return cljs.core.map.call(null, item, items);
  }()));
});
goog.provide("wishare.friends");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
wishare.friends.Friend = quiescent.component.call(null, function(p__6099) {
  var map__6100 = p__6099;
  var map__6100__$1 = cljs.core.seq_QMARK_.call(null, map__6100) ? cljs.core.apply.call(null, cljs.core.hash_map, map__6100) : map__6100;
  var to_me_QMARK_ = cljs.core.get.call(null, map__6100__$1, new cljs.core.Keyword(null, "to-me?", "to-me?", -2077154767), false);
  var avatar_url = cljs.core.get.call(null, map__6100__$1, new cljs.core.Keyword(null, "avatar-url", "avatar-url", -1034626103));
  var real_name = cljs.core.get.call(null, map__6100__$1, new cljs.core.Keyword(null, "real-name", "real-name", 301436383));
  var login = cljs.core.get.call(null, map__6100__$1, new cljs.core.Keyword(null, "login", "login", 55217519));
  var id = cljs.core.get.call(null, map__6100__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var btn = function(map__6100, map__6100__$1, to_me_QMARK_, avatar_url, real_name, login, id) {
    return function btn(cls, text) {
      return quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "badge btn btn-default " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cls)], null), text);
    };
  }(map__6100, map__6100__$1, to_me_QMARK_, avatar_url, real_name, login, id);
  return quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "list-group-item friend"], null), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "#"], null), quiescent.dom.img.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "className", "className", -1983287057), "img-thumbnail image64x64", new cljs.core.Keyword(null, 
  "src", "src", -1651076051), function() {
    var or__3639__auto__ = avatar_url;
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return "/img/noavatar.png";
    }
  }(), new cljs.core.Keyword(null, "alt", "alt", -3214426), "avatar"], null)), quiescent.dom.h4.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "display", "display", 242065432), "inline"], null)], null), real_name, quiescent.dom.small.call(null, cljs.core.PersistentArrayMap.EMPTY, ' aka "', login, '"'))), cljs.core.truth_(to_me_QMARK_) ? btn.call(null, "remove-friend", 
  "Remove from friends") : btn.call(null, "add-friend", "Add to friends"));
});
wishare.friends.FriendList = quiescent.component.call(null, function(items, heading, mode) {
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel panel-default friends"], null), heading, cljs.core._EQ_.call(null, mode, new cljs.core.Keyword(null, "read-only", "read-only", -191706886)) ? null : cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "friends list-group"], null), cljs.core.map.call(null, 
  wishare.friends.Friend, items)));
});
goog.provide("wishare.profile");
goog.require("cljs.core");
goog.require("quiescent.dom");
goog.require("quiescent.dom");
goog.require("quiescent");
goog.require("quiescent");
wishare.profile.UserHeader = quiescent.component.call(null, function(p__7667, mode) {
  var map__7668 = p__7667;
  var map__7668__$1 = cljs.core.seq_QMARK_.call(null, map__7668) ? cljs.core.apply.call(null, cljs.core.hash_map, map__7668) : map__7668;
  var friend_QMARK_ = cljs.core.get.call(null, map__7668__$1, new cljs.core.Keyword(null, "friend?", "friend?", 1903697798), false);
  var login = cljs.core.get.call(null, map__7668__$1, new cljs.core.Keyword(null, "login", "login", 55217519));
  var real_name = cljs.core.get.call(null, map__7668__$1, new cljs.core.Keyword(null, "real-name", "real-name", 301436383));
  var id = cljs.core.get.call(null, map__7668__$1, new cljs.core.Keyword(null, "id", "id", -1388402092));
  var avatar_url = cljs.core.get.call(null, map__7668__$1, new cljs.core.Keyword(null, "avatar-url", "avatar-url", -1034626103), null);
  return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "page-header panel panel-default col-md-12"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel-body"], null), quiescent.dom.img.call(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "src", "src", -1651076051), cljs.core.empty_QMARK_.call(null, 
  avatar_url) ? "/img/noavatar.png" : avatar_url, new cljs.core.Keyword(null, "alt", "alt", -3214426), "avatar", new cljs.core.Keyword(null, "className", "className", -1983287057), "img-thumbnail pull-left avatar image120x120"], null)), quiescent.dom.h1.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "user"], null), real_name, quiescent.dom.small.call(null, cljs.core.PersistentArrayMap.EMPTY, ' aka "', login, '"')), cljs.core.truth_((new cljs.core.PersistentHashSet(null, 
  new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "my-own", "my-own", -1841146167), null, new cljs.core.Keyword(null, "readonly", "readonly", -1101398934), null], null), null)).call(null, mode)) ? null : cljs.core.truth_(friend_QMARK_) ? quiescent.dom.button.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "btn btn-xs btn-danger remove-friend"], null), "Remove from friends") : quiescent.dom.button.call(null, 
  new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "btn btn-xs btn-success add-friend"], null), "Add to friends")));
});
goog.provide("wishare.core");
goog.require("cljs.core");
goog.require("ajax.core");
goog.require("wishare.timeline");
goog.require("ajax.core");
goog.require("wishare.timeline");
goog.require("wishare.profile");
goog.require("wishare.wishlist");
goog.require("quiescent");
goog.require("wishare.wishlist");
goog.require("ajax.core");
goog.require("quiescent.dom");
goog.require("wishare.friends");
goog.require("wishare.friends");
goog.require("quiescent");
goog.require("wishare.profile");
goog.require("quiescent.dom");
wishare.core.suffix = cljs.core.atom.call(null, null);
wishare.core.state = cljs.core.atom.call(null, cljs.core.PersistentArrayMap.EMPTY);
wishare.core.show = function show(target, suff) {
  var suff__$1 = function() {
    var or__3639__auto__ = cljs.core.deref.call(null, wishare.core.suffix);
    if (cljs.core.truth_(or__3639__auto__)) {
      return or__3639__auto__;
    } else {
      return suff;
    }
  }();
  return ajax.core.GET.call(null, "/api/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.not.call(null, (new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [null, null, "", null], null), null)).call(null, suff__$1)) ? "" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(target) + "/" + cljs.core.str.cljs$core$IFn$_invoke$arity$1(suff__$1) : target), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "handler", "handler", -195596612), function(suff__$1) {
    return function(res) {
      cljs.core.reset_BANG_.call(null, wishare.core.suffix, suff__$1);
      return cljs.core.swap_BANG_.call(null, wishare.core.state, cljs.core.merge, cljs.reader.read_string.call(null, res));
    };
  }(suff__$1)], null));
};
goog.exportSymbol("wishare.core.show", wishare.core.show);
wishare.core.dashboard = function dashboard(tabs) {
  var config = cljs.core.map.call(null, cljs.core.vec, cljs.core.partition.call(null, 2, tabs));
  var tabs__$1 = cljs.core.map.call(null, cljs.core.first, config);
  var config__$1 = cljs.core.reduce.call(null, cljs.core.conj, cljs.core.PersistentArrayMap.EMPTY, config);
  return quiescent.component.call(null, function(config, tabs__$1, config__$1) {
    return function(p__8300, mode) {
      var map__8301 = p__8300;
      var map__8301__$1 = cljs.core.seq_QMARK_.call(null, map__8301) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8301) : map__8301;
      var items = cljs.core.get.call(null, map__8301__$1, new cljs.core.Keyword(null, "items", "items", 1031954938));
      var active = cljs.core.get.call(null, map__8301__$1, new cljs.core.Keyword(null, "active", "active", 1895962068));
      var heading = quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "panel-heading"], null), cljs.core.apply.call(null, quiescent.dom.ul, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "nav nav-pills nav-justified", new cljs.core.Keyword(null, "role", "role", -736691072), "tablist"], null), function() {
        var iter__4377__auto__ = function(map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1) {
          return function iter__8302(s__8303) {
            return new cljs.core.LazySeq(null, function(map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1) {
              return function() {
                var s__8303__$1 = s__8303;
                while (true) {
                  var temp__4126__auto__ = cljs.core.seq.call(null, s__8303__$1);
                  if (temp__4126__auto__) {
                    var s__8303__$2 = temp__4126__auto__;
                    if (cljs.core.chunked_seq_QMARK_.call(null, s__8303__$2)) {
                      var c__4375__auto__ = cljs.core.chunk_first.call(null, s__8303__$2);
                      var size__4376__auto__ = cljs.core.count.call(null, c__4375__auto__);
                      var b__8305 = cljs.core.chunk_buffer.call(null, size__4376__auto__);
                      if (function() {
                        var i__8304 = 0;
                        while (true) {
                          if (i__8304 < size__4376__auto__) {
                            var tab = cljs.core._nth.call(null, c__4375__auto__, i__8304);
                            var map__8308 = config__$1.call(null, tab);
                            var map__8308__$1 = cljs.core.seq_QMARK_.call(null, map__8308) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8308) : map__8308;
                            var route = cljs.core.get.call(null, map__8308__$1, new cljs.core.Keyword(null, "route", "route", 329891309));
                            var modes = cljs.core.get.call(null, map__8308__$1, new cljs.core.Keyword(null, "modes", "modes", -1377787092));
                            var title = cljs.core.get.call(null, map__8308__$1, new cljs.core.Keyword(null, "title", "title", 636505583));
                            if (cljs.core.truth_(modes.call(null, mode))) {
                              cljs.core.chunk_append.call(null, b__8305, cljs.core._EQ_.call(null, tab, active) ? quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "active"], null), quiescent.dom.a.call(null, cljs.core.PersistentArrayMap.EMPTY, title)) : quiescent.dom.li.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, 
                              "onClick", "onClick", -1991238530), function(i__8304, s__8303__$1, map__8308, map__8308__$1, route, modes, title, tab, c__4375__auto__, size__4376__auto__, b__8305, s__8303__$2, temp__4126__auto__, map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1) {
                                return function(_) {
                                  return wishare.core.show.call(null, route, cljs.core.deref.call(null, wishare.core.suffix));
                                };
                              }(i__8304, s__8303__$1, map__8308, map__8308__$1, route, modes, title, tab, c__4375__auto__, size__4376__auto__, b__8305, s__8303__$2, temp__4126__auto__, map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1), new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cursor", "cursor", 1011937484), "pointer"], null)], null), title)));
                              var G__8310 = i__8304 + 1;
                              i__8304 = G__8310;
                              continue;
                            } else {
                              var G__8311 = i__8304 + 1;
                              i__8304 = G__8311;
                              continue;
                            }
                          } else {
                            return true;
                          }
                          break;
                        }
                      }()) {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8305), iter__8302.call(null, cljs.core.chunk_rest.call(null, s__8303__$2)));
                      } else {
                        return cljs.core.chunk_cons.call(null, cljs.core.chunk.call(null, b__8305), null);
                      }
                    } else {
                      var tab = cljs.core.first.call(null, s__8303__$2);
                      var map__8309 = config__$1.call(null, tab);
                      var map__8309__$1 = cljs.core.seq_QMARK_.call(null, map__8309) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8309) : map__8309;
                      var route = cljs.core.get.call(null, map__8309__$1, new cljs.core.Keyword(null, "route", "route", 329891309));
                      var modes = cljs.core.get.call(null, map__8309__$1, new cljs.core.Keyword(null, "modes", "modes", -1377787092));
                      var title = cljs.core.get.call(null, map__8309__$1, new cljs.core.Keyword(null, "title", "title", 636505583));
                      if (cljs.core.truth_(modes.call(null, mode))) {
                        return cljs.core.cons.call(null, cljs.core._EQ_.call(null, tab, active) ? quiescent.dom.li.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "active"], null), quiescent.dom.a.call(null, cljs.core.PersistentArrayMap.EMPTY, title)) : quiescent.dom.li.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "onClick", 
                        "onClick", -1991238530), function(s__8303__$1, map__8309, map__8309__$1, route, modes, title, tab, s__8303__$2, temp__4126__auto__, map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1) {
                          return function(_) {
                            return wishare.core.show.call(null, route, cljs.core.deref.call(null, wishare.core.suffix));
                          };
                        }(s__8303__$1, map__8309, map__8309__$1, route, modes, title, tab, s__8303__$2, temp__4126__auto__, map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1), new cljs.core.Keyword(null, "style", "style", -496642736), new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "cursor", "cursor", 1011937484), "pointer"], null)], null), title)), iter__8302.call(null, cljs.core.rest.call(null, s__8303__$2)));
                      } else {
                        var G__8312 = cljs.core.rest.call(null, s__8303__$2);
                        s__8303__$1 = G__8312;
                        continue;
                      }
                    }
                  } else {
                    return null;
                  }
                  break;
                }
              };
            }(map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1), null, null);
          };
        }(map__8301, map__8301__$1, items, active, config, tabs__$1, config__$1);
        return iter__4377__auto__.call(null, tabs__$1);
      }()));
      var comp = cljs.core.get_in.call(null, config__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [active, new cljs.core.Keyword(null, "comp", "comp", 1191953630)], null));
      var available_modes = cljs.core.get_in.call(null, config__$1, new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [active, new cljs.core.Keyword(null, "modes", "modes", -1377787092)], null));
      if (cljs.core.truth_(available_modes.call(null, mode))) {
        return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "col-md-8 dashboard"], null), comp.call(null, items, heading, mode));
      } else {
        throw "Tab " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(active) + " is not available in mode " + cljs.core.str.cljs$core$IFn$_invoke$arity$1(mode) + "!";
      }
    };
  }(config, tabs__$1, config__$1));
};
wishare.core.mk_page = function mk_page(header_comp, dashboard_comp, timeline_comp) {
  return quiescent.component.call(null, function(p__8315, mode) {
    var map__8316 = p__8315;
    var map__8316__$1 = cljs.core.seq_QMARK_.call(null, map__8316) ? cljs.core.apply.call(null, cljs.core.hash_map, map__8316) : map__8316;
    var data = map__8316__$1;
    var timeline = cljs.core.get.call(null, map__8316__$1, new cljs.core.Keyword(null, "timeline", "timeline", 192903161));
    var dashboard = cljs.core.get.call(null, map__8316__$1, new cljs.core.Keyword(null, "dashboard", "dashboard", -631747508));
    var header = cljs.core.get.call(null, map__8316__$1, new cljs.core.Keyword(null, "header", "header", 119441134));
    var mode__$1 = cljs.core.get.call(null, map__8316__$1, new cljs.core.Keyword(null, "mode", "mode", 654403691));
    return quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "container"], null), quiescent.dom.nav.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar navbar-default"], null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "container-fluid"], 
    null), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar-header"], null), quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "className", "className", -1983287057), "navbar-brand", new cljs.core.Keyword(null, "href", "href", -793805698), "https://clojurecup.com/#/apps/wishare"], null), quiescent.dom.img.call(null, new cljs.core.PersistentArrayMap(null, 
    1, [new cljs.core.Keyword(null, "src", "src", -1651076051), "/img/logo128x128.png"], null)), quiescent.dom.img.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "src", "src", -1651076051), "/img/vote-for-us.jpg"], null)))), quiescent.dom.div.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "collapse navbar-collapse"], null), quiescent.dom.ul.call(null, new cljs.core.PersistentArrayMap(null, 
    1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "nav navbar-nav"], null), quiescent.dom.li.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.h2.call(null, cljs.core.PersistentArrayMap.EMPTY, quiescent.dom.a.call(null, new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "href", "href", -793805698), "https://clojurecup.com/#/apps/wishare"], null), "WiShare! Vote for us!")))))), header_comp.call(null, header, mode__$1)), quiescent.dom.div.call(null, 
    new cljs.core.PersistentArrayMap(null, 1, [new cljs.core.Keyword(null, "className", "className", -1983287057), "content col-md-12 panel panel-default"], null), dashboard_comp.call(null, dashboard, mode__$1), timeline_comp.call(null, timeline, mode__$1)));
  });
};
wishare.core.Page = wishare.core.mk_page.call(null, wishare.profile.UserHeader, wishare.core.dashboard.call(null, new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [new cljs.core.Keyword(null, "wishlist", "wishlist", 352427404), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, "route", "route", 329891309), "wishlist", new cljs.core.Keyword(null, "comp", "comp", 1191953630), wishare.wishlist.Wishlist, new cljs.core.Keyword(null, "title", "title", 
636505583), "Wishlist", new cljs.core.Keyword(null, "modes", "modes", -1377787092), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 3, [new cljs.core.Keyword(null, "my-own", "my-own", -1841146167), null, new cljs.core.Keyword(null, "readonly", "readonly", -1101398934), null, new cljs.core.Keyword(null, "friend", "friend", -286879240), null], null), null)], null), new cljs.core.Keyword(null, "friends", "friends", -127631374), new cljs.core.PersistentArrayMap(null, 4, [new cljs.core.Keyword(null, 
"route", "route", 329891309), "friends", new cljs.core.Keyword(null, "comp", "comp", 1191953630), wishare.friends.FriendList, new cljs.core.Keyword(null, "title", "title", 636505583), "Friends", new cljs.core.Keyword(null, "modes", "modes", -1377787092), new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 2, [new cljs.core.Keyword(null, "my-own", "my-own", -1841146167), null, new cljs.core.Keyword(null, "friend", "friend", -286879240), null], null), null)], null)], null)), 
wishare.timeline.Timeline);
cljs.core.add_watch.call(null, wishare.core.state, new cljs.core.Keyword("wishare.core", "render", "wishare.core/render", 1676163762), function(_, atm, ___$1, data) {
  return quiescent.render.call(null, wishare.core.Page.call(null, data), document.getElementById("root"));
});
